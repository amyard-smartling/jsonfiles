{
    "url": "http://mongodb.com/docs/mongodb-analyzer/current",
    "includeInGlobalSearch": true,
    "documents": [
        {
            "slug": "faq",
            "title": "Frequently Asked Questions",
            "headings": [
                "Does the MongoDB Analyzer support JetBrains Rider?",
                "Is the MongoDB Analyzer a Roslyn Analyzer?",
                "Does the MongoDB Analyzer Use Custom Serialization Settings?",
                "Does the MongoDB Analyzer use custom LINQ settings?",
                "What information does the MongoDB Analyzer collect through telemetry?",
                "Your Code",
                "Your Environment",
                "Your MongoDB Analyzer Configuration"
            ],
            "paragraphs": "No, the MongoDB Analyzer does not officially support JetBrains Rider. We have internally tested the MongoDB Analyzer on JetBrains Rider and have seen some\nsuccess though. We welcome you to test the MongoDB Analyzer on your JetBrains Rider deployment,\nand if you encounter any problems feel free to file an\n issue on JIRA \nor submit a pull request on the\n MongoDB Analyzer Github repository . Yes, the MongoDB Analyzer is a Roslyn Analyzer. To learn more about Roslyn Analyzers, see\n Overview of Source Code Analysis \nfrom Microsoft. No, the MongoDB Analyzer does not use the custom serialization settings you specify for your\nMongoDB .NET/C# driver. To learn more about custom serialization settings, see\n Serialization \nin the .NET/C# driver documentation. No, the MongoDB Analyzer does not use custom LINQ settings. To learn more about custom LINQ settings, see\n How to add custom methods for LINQ queries \nfrom Microsoft. When you have telemetry enabled the MongoDB Analyzer collects and sends\nanonymized information to MongoDB Inc. The following subsections list all\ninformation the MongoDB Analyzer collects. To learn how to disable telemetry, see the\n Configuration \nguide. The following is the information the MongoDB Analyzer collects about your code: The number of user-defined data types in your\n mapping The number of unsupported LINQ and builder expressions the MongoDB Analyzer found in your code The number of LINQ and builder expressions the MongoDB Analyzer found in your code The number of MQL expressions the MongoDB Analyzer found in your code How long it took for the MongoDB Analyzer to analyze your code The number of exceptions the MongoDB Analyzer encountered analyzing your code The length of the syntax tree the MongoDB Analyzer processed The following is the information the MongoDB Analyzer collects about your environment: Your operating system The version of the MongoDB Analyzer you use The internal .NET version your IDE or build utility uses to run the MongoDB Analyzer The version of the C# language you use The version of the MongoDB .NET/C# driver you use in your project The\n target platform \nyou use to compile your C# code (AnyCPU/x64/x32) The\n output assembly \nkind generated by your .NET application A unique identifier the MongoDB Analyzer constructs from a hash of the following components of your\n Net User : UserName /domain The following is the information the MongoDB Analyzer collects about your MongoDB Analyzer\nconfiguration: If you have logs enabled for the MongoDB Analyzer The LINQ provider version your MongoDB Analyzer uses",
            "code": [],
            "preview": "No, the MongoDB Analyzer does not officially support JetBrains Rider.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "whats-new",
            "title": "What's New",
            "headings": [
                "What's New in 1.3",
                "What's New in 1.2",
                "What's New in 1.1",
                "What's New in 1.0"
            ],
            "paragraphs": "Learn what's new in: Version 1.3 Version 1.2 Version 1.1 Version 1.0 New features of the 1.3 MongoDB Analyzer release include: POCO to JSON analysis rules that show the serialization result of a POCO at compile\ntime POCO, LINQ, and Builders analysis that supports BSON serialization attributes Support for LINQ expressions that use enums in tuples Improved support for nullable types New features of the 1.2 MongoDB Analyzer release include: Limited support for builders for Atlas Search. Default LINQ provider version set to  V3  in driver versions 2.19.0 and higher. The  using MongoDB.Driver.Linq;  statement is no longer required to\nanalyze LINQ expressions on macOS. New features of the 1.1 MongoDB Analyzer release include: EnableVariableTracking  config option to track and compose variables\nholding builders definitions Improvements to Fluent API support Support for LINQ Query syntax Support for IndexKeys builders Support for Projection builders The initial release.",
            "code": [],
            "preview": "Learn what's new in:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "issues-and-help",
            "title": "Issues & Help",
            "headings": [
                "Bugs / Feature Requests",
                "Pull Requests"
            ],
            "paragraphs": "The MongoDB developer community is highly engaged and encompasses users with a range of Visual Studio Code experience. Often, the quickest way to get support for general questions is through the  MongoDB Community Forums . Refer to our  support channels  documentation for more information. If you think you've found a bug or want to request a new feature in the\nMongoDB Analyzer, please open a case in MongoDB's issue management tool,\nJIRA, by performing the following steps: If you\u2019ve identified a security vulnerability in any official MongoDB\nproduct, please report it according to the instructions found in the\n Create a Vulnerability Report page . Visit the  MongoDB JIRA issue tracker  and click the\n signup link .\nCreate an account, and then log in to JIRA. Navigate to the  VS JIRA project . Click  Create  to create a ticket. Please provide as much\ninformation as possible about the issue or request in the ticket. Bug reports in the VS JIRA project are publicly viewable. We're happy to accept contributions to help improve the analyzer. We\nwill review user contributions to ensure they meet the standards of the\ncodebase. Please include documentation and tests in your pull request. To get started, check out the source and work on a branch:",
            "code": [
                {
                    "lang": "bash",
                    "value": "git clone https://github.com/mongodb/mongo-csharp-analyzer.git\ncd mongo-csharp-analyzer\ngit checkout -b myNewFeature"
                }
            ],
            "preview": "The MongoDB developer community is highly engaged and encompasses users with a range of Visual Studio Code experience.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "",
            "title": "MongoDB Analyzer",
            "headings": [
                "Overview",
                "Supported Analysis",
                "Guides"
            ],
            "paragraphs": "The MongoDB Analyzer is a tool that helps you understand the following\naspects of your MongoDB .NET/C# driver code: How your code translates into the MongoDB Query API If your code includes unsupported LINQ or builder expressions How your POCO instances serialize to JSON format The MongoDB Analyzer is a Roslyn Analyzer. To learn more about Roslyn Analyzers, see\n Overview of Source Code Analysis \nfrom Microsoft. The MongoDB Analyzer can analyze the following groups of .NET/C# driver\nexpressions and classes: Builders LINQ POCOs View the following guides to learn how to install and\nconfigure the MongoDB Analyzer and how to use its features: To view known issues with the MongoDB Analyzer's current functionality, see\nthe  Known Issues  page. To view answers to frequently asked questions, see the  FAQ  page. To view the differences between versions of the extension,\nsee the  What's New  page. For further support, see the  Issues and Help  page. Installation Analyze Your Code Rules and Message Content Configuration",
            "code": [],
            "preview": "The MongoDB Analyzer is a tool that helps you understand the following\naspects of your MongoDB .NET/C# driver code:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "install",
            "title": "Install the MongoDB Analyzer",
            "headings": [
                "Overview",
                "Installation"
            ],
            "paragraphs": "Learn how to install the MongoDB Analyzer in your .NET application. To install the MongoDB Analyzer, run the following\ncommand from the root directory of your .NET project: To view the NuGet page for the MongoDB Analyzer, see\n MongoDB.Analyzer  on NuGet Gallery. To learn more about installing NuGet packages from the command line, see\n NuGet CLI Reference \nfrom Microsoft. To learn more about installing NuGet packages from Visual Studio, see\n Install and manage packages in Visual Studio using the NuGet Package Manager \nfrom Microsoft.",
            "code": [
                {
                    "lang": "shell",
                    "value": "dotnet add package MongoDB.Analyzer -v 1.3.0"
                }
            ],
            "preview": "Learn how to install the MongoDB Analyzer in your .NET application.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "analyze-code",
            "title": "Analyze Your Code",
            "headings": [
                "Overview",
                "Use the MongoDB Analyzer From the Command Line"
            ],
            "paragraphs": "Learn how to use the MongoDB Analyzer to analyze your MongoDB .NET/C# driver code.\nThe MongoDB Analyzer can analyze expressions created with the following patterns: Builders Class Language Integrated Query (LINQ) Plain Old CLR/Class Objects (POCOs) To run the MongoDB Analyzer from the command line and save your results to a\n SARIF \nformat file, perform the following actions: To learn more about  dotnet build , see\n .NET Fundamentals \nfrom Microsoft. To learn more about the  ErrorLog  setting, see\n Error and Warning Options \nfrom Microsoft. Install the MongoDB Analyzer as described in the  Install  guide. Execute the following command:",
            "code": [
                {
                    "lang": "shell",
                    "value": "dotnet build -property:ErrorLog=<Path to save your MongoDB Analyzer report>"
                }
            ],
            "preview": "Learn how to use the MongoDB Analyzer to analyze your MongoDB .NET/C# driver code.\nThe MongoDB Analyzer can analyze expressions created with the following patterns:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "known-issues",
            "title": "Known Issues",
            "headings": [
                "Error List Window on macOS",
                "Partial Support for Atlas Search Builders"
            ],
            "paragraphs": "We are consistently working to improve the MongoDB Analyzer, but we have\nidentified certain issues with its current functionality. If you\nidentify an issue that is not on this page, see the\n Issues & Help  page for\ninstructions on how to get help or report the issue. Visual Studio for macOS does not have the  Error List  window feature. If\nyou are using the MongoDB Analyzer in Visual Studio for macOS, you will not\nbe able to see output from the MongoDB Analyzer, such as MongoDB Query API\ntranslations, in one location. The MongoDB Analyzer provides only partial support for  Search  builder\nmethods and other Atlas Search features. The MongoDB Analyzer cannot analyze\ncode that uses any of the following features: The  Compound()  method The  Range()  method The  Equals()  method with number parameters or parameters of type\n ObjectId  or  DateTime The  Facet()  method The  GeoShape()  method The  GeoWithin()  method The  MoreLikeThis()  method Calling the  Near()  method with a parameter of type  DateTime Calling the  Wildcard()  method with multiple field definitions Calling  Search  builder methods with parameters of type  SearchRange ,\n SearchFuzzyOptions , or  SearchScoreDefinition The  SearchMeta()  method The  SearchPath  builder",
            "code": [],
            "preview": "We are consistently working to improve the MongoDB Analyzer, but we have\nidentified certain issues with its current functionality. If you\nidentify an issue that is not on this page, see the\nIssues & Help page for\ninstructions on how to get help or report the issue.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "code-type/pocos",
            "title": "Analyze POCOs",
            "headings": [
                "Overview",
                "Preview as JSON",
                "Preview POCOs in Visual Studio"
            ],
            "paragraphs": "Plain old CLR objects, or plain old class objects (POCOs), are\nsimple class objects that don't\ninherit features from any framework-specific base classes or interfaces.\nIf your application uses POCOs, you can use the MongoDB Analyzer to preview them as JSON\nobjects. To learn more about POCOs, see the  POCOs page on Wikipedia \nand the  Work with POCOs  page in the\n.NET/C# driver documentation. The following code sample shows an example of a POCO class definition\nand its corresponding JSON translation. By previewing your\nPOCOs in JSON, you can see how BSON serialization attributes, such as  BsonId  and\n BsonElement , change the shape of the resulting BSON during serialization. The MongoDB Analyzer includes predefined sample values for certain common property names.\nIf you use\nthese property names in your POCO, the Analyzer uses the sample values in the JSON\noutput. For any property names without predefined sample values, the Analyzer uses a\nrandom value that matches the property's data type. For a list of property names with sample values, see the\n JSON sample value file \nin the MongoDB Analyzer GitHub repo. To preview your POCOs in Visual Studio, perform the following actions: Click on the following corresponding tab to see a POCO class definition\nwith or without an information message displayed: Install the MongoDB Analyzer as described in the  Install the MongoDB Analyzer \nguide. Define a POCO class. Move your cursor over the  ...  ellipsis annotation beneath the first\nword of your class definition to display an information message that contains\nthe JSON translation. The information message begins with the MongoDB Analyzer Rule ID that generated the\npopup. In the previous example, the Rule ID is  MAPoco1001 , indicating\nthe POCO is valid. To learn more about this rule, see the\n Rules and Message Content  guide.",
            "code": [
                {
                    "lang": "csharp",
                    "value": "class Order\n{\n  [BsonId]\n  public int OrderNumber { get; set; }\n\n  [BsonElement(\"customer_id\")]\n  public int CustomerId { get; set; }\n\n  public string Date { get; set; }\n\n  [BsonIgnore]\n  public string Email { get; set; }\n}"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"_id\": 6783456,\n  \"customer_id\": 678234,\n  \"Date\": \"06/03/2023\"\n}"
                }
            ],
            "preview": "Plain old CLR objects, or plain old class objects (POCOs), are\nsimple class objects that don't\ninherit features from any framework-specific base classes or interfaces.\nIf your application uses POCOs, you can use the MongoDB Analyzer to preview them as JSON\nobjects.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "rules",
            "title": "Rules and Message Content",
            "headings": [
                "Overview",
                "Rule Descriptions",
                "MABuilders1001",
                "MABuilders2001",
                "MALinq1001",
                "MALinq2001",
                "MALinq2002",
                "MAPoco1001",
                "MAPoco2001"
            ],
            "paragraphs": "In this guide, you can learn about the MongoDB Analyzer rules and attached\nmessages. A rule evaluates different parts of your code and returns a\nmessage if a specific condition is met. For example, the Analyzer might apply a rule if it detects a LINQ\nexpression, which causes your IDE to display a message that contains the\nequivalent Query API expression. Each rule has a severity level of\n Info  or  Warning  that impacts where the message might be recorded. The following sections describe each MongoDB Analyzer rule, including the\nrule category, severity level, and description of the corresponding\nmessage. Each section also includes an example message. The  MABuilders1001  rule evaluates your code for builders expressions\nand triggers a message that contains the equivalent Query API\nexpression. The following code triggers the  MABuilders1001  rule to display a message that\nshows the equivalent Query API expression: The following image displays the  MABuilders1001  rule and information\nmessage: Category MongoDB.Analyzer.Builders Severity Info Notes None To learn more about builders expressions, see the\n Analyze Builders Expressions  guide. The  MABuilders2001  rule detects unsupported builders expressions and\ndisplays a translation error of the unsupported expression. The following code triggers the  MABuilders2001  rule to display a message that\nshows the unsupported builders expression: The following image displays the  MABuilders2001  rule and information\nmessage: Category MongoDB.Analyzer.Builders Severity Warning Notes To view examples of unsupported builders expressions, see the\n source code testing files . To learn more about builders expressions, see the\n Analyze Builders Expressions  guide. The  MALinq1001  rule evaluates your code for LINQ expressions\nand triggers a message that contains the equivalent Query API\nexpression. The following code triggers the  MALinq1001  rule to display a message that\nshows the equivalent Query API expression: The following image displays the  MALinq1001  rule and information\nmessage: Category MongoDB.Analyzer.LINQ Severity Info Notes This rule might apply differently depending on the value of\nyour  DefaultLinqVersion  configuration setting. To learn more,\nsee the  Analyzer Configuration Options . To learn more about LINQ expressions, see the\n Analyze LINQ Expressions  guide. The  MALinq2001  rule detects unsupported LINQ expressions and\ndisplays a translation error of the unsupported expression. The following code triggers the  MALinq2001  rule to display a message that\nshows the unsupported LINQ expression: The following image displays the  MALinq2001  rule and information\nmessage: Category MongoDB.Analyzer.LINQ Severity Warning Notes To learn more about LINQ expressions, see the\n Analyze LINQ Expressions  guide. The  MALinq2002  rule detects if an expression is supported only in\nLINQ3 and displays a message that contains the equivalent Query API expression. The following code triggers the  MALinq2002  rule to display a message that\nshows the supported LINQ3 expression: The following image displays the  MALinq2002  rule and information\nmessage: Category MongoDB.Analyzer.LINQ Severity Warning Notes To learn more about LINQ expressions, see the\n Analyze LINQ Expressions  guide. The  MAPoco1001  rule evaluates your code for POCO declarations\nand triggers a message that contains the JSON representation of a sample\ninstance. This rule evaluates some BSON serialization annotations such\nas  BsonIgnore  and  BsonElement . The following code triggers the  MAPoco1001  rule to display a message that\nshows the JSON representation of a sample POCO: The following image displays the  MAPoco1001  rule and information\nmessage: Category MongoDB.Analyzer.Poco Severity Info Notes This rule might apply differently depending on the value of\nyour  PocoAnalysisVerbosity  configuration setting. To learn more,\nsee the  Analyzer Configuration Options . To learn more about POCO analysis, see the\n Analyze POCOs  guide. To learn more about POCO annotations, see the  POCOs guide \nin the .NET/C# driver documentation. The  MAPoco2001  rule evaluates your code for unsupported\nserialization settings specified on a POCO declaration. The following code triggers the  MAPoco2001  rule to display a message\nthat explains that the code includes an invalid serialization setting on the  Date \nfield: The following image displays the  MAPoco2001  rule and information\nmessage: Category MongoDB.Analyzer.Poco Severity Warning Notes To learn more about POCO analysis, see the\n Analyze POCOs  guide. To learn more about POCO annotations, see the  POCOs guide \nin the .NET/C# driver documentation.",
            "code": [
                {
                    "lang": "csharp",
                    "value": "var filter = Builders<Book>.Filter.Eq(b => b.Genre, \"Theory\") &\n    Builders<Book>.Filter.Gte(b => b.Price, 10);"
                },
                {
                    "lang": "csharp",
                    "value": "var filter = Builders<Book>.Filter.Eq(b => b.Price + 2, 1);"
                },
                {
                    "lang": "csharp",
                    "value": "var results = queryableColl\n    .Where(b => b.Genre == \"Theory\")\n    .OrderBy(b => b.Price);"
                },
                {
                    "lang": "csharp",
                    "value": "var results = queryableColl.Where(b => b.GetHashCode() == 1);"
                },
                {
                    "lang": "csharp",
                    "value": "var results = queryableColl\n    .Where(b => b.Price + 1 == 21)\n    .Where(b => \"Re-release: \" + b.Title == \"Re-release: Siddhartha\");"
                },
                {
                    "lang": "csharp",
                    "value": "public class Person\n{\n   [BsonId]\n   public int Id { get; set; }\n   public string FirstName { get; set; }\n   public string LastName { get; set; }\n   public int Age { get; set; }\n   [BsonIgnore]\n   public double Income { get; set; }\n}"
                },
                {
                    "lang": "csharp",
                    "value": "public class Appointment\n{\n   [BsonDateTimeOptions(DateOnly = true, Kind = DateTimeKind.Local)]\n   public decimal Date { get; set; }\n   public string Doctor { get; set; }\n}"
                }
            ],
            "preview": "In this guide, you can learn about the MongoDB Analyzer rules and attached\nmessages. A rule evaluates different parts of your code and returns a\nmessage if a specific condition is met.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "configuration",
            "title": "Configure the MongoDB Analyzer",
            "headings": [
                "Overview",
                "Configuration",
                "Options",
                "Telemetry"
            ],
            "paragraphs": "Learn how to configure the MongoDB Analyzer in your .NET project and what\nconfiguration options are available. To configure the MongoDB Analyzer, perform the following actions: To learn more about .NET project files, see\n Understanding the Project File \nfrom Microsoft. To learn more about the  AdditionalFiles  tag, see\n Using Additional Files \nin the Roslyn documentation. Install the MongoDB Analyzer as described in\n the installation guide . Create a file specifying your configuration for the MongoDB Analyzer named\n mongodb.analyzer.json . You must name your configuration file  mongodb.analyzer.json . Add your configuration to your  mongodb.analyzer.json  file. The following sample configuration makes the MongoDB Analyzer use the\n LINQ3 \nprovider. Add the following to the  .csproj  file for your .NET application within the  Project  tag: If you do not specify a configuration file, the MongoDB Analyzer uses\nthe default value for all\n configuration options . The following is a description of all configuration options supported\nby the MongoDB Analyzer: To learn more about the configuration options the MongoDB Analyzer supports,\nsee the  MongoDB Analyzer source code . Name Description To learn more about LINQ, see the\n Analyze Your Code \npage. To learn more about builder expressions, see the\n Analyze Your Code \npage. To output logs, you must specify both a logfile and the  OutputInternalLogsToFile  option. Use the following sample configuration to make the MongoDB Analyzer output information to a logfile: To output logs, you must specify both a logfile and the  OutputInternalLogsToFile  option. Use the following sample configuration to make the MongoDB Analyzer output information to a logfile: \"All\" : Preview all POCOs \"Medium\" : Preview only POCOs that are part of a LINQ or builders expression\nor have BSON attributes \"None\" : Do not preview POCOs To learn more about telemetry in the MongoDB Analyzer, see the\n Telemetry \nsection of this guide. When the MongoDB Analyzer analyzes your source code, the tool by default\ncollects and sends anonymized information to MongoDB Inc. to improve\nproducts. To disable this feature, specify the following option in your configuration file: To view a complete list of all information collected by the MongoDB Analyzer when you\nhave enabled telemetry, see the  FAQ \npage. To learn more about how MongoDB Inc. uses collected data, see the\n Privacy Policy .",
            "code": [
                {
                    "lang": "json",
                    "value": "{ \"DefaultLinqVersion\": \"V3\" }"
                },
                {
                    "lang": "xml",
                    "value": "<ItemGroup>\n  <AdditionalFiles Include=\"<path to your mongodb.analyzer.json file>\" />\n</ItemGroup>"
                },
                {
                    "lang": "json",
                    "value": "\"OutputInternalLogsToFile\": true,\n\"LogFileName\": \"<path to your logfile>\""
                },
                {
                    "lang": "json",
                    "value": "\"OutputInternalLogsToFile\": true,\n\"LogFileName\": \"<path to your logfile>\""
                },
                {
                    "lang": "json",
                    "value": "\"SendTelemetry\": false"
                }
            ],
            "preview": "Learn how to configure the MongoDB Analyzer in your .NET project and what\nconfiguration options are available.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "code-type/builders",
            "title": "Analyze Builders Expressions",
            "headings": [
                "Overview",
                "Translate into the MongoDB Query API",
                "Analyze Builders in Visual Studio",
                "Simple Builder Expressions",
                "Track Builder Variables",
                "Fluent API"
            ],
            "paragraphs": "A  builder  is a class provided by the .NET/C# driver to help you construct\ncommon operations like queries and updates. To learn more about builders, see\n Operations with Builders  in the\n.NET/C# driver documentation. Use the MongoDB Analyzer to translate your builder expressions into the MongoDB Query API.\nClick the following tabs to see an example of a builder expression\nand its corresponding MongoDB Query API translation: The MongoDB Query API translations generated by the MongoDB Analyzer contain\nvariable names from your .NET/C# driver code. The .NET/C# driver\nreplaces these variable names with their corresponding values when\nyour application communicates with MongoDB. To analyze your builder expressions in Visual Studio, perform the following actions: Install the MongoDB Analyzer as described in the  Install \nguide. Write a builder expression with the .NET/C# driver Move your mouse over the  ...  annotation beneath the first\nmethod of your builder expression to display an information message that contains\nthe MongoDB Query API translation. Click on the following corresponding tab to see a builder expression\nwith or without an information message displayed: The MongoDB Analyzer supports builder variable tracking and composition. You can\ncombine multiple builder expressions with  logical operators \nand view the MongoDB Query API translation in the information message. Click on the following corresponding tab to see a composed builder variable\nwith or without an information message displayed: The MongoDB Analyzer supports the Fluent API using builder classes in the .NET/C# driver. You can\ncreate a sequence of chained builder methods and view the MongoDB Query API translation in\nthe information message. Click on the following corresponding tab to see an operation using chained builder methods\nwith or without an information message displayed: If you are using Visual Studio for Windows, you can view the output\nfrom the MongoDB Analyzer in the Error List window. To learn more, see\n Error List Window \nfrom Microsoft.",
            "code": [
                {
                    "lang": "csharp",
                    "value": "var filter = Builders<Book>.Filter.Eq(b => b.Genre, genre) &\n    Builders<Book>.Filter.Gte(b => b.Price, minPrice) &\n    Builders<Book>.Filter.Regex(b => b.Title, titleSearchTerm);"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"$and\": [ { \"Genre\": genre },\n    { \"Price\": { \"$gte\": minPrice } },\n    { \"Title\": /titleSearchTerm/ } ]\n}"
                }
            ],
            "preview": "A builder is a class provided by the .NET/C# driver to help you construct\ncommon operations like queries and updates.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "code-type/linq",
            "title": "Analyze LINQ Expressions",
            "headings": [
                "Overview",
                "Translate into the MongoDB Query API",
                "Analyze LINQ in Visual Studio",
                "Simple LINQ Expressions",
                "Unsupported LINQ Expressions",
                "Analyze LINQ3"
            ],
            "paragraphs": "LINQ  is a query syntax included in the C# language. The .NET/C# driver\ncan translate a subset of LINQ expressions into MongoDB aggregation pipelines. To learn more about LINQ, see the following resources: To learn more about aggregation pipelines, see\n Aggregation  in the MongoDB manual. Use the MongoDB Analyzer to learn the following\nabout your LINQ expressions: LINQ  in the .NET/C# driver\ndocumentation LINQ \nin the Microsoft C# guide Although the MongoDB Query API translations generated by the MongoDB Analyzer have the same\n query shape \nas your runtime .NET/C# driver\nqueries, there may be slight differences due to the following\nfactors: The difference between the translations the MongoDB Analyzer generates\nand your queries at runtime should not impact your ability to analyze\nand debug your code. To learn more about serialization and LINQ settings, see the\n FAQ \npage. Your Serialization Settings Your LINQ Settings How your LINQ expressions translate into the MongoDB Query API If any of your LINQ expressions are not supported Click the following tabs to see an example of a LINQ expression\nand its corresponding MongoDB Query API translation: The MongoDB Query API translations generated by the MongoDB Analyzer contain\nvariable names from your .NET/C# driver code. The .NET/C# driver\nreplaces these variable names with their corresponding values when\nyour application communicates with MongoDB. To analyze your LINQ expressions in Visual Studio, perform the following actions: Install the MongoDB Analyzer as described in the  Install \nguide. Write a LINQ expression with the .NET/C# driver. Move your mouse over the  ...  annotation beneath the first\nmethod of your LINQ expression to display an information message that contains\nthe MongoDB Query API translation. The MongoDB Analyzer analyzes LINQ expressions in the following syntax types: Click on the following corresponding tab to see a LINQ expression written in method\nsyntax with or without an information message displayed: Click on the following corresponding tab to see a LINQ expression written in query\nsyntax with or without an information message displayed: Method syntax Query syntax If your LINQ expression is not supported, the MongoDB Analyzer outputs a\n NotSupportedLinqExpression  warning. Click the following tabs to see a code snippet containing an unsupported LINQ expression\nand the corresponding warning message displayed by the MongoDB Analyzer: To view more examples of unsupported LINQ expressions, see the\n MongoDB Analyzer Github repository . The following code snippet contains the unsupported  GetHashCode  LINQ expression: The following screenshot shows the annotation displayed by the MongoDB Analyzer\nunderneath the preceding code snippet in Visual Studio: The following is the warning generated by the MongoDB Analyzer: The following screenshot shows the warning displayed in Visual Studio: If you are using Visual Studio for Windows, you can view the output\nfrom the MongoDB Analyzer in the Error List window. To learn more, see\n Error List Window \nfrom Microsoft. To analyze a LINQ3 expression, you must configure the MongoDB Analyzer to use the LINQ3\nprovider. To learn how to configure your LINQ provider, see the\n configuration  guide. To view examples of expressions the .NET/C# driver only supports with the LINQ3 provider, see the\n MongoDB Analyzer Github repository . If your .NET/C# driver version supports LINQ3 but you configure your MongoDB Analyzer to use\nthe default LINQ provider (LINQ2), the MongoDB Analyzer informs you if your LINQ expression\nis supported by LINQ3 but not LINQ2. Click the tabs to see a LINQ expression supported by LINQ3 but not LINQ2 and the\ncorresponding warning output by the MongoDB Analyzer:",
            "code": [
                {
                    "lang": "csharp",
                    "value": "var books = queryableCollection\n       .Where(b =>\n           b.Genre == genre &&\n           b.Price >= minPrice &&\n           b.Title.Contains(titleSearchTerm))\n       .OrderBy(b => b.Price)\n       .ToList();"
                },
                {
                    "lang": "json",
                    "value": "[{ \"$match\" : {\n     \"Genre\" : genre,\n     \"Price\" : { \"$gte\" : minPrice },\n     \"Title\" : /titleSearchTerm/s }\n  },\n  { \"$sort\" : { \"Price\" : 1 } }]"
                },
                {
                    "lang": "csharp",
                    "value": "var result = queryableColl.Where(b => b.GetHashCode() == 167);"
                },
                {
                    "lang": "text",
                    "value": "Expression not supported: b.GetHashCode()."
                },
                {
                    "lang": "csharp",
                    "value": "var result = queryableColl.Where(b => b.Title.Substring(0) == \"Pane\");"
                },
                {
                    "lang": "text",
                    "value": "Supported in LINQ3 only: db.coll.Aggregate([{ \"$match\" : { \"$expr\" : { \"$eq\" : [{ \"$substrCP\" : [\"$Title\", 0, { \"$subtract\" : [{ \"$strLenCP\" : \"$Title\" }, 0] }] }, \"Pane\"] } } }])"
                }
            ],
            "preview": "LINQ is a query syntax included in the C# language. The .NET/C# driver\ncan translate a subset of LINQ expressions into MongoDB aggregation pipelines.",
            "tags": null,
            "facets": null
        }
    ]
}