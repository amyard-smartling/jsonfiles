{
    "url": "http://mongodb.com/docs/php-library/v1.16",
    "includeInGlobalSearch": false,
    "documents": [
        {
            "slug": "tutorial",
            "title": "Tutorials",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference",
            "title": "Reference",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": null
        },
        {
            "slug": "",
            "title": "MongoDB PHP Library",
            "headings": [
                "New to the PHP Library?",
                "New to MongoDB?"
            ],
            "paragraphs": "The  MongoDB PHP Library  provides a high-level abstraction around the lower-level\n PHP driver , also known as the  mongodb \nextension. The  mongodb  extension provides a limited API to connect to the database and\nexecute generic commands, queries, and write operations. In contrast, the\n MongoDB PHP Library  provides a full-featured API and models client, database, and\ncollection objects. Each of those classes provide various helper methods for\nperforming operations in context. For example,  MongoDB\\Collection \nimplements methods for executing CRUD operations and managing indexes on the\ncollection, among other things. If you are developing a PHP application with MongoDB, you should consider using\nthe  MongoDB PHP Library  instead of the extension alone. If you have some experience with MongoDB but are new to the PHP library, the\nfollowing pages should help you get started: Code examples can be found in the  examples  directory in the source code. If you have previously worked with the legacy  mongo  extension, it will be\nhelpful to review the  Legacy Driver Upgrade Guide  for a summary of API changes between the\nold driver and this library. Install the  MongoDB PHP Library Connecting to MongoDB CRUD Operations Execute Database Commands GridFS Modeling BSON Data BSON If you are a new MongoDB user, the following links should help you become more\nfamiliar with MongoDB and introduce some of the concepts and terms you will\nencounter in the library documentation: Introduction to MongoDB Databases and Collections Documents  and\n BSON Types MongoDB CRUD Operations",
            "code": [],
            "preview": "The MongoDB PHP Library provides a high-level abstraction around the lower-level\nPHP driver, also known as the mongodb\nextension.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "faq",
            "title": "Frequently Asked Questions",
            "headings": [
                "Common Extension Installation Errors",
                "PHP Headers Not Found",
                "Multiple PHP Runtimes Installed",
                "Loading an Incompatible DLL on Windows",
                "Server Selection Failures"
            ],
            "paragraphs": "For example: This error indicates that PHP's build system cannot find the necessary headers.\nAll PHP extensions require headers in order to compile. Additionally, those\nheaders must correspond to the PHP runtime for which the extension will be used.\nGenerally, the  phpize  command (invoked by  pecl ) will ensure that the\nextension builds with the correct headers. Note that the mere presence of a PHP runtime does not mean that headers are\navailable. On various Linux distributions, headers are often published under a\nseparate  php-dev  or  php-devel  package. On macOS, the default PHP runtime\ndoes not include headers and users typically need to install PHP (and headers)\nvia  Homebrew  in order to build an extension. If your system has multiple versions of PHP installed, each version will have\nits own  pecl  and  phpize  commands. Additionally, each PHP runtime may\nhave separate  php.ini  files for each SAPI (e.g. FPM, CLI). If the extension\nhas been installed but is not available at runtime, double-check that you have\nused the correct  pecl  command and have modified the appropriate  php.ini \nfile(s). If there is any doubt about the  php.ini  file being used by a PHP runtime,\nyou should examine the output of  phpinfo()  for that particular\nSAPI. Additionally,  php_ini_loaded_file()  and\n php_ini_scanned_files()  may be used to determine\nexactly which INI files have been loaded by PHP. To debug issues with the extension not being loaded, you can use the\n detect-extension  script provided in the tools directory. You can run this\nscript from the CLI or include it in a script accessible via your web server.\nThe tool will point out potential issues and installation instructions for your\nsystem. Assuming you've installed the library through Composer, you can call the\nscript from the vendor directory: If you want to check configuration for a web server SAPI, include the file in\na script accessible from the web server and open it in your browser. Remember to\nwrap the script in  <pre>  tags to properly format its output: Windows binaries are available for various combinations of PHP version,\nthread safety (TS or NTS), and architecture (x86 or x64). Failure to select the\ncorrect binary will result in an error when attempting to load the extension DLL\nat runtime: Ensure that you have downloaded a DLL that corresponds to the following PHP\nruntime properties: In addition to the aforementioned constants, these properties can also be\ninferred from  phpinfo() . If your system has multiple PHP\nruntimes installed, double-check that you are examining the  phpinfo()  output\nfor the correct environment. The aforementioned  detect-extension  script can also be used to determine the\nappropriate DLL for your PHP environment. PHP version ( PHP_VERSION ) Thread safety ( PHP_ZTS ) Architecture ( PHP_INT_SIZE ) The following are all examples of\n Server Selection  failures: These errors typically manifest as a\n MongoDB\\Driver\\Exception\\ConnectionTimeoutException \nexception from the driver. The actual exception messages originate from\nlibmongoc, which is the underlying library used by the PHP driver. Since these\nmessages can take many forms, it's helpful to break down the structure of the\nmessage so you can better diagnose errors in your application. Messages will typically start with \"No suitable servers found\". The next part of\nthe message indicates  how  server selection failed. By default, the PHP driver\navoids a server selection loop and instead makes a single attempt (according to\nthe  serverSelectionTryOnce  connection string option). If the driver is\nconfigured to utilize a loop, a message like \"serverSelectionTimeoutMS expired\"\nwill tell us that we exhausted its time limit. The last component of the message tells us  why  server selection failed, and\nincludes one or more errors directly from the topology scanner, which is the\nservice responsible for connecting to and monitoring each host. Any host that\nlast experienced an error during monitoring will be included in this list. These\nmessages typically originate from low-level socket or TLS functions. The following is not meant to be exhaustive, but will hopefully point you in the\nright direction for analyzing the contributing factor(s) for a server selection\nfailure: In the case of a connection failure, you can use the  connect  tool to try and\nreceive more information. This tool attempts to connect to each host in a\nconnection string using socket functions to see if it is able to establish a\nconnection, send, and receive data. The tool takes the connection string to a\nMongoDB deployment as its only argument. Assuming you've installed the library\nthrough Composer, you would call the script from the vendor directory: In case the server does not accept connections, the output will look like this: \"connection refused\" likely indicates that the remote host is not listening on\nthe expected port. \"connection timeout\" could indicate a routing or firewall issue, or perhaps\na timeout due to latency. \"socket timeout\" suggests that a connection  was  established at some point\nbut was dropped or otherwise timed out due to latency. \"TLS handshake failed\" suggests something related to TLS or OCSP verification\nand is sometimes indicative of misconfigured TLS certificates. The tool only supports the  mongodb://  URI schema. Using the\n mongodb+srv  scheme is not supported.",
            "code": [
                {
                    "lang": "none",
                    "value": "/private/tmp/pear/install/mongodb/php_phongo.c:24:10: fatal error: 'php.h' file not found\n\n#include <php.h>\n         ^~~~~~~"
                },
                {
                    "lang": "none",
                    "value": "php vendor/mongodb/mongodb/tools/detect-extension.php"
                },
                {
                    "lang": "php",
                    "value": "<pre><?php require(...); ?></pre>"
                },
                {
                    "lang": "none",
                    "value": "PHP Warning:  PHP Startup: Unable to load dynamic library 'mongodb'"
                },
                {
                    "lang": "none",
                    "value": "No suitable servers found (`serverSelectionTryOnce` set):\n  [connection refused calling hello on 'a.example.com:27017']\n  [connection refused calling hello on 'b.example.com:27017']\n\nNo suitable servers found: `serverSelectionTimeoutMS` expired:\n  [socket timeout calling hello on 'example.com:27017']\n\nNo suitable servers found: `serverSelectionTimeoutMS` expired:\n  [connection timeout calling hello on 'a.example.com:27017']\n  [connection timeout calling hello on 'b.example.com:27017']\n  [TLS handshake failed: -9806 calling hello on 'c.example.com:27017']\n\nNo suitable servers found: `serverselectiontimeoutms` timed out:\n [TLS handshake failed: certificate verify failed (64): IP address mismatch calling hello on 'a.example.com:27017']\n [TLS handshake failed: certificate verify failed (64): IP address mismatch calling hello on 'b.example.com:27017']"
                },
                {
                    "lang": "none",
                    "value": "php vendor/mongodb/mongodb/tools/connect.php mongodb://127.0.0.1:27017"
                },
                {
                    "lang": "none",
                    "value": "Looking up MongoDB at mongodb://127.0.0.1:27017\nFound 1 host(s) in the URI. Will attempt to connect to each.\n\nCould not connect to 127.0.0.1:27017: Connection refused"
                }
            ],
            "preview": "The following are all examples of\nServer Selection failures:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/result-classes",
            "title": "Result Classes",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/exception-classes",
            "title": "Exception Classes",
            "headings": [
                "MongoDB\\Exception\\BadMethodCallException",
                "MongoDB\\Exception\\CreateEncryptedCollectionException",
                "MongoDB\\Exception\\InvalidArgumentException",
                "MongoDB\\Exception\\UnexpectedValueException",
                "MongoDB\\Exception\\UnsupportedException",
                "MongoDB\\GridFS\\Exception\\CorruptFileException",
                "MongoDB\\GridFS\\Exception\\FileNotFoundException",
                "MongoDB\\Exception\\Exception",
                "MongoDB\\Exception\\RuntimeException"
            ],
            "paragraphs": "This exception is thrown when an unsupported method is invoked on an object. For example, using an unacknowledged write concern with\n MongoDB\\Collection::insertMany()  will return a\n MongoDB\\InsertManyResult  object. It is a logical error to call\n MongoDB\\InsertManyResult::getInsertedCount() , since the number\nof inserted documents can only be determined from the response of an\nacknowledged write operation. This class extends PHP's  BadMethodCallException  class and implements the library's\n Exception  interface. Thrown by  MongoDB\\Database::createEncryptedCollection()  if any\nerror is encountered while creating data keys or creating the collection. The\noriginal exception and modified  encryptedFields  option can be accessed\nvia the  getPrevious()  and  getEncryptedFields()  methods, respectively. This class extends the library's  RuntimeException  class. Thrown for errors related to the parsing of parameters or options within the\nlibrary. This class extends the driver's  InvalidArgumentException  class and implements the\nlibrary's  Exception  interface. This exception is thrown when a command response from the server is\nmalformed or not what the library expected. This exception means that an\nassertion in some operation, which abstracts a database command, has failed.\nIt may indicate a corrupted BSON response or bug in the server, driver, or\nlibrary. This class extends the driver's  UnexpectedValueException  class and implements the\nlibrary's  Exception  interface. This exception is thrown if an option is used and not supported by the\nselected server. It is used sparingly in cases where silently ignoring the\nunsupported option might otherwise lead to unexpected behavior. This class extends the library's  RuntimeException  class. Unlike  InvalidArgumentException , which may be thrown when\nan operation's parameters and options are parsed during construction, the\nselected server is not known until an operation is executed. This exception is thrown if a GridFS file's metadata or chunk documents\ncontain unexpected or invalid data. When selecting a GridFS file, this may be thrown if a metadata field has an\nincorrect type or its value is out of range (e.g. negative  length ). When\nreading a GridFS file, this may be thrown if a chunk's index is out of\nsequence or its binary data's length out of range. This class extends the library's  RuntimeException  class. This exception is thrown if no GridFS file was found for the selection\ncriteria (e.g.  id ,  filename ). This class extends the library's  RuntimeException  class. This interface extends the driver's  Exception  interface and is implemented by all\nexception classes within the library. This class extends the driver's  RuntimeException  class, which in turn extends\nPHP's  RuntimeException  class.",
            "code": [],
            "preview": "This exception is thrown when an unsupported method is invoked on an object.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/bson",
            "title": "BSON",
            "headings": [
                "Overview",
                "Classes"
            ],
            "paragraphs": "MongoDB stores data records as BSON documents. BSON is a binary representation\nof JSON documents, though it contains more data types than JSON. For the BSON\nspec, see  bsonspec.org . By default, the  MongoDB PHP Library  returns BSON documents as\n MongoDB\\Model\\BSONDocument  objects and BSON arrays as\n MongoDB\\Model\\BSONArray  objects, respectively. This class extends PHP's  ArrayObject  class. It also\nimplements PHP's  JsonSerializable  interface and the\ndriver's  MongoDB\\BSON\\Serializable  and\n MongoDB\\BSON\\Unserializable \ninterfaces. By default, the library will deserialize BSON arrays as instances of this\nclass. During BSON and JSON serialization, instances of this class will\nserialize as an array type ( array_values()  is used\ninternally to numerically reindex the array). This class extends PHP's  ArrayObject  class. It also\nimplements PHP's  JsonSerializable  interface and the\ndriver's  MongoDB\\BSON\\Serializable  and\n MongoDB\\BSON\\Unserializable \ninterfaces. By default, the library will deserialize BSON documents as instances of this\nclass. During BSON and JSON serialization, instances of this class will\nserialize as a document type ( object casting  is used internally).",
            "code": [],
            "preview": "This class extends PHP's ArrayObject class. It also\nimplements PHP's JsonSerializable interface and the\ndriver's MongoDB\\BSON\\Serializable and\nMongoDB\\BSON\\Unserializable\ninterfaces.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/functions",
            "title": "Functions",
            "headings": [],
            "paragraphs": "MongoDB\\with_transaction()",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getInsertedCount",
            "title": "MongoDB\\BulkWriteResult::getInsertedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the total number of documents that were inserted by all insert\noperations in the bulk write. This method should only be called if the write was acknowledged. The total number of documents that were inserted by all insert operations in the\nbulk write. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getInsertedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedCount(): integer"
                }
            ],
            "preview": "Return the total number of documents that were inserted by all insert\noperations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-withOptions",
            "title": "MongoDB\\Collection::withOptions()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns a clone of the Collection object, but with different options. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for collection operations. Defaults to\nthe original collection's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for collection operations. Defaults\nto the original collection's read preference. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. Defaults to the original collection's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for collection operations. Defaults to\nthe original collection's write concern. A  MongoDB\\Collection  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The following example clones an existing Collection object with a new read\npreference: MongoDB\\Collection::__construct()",
            "code": [
                {
                    "lang": "php",
                    "value": "function withOptions(array $options = []): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'restaurants');\n\n$newCollection = $sourceCollection->withOptions([\n    'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);"
                }
            ],
            "preview": "Returns a clone of the Collection object, but with different options.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getModifiedCount",
            "title": "MongoDB\\UpdateResult::getModifiedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were modified. This method should only be called if the write was acknowledged. If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the modified\ncount may be less than the value returned by  getMatchedCount() . The number of documents that were modified. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\UpdateResult::getMatchedCount() MongoDB\\Driver\\WriteResult::getModifiedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getModifiedCount(): integer|null"
                }
            ],
            "preview": "Return the number of documents that were modified.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getReadConcern",
            "title": "MongoDB\\Collection::getReadConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read concern for this collection. A  MongoDB\\Driver\\ReadConcern  object. The output would then resemble: Read Concern  in the MongoDB manual MongoDB\\Driver\\ReadConcern::isDefault() MongoDB\\Client::getReadConcern() MongoDB\\Database::getReadConcern() MongoDB\\GridFS\\Bucket::getReadConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadConcern(): MongoDB\\Driver\\ReadConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'users', [\n   'readConcern' => new MongoDB\\Driver\\ReadConcern('majority'),\n]);\n\nvar_dump($collection->getReadConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}"
                }
            ],
            "preview": "Returns the read concern for this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-valid",
            "title": "MongoDB\\ChangeStream::valid()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Returns whether there is a current event in the change stream. When manually iterating the change stream using\n Iterator  methods, this method should\nbe used to determine if  MongoDB\\ChangeStream::current()  and\n MongoDB\\ChangeStream::key()  can be called. A boolean indicating whether there is a current event in the change stream. MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Iterator::valid() Tailable Cursor Iteration Change Streams  documentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function valid(): boolean"
                }
            ],
            "preview": "Returns whether there is a current event in the change stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getCappedSize",
            "title": "MongoDB\\Model\\CollectionInfo::getCappedSize()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the size limit for the capped collection in bytes. This correlates\nwith the  size  option for\n MongoDB\\Database::createCollection() . The size limit for the capped collection in bytes. If the collection is not\ncapped,  null  will be returned. This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n size  key. The output would then resemble: MongoDB\\Model\\CollectionInfo::getCappedMax() MongoDB\\Model\\CollectionInfo::isCapped() MongoDB\\Database::createCollection() Capped Collections  in the MongoDB manual listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getCappedSize(): integer|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n    'name' => 'foo',\n    'options' => [\n        'capped' => true,\n        'size' => 1048576,\n    ]\n]);\n\nvar_dump($info->getCappedSize());"
                },
                {
                    "lang": "none",
                    "value": "int(1048576)"
                }
            ],
            "preview": "Return the size limit for the capped collection in bytes. This correlates\nwith the size option for\nMongoDB\\Database::createCollection().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "upgrade",
            "title": "Legacy Driver Upgrade Guide",
            "headings": [
                "Overview",
                "BSON",
                "Type Classes",
                "Emulating the Legacy Driver",
                "Collection API",
                "Accessing IDs of Inserted Documents",
                "Bulk Write Operations",
                "MongoCollection::save() Removed",
                "Group Command Helper"
            ],
            "paragraphs": "The  MongoDB PHP Library  and underlying  mongodb extension  have notable\nAPI differences from the legacy  mongo  extension. This page will summarize\nthose differences for the benefit of those upgrading from the legacy driver. Additionally, a community-developed  mongo-php-adapter  library exists, which\nimplements the  mongo  extension API using this library and the new driver.\nWhile this adapter library is not officially supported by MongoDB, it does bear\nmentioning. When upgrading from the legacy driver, type classes such as MongoId must be\nreplaced with classes in the\n MongoDB\\BSON namespace . The\nnew driver also introduces interfaces for its BSON types, which should be\npreferred if applications need to type hint against BSON values. The following table lists all legacy classes alongside the equivalent class in\nthe new driver. Legacy class BSON type class BSON type interface MongoId MongoDB\\BSON\\ObjectId MongoDB\\BSON\\ObjectIdInterface MongoCode MongoDB\\BSON\\Javascript MongoDB\\BSON\\JavascriptInterface MongoDate MongoDB\\BSON\\UTCDateTime MongoDB\\BSON\\UTCDateTimeInterface MongoRegex MongoDB\\BSON\\Regex MongoDB\\BSON\\RegexInterface MongoBinData MongoDB\\BSON\\Binary MongoDB\\BSON\\BinaryInterface MongoInt32 Not implemented.  1 MongoInt64 MongoDB\\BSON\\Int64 Not implemented.  2 MongoDBRef Not implemented.  3 MongoMinKey MongoDB\\BSON\\MinKey MongoDB\\BSON\\MinKeyInterface MongoMaxKey MongoDB\\BSON\\MaxKey MongoDB\\BSON\\MaxKeyInterface MongoTimestamp MongoDB\\BSON\\Timestamp MongoDB\\BSON\\TimestampInterface The new driver does not implement an equivalent class for MongoInt32.\nWhen decoding BSON, 32-bit integers will always be represented as a PHP\ninteger. When encoding BSON, PHP integers will encode as either a 32-bit or\n64-bit integer depending on their value. MongoDB\\BSON\\Int64  does not have an\ninterface defined. The new driver does not allow applications to instantiate\nthis type (i.e. its constructor is private) and it is only created during\nBSON decoding when a 64-bit integer cannot be represented as a PHP integer on\na 32-bit platform. The new driver does not implement an equivalent class for MongoDBRef\nsince  DBRefs  are merely a BSON\ndocument with a particular structure and not a proper BSON type. The new\ndriver also does not provide any helpers for working with DBRef objects,\nsince their use is not encouraged. The legacy  mongo  extension returned both BSON documents and arrays as PHP\narrays. While PHP arrays are convenient to work with, this behavior was\nproblematic: The  MongoDB PHP Library 's  BSONDocument  and\n BSONArray  classes address these concerns\nby preserving the BSON type information during serialization and\ndeserialization; however, some users may still prefer the legacy behavior. If\ndesired, you can use the  typeMap  option to have the library return\neverything as a PHP array: The above example would output something similar to: Different BSON types could deserialize to the same PHP value (e.g.\n {\"0\": \"foo\"}  and  [\"foo\"] ), which made it impossible to infer the\noriginal BSON type. Numerically-indexed PHP arrays would be serialized as BSON documents if there\nwas a gap in their key sequence. Such gaps were caused by unsetting a key to\nremove an element and forgetting to numerically reindex the array. This library's  MongoDB\\Collection  class implements MongoDB's\ncross-driver  CRUD \nand  Index Management \nspecifications. Although some method names have changed in accordance with the\nnew specifications, the new class provides the same functionality as the legacy\ndriver's MongoCollection class with some notable exceptions. A guiding principle in designing the new APIs was that explicit method names are\npreferable to overloaded terms found in the old API. For instance,\n MongoCollection::save()  and  MongoCollection::findAndModify()  have\ndifferent modes of operation, depending on their arguments. Methods were also\nsplit to distinguish between  updating specific fields  and  full-document replacement . The following table lists all legacy methods alongside the\nequivalent method(s) in the new driver. MongoCollection method MongoDB\\Collection  method(s) MongoCollection::aggregate() MongoDB\\Collection::aggregate() MongoCollection::aggregateCursor() MongoDB\\Collection::aggregate() MongoCollection::batchInsert() MongoDB\\Collection::insertMany() MongoCollection::count() MongoDB\\Collection::count() MongoCollection::createDBRef() Not yet implemented.  3 MongoCollection::createIndex() MongoDB\\Collection::createIndex() MongoCollection::deleteIndex() MongoDB\\Collection::dropIndex() MongoCollection::deleteIndexes() MongoDB\\Collection::dropIndexes() MongoCollection::drop() MongoDB\\Collection::drop() MongoCollection::distinct() MongoDB\\Collection::distinct() MongoCollection::ensureIndex() MongoDB\\Collection::createIndex() MongoCollection::find() MongoDB\\Collection::find() MongoCollection::findAndModify() MongoDB\\Collection::findOneAndDelete() ,\n MongoDB\\Collection::findOneAndReplace() , and\n MongoDB\\Collection::findOneAndUpdate() MongoCollection::findOne() MongoDB\\Collection::findOne() MongoCollection::getDBRef() Not implemented.  3 MongoCollection::getIndexInfo() MongoDB\\Collection::listIndexes() MongoCollection::getName() MongoDB\\Collection::getCollectionName() MongoCollection::getReadPreference() MongoDB\\Collection::getReadPreference() MongoCollection::getSlaveOkay() Not implemented. MongoCollection::getWriteConcern() MongoDB\\Collection::getWriteConcern() MongoCollection::group() Not implemented. Use  MongoDB\\Database::command() . See\n Group Command Helper  for an example. MongoCollection::insert() MongoDB\\Collection::insertOne() MongoCollection::parallelCollectionScan() Not implemented. MongoCollection::remove() MongoDB\\Collection::deleteMany()  and\n MongoDB\\Collection::deleteOne() MongoCollection::save() MongoDB\\Collection::insertOne()  or\n MongoDB\\Collection::replaceOne()  with the  upsert \noption. MongoCollection::setReadPreference() Not implemented. Use  MongoDB\\Collection::withOptions() . MongoCollection::setSlaveOkay() Not implemented. MongoCollection::setWriteConcern() Not implemented. Use  MongoDB\\Collection::withOptions() . MongoCollection::update() MongoDB\\Collection::replaceOne() ,\n MongoDB\\Collection::updateMany() , and\n MongoDB\\Collection::updateOne() . MongoCollection::validate() Not implemented. In the legacy driver,  MongoCollection::insert() ,\n MongoCollection::batchInsert() , and  MongoCollection::save()  (when\ninserting) would modify their input argument by injecting an  _id  key with a\ngenerated ObjectId (i.e. MongoId object). This behavior was a bit of a hack, as\nit did not rely on the argument being  passed by reference ; instead, it directly modified memory through the\nextension API and could not be implemented in PHP userland. As such, it is no\nlonger done in the new driver and library. IDs of inserted documents (whether generated or not) may be accessed through the\nfollowing methods on the write result objects: MongoDB\\InsertOneResult::getInsertedId()  for\n MongoDB\\Collection::insertOne() MongoDB\\InsertManyResult::getInsertedIds()  for\n MongoDB\\Collection::insertMany() MongoDB\\BulkWriteResult::getInsertedIds()  for\n MongoDB\\Collection::bulkWrite() The legacy driver's MongoWriteBatch classes have been replaced with a\ngeneral-purpose  MongoDB\\Collection::bulkWrite()  method. Whereas\nthe legacy driver only allowed bulk operations of the same type, the new method\nallows operations to be mixed (e.g. inserts, updates, and deletes). MongoCollection::save() , which was syntactic sugar for an insert or upsert\noperation, has been removed in favor of explicitly using\n MongoDB\\Collection::insertOne()  or\n MongoDB\\Collection::replaceOne()  (with the  upsert  option). While the  save  method does have its uses for interactive environments, such\nas the MongoDB shell, it was intentionally excluded from the\n CRUD specification \nfor language drivers. Generally, application code should know if the document\nhas an identifier and be able to explicitly insert or replace the document and\nhandle the returned  MongoDB\\InsertOneResult  or\n MongoDB\\UpdateResult , respectively. This also helps avoid\ninadvertent and potentially dangerous  full-document replacements . MongoDB\\Collection  does not have a helper method for the\n group  command. The following example\ndemonstrates how to execute a group command using the\n MongoDB\\Database::command()  method:",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://127.0.0.1/',\n    [],\n    [\n        'typeMap' => [\n            'array' => 'array',\n            'document' => 'array',\n            'root' => 'array',\n        ],\n    ]\n);\n\n$document = $client->test->zips->findOne(['_id' => '94301']);\n\nvar_dump($document);"
                },
                {
                    "lang": "php",
                    "value": "array(5) {\n  [\"_id\"]=>\n  string(5) \"94301\"\n  [\"city\"]=>\n  string(9) \"PALO ALTO\"\n  [\"loc\"]=>\n  array(2) {\n    [0]=>\n    float(-122.149685)\n    [1]=>\n    float(37.444324)\n  }\n  [\"pop\"]=>\n  int(15965)\n  [\"state\"]=>\n  string(2) \"CA\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('db_name');\n$cursor = $database->command([\n    'group' => [\n        'ns' => 'collection_name',\n        'key' => ['field_name' => 1],\n        'initial' => ['total' => 0],\n        '$reduce' => new MongoDB\\BSON\\Javascript('...'),\n    ],\n]);\n\n$resultDocument = $cursor->toArray()[0];"
                }
            ],
            "preview": "The MongoDB PHP Library and underlying mongodb extension have notable\nAPI differences from the legacy mongo extension. This page will summarize\nthose differences for the benefit of those upgrading from the legacy driver.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getReadPreference",
            "title": "MongoDB\\Collection::getReadPreference()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read preference for this collection. A  MongoDB\\Driver\\ReadPreference \nobject. The output would then resemble: Read Preference  in the MongoDB manual MongoDB\\Client::getReadPreference() MongoDB\\Database::getReadPreference() MongoDB\\GridFS\\Bucket::getReadPreference()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadPreference(): MongoDB\\Driver\\ReadPreference"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'users', [\n    'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);\n\nvar_dump($collection->getReadPreference());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}"
                }
            ],
            "preview": "Returns the read preference for this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-findOne",
            "title": "MongoDB\\GridFS\\Bucket::findOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds a single document from the GridFS bucket's files collection matching\nthe query. The filter criteria that specifies the documents to query. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , queries can\nwrite data to the  _tmp  sub-directory in the  dbPath  directory. allowPartialResults boolean For queries against a sharded collection, returns partial results from\nthe  mongos  if some shards are unavailable instead of\nthrowing an error. collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. max array|object The exclusive upper bound for a specific index. maxScan integer Maximum number of documents or index keys to scan when executing the\nquery. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . min array|object The inclusive lower bound for a specific index. modifiers array|object Meta operators  that\nmodify the output or behavior of a query. Use of these operators is\ndeprecated in favor of named options. oplogReplay boolean Internal use for replica sets. To use  oplogReplay , you must include\nthe following condition in the filter: The  MongoDB\\BSON\\Timestamp \nclass reference describes how to represent MongoDB's BSON timestamp\ntype with PHP. projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the bucket's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the bucket's read preference. returnKey boolean If true, returns only the index keys in the resulting documents. session MongoDB\\Driver\\Session Client session to associate with the operation. showRecordId boolean Determines whether to return the record identifier for each document.\nIf true, adds a field  $recordId  to the returned documents. skip integer Number of documents to skip. Defaults to  0 . sort array|object The sort specification for the ordering of the results. typeMap array This will be used for the returned result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the bucket's type map. An array or object for the  first document  that matched\nthe query, or  null  if no document matched the query. The return type will\ndepend on the  typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The output would then resemble: MongoDB\\Collection::findOne() MongoDB\\GridFS\\Bucket::find()",
            "code": [
                {
                    "lang": "php",
                    "value": "function findOne(\n    array|object $filter = [],\n    array $options = []\n): array|object|null"
                },
                {
                    "lang": "javascript",
                    "value": "{ ts: { $gte: <timestamp> } }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$bucket->uploadFromStream('b', $stream);\n\n$fileDocument = $bucket->findOne(\n    ['length' => ['$lte' => 6]],\n    [\n        'projection' => [\n            'filename' => 1,\n            'length' => 1,\n            '_id' => 0,\n        ],\n        'sort' => ['length' => -1],\n    ]\n);\n\nvar_dump($fileDocument);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#3004 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"filename\"]=>\n    string(1) \"b\"\n    [\"length\"]=>\n    int(6)\n  }\n}"
                }
            ],
            "preview": "Finds a single document from the GridFS bucket's files collection matching\nthe query.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getType",
            "title": "MongoDB\\Model\\CollectionInfo::getType()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the collection type. The collection type. This corresponds to the  type  field returned in the\n listCollections  command reply. The output would then resemble: MongoDB\\Database::createCollection() listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getType(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo(['type' => 'collection', 'name' => 'foo']);\n\necho $info->getType();"
                },
                {
                    "lang": "none",
                    "value": "collection"
                }
            ],
            "preview": "Return the collection type.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-selectDatabase",
            "title": "MongoDB\\Client::selectDatabase()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Selects a database on the server. The name of the database to select. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for database operations. Defaults to\nthe client's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for database operations. Defaults to\nthe client's read preference. typeMap array The default type map to use for database operations. Defaults to the\nclient's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for database operations. Defaults to\nthe client's write concern. A  MongoDB\\Database  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The selected database inherits options such as read preference and type mapping\nfrom the  Client  object. Options may be overridden\nvia the  $options  parameter. The following example selects the  test  database: The following examples selects the  test  database with a custom read\npreference: MongoDB\\Client::__get() MongoDB\\Database::__construct()",
            "code": [
                {
                    "lang": "php",
                    "value": "function selectDatabase(\n    string $databaseName,\n    array $options = []\n): MongoDB\\Database"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$db = $client->selectDatabase('test');"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$db = $client->selectDatabase(\n    'test',\n    [\n        'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n    ]\n);"
                }
            ],
            "preview": "Selects a database on the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-isAcknowledged",
            "title": "MongoDB\\UpdateResult::isAcknowledged()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Return whether the write was acknowledged. A boolean indicating whether the write was acknowledged. MongoDB\\Driver\\WriteResult::isAcknowledged() Write Concern  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isAcknowledged(): boolean"
                }
            ],
            "preview": "Return whether the write was acknowledged.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-selectGridFSBucket",
            "title": "MongoDB\\Database::selectGridFSBucket()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Selects a GridFS bucket within the database. An array specifying the desired options. Name Type Description bucketName string The bucket name, which will be used as a prefix for the files and\nchunks collections. Defaults to  \"fs\" . chunkSizeBytes integer The chunk size in bytes. Defaults to  261120  (i.e. 255 KiB). disableMD5 boolean Whether to disable automatic MD5 generation when storing files. Defaults to  false . readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for bucket operations. Defaults to the\ndatabase's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for bucket operations. Defaults to\nthe database's read concern. typeMap array The default type map to use for bucket operations. Defaults to the\ndatabase's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for bucket operations. Defaults to the\ndatabase's write concern. A  MongoDB\\GridFS\\Bucket  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The selected bucket inherits options such as read preference and type\nmapping from the  Database  object. Options may be\noverridden via the  $options  parameter. The following example selects the default  fs.files  bucket in the  test \ndatabase: The following example selects the custom  images.files  bucket in the  test \ndatabase with a custom read preference: MongoDB\\GridFS\\Bucket::__construct()",
            "code": [
                {
                    "lang": "php",
                    "value": "function selectGridFSBucket(array $options = []): MongoDB\\GridFS\\Bucket"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$bucket = $db->selectGridFSBucket();"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$imagesBucket = $db->selectGridFSBucket([\n    'bucketName' => 'images',\n    'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);"
                }
            ],
            "preview": "Selects a GridFS bucket within the database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getVersion",
            "title": "MongoDB\\Model\\IndexInfo::getVersion()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the index version. The index version. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getVersion(): integer"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'v' => 1,\n]);\n\nvar_dump($info->getVersion());"
                },
                {
                    "lang": "none",
                    "value": "int(1)"
                }
            ],
            "preview": "Return the index version.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-replaceOne",
            "title": "MongoDB\\Collection::replaceOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Replace at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be replaced. The filter criteria that specifies the documents to replace. The replacement document. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.2 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. session MongoDB\\Driver\\Session Client session to associate with the operation. upsert boolean If set to  true , creates a new document when no document matches the\nquery criteria. The default value is  false , which does not insert a\nnew document when no match is found. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following example replaces the document with  restaurant_id  of\n \"40356068\"  in the  restaurants  collection in the  test  database: The output would then resemble: MongoDB\\Collection::updateMany() MongoDB\\Collection::updateOne() MongoDB\\Collection::bulkWrite() CRUD Operations update  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function replaceOne(\n    array|object $filter,\n    array|object $replacement,\n    array $options = []\n): MongoDB\\UpdateResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$updateResult = $collection->replaceOne(\n    [ 'restaurant_id' => '40356068' ],\n    [\n        'name' => 'New Restaurant',\n        'restaurant_id' => '99988877',\n        'borough' => 'Queens',\n        'cuisine' => 'Cafe',\n        'grades' => [],\n    ]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 1 document(s)\nModified 1 document(s)"
                }
            ],
            "preview": "Replace at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the first\nmatching document will be replaced.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-deleteOne",
            "title": "MongoDB\\Collection::deleteOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Deletes at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be deleted. The filter criteria that specifies the documents to delete. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\DeleteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following example deletes one document in the  users  collection that has\nhas  \"ny\"  as the value for the  state  field: The output would then resemble: MongoDB\\Collection::deleteMany() MongoDB\\Collection::bulkWrite() CRUD Operations delete  command reference  in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function deleteOne(\n    array|object $filter,\n    array $options = []\n): MongoDB\\DeleteResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$deleteResult = $collection->deleteOne(['state' => 'ny']);\n\nprintf(\"Deleted %d document(s)\\n\", $deleteResult->getDeletedCount());"
                },
                {
                    "lang": "none",
                    "value": "Deleted 1 document(s)"
                }
            ],
            "preview": "Deletes at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the first\nmatching document will be deleted.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-startSession",
            "title": "MongoDB\\Client::startSession()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Start a new client session for use with this client. An array specifying the desired options. Refer to the\n MongoDB\\Driver\\Manager::startSession() \nextension documentation for a list of supported options. A  MongoDB\\Driver\\Session  object. MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example starts a new session: The output would then resemble: MongoDB\\Driver\\Manager::startSession() Causal Consistency  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function startSession(array $options = []): MongoDB\\Driver\\Session"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$session = $client->startSession();\n\nvar_dump($session);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\Session)#2043 (4) {\n  [\"logicalSessionId\"]=>\n  array(1) {\n    [\"id\"]=>\n    object(MongoDB\\BSON\\Binary)#225 (2) {\n      [\"data\"]=>\n      string(16) \"................\"\n      [\"type\"]=>\n      int(4)\n    }\n  }\n  [\"clusterTime\"]=>\n  NULL\n  [\"causalConsistency\"]=>\n  bool(true)\n  [\"operationTime\"]=>\n  NULL\n}"
                }
            ],
            "preview": "Start a new client session for use with this client.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-getResumeToken",
            "title": "MongoDB\\ChangeStream::getResumeToken()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns the cached resume token that will be used to resume the change\nstream. An array or object, or  null  if there is no cached resume token. The return\ntype will depend on the  typeMap  option for the  watch()  method used to\ncreate the change stream. This example captures the resume token for a change stream after encountering\nan  invalidate  event and uses it to construct a second change stream using\nthe  startAfter  option. MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Resume a Change Stream \ndocumentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getResumeToken(): array|object|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$collection = (new MongoDB\\Client($uri))->test->inventory;\n\n$changeStream = $collection->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    if ($event['operationType'] === 'invalidate') {\n        $startAfter = $changeStream->getResumeToken();\n        break;\n    }\n\n    printf(\"%d: %s\\n\", $changeStream->key(), $event['operationType']);\n}\n\n$changeStream = $collection->watch([], ['startAfter' => $startAfter]);"
                }
            ],
            "preview": "Returns the cached resume token that will be used to resume the change\nstream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-drop",
            "title": "MongoDB\\Collection::drop()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop the collection. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. encryptedFields array|object A document describing encrypted fields for queryable encryption. If\nomitted, the  encryptedFieldsMap  option within the\n autoEncryption  driver option will be consulted. If\n encryptedFieldsMap  was defined but does not specify this\ncollection, the library will make a final attempt to consult the\nserver-side value for  encryptedFields . See\n Field Encryption and Queryability \nin the MongoDB manual for more information. This option is not passed to the\n drop  command. The library uses\nit to determine related metadata collections that should be dropped\nin addition to an encrypted collection. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object with the result document of the  drop  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following operation drops the  restaurants  collection in the  test \ndatabase: The output would then resemble: MongoDB\\Database::dropCollection() drop  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function drop(array $options = []): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$result = $collection->drop();\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"ns\"]=>\n    string(16) \"test.restaurants\"\n    [\"nIndexesWas\"]=>\n    int(3)\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-renameCollection",
            "title": "MongoDB\\Database::renameCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Rename a collection within the current database. The name of the collection to rename. The new name of the collection. The new database name of the collection. If a new database name is not\nspecified, the current database will be used. If the new name specifies a\ndifferent database, the command copies the collection to the new database\nand drops the source collection. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. dropTarget boolean If  true , MongoDB will drop the target before renaming the\ncollection. The default value is  false . session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. An array or object with the result document of the  renameCollection  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example renames the  restaurants  collection in the  test \ndatabase to  places : The output would then resemble: MongoDB\\Collection::rename() renameCollection  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function renameCollection(\n    string $fromCollectionName,\n    string $toCollectionName,\n    ?string $toDatabaseName = null,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$result = $db->renameCollection('restaurants', 'places');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Rename a collection within the current database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-getSizeOnDisk",
            "title": "MongoDB\\Model\\DatabaseInfo::getSizeOnDisk()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the total size of the database file on disk in bytes. The total size of the database file on disk in bytes. The output would then resemble: listDatabases  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getSizeOnDisk(): integer"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new DatabaseInfo(['sizeOnDisk' => 1048576]);\n\nvar_dump($info->getSizeOnDisk());"
                },
                {
                    "lang": "none",
                    "value": "int(1048576)"
                }
            ],
            "preview": "Return the total size of the database file on disk in bytes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-isAcknowledged",
            "title": "MongoDB\\InsertManyResult::isAcknowledged()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Return whether the write was acknowledged. A boolean indicating whether the write was acknowledged. MongoDB\\Driver\\WriteResult::isAcknowledged() Write Concern  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isAcknowledged(): boolean"
                }
            ],
            "preview": "Return whether the write was acknowledged.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-command",
            "title": "MongoDB\\Database::command()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Execute a  command  on the database. This is\ngenerally used to execute commands that do not have a corresponding helper\nmethod within the library. The  database command  document. An array specifying the desired options. Name Type Description readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the database's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. A  MongoDB\\Driver\\Cursor  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). Most database commands return a single result document, which can be obtained by\nconverting the returned cursor to an array and accessing its first element. The\nfollowing example executes a  ping  command\nand prints its result document: The output would resemble: Some database commands return a cursor with multiple results. The following\nexample executes  listCollections ,\nwhich returns a cursor containing a result document for each collection in the\n test  database. Note that this example is illustrative; applications would\ngenerally use  MongoDB\\Database::listCollections()  in practice. The output would resemble: Execute Database Commands Database Commands  in the MongoDB manual MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeCommand()",
            "code": [
                {
                    "lang": "php",
                    "value": "function command(\n    array|object $command,\n    array $options = []\n): MongoDB\\Driver\\Cursor"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$cursor = $database->command(['ping' => 1]);\n\nvar_dump($cursor->toArray()[0]);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$cursor = $database->command(['listCollections' => 1]);\n\nvar_dump($cursor->toArray());"
                },
                {
                    "lang": "none",
                    "value": "array(3) {\n  [0]=>\n  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(11) \"restaurants\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#3 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n  [1]=>\n  object(MongoDB\\Model\\BSONDocument)#13 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(5) \"users\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#12 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n  [2]=>\n  object(MongoDB\\Model\\BSONDocument)#15 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(6) \"restos\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#14 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n}"
                }
            ],
            "preview": "Execute a command on the database. This is\ngenerally used to execute commands that do not have a corresponding helper\nmethod within the library.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isSparse",
            "title": "MongoDB\\Model\\IndexInfo::isSparse()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  sparse index .\nThis correlates with the  sparse  option for\n MongoDB\\Collection::createIndex() . A boolean indicating whether the index is a sparse index. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual Sparse Indexes  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isSparse(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'sparse' => true,\n]);\n\nvar_dump($info->isSparse());"
                },
                {
                    "lang": "none",
                    "value": "bool(true)"
                }
            ],
            "preview": "Return whether the index is a sparse index.\nThis correlates with the sparse option for\nMongoDB\\Collection::createIndex().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getWriteConcern",
            "title": "MongoDB\\Database::getWriteConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the write concern for this database. A  MongoDB\\Driver\\WriteConcern \nobject. The output would then resemble: Write Concern  in the MongoDB manual MongoDB\\Driver\\WriteConcern::isDefault() MongoDB\\Client::getWriteConcern() MongoDB\\Collection::getWriteConcern() MongoDB\\GridFS\\Bucket::getWriteConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getWriteConcern(): MongoDB\\Driver\\WriteConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test', [\n   'writeConcern' => new MongoDB\\Driver\\WriteConcern(1, 0, true),\n]);\n\nvar_dump($database->getWriteConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\WriteConcern)#5 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}"
                }
            ],
            "preview": "Returns the write concern for this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getManager",
            "title": "MongoDB\\Collection::getManager()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Collection . A  MongoDB\\Driver\\Manager  object. MongoDB\\Client::getManager() MongoDB\\Database::getManager()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getManager(): MongoDB\\Manager"
                }
            ],
            "preview": "Accessor for the\nMongoDB\\Driver\\Manager used by this\nCollection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndDelete",
            "title": "MongoDB\\Collection::findOneAndDelete()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds a single document matching the query and deletes it. The filter criteria that specifies the documents to delete. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. session MongoDB\\Driver\\Session Client session to associate with the operation. sort array|object The sort specification for the ordering of the results. typeMap array This will be used for the returned result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object for the document that was deleted, or  null  if no document\nmatched the query. The return type will depend on the  typeMap  option. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The following example finds and deletes the document with  restaurant_id  of\n \"40375376\"  from the  restaurants  collection in the  test  database: The output would then resemble: MongoDB\\Collection::findOneAndReplace() MongoDB\\Collection::findOneAndUpdate() findAndModify  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function findOneAndDelete(\n    array|object $filter = [],\n    array $options = []\n): object|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$deletedRestaurant = $collection->findOneAndDelete(\n    [ 'restaurant_id' => '40375376' ],\n    [\n        'projection' => [\n            'name' => 1,\n            'borough' => 1,\n            'restaurant_id' => 1,\n        ],\n    ]\n);\n\nvar_dump($deletedRestaurant);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#17 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#11 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef280a846852a4b3f70\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"name\"]=>\n    string(15) \"Agra Restaurant\"\n    [\"restaurant_id\"]=>\n    string(8) \"40375376\"\n  }\n}"
                }
            ],
            "preview": "Finds a single document matching the query and deletes it.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getUpsertedCount",
            "title": "MongoDB\\BulkWriteResult::getUpsertedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the total number of documents that were upserted by all update and\nreplace operations in the bulk write. This method should only be called if the write was acknowledged. The total number of documents that were upserted by all update and replace\noperations in the bulk write. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getUpsertedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getUpsertedCount(): integer"
                }
            ],
            "preview": "Return the total number of documents that were upserted by all update and\nreplace operations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-selectCollection",
            "title": "MongoDB\\Client::selectCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Selects a collection on the server. The name of the database containing the collection to select. The name of the collection to select. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for collection operations. Defaults to\nthe client's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for collection operations. Defaults\nto the client's read preference. typeMap array The default type map to use for collection operations. Defaults to the\nclient's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for collection operations. Defaults to\nthe client's write concern. A  MongoDB\\Collection  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The selected collection inherits options such as read preference and type\nmapping from the  Client  object. Options may be\noverridden via the  $options  parameter. The following example selects the  users  collection in the  test  database: The following example selects the  users  collection in the  test  database\nwith a custom read preference: MongoDB\\Collection::__construct() MongoDB\\Database::selectCollection()",
            "code": [
                {
                    "lang": "php",
                    "value": "function selectCollection(\n    string $databaseName,\n    string $collectionName,\n    array $options = []\n): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client->selectCollection('test', 'users');"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client->selectCollection(\n    'test',\n    'users',\n    [\n        'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n    ]\n);"
                }
            ],
            "preview": "Selects a collection on the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-count",
            "title": "MongoDB\\Collection::count()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Count the number of documents that match the filter criteria. The filter criteria that specifies the documents to count. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. If a document is provided, it is passed to the command as-is.\nPreviously, the library would convert the key pattern to an index\nname. limit integer The maximum number of matching documents to return. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. skip integer The number of matching documents to skip before returning results. The number of documents matching the filter criteria. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). This method is deprecated and cannot be executed within a transaction. It has\nalways been implemented using the  count \ncommand. The behavior of the  count  command differs depending on the options\npassed to it and may or may not provide an accurate count. When no query filter\nis provided, the  count  command provides an estimate using collection\nmetadata. Even when provided with a query filter the  count  command can\nreturn inaccurate results with a sharded cluster if orphaned documents exist or\nif a chunk migration is in progress. The\n MongoDB\\Collection::countDocuments()  method avoids these sharded\ncluster problems entirely. When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). count  command reference in the MongoDB\nmanual MongoDB\\Collection::countDocuments() MongoDB\\Collection::estimatedDocumentCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function count(\n    array|object $filter = [],\n    array $options = []\n): integer"
                }
            ],
            "preview": "Count the number of documents that match the filter criteria.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getIterator",
            "title": "MongoDB\\MapReduceResult::getIterator()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns a  Traversable , which may be used to iterate\nthrough the results of the map-reduce operation. A  Traversable , which may be used to iterate through the\nresults of the map-reduce operation. This example iterates through the results of a map-reduce operation. The output would then resemble: MongoDB\\Collection::mapReduce() IteratorAggregate::getIterator()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getIterator(): Traversable"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$map = new MongoDB\\BSON\\Javascript('function() { emit(this.state, this.pop); }');\n$reduce = new MongoDB\\BSON\\Javascript('function(key, values) { return Array.sum(values) }');\n$out = ['inline' => 1];\n\n$result = $collection->mapReduce($map, $reduce, $out);\n\nforeach ($result as $population) {\n   var_dump($population);\n};"
                },
                {
                    "lang": "none",
                    "value": "object(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AK\"\n   [\"value\"]=>\n   float(544698)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AL\"\n   [\"value\"]=>\n   float(4040587)\n}\nobject(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AR\"\n   [\"value\"]=>\n   float(2350725)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AZ\"\n   [\"value\"]=>\n   float(3665228)\n}"
                }
            ],
            "preview": "Returns a Traversable, which may be used to iterate\nthrough the results of the map-reduce operation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getNamespace",
            "title": "MongoDB\\Model\\IndexInfo::getNamespace()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the index namespace, which is the namespace of the collection\ncontaining the index. The index namespace. The output would then resemble: MongoDB\\Collection::createIndex() MongoDB\\Collection::getNamespace() listIndexes  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getNamespace(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'ns' => 'foo.bar',\n]);\n\necho $info->getNamespace();"
                },
                {
                    "lang": "none",
                    "value": "foo.bar"
                }
            ],
            "preview": "Return the index namespace, which is the namespace of the collection\ncontaining the index.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-listCollections",
            "title": "MongoDB\\Database::listCollections()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns information for all collections in this database. An array specifying the desired options. Name Type Description authorizedCollections boolean A flag that determines which collections are returned based on the user\nprivileges when access control is enabled. For more information, see\nthe  listCollections \ncommand documentation. For servers < 4.0, this option is ignored. comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. filter array|object A query expression to filter the list of collections. You can specify a query expression for collection fields (e.g.\n name ,  options ). maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. A traversable  MongoDB\\Model\\CollectionInfoIterator , which contains\na  MongoDB\\Model\\CollectionInfo  object for each collection in the\ndatabase. The following example lists all of the collections in the  test  database: The output would then resemble: The following example lists all collections whose name starts with  \"rest\" \nin the  test  database: The output would then resemble: MongoDB\\Database::listCollectionNames() listCollections  command\nreference in the MongoDB manual Enumerating Collections \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function listCollections(array $options = []): MongoDB\\Model\\CollectionInfoIterator"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\nforeach ($database->listCollections() as $collectionInfo) {\n    var_dump($collectionInfo);\n}"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(11) \"restaurants\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(5) \"users\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(6) \"restos\"\n  [\"options\"]=>\n  array(0) {\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$collections = $database->listCollections([\n    'filter' => [\n        'name' => new MongoDB\\BSON\\Regex('^rest.*'),\n    ],\n]);\n\nforeach ($collections as $collectionInfo) {\n    var_dump($collectionInfo);\n}"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(11) \"restaurants\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(6) \"restos\"\n  [\"options\"]=>\n  array(0) {\n  }\n}"
                }
            ],
            "preview": "Returns information for all collections in this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getManager",
            "title": "MongoDB\\Database::getManager()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Database . A  MongoDB\\Driver\\Manager  object. MongoDB\\Client::getManager() MongoDB\\Collection::getManager()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getManager(): MongoDB\\Manager"
                }
            ],
            "preview": "Accessor for the\nMongoDB\\Driver\\Manager used by this\nDatabase.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-getInsertedId",
            "title": "MongoDB\\InsertOneResult::getInsertedId()",
            "headings": [
                "Definition",
                "Return Values"
            ],
            "paragraphs": "Return the ID (i.e.  _id  field value) for the inserted document. Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. The ID (i.e.  _id  field value) of the inserted document. If the document had an ID prior to inserting (i.e. the driver did not need to\ngenerate an ID), this will contain its  _id  field value. Any driver-generated\nID will be a  MongoDB\\BSON\\ObjectId \ninstance.",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedId(): mixed"
                }
            ],
            "preview": "Return the ID (i.e. _id field value) for the inserted document.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getInsertedIds",
            "title": "MongoDB\\BulkWriteResult::getInsertedIds()",
            "headings": [
                "Definition",
                "Return Values"
            ],
            "paragraphs": "Return a map of IDs (i.e.  _id  field values) for documents that were\ninserted by all insert operations in the bulk write. Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. A map of IDs (i.e.  _id  field values) for documents that were inserted by all\ninsert operations in the bulk write. The index of each ID in the map corresponds to each document's position in the\nbulk operation. If a document had an ID prior to inserting (i.e. the driver did\nnot generate an ID), the index will contain its  _id  field value. Any\ndriver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance.",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedIds(): array"
                }
            ],
            "preview": "Return a map of IDs (i.e. _id field values) for documents that were\ninserted by all insert operations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-find",
            "title": "MongoDB\\GridFS\\Bucket::find()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds documents from the GridFS bucket's files collection matching the query. The filter criteria that specifies the documents to query. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , queries can\nwrite data to the  _tmp  sub-directory in the  dbPath  directory. allowPartialResults boolean For queries against a sharded collection, returns partial results from\nthe  mongos  if some shards are unavailable instead of\nthrowing an error. batchSize integer The number of documents to return in the first batch. Defaults to\n 101 . A batchSize of  0  means that the cursor will be\nestablished, but no documents will be returned in the first batch. Unlike the previous wire protocol version, a batchSize of  1  for the\n find  command does not close the cursor. collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. cursorType integer Indicates the type of cursor to use.  cursorType  supports the\nfollowing values: MongoDB\\Operation\\Find::NON_TAILABLE  ( default ) MongoDB\\Operation\\Find::TAILABLE hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. limit integer The maximum number of documents to return. If unspecified, then\ndefaults to no limit. A limit of  0  is equivalent to setting no\nlimit. A negative limit is similar to a positive limit but closes the cursor\nafter returning a single batch of results. As such, with a negative\nlimit, if the limited result set does not fit into a single batch, the\nnumber of documents received will be less than the specified limit. By\npassing a negative limit, the client indicates to the server that it\nwill not ask for a subsequent batch via getMore. max array|object The exclusive upper bound for a specific index. maxAwaitTimeMS integer Positive integer denoting the time limit in milliseconds for the server\nto block a getMore operation if no data is available. This option\nshould only be used if cursorType is TAILABLE_AWAIT. maxScan integer Maximum number of documents or index keys to scan when executing the\nquery. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . min array|object The inclusive lower bound for a specific index. modifiers array|object Meta operators  that\nmodify the output or behavior of a query. Use of these operators is\ndeprecated in favor of named options. noCursorTimeout boolean Prevents the server from timing out idle cursors after an inactivity\nperiod (10 minutes). oplogReplay boolean Internal use for replica sets. To use  oplogReplay , you must include\nthe following condition in the filter: The  MongoDB\\BSON\\Timestamp \nclass reference describes how to represent MongoDB's BSON timestamp\ntype with PHP. projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the bucket's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the bucket's read preference. returnKey boolean If true, returns only the index keys in the resulting documents. session MongoDB\\Driver\\Session Client session to associate with the operation. showRecordId boolean Determines whether to return the record identifier for each document.\nIf true, adds a field  $recordId  to the returned documents. skip integer Number of documents to skip. Defaults to  0 . sort array|object The sort specification for the ordering of the results. snapshot boolean Prevents the cursor from returning a document more than once because of\nan intervening write operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the bucket's type map. A  MongoDB\\Driver\\Cursor  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The output would then resemble: MongoDB\\Collection::find() MongoDB\\GridFS\\Bucket::findOne()",
            "code": [
                {
                    "lang": "php",
                    "value": "function find(\n    array|object $filter = [],\n    array $options = []\n): MongoDB\\Driver\\Cursor"
                },
                {
                    "lang": "javascript",
                    "value": "{ ts: { $gte: <timestamp> } }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$bucket->uploadFromStream('b', $stream);\n\n$cursor = $bucket->find(\n    ['length' => ['$lte' => 6]],\n    [\n        'projection' => [\n            'filename' => 1,\n            'length' => 1,\n            '_id' => 0,\n         ],\n         'sort' => ['length' => -1],\n     ]\n);\n\nvar_dump($cursor->toArray());"
                },
                {
                    "lang": "none",
                    "value": "array(1) {\n  [0]=>\n  object(MongoDB\\Model\\BSONDocument)#3015 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"filename\"]=>\n      string(1) \"b\"\n      [\"length\"]=>\n      int(6)\n    }\n  }\n}"
                }
            ],
            "preview": "Finds documents from the GridFS bucket's files collection matching the query.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient__get",
            "title": "MongoDB\\Client::__get()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Selects a database on the server. This  magic method  is\nan alias for the  selectDatabase()  method. The name of the database to select. A  MongoDB\\Database  object. The selected database inherits options such as read preference and type mapping\nfrom the  Client  object. If you wish to override\nany options, use the  MongoDB\\Client::selectDatabase()  method. To select databases whose names contain special characters, such as\n - , use complex syntax, as in  $client->{'that-database'} . Alternatively,  MongoDB\\Client::selectDatabase()  supports\nselecting databases whose names contain special characters. The following example selects the  test  and  another-app  databases: MongoDB\\Client::selectDatabase() MongoDB\\Database::__construct() Property Overloading  in the PHP Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function __get(string $databaseName): MongoDB\\Database"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$test = $client->test;\n$anotherApp = $client->{'another-app'};"
                }
            ],
            "preview": "Selects a database on the server. This magic method is\nan alias for the selectDatabase() method.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-getName",
            "title": "MongoDB\\Model\\DatabaseInfo::getName()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the database name. The database name. The output would then resemble: MongoDB\\Database::getDatabaseName() listDatabases  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new DatabaseInfo(['name' => 'foo']);\n\necho $info->getName();"
                },
                {
                    "lang": "none",
                    "value": "foo"
                }
            ],
            "preview": "Return the database name.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-bulkWrite",
            "title": "MongoDB\\Collection::bulkWrite()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Executes multiple write operations. An array containing the write operations to perform.\n MongoDB\\Collection::bulkWrite()  supports\n deleteMany() ,\n deleteOne() ,\n insertOne() ,\n replaceOne() ,\n updateMany() , and\n updateOne()  operations in the\nfollowing array structure: Arguments correspond to the respective operation methods. However, the\n writeConcern  option is specified as a top-level option to\n MongoDB\\Collection::bulkWrite()  instead of each individual\noperation. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. ordered boolean If  true : when a single write fails, the operation will stop without\nperforming the remaining writes and throw an exception. If  false : when a single write fails, the operation will continue\nwith the remaining writes, if any, and throw an exception. The default is  true . session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\BulkWriteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). In the case of a bulk write, the result may indicate multiple successful write\noperations and/or errors. If the  ordered  option is  true , some\noperations may have succeeded before the first error was encountered and the\nexception thrown. If the  ordered  option is  false , multiple errors may\nhave been encountered. MongoDB\\Collection::deleteMany() MongoDB\\Collection::deleteOne() MongoDB\\Collection::insertMany() MongoDB\\Collection::insertOne() MongoDB\\Collection::replaceOne() MongoDB\\Collection::updateMany() MongoDB\\Collection::updateOne() CRUD Operations",
            "code": [
                {
                    "lang": "php",
                    "value": "function bulkWrite(\n    array $operations,\n    array $options = []\n): MongoDB\\BulkWriteResult"
                },
                {
                    "lang": "php",
                    "value": "[\n    [ 'deleteMany' => [ $filter ] ],\n    [ 'deleteOne'  => [ $filter ] ],\n    [ 'insertOne'  => [ $document ] ],\n    [ 'replaceOne' => [ $filter, $replacement, $options ] ],\n    [ 'updateMany' => [ $filter, $update, $options ] ],\n    [ 'updateOne'  => [ $filter, $update, $options ] ],\n]"
                }
            ],
            "preview": "Executes multiple write operations.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getName",
            "title": "MongoDB\\Model\\CollectionInfo::getName()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the collection name. The collection name. This corresponds to the  name  field returned in the\n listCollections  command reply. The output would then resemble: MongoDB\\Collection::getCollectionName() listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo(['name' => 'foo']);\n\necho $info->getName();"
                },
                {
                    "lang": "none",
                    "value": "foo"
                }
            ],
            "preview": "Return the collection name.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase__get",
            "title": "MongoDB\\Database::__get()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Select a collection within the database. The name of the database to select. A  MongoDB\\Collection  object. The selected collection inherits options such as read preference and type\nmapping from the  Database  object. If you wish to\noverride any options, use the  MongoDB\\Database::selectCollection() \nmethod. To select collections whose names contain special characters, such as\n . , use complex syntax, as in  $database->{'that.database'} . Alternatively,  MongoDB\\Database::selectCollection()  supports\nselecting collections whose names contain special characters. The following example selects the  users  and  system.profile \ncollections from the  test  database: MongoDB\\Database::selectCollection() MongoDB\\Client::selectCollection() Property Overloading  in the PHP Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function __get(string $collectionName): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$users = $db->users;\n$systemProfile = $db->{'system.profile'};"
                }
            ],
            "preview": "Select a collection within the database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDeleteResult-isAcknowledged",
            "title": "MongoDB\\DeleteResult::isAcknowledged()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Return whether the write was acknowledged. A boolean indicating whether the write was acknowledged. MongoDB\\Driver\\WriteResult::isAcknowledged() Write Concern  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isAcknowledged(): boolean"
                }
            ],
            "preview": "Return whether the write was acknowledged.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getReadPreference",
            "title": "MongoDB\\GridFS\\Bucket::getReadPreference()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read preference for this GridFS bucket. A  MongoDB\\Driver\\ReadPreference \nobject. The output would then resemble: Read Preference  in the MongoDB manual MongoDB\\Client::getReadPreference() MongoDB\\Collection::getReadPreference() MongoDB\\Database::getReadPreference()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadPreference(): MongoDB\\Driver\\ReadPreference"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test');\n$bucket = $database->selectGridFSBucket([\n   'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);\n\nvar_dump($bucket->getReadPreference());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadPreference)#3 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}"
                }
            ],
            "preview": "Returns the read preference for this GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-getInsertedCount",
            "title": "MongoDB\\InsertOneResult::getInsertedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were inserted. This method should only be called if the write was acknowledged. The number of documents that were inserted. This should be  1  for an\nacknowledged insert operation. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getInsertedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedCount(): integer"
                }
            ],
            "preview": "Return the number of documents that were inserted.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-rename",
            "title": "MongoDB\\Collection::rename()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Rename the collection. The new name of the collection. The new database name of the collection. If a new database name is not\nspecified, the database of the original collection will be used. If the new\nname specifies a different database, the command copies the collection\nto the new database and drops the source collection. An array specifying the desired options. Name Type Description dropTarget boolean If  true , MongoDB will drop the target before renaming the\ncollection. The default value is  false . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object with the result document of the  renameCollection  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following operation renames the  restaurants  collection in the  test \ndatabase to  places : The output would then resemble: MongoDB\\Database::renameCollection() renameCollection  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function rename(\n    string $toCollectionName,\n    ?string $toDatabaseName = null,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$result = $collection->rename('places');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Rename the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket__construct",
            "title": "MongoDB\\GridFS\\Bucket::__construct()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Constructs a new  Bucket  instance. The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. The name of the database. An array specifying the desired options. Name Type Description bucketName string The bucket name, which will be used as a prefix for the files and\nchunks collections. Defaults to  \"fs\" . chunkSizeBytes integer The chunk size in bytes. Defaults to  261120  (i.e. 255 KiB). disableMD5 boolean Whether to disable automatic MD5 generation when storing files. Defaults to  false . readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for bucket operations. Defaults to the\nmanager's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for bucket operations. Defaults to\nthe manager's read preference. typeMap array Default  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. The library uses the following type map by default: writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for bucket operations. Defaults to the\nmanager's write concern. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. If you construct a Bucket explicitly, the Bucket inherits any options\nfrom the  MongoDB\\Driver\\Manager  object.\nIf you select the Bucket from a  Database  object,\nthe Bucket inherits its options from that object. The output would then resemble: MongoDB\\Database::selectGridFSBucket()",
            "code": [
                {
                    "lang": "php",
                    "value": "function __construct(\n    MongoDB\\Driver\\Manager $manager,\n    string $databaseName,\n    array $options = []\n)"
                },
                {
                    "lang": "php",
                    "value": "[\n    'array' => 'MongoDB\\Model\\BSONArray',\n    'document' => 'MongoDB\\Model\\BSONDocument',\n    'root' => 'MongoDB\\Model\\BSONDocument',\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\nvar_dump($bucket);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\GridFS\\Bucket)#3053 (2) {\n  [\"bucketName\"]=>\n  string(4) \"test\"\n  [\"databaseName\"]=>\n  string(11) \"phplib_test\"\n}"
                }
            ],
            "preview": "Constructs a new Bucket instance.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-rewind",
            "title": "MongoDB\\ChangeStream::rewind()",
            "headings": [
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Rewinds the change stream and attempts to load the first event. This method should be called at the start of change stream iteration. Rewinding the change stream does not guarantee that there will be a\ncurrent event to access. You should still call\n MongoDB\\ChangeStream::valid()  to check for a current event\nat each step of iteration. After initially rewinding the change stream,\n MongoDB\\ChangeStream::next()  should be used to iterate\nfurther. MongoDB\\Driver\\Exception\\LogicException  if this method is called after a call\nto  MongoDB\\ChangeStream::next()  (i.e. the underlying\n MongoDB\\Driver\\Cursor  has already been\nadvanced). MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Iterator::rewind() Tailable Cursor Iteration Change Streams  documentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function rewind(): void"
                }
            ],
            "preview": "Rewinds the change stream and attempts to load the first event.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getIdIndex",
            "title": "MongoDB\\Model\\CollectionInfo::getIdIndex()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns information about the  _id  field index. An array containing information on the  _id  index. This corresponds to the\n idIndex  field returned in the  listCollections  command reply. The output would then resemble: MongoDB\\Database::createCollection() listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getIdIndex(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n  'type' => 'view',\n  'name' => 'foo',\n  'idIndex' => [\n     'v' => 2,\n     'key' => ['_id' => 1],\n     'name' => '_id',\n     'ns' => 'test.foo',\n  ],\n]);\n\nvar_dump($info->getIdIndex());"
                },
                {
                    "lang": "none",
                    "value": "array(4) {\n  [\"v\"]=>\n  int(2)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(3) \"_id\"\n  [\"ns\"]=>\n  string(8) \"test.foo\"\n}"
                }
            ],
            "preview": "Returns information about the _id field index.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getTypeMap",
            "title": "MongoDB\\GridFS\\Bucket::getTypeMap()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the type map for this GridFS bucket. A  type map  array. The output would then resemble: BSON MongoDB\\Client::getTypeMap() MongoDB\\Collection::getTypeMap() MongoDB\\Database::getTypeMap()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getTypeMap(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test');\n$bucket = $database->selectGridFSBucket([\n    'typeMap' => [\n        'root' => 'array',\n        'document' => 'array',\n        'array' => 'array',\n    ],\n]);\n\nvar_dump($bucket->getTypeMap());"
                },
                {
                    "lang": "none",
                    "value": "array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}"
                }
            ],
            "preview": "Returns the type map for this GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getCounts",
            "title": "MongoDB\\MapReduceResult::getCounts()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns count statistics for the map-reduce operation. An array of count statistics for the map-reduce operation. This example reports the count statistics for a map-reduce operation. The output would then resemble: MongoDB\\Collection::mapReduce() mapReduce  command reference in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getCounts(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$map = new MongoDB\\BSON\\Javascript('function() { emit(this.state, this.pop); }');\n$reduce = new MongoDB\\BSON\\Javascript('function(key, values) { return Array.sum(values) }');\n$out = ['inline' => 1];\n\n$result = $collection->mapReduce($map, $reduce, $out);\n\nvar_dump($result->getCounts());"
                },
                {
                    "lang": "none",
                    "value": "array(4) {\n  [\"input\"]=>\n  int(29353)\n  [\"emit\"]=>\n  int(29353)\n  [\"reduce\"]=>\n  int(180)\n  [\"output\"]=>\n  int(51)\n}"
                }
            ],
            "preview": "Returns count statistics for the map-reduce operation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getUpsertedIds",
            "title": "MongoDB\\BulkWriteResult::getUpsertedIds()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return a map of IDs (i.e.  _id  field values) for documents that were\nupserted by all update and replace operations in the bulk write. A map of IDs (i.e.  _id  field values) for documents that were upserted by all\nupdate and replace operations in the bulk write. The index of each ID in the map corresponds to each document's position in the\nbulk operation. If a document had an ID prior to upserting (i.e. the server did\nnot generate an ID), the index will contain its  _id  field value. Any\nserver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getUpsertedIds()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getUpsertedIds(): array"
                }
            ],
            "preview": "Return a map of IDs (i.e. _id field values) for documents that were\nupserted by all update and replace operations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getDeletedCount",
            "title": "MongoDB\\BulkWriteResult::getDeletedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the total number of documents that were deleted by all delete\noperations in the bulk write. This method should only be called if the write was acknowledged. The total number of documents that were deleted by all delete operations in the\nbulk write. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getDeletedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getDeletedCount(): integer"
                }
            ],
            "preview": "Return the total number of documents that were deleted by all delete\noperations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-listCollectionNames",
            "title": "MongoDB\\Database::listCollectionNames()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns names for all collections in this database. An array specifying the desired options. Name Type Description authorizedCollections boolean A flag that determines which collections are returned based on the user\nprivileges when access control is enabled. For more information, see\nthe  listCollections \ncommand documentation. For servers < 4.0, this option is ignored. comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. filter array|object A query expression to filter the list of collections. You can specify a query expression for collection fields (e.g.\n name ,  options ). maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. An  Iterator , which provides the name of each\ncollection in the database. The following example lists all of the collections in the  test  database: The output would then resemble: The following example lists all collections whose name starts with  \"rest\" \nin the  test  database: The output would then resemble: When enumerating collection names, a filter expression can only filter based\non a collection's name and type. No other fields are available. MongoDB\\Database::listCollections() listCollections  command\nreference in the MongoDB manual Enumerating Collections \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function listCollectionNames(array $options = []): Iterator"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\nforeach ($database->listCollectionNames() as $collectionName) {\n    var_dump($collectionName);\n}"
                },
                {
                    "lang": "none",
                    "value": "string(11) \"restaurants\"\nstring(5) \"users\"\nstring(6) \"restos\""
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$collections = $database->listCollectionNames([\n    'filter' => [\n        'name' => new MongoDB\\BSON\\Regex('^rest.*'),\n    ],\n]);\n\nforeach ($collections as $collectionName) {\n    var_dump($collectionName);\n}"
                },
                {
                    "lang": "none",
                    "value": "string(11) \"restaurants\"\nstring(6) \"restos\""
                }
            ],
            "preview": "Returns names for all collections in this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-dropIndex",
            "title": "MongoDB\\Collection::dropIndex()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop an index from the collection. The name or model object of the index to drop. View the existing indexes on\nthe collection using the  listIndexes()  method. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object with the result document of the  dropIndexes  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following drops an indexes with name  borough_1  from the  restaurants \ncollection in the  test  database: The output would then resemble: MongoDB\\Collection::dropIndexes() Indexes dropIndexes  command reference in\nthe MongoDB manual Index documentation  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function dropIndex(\n    string|MongoDB\\Model\\IndexInfo $indexName,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$result = $collection->dropIndex('borough_1');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"nIndexesWas\"]=>\n    int(2)\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop an index from the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndUpdate",
            "title": "MongoDB\\Collection::findOneAndUpdate()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds a single document matching the query and updates it. The filter criteria that specifies the documents to update. Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB's  update operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . arrayFilters array An array of filter documents that determines which array elements to\nmodify for an update operation on an array field. collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. returnDocument integer Specifies whether to return the document before the update is applied,\nor after.  returnDocument  supports the following values: MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE  ( default ) MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER session MongoDB\\Driver\\Session Client session to associate with the operation. sort array|object The sort specification for the ordering of the results. typeMap array This will be used for the returned result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. upsert boolean If set to  true , creates a new document when no document matches the\nquery criteria. The default value is  false , which does not insert a\nnew document when no match is found. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object for either the original or the updated document, depending on\nthe specified value of the  returnDocument  option. By default, the original\ndocument is returned. If no document matched the query,  null  is returned.\nThe return type will depend on the  typeMap  option. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The following operation updates the restaurant with  restaurant_id  of\n \"40361708\"  in the  restaurants  collection in the  test  database by\nsetting its building number to  \"761\" : The output would then resemble: MongoDB\\Collection::findOneAndDelete() MongoDB\\Collection::findOneAndReplace() findAndModify  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function findOneAndUpdate(\n    array|object $filter,\n    array|object $update,\n    array $options = []\n): object|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$updatedRestaurant = $collection->findOneAndUpdate(\n    [ 'restaurant_id' => '40361708' ],\n    [ '$set' => [ 'address.building' => '761' ]],\n    [\n        'projection' => [ 'address' => 1 ],\n        'returnDocument' => MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER,\n    ]\n);\n\nvar_dump($updatedRestaurant);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#20 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef280a846852a4b3dee\"\n    }\n    [\"address\"]=>\n    object(MongoDB\\Model\\BSONDocument)#19 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(4) {\n        [\"building\"]=>\n        string(3) \"761\"\n        [\"coord\"]=>\n        object(MongoDB\\Model\\BSONArray)#18 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(2) {\n            [0]=>\n            float(-73.9925306)\n            [1]=>\n            float(40.7309346)\n          }\n        }\n        [\"street\"]=>\n        string(8) \"Broadway\"\n        [\"zipcode\"]=>\n        string(5) \"10003\"\n      }\n    }\n  }\n}"
                }
            ],
            "preview": "Finds a single document matching the query and updates it.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-getInsertedIds",
            "title": "MongoDB\\InsertManyResult::getInsertedIds()",
            "headings": [
                "Definition",
                "Return Values"
            ],
            "paragraphs": "Return a map of IDs (i.e.  _id  field values) for the inserted documents. Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. A map of IDs (i.e.  _id  field values) for the inserted documents. The index of each ID in the map corresponds to each document's position in the\nbulk operation. If a document had an ID prior to inserting (i.e. the driver did\nnot generate an ID), the index will contain its  _id  field value. Any\ndriver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance.",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedIds(): array"
                }
            ],
            "preview": "Return a map of IDs (i.e. _id field values) for the inserted documents.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFileIdForStream",
            "title": "MongoDB\\GridFS\\Bucket::getFileIdForStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Gets the file document's ID of the GridFS file associated with a stream. The GridFS stream resource. The  _id  field of the metadata document associated with the GridFS stream.\nThe return type will depend on the bucket's  typeMap  option. MongoDB\\GridFS\\Exception\\CorruptFileException  if the file's\nmetadata or chunk documents contain unexpected or invalid data. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::getFileDocumentForStream()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getFileIdForStream(resource $stream): mixed"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openUploadStream('filename');\n\n$id = $bucket->getFileIdForStream($stream);\n\nvar_dump($id);\n\nfclose($stream);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\BSON\\ObjectId)#3005 (1) {\n  [\"oid\"]=>\n  string(24) \"5acfb37d7e21e83cdb3e1583\"\n}"
                }
            ],
            "preview": "Gets the file document's ID of the GridFS file associated with a stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getReadConcern",
            "title": "MongoDB\\GridFS\\Bucket::getReadConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read concern for this GridFS bucket. A  MongoDB\\Driver\\ReadConcern  object. The output would then resemble: Read Concern  in the MongoDB manual MongoDB\\Driver\\ReadConcern::isDefault() MongoDB\\Client::getReadConcern() MongoDB\\Collection::getReadConcern() MongoDB\\Database::getReadConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadConcern(): MongoDB\\Driver\\ReadConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test');\n$bucket = $database->selectGridFSBucket([\n   'readConcern' => new MongoDB\\Driver\\ReadConcern('majority'),\n]);\n\nvar_dump($bucket->getReadConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadConcern)#3 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}"
                }
            ],
            "preview": "Returns the read concern for this GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-getTypeMap",
            "title": "MongoDB\\Client::getTypeMap()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the type map for this client. A  type map  array. The output would then resemble: BSON MongoDB\\Collection::getTypeMap() MongoDB\\Database::getTypeMap() MongoDB\\GridFS\\Bucket::getTypeMap()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getTypeMap(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://127.0.0.1/', [], [\n    'typeMap' => [\n        'root' => 'array',\n        'document' => 'array',\n        'array' => 'array',\n    ],\n]);\n\nvar_dump($client->getTypeMap());"
                },
                {
                    "lang": "none",
                    "value": "array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}"
                }
            ],
            "preview": "Returns the type map for this client.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-watch",
            "title": "MongoDB\\Database::watch()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Executes a  change stream  operation on the\ndatabase. The change stream can be watched for database-level changes. The pipeline of stages to append to an initial  $changeStream  stage. An array specifying the desired options. Name Type Description batchSize integer Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. fullDocument string Determines how the  fullDocument  response field will be populated for\nupdate operations. By default, change streams only return the delta of fields (via an\n updateDescription  field) for update operations and  fullDocument  is\nomitted. Insert and replace operations always include the  fullDocument \nfield. Delete operations omit the field as the document no longer exists. Specify \"updateLookup\" to return the current majority-committed version of the\nupdated document. MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the post-image if available or a null value if not.\nSpecify \"required\" to return the post-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED This is an option of the  $changeStream  pipeline stage. fullDocumentBeforeChange string Determines how the  fullDocumentBeforeChange  response field will be\npopulated. By default, the field is omitted. MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the pre-image if available or a null value if not.\nSpecify \"required\" to return the pre-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED This is an option of the  $changeStream  pipeline stage. maxAwaitTimeMS integer Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the database's read concern. readPreference MongoDB\\Driver\\ReadPreference This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. Read preference  to use for the\noperation. Defaults to the database's read preference. resumeAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is an option of the  $changeStream  pipeline stage. session MongoDB\\Driver\\Session Client session to associate with the operation. showExpandedEvents boolean If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. createIndexes dropIndexes modify create shardCollection reshardCollection  (server 6.1+) refineCollectionShardKey  (server 6.1+) This is an option of the  $changeStream  pipeline stage. startAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\"invalidate\" event. Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. startAtOperationTime MongoDB\\BSON\\TimestampInterface If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). This example reports events while iterating a change stream. Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: MongoDB\\Collection::watch() MongoDB\\Client::watch() Aggregation Pipeline  documentation in\nthe MongoDB Manual Change Streams  documentation in the MongoDB manual Change Events  documentation in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function watch(\n    array $pipeline = [],\n    array $options = []\n): MongoDB\\ChangeStream"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$database = (new MongoDB\\Client($uri))->test;\n\n$changeStream = $database->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    if ($event['operationType'] === 'invalidate') {\n        break;\n    }\n\n    $ns = sprintf('%s.%s', $event['ns']['db'], $event['ns']['coll']);\n    $id = json_encode($event['documentKey']['_id']);\n\n    switch ($event['operationType']) {\n        case 'delete':\n            printf(\"Deleted document in %s with _id: %s\\n\\n\", $ns, $id);\n            break;\n\n        case 'insert':\n            printf(\"Inserted new document in %s\\n\", $ns);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'replace':\n            printf(\"Replaced new document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'update':\n            printf(\"Updated document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['updateDescription']), \"\\n\\n\";\n            break;\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "Inserted new document in test.inventory\n{\"_id\":{\"$oid\":\"5a81fc0d6118fd1af1790d32\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n{\"updatedFields\":{\"quantity\":4},\"removedFields\":[]}\n\nDeleted document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}"
                }
            ],
            "preview": "Executes a change stream operation on the\ndatabase. The change stream can be watched for database-level changes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getUpsertedId",
            "title": "MongoDB\\UpdateResult::getUpsertedId()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the ID (i.e.  _id  field value) of the upserted document. The ID (i.e.  _id  field value) of the upserted document. If no document was\nupserted,  null  will be returned. If the document had an ID prior to upserting (i.e. the server did not need to\ngenerate an ID), this will contain its  _id  field value. Any server-generated\nID will be a  MongoDB\\BSON\\ObjectId \ninstance. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getUpsertedIds()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getUpsertedId(): mixed|null"
                }
            ],
            "preview": "Return the ID (i.e. _id field value) of the upserted document.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getName",
            "title": "MongoDB\\Model\\IndexInfo::getName()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the index name. This correlates with the return value of\n MongoDB\\Collection::createIndex() . An index name may be derived\nfrom the  $key  parameter or explicitly specified via the  name  option. The index name. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'name' => 'x_1',\n]);\n\necho $info->getName();"
                },
                {
                    "lang": "none",
                    "value": "x_1"
                }
            ],
            "preview": "Return the index name. This correlates with the return value of\nMongoDB\\Collection::createIndex(). An index name may be derived\nfrom the $key parameter or explicitly specified via the name option.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-dropDatabase",
            "title": "MongoDB\\Client::dropDatabase()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop a database on the server. The name of the database to drop. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the client's write concern. An array or object with the result document of the  dropDatabase  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example drops the  test  database: The output would then resemble: MongoDB\\Database::drop() dropDatabase  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function dropDatabase(string $databaseName, array $options = []): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\n$result = $client->dropDatabase('test');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"dropped\"]=>\n    string(4) \"test\"\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop a database on the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndReplace",
            "title": "MongoDB\\Collection::findOneAndReplace()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds a single document matching the query and replaces it. The filter criteria that specifies the documents to replace. The replacement document. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. returnDocument integer Specifies whether to return the document before the replacement is\napplied, or after.  returnDocument  supports the following values: MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE  ( default ) MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER session MongoDB\\Driver\\Session Client session to associate with the operation. sort array|object The sort specification for the ordering of the results. typeMap array This will be used for the returned result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. upsert boolean If set to  true , creates a new document when no document matches the\nquery criteria. The default value is  false , which does not insert a\nnew document when no match is found. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array object for either the original or the replaced document, depending on\nthe specified value of the  returnDocument  option. By default, the original\ndocument is returned. If no document matched the query,  null  is returned.\nThe return type will depend on the  typeMap  option. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). Consider the following document in the  restaurants  collection in the\n test  database: The following operation replaces the document with  restaurant_id  of\n \"41220906\"  with a new document: The output would then resemble: MongoDB\\Collection::findOneAndDelete() MongoDB\\Collection::findOneAndUpdate() findAndModify  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function findOneAndReplace(\n    array|object $filter,\n    array|object $replacement,\n    array $options = []\n): object|null"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  \"_id\" : ObjectId(\"576023c7b02fa9281da4139e\"),\n  \"address\" : {\n    \"building\" : \"977\",\n    \"coord\" : [\n      -74.06940569999999,\n      40.6188443\n    ],\n    \"street\" : \"Bay Street\",\n    \"zipcode\" : \"10305\"\n  },\n  \"borough\" : \"Staten Island\",\n  \"cuisine\" : \"French\",\n  \"grades\" : [\n    {\n      \"date\" : ISODate(\"2014-08-15T00:00:00Z\"),\n      \"grade\" : \"A\",\n      \"score\" : 7\n    },\n    {\n      \"date\" : ISODate(\"2014-02-13T00:00:00Z\"),\n      \"grade\" : \"A\",\n      \"score\" : 5\n    },\n    {\n      \"date\" : ISODate(\"2013-06-07T00:00:00Z\"),\n      \"grade\" : \"A\",\n      \"score\" : 11\n    }\n  ],\n  \"name\" : \"Zest\",\n  \"restaurant_id\" : \"41220906\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->teset->restaurants;\n\n$replacedRestaurant = $collection->findOneAndReplace(\n    [ 'restaurant_id' => '41220906' ],\n    [\n        'Borough' => 'Staten Island',\n        'cuisine' => 'Italian',\n        'grades' => [],\n        'name' => 'Staten Island Pastaria',\n        'restaurant_id' => '999999999',\n    ],\n    [ 'returnDocument' => MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER ]\n);\n\nvar_dump($replacedRestaurant);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#18 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(6) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#11 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef380a846852a4b5837\"\n    }\n    [\"Borough\"]=>\n    string(13) \"Staten Island\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"grades\"]=>\n    object(MongoDB\\Model\\BSONArray)#17 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(0) {\n      }\n    }\n    [\"name\"]=>\n    string(22) \"Staten Island Pastaria\"\n    [\"restaurant_id\"]=>\n    string(9) \"999999999\"\n  }\n}"
                }
            ],
            "preview": "Finds a single document matching the query and replaces it.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-getWriteConcern",
            "title": "MongoDB\\Client::getWriteConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the write concern for this client. A  MongoDB\\Driver\\WriteConcern \nobject. The output would then resemble: Write Concern  in the MongoDB manual MongoDB\\Driver\\WriteConcern::isDefault() MongoDB\\Collection::getWriteConcern() MongoDB\\Database::getWriteConcern() MongoDB\\GridFS\\Bucket::getWriteConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getWriteConcern(): MongoDB\\Driver\\WriteConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://127.0.0.1/', [\n    'journal' => true,\n]);\n\nvar_dump($client->getWriteConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\WriteConcern)#4 (1) {\n  [\"j\"]=>\n  bool(true)\n}"
                }
            ],
            "preview": "Returns the write concern for this client.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getUpsertedCount",
            "title": "MongoDB\\UpdateResult::getUpsertedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were upserted. This method should only be called if the write was acknowledged. The total number of documents that were upserted. This should be either  0  or\n 1  for an acknowledged update or replace operation, depending on whether an\nupsert occurred. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getUpsertedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getUpsertedCount(): integer"
                }
            ],
            "preview": "Return the number of documents that were upserted.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-next",
            "title": "MongoDB\\ChangeStream::next()",
            "headings": [
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Advances the change stream and attempts to load the next event. Advancing the change stream does not guarantee that there will be a\ncurrent event to access. You should still call\n MongoDB\\ChangeStream::valid()  to check for a current event\nat each step of iteration. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Iterator::next() Tailable Cursor Iteration Change Streams  documentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function next(): void"
                }
            ],
            "preview": "Advances the change stream and attempts to load the next event.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-insertOne",
            "title": "MongoDB\\Collection::insertOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Insert one document. The document to insert into the collection. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\InsertOneResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following operation inserts a document into the  users  collection in the\n test  database: The output would then resemble: MongoDB\\Collection::insertMany() MongoDB\\Collection::bulkWrite() CRUD Operations insert  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function insertOne(\n    array|object $document,\n    array $options = []\n): MongoDB\\InsertOneResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n\n$insertOneResult = $collection->insertOne([\n    'username' => 'admin',\n    'email' => 'admin@example.com',\n    'name' => 'Admin User',\n]);\n\nprintf(\"Inserted %d document(s)\\n\", $insertOneResult->getInsertedCount());\n\nvar_dump($insertOneResult->getInsertedId());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 1 document(s)\nobject(MongoDB\\BSON\\ObjectId)#11 (1) {\n  [\"oid\"]=>\n  string(24) \"579a25921f417dd1e5518141\"\n}"
                }
            ],
            "preview": "Insert one document.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-estimatedDocumentCount",
            "title": "MongoDB\\Collection::estimatedDocumentCount()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Gets an estimated number of documents in the collection using collection metadata. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. An estimated number of documents in the collection. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). This method returns an estimate of the count of documents in the collection\nusing collection metadata, rather than counting the documents or consulting an\nindex. This method does not take a  session  option and cannot be executed\nwithin a transaction. See\n Count: Behavior \nin the MongoDB manual for more information. This method is implemented using the  count \ncommand. Due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the  count \ncommand was not included in version \"1\" of the Stable API. Applications using\nthis method with the Stable API are recommended to upgrade their server version\nto 5.0.9+ or disable strict mode to avoid encountering errors. count  command reference in the MongoDB\nmanual MongoDB\\Collection::countDocuments()",
            "code": [
                {
                    "lang": "php",
                    "value": "function countDocuments(array $options = []): integer"
                }
            ],
            "preview": "Gets an estimated number of documents in the collection using collection metadata.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-distinct",
            "title": "MongoDB\\Collection::distinct()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Return Distinct Values for a Field",
                "Return Distinct Values Using a Filter",
                "See Also"
            ],
            "paragraphs": "Finds the distinct values for a specified field across the collection. The field for which to return distinct values. The filter criteria that specifies the documents from which to retrieve the\ndistinct values. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. An array of the distinct values. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The following example identifies the distinct values for the  borough  field\nin the  restaurants  collection in the  test  database. The output would then resemble: The following example identifies the distinct values for the  cuisine  field\nin the  restaurants  collection in the  test  database for documents where\nthe  borough  is  Queens : The output would then resemble: distinct  command reference in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function distinct(\n    string $fieldName,\n    array|object $filter = [],\n    array $options = []\n): mixed[]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$distinct = $collection->distinct('borough');\n\nvar_dump($distinct);"
                },
                {
                    "lang": "none",
                    "value": "array(6) {\n  [0]=>\n  string(5) \"Bronx\"\n  [1]=>\n  string(8) \"Brooklyn\"\n  [2]=>\n  string(9) \"Manhattan\"\n  [3]=>\n  string(7) \"Missing\"\n  [4]=>\n  string(6) \"Queens\"\n  [5]=>\n  string(13) \"Staten Island\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$distinct = $collection->distinct('cuisine', ['borough' => 'Queens']);\n\nvar_dump($distinct);"
                },
                {
                    "lang": "none",
                    "value": "array(75) {\n  [0]=>\n  string(6) \"Afghan\"\n  [1]=>\n  string(7) \"African\"\n  [2]=>\n  string(9) \"American \"\n  [3]=>\n  string(8) \"Armenian\"\n  [4]=>\n  string(5) \"Asian\"\n  [5]=>\n  string(10) \"Australian\"\n  [6]=>\n  string(15) \"Bagels/Pretzels\"\n  [7]=>\n  string(6) \"Bakery\"\n  [8]=>\n  string(11) \"Bangladeshi\"\n  [9]=>\n  string(8) \"Barbecue\"\n  [10]=>\n  string(55) \"Bottled beverages, including water, sodas, juices, etc.\"\n  [11]=>\n  string(9) \"Brazilian\"\n  [12]=>\n  string(4) \"Cafe\"\n  [13]=>\n  string(16) \"Caf\u00e9/Coffee/Tea\"\n  [14]=>\n  string(5) \"Cajun\"\n  [15]=>\n  string(9) \"Caribbean\"\n  [16]=>\n  string(7) \"Chicken\"\n  [17]=>\n  string(7) \"Chinese\"\n  [18]=>\n  string(13) \"Chinese/Cuban\"\n  [19]=>\n  string(16) \"Chinese/Japanese\"\n  [20]=>\n  string(11) \"Continental\"\n  [21]=>\n  string(6) \"Creole\"\n  [22]=>\n  string(5) \"Czech\"\n  [23]=>\n  string(12) \"Delicatessen\"\n  [24]=>\n  string(6) \"Donuts\"\n  [25]=>\n  string(16) \"Eastern European\"\n  [26]=>\n  string(8) \"Egyptian\"\n  [27]=>\n  string(7) \"English\"\n  [28]=>\n  string(8) \"Filipino\"\n  [29]=>\n  string(6) \"French\"\n  [30]=>\n  string(17) \"Fruits/Vegetables\"\n  [31]=>\n  string(6) \"German\"\n  [32]=>\n  string(5) \"Greek\"\n  [33]=>\n  string(10) \"Hamburgers\"\n  [34]=>\n  string(16) \"Hotdogs/Pretzels\"\n  [35]=>\n  string(31) \"Ice Cream, Gelato, Yogurt, Ices\"\n  [36]=>\n  string(6) \"Indian\"\n  [37]=>\n  string(10) \"Indonesian\"\n  [38]=>\n  string(5) \"Irish\"\n  [39]=>\n  string(7) \"Italian\"\n  [40]=>\n  string(8) \"Japanese\"\n  [41]=>\n  string(13) \"Jewish/Kosher\"\n  [42]=>\n  string(30) \"Juice, Smoothies, Fruit Salads\"\n  [43]=>\n  string(6) \"Korean\"\n  [44]=>\n  string(64) \"Latin (Cuban, Dominican, Puerto Rican, South & Central American)\"\n  [45]=>\n  string(13) \"Mediterranean\"\n  [46]=>\n  string(7) \"Mexican\"\n  [47]=>\n  string(14) \"Middle Eastern\"\n  [48]=>\n  string(8) \"Moroccan\"\n  [49]=>\n  string(25) \"Not Listed/Not Applicable\"\n  [50]=>\n  string(18) \"Nuts/Confectionary\"\n  [51]=>\n  string(5) \"Other\"\n  [52]=>\n  string(9) \"Pakistani\"\n  [53]=>\n  string(16) \"Pancakes/Waffles\"\n  [54]=>\n  string(8) \"Peruvian\"\n  [55]=>\n  string(5) \"Pizza\"\n  [56]=>\n  string(13) \"Pizza/Italian\"\n  [57]=>\n  string(6) \"Polish\"\n  [58]=>\n  string(10) \"Portuguese\"\n  [59]=>\n  string(7) \"Russian\"\n  [60]=>\n  string(6) \"Salads\"\n  [61]=>\n  string(10) \"Sandwiches\"\n  [62]=>\n  string(30) \"Sandwiches/Salads/Mixed Buffet\"\n  [63]=>\n  string(7) \"Seafood\"\n  [64]=>\n  string(9) \"Soul Food\"\n  [65]=>\n  string(18) \"Soups & Sandwiches\"\n  [66]=>\n  string(12) \"Southwestern\"\n  [67]=>\n  string(7) \"Spanish\"\n  [68]=>\n  string(5) \"Steak\"\n  [69]=>\n  string(5) \"Tapas\"\n  [70]=>\n  string(7) \"Tex-Mex\"\n  [71]=>\n  string(4) \"Thai\"\n  [72]=>\n  string(7) \"Turkish\"\n  [73]=>\n  string(10) \"Vegetarian\"\n  [74]=>\n  string(29) \"Vietnamese/Cambodian/Malaysia\"\n}"
                }
            ],
            "preview": "Finds the distinct values for a specified field across the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getChunkSizeBytes",
            "title": "MongoDB\\GridFS\\Bucket::getChunkSizeBytes()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples"
            ],
            "paragraphs": "Returns the chunk size of this bucket in bytes. The chunk size of this bucket in bytes. The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getChunkSizeBytes(): integer"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\nvar_dump($bucket->getChunkSizeBytes());"
                },
                {
                    "lang": "none",
                    "value": "int(261120)"
                }
            ],
            "preview": "Returns the chunk size of this bucket in bytes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getCappedMax",
            "title": "MongoDB\\Model\\CollectionInfo::getCappedMax()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the document limit for the capped collection. This correlates with the\n max  option for  MongoDB\\Database::createCollection() . The document limit for the capped collection. If the collection is not capped,\n null  will be returned. This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n max  key. The output would then resemble: MongoDB\\Model\\CollectionInfo::getCappedSize() MongoDB\\Model\\CollectionInfo::isCapped() MongoDB\\Database::createCollection() Capped Collections  in the MongoDB manual listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getCappedMax(): integer|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n    'name' => 'foo',\n    'options' => [\n        'capped' => true,\n        'size' => 1048576,\n        'max' => 100,\n    ]\n]);\n\nvar_dump($info->getCappedMax());"
                },
                {
                    "lang": "none",
                    "value": "int(100)"
                }
            ],
            "preview": "Return the document limit for the capped collection. This correlates with the\nmax option for MongoDB\\Database::createCollection().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-insertMany",
            "title": "MongoDB\\Collection::insertMany()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Insert multiple documents. The documents to insert into the collection. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. ordered boolean If  true : when a single write fails, the operation will stop without\nperforming the remaining writes and throw an exception. If  false : when a single write fails, the operation will continue\nwith the remaining writes, if any, and throw an exception. The default is  true . session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\InsertManyResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). In the case of a bulk write, the result may indicate multiple successful write\noperations and/or errors. If the  ordered  option is  true , some\noperations may have succeeded before the first error was encountered and the\nexception thrown. If the  ordered  option is  false , multiple errors may\nhave been encountered. The following operation inserts two documents into the  users  collection\nin the  test  database: The output would then resemble: MongoDB\\Collection::insertOne() MongoDB\\Collection::bulkWrite() CRUD Operations insert  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function insertMany(\n    array $documents,\n    array $options = []\n): MongoDB\\InsertManyResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n\n$insertManyResult = $collection->insertMany([\n    [\n        'username' => 'admin',\n        'email' => 'admin@example.com',\n        'name' => 'Admin User',\n    ],\n    [\n        'username' => 'test',\n        'email' => 'test@example.com',\n        'name' => 'Test User',\n    ],\n]);\n\nprintf(\"Inserted %d document(s)\\n\", $insertManyResult->getInsertedCount());\n\nvar_dump($insertManyResult->getInsertedIds());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 2 document(s)\narray(2) {\n  [0]=>\n  object(MongoDB\\BSON\\ObjectId)#11 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518141\"\n  }\n  [1]=>\n  object(MongoDB\\BSON\\ObjectId)#12 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518142\"\n  }\n}"
                }
            ],
            "preview": "Insert multiple documents.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isUnique",
            "title": "MongoDB\\Model\\IndexInfo::isUnique()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  unique index .\nThis correlates with the  unique  option for\n MongoDB\\Collection::createIndex() . A boolean indicating whether the index is a unique index. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual Unique Indexes  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isUnique(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'unique' => true,\n]);\n\nvar_dump($info->isUnique());"
                },
                {
                    "lang": "none",
                    "value": "bool(true)"
                }
            ],
            "preview": "Return whether the index is a unique index.\nThis correlates with the unique option for\nMongoDB\\Collection::createIndex().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-findOne",
            "title": "MongoDB\\Collection::findOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Matching BSON Types in Query Criteria",
                "Projecting Fields",
                "See Also"
            ],
            "paragraphs": "Finds a single document matching the query. The filter criteria that specifies the documents to query. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , queries can\nwrite data to the  _tmp  sub-directory in the  dbPath  directory. allowPartialResults boolean For queries against a sharded collection, returns partial results from\nthe  mongos  if some shards are unavailable instead of\nthrowing an error. collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. max array|object The exclusive upper bound for a specific index. maxScan integer Maximum number of documents or index keys to scan when executing the\nquery. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . min array|object The inclusive lower bound for a specific index. modifiers array|object Meta operators  that\nmodify the output or behavior of a query. Use of these operators is\ndeprecated in favor of named options. oplogReplay boolean Internal use for replica sets. To use  oplogReplay , you must include\nthe following condition in the filter: The  MongoDB\\BSON\\Timestamp \nclass reference describes how to represent MongoDB's BSON timestamp\ntype with PHP. projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. returnKey boolean If true, returns only the index keys in the resulting documents. session MongoDB\\Driver\\Session Client session to associate with the operation. showRecordId boolean Determines whether to return the record identifier for each document.\nIf true, adds a field  $recordId  to the returned documents. skip integer Number of documents to skip. Defaults to  0 . sort array|object The sort specification for the ordering of the results. typeMap array This will be used for the returned result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. An array or object for the  first document  that matched\nthe query, or  null  if no document matched the query. The return type will\ndepend on the  typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). In the following example, documents in the  restaurants  collection use an\n ObjectId  for their identifier (the default)\nand documents in the  zips  collection use a string. Since ObjectId is a\nspecial BSON type, the query criteria for selecting a restaurant must use the\n MongoDB\\BSON\\ObjectId  class. The following example finds a restaurant based on the  cuisine  and\n borough  fields and uses a  projection  to limit the fields that are\nreturned. The output would then resemble: MongoDB\\Collection::find() find  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function findOne(\n    array|object $filter = [],\n    array $options = []\n): array|object|null"
                },
                {
                    "lang": "javascript",
                    "value": "{ ts: { $gte: <timestamp> } }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$zip = $database->zips->findOne(['_id' => '10036']);\n\n$restaurant = $database->restaurants->findOne([\n    '_id' => new MongoDB\\BSON\\ObjectId('594d5ef280a846852a4b3f70'),\n]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$restaurant = $collection->findOne(\n    [\n        'cuisine' => 'Italian',\n        'borough' => 'Manhattan',\n    ],\n    [\n        'projection' => [\n            'name' => 1,\n            'borough' => 1,\n            'cuisine' => 1,\n        ],\n    ]\n);\n\nvar_dump($restaurant);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}"
                }
            ],
            "preview": "Finds a single document matching the query.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-updateOne",
            "title": "MongoDB\\Collection::updateOne()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Update at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be updated. The filter criteria that specifies the documents to update. Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB's  update operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. An array specifying the desired options. Name Type Description arrayFilters array An array of filter documents that determines which array elements to modify\nfor an update operation on an array field. bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.2 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. session MongoDB\\Driver\\Session Client session to associate with the operation. upsert boolean If set to  true , creates a new document when no document matches the\nquery criteria. The default value is  false , which does not insert a\nnew document when no match is found. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following example updates one document with the  restaurant_id  of\n \"40356151\"  by setting the  name  field to  \"Brunos on Astoria\" : The output would then resemble: MongoDB\\Collection::replaceOne() MongoDB\\Collection::updateMany() MongoDB\\Collection::bulkWrite() CRUD Operations update  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function updateOne(\n    array|object $filter,\n    array|object $update,\n    array $options = []\n): MongoDB\\UpdateResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$updateResult = $collection->updateOne(\n    [ 'restaurant_id' => '40356151' ],\n    [ '$set' => [ 'name' => 'Brunos on Astoria' ]]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 1 document(s)\nModified 1 document(s)"
                }
            ],
            "preview": "Update at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the first\nmatching document will be updated.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openUploadStream",
            "title": "MongoDB\\GridFS\\Bucket::openUploadStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Opens a writable stream for a new GridFS file. The  filename  of the file to create. An array specifying the desired options. Name Type Description _id mixed Value to use as the file document identifier. Defaults to a new\n MongoDB\\BSON\\ObjectId  object. chunkSizeBytes integer The chunk size in bytes. Defaults to the bucket's  chunkSizeBytes \noption. disableMD5 boolean Whether to disable automatic MD5 generation when storing files. Defaults to  false . metadata array|object User data for the  metadata  field of the file document. If not\nspecified, the  metadata  field will not be set on the file document. A writable stream resource. Chunk documents will be created as data is written to the writable stream. The\nmetadata document will be created when the writable stream is closed. The output would then resemble: MongoDB\\GridFS\\Bucket::uploadFromStream()",
            "code": [
                {
                    "lang": "php",
                    "value": "function openUploadStream(\n    string $filename,\n    array $options = []\n): resource"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$uploadStream = $bucket->openUploadStream('filename');\nfwrite($uploadStream, 'foobar');\nfclose($uploadStream);\n\n$downloadStream = $bucket->openDownloadStreamByName('filename');\nvar_dump(stream_get_contents($downloadStream));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Opens a writable stream for a new GridFS file.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-dropIndexes",
            "title": "MongoDB\\Collection::dropIndexes()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop all indexes in the collection, except for the required index on the\n _id  field. The name or model object of the index to drop. View the existing indexes on\nthe collection using the  listIndexes()  method. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . An array or object with the result document of the  dropIndexes  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following drops all indexes from the  restaurants  collection in the\n test  database: The output would then resemble: MongoDB\\Collection::dropIndex() Indexes dropIndexes  command reference in\nthe MongoDB manual Index documentation  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function dropIndexes(array $options = []): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$result = $collection->dropIndexes();\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"nIndexesWas\"]=>\n    int(3)\n    [\"msg\"]=>\n    string(38) \"non-_id indexes dropped for collection\"\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop all indexes in the collection, except for the required index on the\n_id field.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient__construct",
            "title": "MongoDB\\Client::__construct()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Connecting to a Standalone server",
                "Connecting to a Replica Set",
                "Connecting with SSL and Authentication",
                "Specifying a Custom Type Map",
                "See Also"
            ],
            "paragraphs": "Constructs a new  Client  instance. The MongoDB connection string. Refer to\n Connection Strings  in the MongoDB\nmanual for more information. Defaults to  \"mongodb://127.0.0.1:27017\"  if unspecified. Any special characters in the URI components need to be encoded according to\n RFC 3986 . This is particularly\nrelevant to the username and password, which can often include special\ncharacters such as  @ ,  : , or  % . When connecting via a Unix domain\nsocket, the socket path may contain special characters such as slashes and\nmust be encoded. The  rawurlencode()  function may be used\nto encode constituent parts of the URI. Specifies additional URI options, such as authentication credentials or query\nstring parameters. The options specified in  $uriOptions  take precedence\nover any analogous options present in the  $uri  string and do not need to\nbe encoded according to  RFC 3986 . Refer to the  MongoDB\\Driver\\Manager::__construct()  extension documentation for a list of\nsupported options. Specifies options specific to the PHP driver. In addition to driver options\nsupported by the  extension , the library\nadditionally supports specifying a default\n type map \nto apply to the cursors it creates. Name Type Description autoEncryption array Options to configure client-side field-level encryption in the driver.\nRefer to the\n extension documentation \nfor a list of supported encryption options. If a  MongoDB\\Client  is provided for the  keyVaultClient \noption, it will be unwrapped into a\n MongoDB\\Driver\\Manager  for the\nextension. driver array Additional driver metadata to be passed on to the server handshake.\nThis is an array containing  name ,  version , and  platform \nstring fields. For example: This feature is primarily designed for custom drivers and ODMs,\nwhich may want to identify themselves to the server for diagnostic\npurposes. Applications wishing to identify themselves should use the\n appName  URI option instead of this option. serverApi MongoDB\\Driver\\ServerApi Used to declare an API version on the client. Refer to\n Stable API tutorial  for additional\ninformation. typeMap array Default  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. The library uses the following type map by default: allow_invalid_hostname boolean Disables hostname validation if  true . Defaults to  false . Allowing invalid hostnames may expose the driver to a\n man-in-the-middle attack . This option has been deprecated. Use the\n tlsAllowInvalidHostnames  URI option instead. ca_dir string Path to a correctly hashed certificate directory. The system\ncertificate store will be used by default. Falls back to the deprecated  capath  SSL context option if not\nspecified. ca_file string Path to a certificate authority file. The system certificate store will\nbe used by default. Falls back to the deprecated  cafile  SSL context option if not\nspecified. This option has been deprecated. Use the  tlsCAFile  URI option\ninstead. crl_file string Path to a certificate revocation list file. pem_file string Path to a PEM encoded certificate to use for client authentication. Falls back to the deprecated  local_cert  SSL context option if not\nspecified. This option has been deprecated. Use the  tlsCertificateKeyFile \nURI option instead. pem_pwd string Passphrase for the PEM encoded certificate (if applicable). Falls back to the deprecated  passphrase  SSL context option if not\nspecified. This option has been deprecated. Use the\n tlsCertificateKeyFilePassword  URI option instead. weak_cert_validation boolean Disables certificate validation  true . Defaults to  false . Falls back to the deprecated  allow_self_signed  SSL context option\nif not specified. This option has been deprecated. Use the\n tlsAllowInvalidCertificates  URI option instead. context resource SSL context options  to be used as\nfallbacks for other driver options (as specified). Note that the driver\ndoes not consult the default stream context. This option is supported for backwards compatibility, but should be\nconsidered deprecated. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). A  MongoDB\\Driver\\Manager  is constructed\ninternally. Per the  Server Discovery and Monitoring \nspecification,  MongoDB\\Driver\\Manager::__construct()  performs no I/O. Connections will be\ninitialized on demand, when the first operation is executed. If you do not specify a  $uri  value, the driver connects to a standalone\n mongod  on  127.0.0.1  via port  27017 . To connect to a different\nserver, pass the corresponding connection string as the first parameter when\ncreating the  Client  instance: The following example demonstrates how to connect to a replica set with a custom\nread preference: The following example demonstrates how to connect to a MongoDB replica set with\nSSL and authentication, as is used for  MongoDB Atlas : Alternatively, the authentication credentials and URI parameters may be\nspecified in the constructor's  $uriOptions  parameter: The driver supports additional  SSL options ,\nwhich may be specified in the constructor's  $driverOptions  parameter. Those\noptions are covered in the  MongoDB\\Driver\\Manager::__construct()  documentation. By default, the  MongoDB PHP Library  deserializes BSON documents and arrays\nas  MongoDB\\Model\\BSONDocument  and\n MongoDB\\Model\\BSONArray  objects, respectively. The following\nexample demonstrates how to have the library unserialize everything as a PHP\narray, as was done in the legacy  mongo  extension. MongoDB\\Driver\\Manager::__construct() Connection String URI Format  in the\nMongoDB manual Server Discovery and Monitoring \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function __construct(\n    ?string $uri = null,\n    array $uriOptions = [],\n    array $driverOptions = []\n)"
                },
                {
                    "lang": "php",
                    "value": "[\n    'name' => 'my-driver',\n    'version' => '1.2.3-dev',\n    'platform' => 'some-platform',\n]"
                },
                {
                    "lang": "php",
                    "value": "[\n    'array' => 'MongoDB\\Model\\BSONArray',\n    'document' => 'MongoDB\\Model\\BSONDocument',\n    'root' => 'MongoDB\\Model\\BSONDocument',\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://mongodb-deployment:27017');"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet',\n    [\n        'readPreference' => 'secondaryPreferred',\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://myUsername:myPassword@rs1.example.com,rs2.example.com/?ssl=true&replicaSet=myReplicaSet&authSource=admin'\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/'\n    [\n        'username' => 'myUsername',\n        'password' => 'myPassword',\n        'ssl' => true,\n        'replicaSet' => 'myReplicaSet',\n        'authSource' => 'admin',\n    ],\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    null,\n    [],\n    [\n        'typeMap' => [\n            'root' => 'array',\n            'document' => 'array',\n            'array' => 'array',\n        ],\n    ]\n);"
                }
            ],
            "preview": "Constructs a new Client instance.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getDatabaseName",
            "title": "MongoDB\\Database::getDatabaseName()",
            "headings": [
                "Definition",
                "Return Values",
                "Example"
            ],
            "paragraphs": "Returns the name of this database. The name of this database as a string. The following example prints the name of a database object: The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getDatabaseName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\necho $db->getDatabaseName();"
                },
                {
                    "lang": "none",
                    "value": "test"
                }
            ],
            "preview": "Returns the name of this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getMatchedCount",
            "title": "MongoDB\\UpdateResult::getMatchedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were matched. This method should only be called if the write was acknowledged. If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the matched\ncount may be greater than the value returned by\n getModifiedCount() . The number of documents that were matched. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\UpdateResult::getModifiedCount() MongoDB\\Driver\\WriteResult::getMatchedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getMatchedCount(): integer"
                }
            ],
            "preview": "Return the number of documents that were matched.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getTypeMap",
            "title": "MongoDB\\Database::getTypeMap()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the type map for this database. A  type map  array. The output would then resemble: BSON MongoDB\\Client::getTypeMap() MongoDB\\Collection::getTypeMap() MongoDB\\GridFS\\Bucket::getTypeMap()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getTypeMap(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test', [\n    'typeMap' => [\n        'root' => 'array',\n        'document' => 'array',\n        'array' => 'array',\n    ],\n]);\n\nvar_dump($database->getTypeMap());"
                },
                {
                    "lang": "none",
                    "value": "array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}"
                }
            ],
            "preview": "Returns the type map for this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-getCursorId",
            "title": "MongoDB\\ChangeStream::getCursorId()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns the change stream cursor's ID. A  MongoDB\\Driver\\CursorId  object. This example reports the cursor ID for a change stream. The output would then resemble: MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() MongoDB\\Driver\\CursorId MongoDB\\Driver\\Cursor::getId()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getCursorId(): MongoDB\\Driver\\CursorId"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$collection = (new MongoDB\\Client($uri))->test->inventory;\n\n$changeStream = $collection->watch();\n\nvar_dump($changeStream->getCursorId());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\CursorId)#5 (1) {\n  [\"id\"]=>\n  int(8462642181784669708)\n}"
                }
            ],
            "preview": "Returns the change stream cursor's ID.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection__construct",
            "title": "MongoDB\\Collection::__construct()",
            "headings": [
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Constructs a new  Collection  instance. This constructor has the following parameters: The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. The name of the database. The name of the collection. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for collection operations. Defaults to\nthe manager's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for collection operations. Defaults\nto the manager's read preference. typeMap array Default  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. The library uses the following type map by default: writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for collection operations. Defaults\nto the manager's write concern. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. If you construct a Collection explicitly, the Collection inherits any options\nfrom the  MongoDB\\Driver\\Manager  object.\nIf you select the Collection from a  Client  or\n Database  object, the Collection inherits its\noptions from that object. MongoDB\\Collection::withOptions() MongoDB\\Client::selectCollection() MongoDB\\Database::selectCollection() MongoDB\\Database::__get()",
            "code": [
                {
                    "lang": "php",
                    "value": "function __construct(\n    MongoDB\\Driver\\Manager $manager,\n    string $databaseName,\n    string $collectionName,\n    array $options = []\n)"
                },
                {
                    "lang": "php",
                    "value": "[\n    'array' => 'MongoDB\\Model\\BSONArray',\n    'document' => 'MongoDB\\Model\\BSONDocument',\n    'root' => 'MongoDB\\Model\\BSONDocument',\n]"
                }
            ],
            "preview": "Constructs a new Collection instance.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getTypeMap",
            "title": "MongoDB\\Collection::getTypeMap()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the type map for this collection. A  type map  array. The output would then resemble: BSON MongoDB\\Client::getTypeMap() MongoDB\\Database::getTypeMap() MongoDB\\GridFS\\Bucket::getTypeMap()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getTypeMap(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'users', [\n    'typeMap' => [\n        'root' => 'array',\n        'document' => 'array',\n        'array' => 'array',\n    ],\n]);\n\nvar_dump($collection->getTypeMap());"
                },
                {
                    "lang": "none",
                    "value": "array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}"
                }
            ],
            "preview": "Returns the type map for this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getKey",
            "title": "MongoDB\\Model\\IndexInfo::getKey()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the index specification (i.e. indexed field(s) and order). This\ncorrelates with the  $key  parameter for\n MongoDB\\Collection::createIndex() . The index specification as an associative array. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getKey(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'key' => ['x' => 1],\n]);\n\nvar_dump($info->getKey());"
                },
                {
                    "lang": "none",
                    "value": "array(1) {\n  [\"x\"]=>\n  int(1)\n}"
                }
            ],
            "preview": "Return the index specification (i.e. indexed field(s) and order). This\ncorrelates with the $key parameter for\nMongoDB\\Collection::createIndex().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getInfo",
            "title": "MongoDB\\Model\\CollectionInfo::getInfo()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns additional information about the collection. An array containing extra information about the collection. This corresponds to\nthe  info  field returned in the  listCollections  command reply. The output would then resemble: MongoDB\\Database::createCollection() listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInfo(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n  'type' => 'view',\n  'name' => 'foo',\n  'info' => ['readOnly' => true]\n]);\n\nvar_dump($info->getInfo());"
                },
                {
                    "lang": "none",
                    "value": "array(1) {\n  [\"readOnly\"]=>\n  bool(true)\n}"
                }
            ],
            "preview": "Returns additional information about the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDeleteResult-getDeletedCount",
            "title": "MongoDB\\DeleteResult::getDeletedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were deleted. This method should only be called if the write was acknowledged. The number of documents that were deleted. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getDeletedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getDeletedCount(): integer"
                }
            ],
            "preview": "Return the number of documents that were deleted.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isText",
            "title": "MongoDB\\Model\\IndexInfo::isText()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  text  index. A boolean indicating whether the index is a text index. The output would then resemble: MongoDB\\Collection::createIndex() MongoDB\\Collection::listIndexes() Text Indexes  reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isText(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'restaurants');\n\n$collection->createIndex(['name' => 'text']);\n\nforeach ($collection->listIndexes() as $index) {\n    if ($index->isText()) {\n        printf(\"%s has default language: %d\\n\", $index->getName(), $index['default_language']);\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "name_text has default language: english"
                }
            ],
            "preview": "Return whether the index is a text index.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase__construct",
            "title": "MongoDB\\Database::__construct()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Constructs a new  Database  instance. The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. The name of the database. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for database operations. Defaults to\nthe manager's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for database operations. Defaults to\nthe manager's read preference. typeMap array Default  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. The library uses the following type map by default: writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for database operations. Defaults to\nthe manager's write concern. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. If you construct a Database explicitly, the Database inherits any options from\nthe  MongoDB\\Driver\\Manager  object. If\nyou select the Database from a  Client  object, the\nDatabase inherits its options from that object. MongoDB\\Database::withOptions() MongoDB\\Client::selectDatabase() MongoDB\\Client::__get()",
            "code": [
                {
                    "lang": "php",
                    "value": "function __construct(\n    MongoDB\\Driver\\Manager $manager,\n    string $databaseName,\n    array $options = []\n)"
                },
                {
                    "lang": "php",
                    "value": "[\n    'array' => 'MongoDB\\Model\\BSONArray',\n    'document' => 'MongoDB\\Model\\BSONDocument',\n    'root' => 'MongoDB\\Model\\BSONDocument',\n]"
                }
            ],
            "preview": "Constructs a new Database instance.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-getReadPreference",
            "title": "MongoDB\\Client::getReadPreference()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read preference for this client. A  MongoDB\\Driver\\ReadPreference \nobject. The output would then resemble: Read Preference  in the MongoDB manual MongoDB\\Collection::getReadPreference() MongoDB\\Database::getReadPreference() MongoDB\\GridFS\\Bucket::getReadPreference()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadPreference(): MongoDB\\Driver\\ReadPreference"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://127.0.0.1/', [\n    'readPreference' => 'primaryPreferred',\n]);\n\nvar_dump($client->getReadPreference());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}"
                }
            ],
            "preview": "Returns the read preference for this client.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getWriteConcern",
            "title": "MongoDB\\Collection::getWriteConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the write concern for this collection. A  MongoDB\\Driver\\WriteConcern \nobject. The output would then resemble: Write Concern  in the MongoDB manual MongoDB\\Driver\\WriteConcern::isDefault() MongoDB\\Client::getWriteConcern() MongoDB\\Database::getWriteConcern() MongoDB\\GridFS\\Bucket::getWriteConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getWriteConcern(): MongoDB\\Driver\\WriteConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'users', [\n   'writeConcern' => new MongoDB\\Driver\\WriteConcern(1, 0, true),\n]);\n\nvar_dump($collection->getWriteConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\WriteConcern)#5 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}"
                }
            ],
            "preview": "Returns the write concern for this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-countDocuments",
            "title": "MongoDB\\Collection::countDocuments()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "paragraphs": "Count the number of documents that match the filter criteria. The filter criteria that specifies the documents to count. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. limit integer The maximum number of matching documents to return. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. skip integer The number of matching documents to skip before returning results. The number of documents matching the filter criteria. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). Internally, this method uses the  $group  aggregation pipeline operator to\nobtain the result. If a  filter  parameter is given, this is converted into\na  $match  pipeline operator. Optional  $skip  and  $limit  stages are\nadded between  $match  and  group  if present in the options. Since this method uses an aggregation pipeline, some query operators accepted\nwithin a  MongoDB\\Collection::count()   filter  cannot be used.\nConsider the following alternatives to these restricted operators: This method counts documents on the server side. To obtain an approximate\ntotal number of documents without filters, the\n MongoDB\\Collection::estimatedDocumentCount()  method can be\nused. This method estimates the number of documents based on collection\nmetadata, thus sacrificing accuracy for performance. Restricted Alternative Syntax $near $geoWithin  with  $center $nearSphere $geoWithin  with  $centerSphere $where $expr When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). MongoDB\\Collection::estimatedDocumentCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function countDocuments(array|object $filter = [], array $options = []): integer"
                }
            ],
            "preview": "Count the number of documents that match the filter criteria.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-listIndexes",
            "title": "MongoDB\\Collection::listIndexes()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns information for all indexes for this collection. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. A traversable  MongoDB\\Model\\IndexInfoIterator , which contains a\n MongoDB\\Model\\IndexInfo  object for each index for the collection. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example lists all of the indexes for the  restaurants \ncollection in the  test  database: The output would then resemble: Indexes listIndexes  command reference in\nthe MongoDB manual Index documentation  in the MongoDB manual Enumerating Collections \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function listIndexes(array $options = []): MongoDB\\Model\\IndexInfoIterator"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\nforeach ($collection->listIndexes() as $index) {\n   var_dump($index);\n}"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\IndexInfo)#8 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(4) \"_id_\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}\nobject(MongoDB\\Model\\IndexInfo)#12 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"cuisine\"]=>\n    float(-1)\n  }\n  [\"name\"]=>\n  string(10) \"cuisine_-1\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}\nobject(MongoDB\\Model\\IndexInfo)#8 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"borough\"]=>\n    float(1)\n  }\n  [\"name\"]=>\n  string(9) \"borough_1\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}"
                }
            ],
            "preview": "Returns information for all indexes for this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-getInsertedCount",
            "title": "MongoDB\\InsertManyResult::getInsertedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the number of documents that were inserted. This method should only be called if the write was acknowledged. The number of documents that were inserted. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\Driver\\WriteResult::getInsertedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getInsertedCount(): integer"
                }
            ],
            "preview": "Return the number of documents that were inserted.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getNamespace",
            "title": "MongoDB\\Collection::getNamespace()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the  namespace  of the collection. A namespace is the canonical\nname of an index or collection in MongoDB. The namespace of this collection as a string. The following returns the namespace of the  zips  collection in the  test \ndatabase. The output would then resemble: MongoDB\\Collection::getCollectionName() MongoDB\\Collection::getDatabaseName()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getNamespace(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\necho $collection->getNamespace();"
                },
                {
                    "lang": "none",
                    "value": "test.zips"
                }
            ],
            "preview": "Returns the namespace of the collection. A namespace is the canonical\nname of an index or collection in MongoDB.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-explain",
            "title": "MongoDB\\Collection::explain()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Explainable Commands",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Explain the given command. The command to explain. An array specifying the desired options. Name Type Description comment mixed Defaults to the  comment  of the explained operation (if any). Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. verbosity string The verbosity level at which to run the command. See the  explain  command for more information. An array or object with the result document of the  explain  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). Explainable commands include, but are not limited to: MongoDB\\Operation\\Aggregate MongoDB\\Operation\\Count MongoDB\\Operation\\DeleteMany MongoDB\\Operation\\DeleteOne MongoDB\\Operation\\Distinct MongoDB\\Operation\\Find MongoDB\\Operation\\FindOne MongoDB\\Operation\\FindOneAndDelete MongoDB\\Operation\\FindOneAndReplace MongoDB\\Operation\\FindOneAndUpdate MongoDB\\Operation\\UpdateMany MongoDB\\Operation\\UpdateOne This example explains a count command. The output would then resemble: explain  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function explain(\n    MongoDB\\Operation\\Explainable $explainable,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$count = new MongoDB\\Operation\\Count(\n    $collection->getDatabaseName(),\n    $collection->getCollectionName(),\n    ['cuisine' => 'Italian']\n);\n\n$result = $collection->explain($count);\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#29 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"queryPlanner\"]=>\n    object(MongoDB\\Model\\BSONDocument)#21 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(6) {\n        [\"plannerVersion\"]=>\n        int(1)\n        [\"namespace\"]=>\n        string(16) \"test.restaurants\"\n        [\"indexFilterSet\"]=>\n        bool(false)\n        [\"parsedQuery\"]=>\n        object(MongoDB\\Model\\BSONDocument)#15 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(1) {\n            [\"cuisine\"]=>\n            object(MongoDB\\Model\\BSONDocument)#14 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(1) {\n                [\"$eq\"]=>\n                string(7) \"Italian\"\n              }\n            }\n          }\n        }\n        [\"winningPlan\"]=>\n        object(MongoDB\\Model\\BSONDocument)#19 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(2) {\n            [\"stage\"]=>\n            string(5) \"COUNT\"\n            [\"inputStage\"]=>\n            object(MongoDB\\Model\\BSONDocument)#18 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(3) {\n                [\"stage\"]=>\n                string(8) \"COLLSCAN\"\n                [\"filter\"]=>\n                object(MongoDB\\Model\\BSONDocument)#17 (1) {\n                  [\"storage\":\"ArrayObject\":private]=>\n                  array(1) {\n                    [\"cuisine\"]=>\n                    object(MongoDB\\Model\\BSONDocument)#16 (1) {\n                      [\"storage\":\"ArrayObject\":private]=>\n                      array(1) {\n                        [\"$eq\"]=>\n                        string(7) \"Italian\"\n                      }\n                    }\n                  }\n                }\n                [\"direction\"]=>\n                string(7) \"forward\"\n              }\n            }\n          }\n        }\n        [\"rejectedPlans\"]=>\n        object(MongoDB\\Model\\BSONArray)#20 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(0) {\n          }\n        }\n      }\n    }\n    [\"executionStats\"]=>\n    object(MongoDB\\Model\\BSONDocument)#27 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(7) {\n        [\"executionSuccess\"]=>\n        bool(true)\n        [\"nReturned\"]=>\n        int(0)\n        [\"executionTimeMillis\"]=>\n        int(24)\n        [\"totalKeysExamined\"]=>\n        int(0)\n        [\"totalDocsExamined\"]=>\n        int(25359)\n        [\"executionStages\"]=>\n        object(MongoDB\\Model\\BSONDocument)#25 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(14) {\n            [\"stage\"]=>\n            string(5) \"COUNT\"\n            [\"nReturned\"]=>\n            int(0)\n            [\"executionTimeMillisEstimate\"]=>\n            int(20)\n            [\"works\"]=>\n            int(25361)\n            [\"advanced\"]=>\n            int(0)\n            [\"needTime\"]=>\n            int(25360)\n            [\"needYield\"]=>\n            int(0)\n            [\"saveState\"]=>\n            int(198)\n            [\"restoreState\"]=>\n            int(198)\n            [\"isEOF\"]=>\n            int(1)\n            [\"invalidates\"]=>\n            int(0)\n            [\"nCounted\"]=>\n            int(1069)\n            [\"nSkipped\"]=>\n            int(0)\n            [\"inputStage\"]=>\n            object(MongoDB\\Model\\BSONDocument)#24 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(14) {\n                [\"stage\"]=>\n                string(8) \"COLLSCAN\"\n                [\"filter\"]=>\n                object(MongoDB\\Model\\BSONDocument)#23 (1) {\n                  [\"storage\":\"ArrayObject\":private]=>\n                  array(1) {\n                    [\"cuisine\"]=>\n                    object(MongoDB\\Model\\BSONDocument)#22 (1) {\n                      [\"storage\":\"ArrayObject\":private]=>\n                      array(1) {\n                        [\"$eq\"]=>\n                        string(7) \"Italian\"\n                      }\n                    }\n                  }\n                }\n                [\"nReturned\"]=>\n                int(1069)\n                [\"executionTimeMillisEstimate\"]=>\n                int(20)\n                [\"works\"]=>\n                int(25361)\n                [\"advanced\"]=>\n                int(1069)\n                [\"needTime\"]=>\n                int(24291)\n                [\"needYield\"]=>\n                int(0)\n                [\"saveState\"]=>\n                int(198)\n                [\"restoreState\"]=>\n                int(198)\n                [\"isEOF\"]=>\n                int(1)\n                [\"invalidates\"]=>\n                int(0)\n                [\"direction\"]=>\n                string(7) \"forward\"\n                [\"docsExamined\"]=>\n                int(25359)\n              }\n            }\n          }\n        }\n        [\"allPlansExecution\"]=>\n        object(MongoDB\\Model\\BSONArray)#26 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(0) {\n          }\n        }\n      }\n    }\n    [\"serverInfo\"]=>\n    object(MongoDB\\Model\\BSONDocument)#28 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(4) {\n        [\"host\"]=>\n        string(9) \"localhost\"\n        [\"port\"]=>\n        int(27017)\n        [\"version\"]=>\n        string(5) \"3.6.1\"\n        [\"gitVersion\"]=>\n        string(40) \"025d4f4fe61efd1fb6f0005be20cb45a004093d1\"\n      }\n    }\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Explain the given command.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getBucketName",
            "title": "MongoDB\\GridFS\\Bucket::getBucketName()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples"
            ],
            "paragraphs": "Returns the name of this bucket. The name of this bucket as a string. The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getBucketName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\nvar_dump($bucket->getBucketName());"
                },
                {
                    "lang": "none",
                    "value": "string(2) \"fs\""
                }
            ],
            "preview": "Returns the name of this bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-isEmpty",
            "title": "MongoDB\\Model\\DatabaseInfo::isEmpty()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the database has any data. A boolean indicating whether the database has any data. The output would then resemble: listDatabases  command reference\nin the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isEmpty(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new DatabaseInfo(['empty' => true]);\n\nvar_dump($info->isEmpty());"
                },
                {
                    "lang": "none",
                    "value": "bool(true)"
                }
            ],
            "preview": "Return whether the database has any data.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-withOptions",
            "title": "MongoDB\\Database::withOptions()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns a clone of the Database object, but with different options. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for database operations. Defaults to\nthe original database's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for database operations. Defaults to\nthe original database's read preference. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted\nto PHP values. Defaults to the original database's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for database operations. Defaults to\nthe original database's write concern. A  MongoDB\\Database  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The following example clones an existing Database object with a new read\npreference: MongoDB\\Database::__construct()",
            "code": [
                {
                    "lang": "php",
                    "value": "function withOptions(array $options = []): MongoDB\\Database"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$newDb = $db->withOptions([\n    'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);"
                }
            ],
            "preview": "Returns a clone of the Database object, but with different options.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-isAcknowledged",
            "title": "MongoDB\\BulkWriteResult::isAcknowledged()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Return whether the write was acknowledged. A boolean indicating whether the write was acknowledged. MongoDB\\Driver\\WriteResult::isAcknowledged() Write Concern  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isAcknowledged(): boolean"
                }
            ],
            "preview": "Return whether the write was acknowledged.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-getManager",
            "title": "MongoDB\\Client::getManager()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Client . A  MongoDB\\Driver\\Manager  object. MongoDB\\Collection::getManager() MongoDB\\Database::getManager()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getManager(): MongoDB\\Manager"
                }
            ],
            "preview": "Accessor for the\nMongoDB\\Driver\\Manager used by this\nClient.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getExecutionTimeMS",
            "title": "MongoDB\\MapReduceResult::getExecutionTimeMS()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns the execution time in milliseconds of the map-reduce operation. An integer denoting the execution time in milliseconds for the map-reduce\noperation. This example reports the execution time for a map-reduce operation. The output would then resemble: MongoDB\\Collection::mapReduce() mapReduce  command reference in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getExecutionTimeMS(): integer"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$map = new MongoDB\\BSON\\Javascript('function() { emit(this.state, this.pop); }');\n$reduce = new MongoDB\\BSON\\Javascript('function(key, values) { return Array.sum(values) }');\n$out = ['inline' => 1];\n\n$result = $collection->mapReduce($map, $reduce, $out);\n\nvar_dump($result->getExecutionTimeMS());"
                },
                {
                    "lang": "none",
                    "value": "int(244)"
                }
            ],
            "preview": "Returns the execution time in milliseconds of the map-reduce operation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getDatabaseName",
            "title": "MongoDB\\Collection::getDatabaseName()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the name of the database containing this collection. The name of the database containing this collection as a string. The following returns the database name for the  zips  collection in the\n test  database. The output would then resemble: MongoDB\\Collection::getCollectionName() MongoDB\\Collection::getNamespace()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getDatabaseName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\necho $collection->getDatabaseName();"
                },
                {
                    "lang": "none",
                    "value": "test"
                }
            ],
            "preview": "Returns the name of the database containing this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getWriteConcern",
            "title": "MongoDB\\GridFS\\Bucket::getWriteConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the write concern for this GridFS bucket. A  MongoDB\\Driver\\WriteConcern \nobject. The output would then resemble: Write Concern  in the MongoDB manual MongoDB\\Driver\\WriteConcern::isDefault() MongoDB\\Client::getWriteConcern() MongoDB\\Collection::getWriteConcern() MongoDB\\Database::getWriteConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getWriteConcern(): MongoDB\\Driver\\WriteConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test');\n$bucket = $database->selectGridFSBucket([\n   'writeConcern' => new MongoDB\\Driver\\WriteConcern(1, 0, true),\n]);\n\nvar_dump($bucket->getWriteConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\WriteConcern)#3 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}"
                }
            ],
            "preview": "Returns the write concern for this GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getOptions",
            "title": "MongoDB\\Model\\CollectionInfo::getOptions()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return the collection options. This correlates with the options for\n MongoDB\\Database::createCollection() , but may include\nadditional fields set by the server. The collection options. This corresponds to the  options  field returned in\nthe  listCollections  command reply. The output would then resemble: MongoDB\\Database::createCollection() listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getOptions(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n    'name' => 'foo',\n    'options' => [\n        'capped' => true,\n        'size' => 1048576,\n    ]\n]);\n\nvar_dump($info->getOptions());"
                },
                {
                    "lang": "none",
                    "value": "array(2) {\n  [\"capped\"]=>\n  bool(true)\n  [\"size\"]=>\n  int(1048576)\n}"
                }
            ],
            "preview": "Return the collection options. This correlates with the options for\nMongoDB\\Database::createCollection(), but may include\nadditional fields set by the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openDownloadStream",
            "title": "MongoDB\\GridFS\\Bucket::openDownloadStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Selects a GridFS file by its  _id  and opens it as a readable stream. The  _id  of the file to download. A readable stream resource. MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::downloadToStream() MongoDB\\GridFS\\Bucket::downloadToStreamByName() MongoDB\\GridFS\\Bucket::openDownloadStreamByName()",
            "code": [
                {
                    "lang": "php",
                    "value": "function openDownloadStream($id): resource"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$uploadStream = fopen('php://temp', 'w+b');\nfwrite($uploadStream, \"foobar\");\nrewind($uploadStream);\n\n$id = $bucket->uploadFromStream('filename', $uploadStream);\n\n$downloadStream = $bucket->openDownloadStream($id);\n\nvar_dump(stream_get_contents($downloadStream));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Selects a GridFS file by its _id and opens it as a readable stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-find",
            "title": "MongoDB\\Collection::find()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Finds documents matching the query. The filter criteria that specifies the documents to query. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , queries can\nwrite data to the  _tmp  sub-directory in the  dbPath  directory. allowPartialResults boolean For queries against a sharded collection, returns partial results from\nthe  mongos  if some shards are unavailable instead of\nthrowing an error. batchSize integer The number of documents to return in the first batch. Defaults to\n 101 . A batchSize of  0  means that the cursor will be\nestablished, but no documents will be returned in the first batch. Unlike the previous wire protocol version, a batchSize of  1  for the\n find  command does not close the cursor. collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. cursorType integer Indicates the type of cursor to use.  cursorType  supports the\nfollowing values: MongoDB\\Operation\\Find::NON_TAILABLE  ( default ) MongoDB\\Operation\\Find::TAILABLE hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. limit integer The maximum number of documents to return. If unspecified, then\ndefaults to no limit. A limit of  0  is equivalent to setting no\nlimit. A negative limit is similar to a positive limit but closes the cursor\nafter returning a single batch of results. As such, with a negative\nlimit, if the limited result set does not fit into a single batch, the\nnumber of documents received will be less than the specified limit. By\npassing a negative limit, the client indicates to the server that it\nwill not ask for a subsequent batch via getMore. max array|object The exclusive upper bound for a specific index. maxAwaitTimeMS integer Positive integer denoting the time limit in milliseconds for the server\nto block a getMore operation if no data is available. This option\nshould only be used if cursorType is TAILABLE_AWAIT. maxScan integer Maximum number of documents or index keys to scan when executing the\nquery. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . min array|object The inclusive lower bound for a specific index. modifiers array|object Meta operators  that\nmodify the output or behavior of a query. Use of these operators is\ndeprecated in favor of named options. noCursorTimeout boolean Prevents the server from timing out idle cursors after an inactivity\nperiod (10 minutes). oplogReplay boolean Internal use for replica sets. To use  oplogReplay , you must include\nthe following condition in the filter: The  MongoDB\\BSON\\Timestamp \nclass reference describes how to represent MongoDB's BSON timestamp\ntype with PHP. projection array|object The  projection specification  to determine which\nfields to include in the returned documents. See\n Project Fields to Return from Query \nand  Projection Operators  in\nthe MongoDB manual. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. returnKey boolean If true, returns only the index keys in the resulting documents. session MongoDB\\Driver\\Session Client session to associate with the operation. showRecordId boolean Determines whether to return the record identifier for each document.\nIf true, adds a field  $recordId  to the returned documents. skip integer Number of documents to skip. Defaults to  0 . sort array|object The sort specification for the ordering of the results. snapshot boolean Prevents the cursor from returning a document more than once because of\nan intervening write operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. A  MongoDB\\Driver\\Cursor  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). The following example finds restaurants based on the  cuisine  and  borough \nfields and uses a  projection  to limit the fields that are\nreturned. It also limits the results to 5 documents. The output would then resemble: MongoDB\\Collection::findOne() find  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function find(\n    array|object $filter = [],\n    array $options = []\n): MongoDB\\Driver\\Cursor"
                },
                {
                    "lang": "javascript",
                    "value": "{ ts: { $gte: <timestamp> } }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$cursor = $collection->find(\n    [\n        'cuisine' => 'Italian',\n        'borough' => 'Manhattan',\n    ],\n    [\n        'limit' => 5,\n        'projection' => [\n            'name' => 1,\n            'borough' => 1,\n            'cuisine' => 1,\n        ],\n    ]\n);\n\nforeach ($cursor as $restaurant) {\n   var_dump($restaurant);\n};"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f98d\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(18) \"Marchis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#10 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f99b\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(19) \"Forlinis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#12 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#13 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9a8\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(22) \"Angelo Of Mulberry St.\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9b4\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(16) \"V & T Restaurant\"\n  }\n}"
                }
            ],
            "preview": "Finds documents matching the query.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openDownloadStreamByName",
            "title": "MongoDB\\GridFS\\Bucket::openDownloadStreamByName()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Selects a GridFS file by its  filename  and opens it as a readable stream. The  filename  of the file to download. An array specifying the desired options. Name Type Description revision integer The revision of the file to retrieve. Files with the same  filename \nwill be differentiated by their  uploadDate  field. Revision numbers are defined as follows: Defaults to -1 (i.e. the most recent revision). 0 = the original stored file 1 = the first revision 2 = the second revision etc... -2 = the second most recent revision -1 = the most recent revision A readable stream resource. MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::downloadToStream() MongoDB\\GridFS\\Bucket::downloadToStreamByName() MongoDB\\GridFS\\Bucket::openDownloadStream()",
            "code": [
                {
                    "lang": "php",
                    "value": "function openDownloadStreamByName(\n    string $filename,\n    array $options = []\n): resource"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$bucket->uploadFromStream('filename', $stream);\n\nvar_dump(stream_get_contents($bucket->openDownloadStreamByName('filename')));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Selects a GridFS file by its filename and opens it as a readable stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-downloadToStreamByName",
            "title": "MongoDB\\GridFS\\Bucket::downloadToStreamByName()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Selects a GridFS file by its  filename  and copies its contents to a\nwritable stream. The  filename  of the file to download. Writable stream, to which the GridFS file's contents will be written. An array specifying the desired options. Name Type Description revision integer The revision of the file to retrieve. Files with the same  filename \nwill be differentiated by their  uploadDate  field. Revision numbers are defined as follows: Defaults to -1 (i.e. the most recent revision). 0 = the original stored file 1 = the first revision 2 = the second revision etc... -2 = the second most recent revision -1 = the most recent revision MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::downloadToStream() MongoDB\\GridFS\\Bucket::openDownloadStream() MongoDB\\GridFS\\Bucket::openDownloadStreamByName()",
            "code": [
                {
                    "lang": "php",
                    "value": "function downloadToStreamByName(\n    string $filename,\n    resource $destination,\n    array $options = []\n): void"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$bucket->uploadFromStream('filename', $stream);\n\n$destination = fopen('php://temp', 'w+b');\n\n$bucket->downloadToStreamByName('filename', $destination);\n\nvar_dump(stream_get_contents($destination, -1, 0));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Selects a GridFS file by its filename and copies its contents to a\nwritable stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-listDatabases",
            "title": "MongoDB\\Client::listDatabases()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns information for all databases on the server. An array specifying the desired options. Name Type Description authorizedDatabases boolean A flag that determines which databases are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listDatabases command documentation . For servers < 4.0.5, this option is ignored. comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. filter array|object A query expression to filter the list of databases. You can specify a query expression for database fields (e.g.  name ,\n sizeOnDisk ,  empty ). maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. A traversable  MongoDB\\Model\\DatabaseInfoIterator , which contains\na  MongoDB\\Model\\DatabaseInfo  object for each database on the\nserver. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example lists all databases on the server: The output would then resemble: MongoDB\\Client::listDatabaseNames() listDatabases  command reference\nin the MongoDB manual Enumerating Databases \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function listDatabases(array $options = []): MongoDB\\Model\\DatabaseInfoIterator"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\nforeach ($client->listDatabases() as $databaseInfo) {\n    var_dump($databaseInfo);\n}"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\DatabaseInfo)#4 (3) {\n  [\"name\"]=>\n  string(5) \"local\"\n  [\"sizeOnDisk\"]=>\n  float(65536)\n  [\"empty\"]=>\n  bool(false)\n}\nobject(MongoDB\\Model\\DatabaseInfo)#7 (3) {\n  [\"name\"]=>\n  string(4) \"test\"\n  [\"sizeOnDisk\"]=>\n  float(32768)\n  [\"empty\"]=>\n  bool(false)\n}"
                }
            ],
            "preview": "Returns information for all databases on the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getModifiedCount",
            "title": "MongoDB\\BulkWriteResult::getModifiedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the total number of documents that were modified by all update and\nreplace operations in the bulk write. This method should only be called if the write was acknowledged. If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the modified\ncount may be less than the value returned by  getMatchedCount() . The total number of documents that were modified by all update and replace\noperations in the bulk write. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\BulkWriteResult::getMatchedCount() MongoDB\\Driver\\WriteResult::getModifiedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getModifiedCount(): integer"
                }
            ],
            "preview": "Return the total number of documents that were modified by all update and\nreplace operations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-createClientEncryption",
            "title": "MongoDB\\Client::createClientEncryption()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Returns a  MongoDB\\Driver\\ClientEncryption \nobject for manual encryption and decryption of values. An array specifying the desired options. Refer to the\n MongoDB\\Driver\\Manager::createClientEncryption() \nextension documentation for a list of supported options. If a  MongoDB\\Client  is provided for the  keyVaultClient \noption, it will be unwrapped into a\n MongoDB\\Driver\\Manager  for the\nextension. A  MongoDB\\Driver\\ClientEncryption \ninstance which can be used to encrypt and decrypt values. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. MongoDB\\Driver\\Manager::createClientEncryption()",
            "code": [
                {
                    "lang": "php",
                    "value": "function createClientEncryption(array $options): MongoDB\\Driver\\ClientEncryption"
                }
            ],
            "preview": "Returns a MongoDB\\Driver\\ClientEncryption\nobject for manual encryption and decryption of values.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getMatchedCount",
            "title": "MongoDB\\BulkWriteResult::getMatchedCount()",
            "headings": [
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Return the total number of documents that were matched by all update and\nreplace operations in the bulk write. This method should only be called if the write was acknowledged. If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the matched\ncount may be greater than the value returned by\n getModifiedCount() . The total number of documents that were matched by all update and replace\noperations in the bulk write. MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . MongoDB\\BulkWriteResult::getModifiedCount() MongoDB\\Driver\\WriteResult::getMatchedCount()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getMatchedCount(): integer"
                }
            ],
            "preview": "Return the total number of documents that were matched by all update and\nreplace operations in the bulk write.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-key",
            "title": "MongoDB\\ChangeStream::key()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns the index of the current event in the change stream. The index of the first event in a change stream starts at zero and will\nincrement by one for each subsequent event. The index of the current event in the change stream, or  null  if there is no\ncurrent event (i.e.  MongoDB\\ChangeStream::valid()  returns\n false ). This example reports the index of events while iterating a change stream. Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Iterator::key() Tailable Cursor Iteration Change Streams  documentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function key(): integer|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$collection = (new MongoDB\\Client($uri))->test->inventory;\n\n$changeStream = $collection->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    printf(\"%d: %s\\n\", $changeStream->key(), $event['operationType']);\n}"
                },
                {
                    "lang": "none",
                    "value": "0: insert\n1: update\n2: delete"
                }
            ],
            "preview": "Returns the index of the current event in the change stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getChunksCollection",
            "title": "MongoDB\\GridFS\\Bucket::getChunksCollection()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples"
            ],
            "paragraphs": "Returns the chunks collection used by the bucket. A  MongoDB\\Collection  object for the chunks collection. The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getChunksCollection(): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\nvar_dump((string) $bucket->getChunksCollection());"
                },
                {
                    "lang": "none",
                    "value": "string(14) \"test.fs.chunks\""
                }
            ],
            "preview": "Returns the chunks collection used by the bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-getCollectionName",
            "title": "MongoDB\\Collection::getCollectionName()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the name of this collection. The name of this collection as a string. The following returns the collection name for the  zips  collection in the\n test  database. The output would then resemble: MongoDB\\Collection::getDatabaseName() MongoDB\\Collection::getNamespace()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getCollectionName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\necho $collection->getCollectionName();"
                },
                {
                    "lang": "none",
                    "value": "zips"
                }
            ],
            "preview": "Returns the name of this collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getReadPreference",
            "title": "MongoDB\\Database::getReadPreference()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read preference for this database. A  MongoDB\\Driver\\ReadPreference \nobject. The output would then resemble: Read Preference  in the MongoDB manual MongoDB\\Client::getReadPreference() MongoDB\\Collection::getReadPreference() MongoDB\\GridFS\\Bucket::getReadPreference()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadPreference(): MongoDB\\Driver\\ReadPreference"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test', [\n    'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n]);\n\nvar_dump($database->getReadPreference());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}"
                }
            ],
            "preview": "Returns the read preference for this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-dropCollection",
            "title": "MongoDB\\Database::dropCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop a collection within the current database. The name of the collection to drop. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. encryptedFields array|object A document describing encrypted fields for queryable encryption. If\nomitted, the  encryptedFieldsMap  option within the\n autoEncryption  driver option will be consulted. If\n encryptedFieldsMap  was defined but does not specify this\ncollection, the library will make a final attempt to consult the\nserver-side value for  encryptedFields . See\n Field Encryption and Queryability \nin the MongoDB manual for more information. This option is not passed to the\n drop  command. The library uses\nit to determine related metadata collections that should be dropped\nin addition to an encrypted collection. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. An array or object with the result document of the  drop  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example drops the  users  collection in the  test  database: The output would then resemble: MongoDB\\Collection::drop() drop  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function dropCollection(\n    string $collectionName,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$result = $db->dropCollection('users');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"ns\"]=>\n    string(10) \"test.users\"\n    [\"nIndexesWas\"]=>\n    int(1)\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop a collection within the current database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-createIndexes",
            "title": "MongoDB\\Collection::createIndexes()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "$indexes parameter",
                "Example",
                "See Also"
            ],
            "paragraphs": "Create one or more indexes for the collection. The indexes to create on the collection. For example, the following specifies a unique index on the  username  field\nand a compound index on the  email  and  createdAt  fields: An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. commitQuorum string|integer Specifies how many data-bearing members of a replica set, including the\nprimary, must complete the index builds successfully before the primary\nmarks the indexes as ready. This option accepts the same values for the  w  field in a write\nconcern plus  \"votingMembers\" , which indicates all voting\ndata-bearing nodes. This is not supported for server versions prior to 4.4 and will result\nin an exception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . The names of the created indexes as an array of strings. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The  $indexes  parameter is an array of index specification documents. Each\nelement in  $indexes  must itself be an array or object with a  key  field,\nwhich corresponds to the  $key  parameter of  createIndex() . The array or object may include other\nfields that correspond to index options accepted by  createIndex() . For a full list of the supported index\ncreation options, refer to the\n createIndexes  command reference\nin the MongoDB manual. For example, the following  $indexes  parameter creates two indexes. The first\nis an ascending unique index on the  username  field and the second is a\n2dsphere index on the  loc  field with a custom name: The following example creates two indexes on the  restaurants  collection in\nthe  test  database. One index is a compound index on the  borough  and\n cuisine  fields and the other is 2dsphere index on the  loc  field with a\ncustom name. The output would then resemble: MongoDB\\Collection::createIndex() Indexes createIndexes  command reference\nin the MongoDB manual Index  documentation in the MongoDB Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function createIndexes(\n    array $indexes,\n    array $options = []\n): string[]"
                },
                {
                    "lang": "php",
                    "value": "[\n    [ 'key' => [ 'username' => -1 ], 'unique' => true ],\n    [ 'key' => [ 'email' => 1, 'createdAt' => 1 ] ],\n]"
                },
                {
                    "lang": "none",
                    "value": "[\n    [ 'key' => [ 'username' => 1 ], 'unique' => true ],\n    [ 'key' => [ 'loc' => '2dsphere' ], 'name' => 'geo_index' ],\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'restaurants');\n\n$indexNames = $collection->createIndexes([\n    [ 'key' => [ 'borough' => 1, 'cuisine' => 1] ],\n    [ 'key' => [ 'loc' => '2dsphere'], 'name' => 'geo_index' ],\n]);\n\nvar_dump($indexNames);"
                },
                {
                    "lang": "none",
                    "value": "array(2) {\n  [0]=>\n  string(19) \"borough_1_cuisine_1\"\n  [1]=>\n  string(9) \"geo_index\"\n}"
                }
            ],
            "preview": "Create one or more indexes for the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-updateMany",
            "title": "MongoDB\\Collection::updateMany()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Update all documents that match the filter criteria. The filter criteria that specifies the documents to update. Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB's  update operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. An array specifying the desired options. Name Type Description arrayFilters array An array of filter documents that determines which array elements to\nmodify for an update operation on an array field. bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.2 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. session MongoDB\\Driver\\Session Client session to associate with the operation. upsert boolean If set to  true , creates a new document when no document matches the\nquery criteria. The default value is  false , which does not insert a\nnew document when no match is found. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following example updates all of the documents with the  borough  of\n \"Queens\"  by setting the  active  field to  true : The output would then resemble: MongoDB\\Collection::replaceOne() MongoDB\\Collection::updateOne() MongoDB\\Collection::bulkWrite() CRUD Operations update  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function updateMany(\n    array|object $filter,\n    array|object $update,\n    array $options = []\n): MongoDB\\UpdateResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$updateResult = $collection->updateMany(\n    [ 'borough' => 'Queens' ],\n    [ '$set' => [ 'active' => true ]]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 5656 document(s)\nModified 5656 document(s)"
                }
            ],
            "preview": "Update all documents that match the filter criteria.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFileDocumentForStream",
            "title": "MongoDB\\GridFS\\Bucket::getFileDocumentForStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Gets the file document of the GridFS file associated with a stream. The GridFS stream resource. The metadata document associated with the GridFS stream. The return type will\ndepend on the bucket's  typeMap  option. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::getFileIdForStream()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getFileDocumentForStream(resource $stream): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openUploadStream('filename');\n\n$fileDocument = $bucket->getFileDocumentForStream($stream);\n\nvar_dump($fileDocument);\n\nfclose($stream);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#4956 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#4955 (1) {\n      [\"oid\"]=>\n      string(24) \"5acfb05b7e21e83b5a29037c\"\n    }\n    [\"chunkSize\"]=>\n    int(261120)\n    [\"filename\"]=>\n    string(8) \"filename\"\n  }\n}"
                }
            ],
            "preview": "Gets the file document of the GridFS file associated with a stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-drop",
            "title": "MongoDB\\Database::drop()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Drop the database. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. An array or object with the result document of the  dropDatabase  command. The return type will depend on the\n typeMap  option. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example drops the  test  database: The output would then resemble: MongoDB\\Client::dropDatabase() dropDatabase  command reference in\nthe MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function drop(array $options = []): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$result = $db->drop();\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"dropped\"]=>\n    string(4) \"test\"\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Drop the database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-isCapped",
            "title": "MongoDB\\Model\\CollectionInfo::isCapped()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the collection is a  capped collection . A boolean indicating whether the collection is a capped collection. This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n capped  key. The output would then resemble: MongoDB\\Model\\CollectionInfo::getCappedMax() MongoDB\\Model\\CollectionInfo::getCappedSize() Capped Collections  in the MongoDB manual listCollections  command\nreference in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isCapped(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new CollectionInfo([\n    'name' => 'foo',\n    'options' => [\n        'capped' => true,\n        'size' => 1048576,\n   ]\n]);\n\nvar_dump($info->isCapped());"
                },
                {
                    "lang": "none",
                    "value": "bool(true)"
                }
            ],
            "preview": "Return whether the collection is a capped collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-getReadConcern",
            "title": "MongoDB\\Client::getReadConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read concern for this client. A  MongoDB\\Driver\\ReadConcern  object. The output would then resemble: Read Concern  in the MongoDB manual MongoDB\\Driver\\ReadConcern::isDefault() MongoDB\\Collection::getReadConcern() MongoDB\\Database::getReadConcern() MongoDB\\GridFS\\Bucket::getReadConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadConcern(): MongoDB\\Driver\\ReadConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://127.0.0.1/', [\n    'readConcernLevel' => 'majority',\n]);\n\nvar_dump($client->getReadConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}"
                }
            ],
            "preview": "Returns the read concern for this client.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-drop",
            "title": "MongoDB\\GridFS\\Bucket::drop()",
            "headings": [
                "Definition",
                "Errors/Exceptions",
                "Examples"
            ],
            "paragraphs": "Drops the files and chunks collections associated with this GridFS bucket. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors).",
            "code": [
                {
                    "lang": "php",
                    "value": "function drop(): void"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$bucket = $database->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$bucket->uploadFromStream('filename', $stream);\n\n$bucket->drop();"
                }
            ],
            "preview": "Drops the files and chunks collections associated with this GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isGeoHaystack",
            "title": "MongoDB\\Model\\IndexInfo::isGeoHaystack()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  geoHaystack \nindex. A boolean indicating whether the index is a geoHaystack index. The output would then resemble: MongoDB\\Collection::createIndex() MongoDB\\Collection::listIndexes() geoHaystack Indexes  reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isGeoHaystack(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'places');\n\n$collection->createIndex(['pos' => 'geoHaystack', 'x' => 1], ['bucketSize' => 5]);\n\nforeach ($collection->listIndexes() as $index) {\n    if ($index->isGeoHaystack()) {\n        printf(\"%s has bucketSize: %d\\n\", $index->getName(), $index['bucketSize']);\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "pos_geoHaystack_x_1 has bucketSize: 5"
                }
            ],
            "preview": "Return whether the index is a geoHaystack\nindex.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-selectCollection",
            "title": "MongoDB\\Database::selectCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Selects a collection within the database. The name of the collection to select. An array specifying the desired options. Name Type Description readConcern MongoDB\\Driver\\ReadConcern The default read concern to use for collection operations. Defaults to\nthe database's read concern. readPreference MongoDB\\Driver\\ReadPreference The default read preference to use for collection operations. Defaults\nto the database's read preference. typeMap array The default type map to use for collection operations. Defaults to the\ndatabase's type map. writeConcern MongoDB\\Driver\\WriteConcern The default write concern to use for collection operations. Defaults to\nthe database's write concern. A  MongoDB\\Collection  object. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The selected collection inherits options such as read preference and type\nmapping from the  Database  object. Options may be\noverridden via the  $options  parameter. The following example selects the  users  collection in the  test  database: The following example selects the  users  collection in the  test \ndatabase with a custom read preference: MongoDB\\Database::__get() MongoDB\\Client::selectCollection() MongoDB\\Collection::__construct()",
            "code": [
                {
                    "lang": "php",
                    "value": "function selectCollection(\n    string $collectionName,\n    array $options = []\n): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$collection = $db->selectCollection('users');"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$users = $db->selectCollection(\n    'users',\n    [\n        'readPreference' => new MongoDB\\Driver\\ReadPreference('primaryPreferred'),\n    ]\n);"
                }
            ],
            "preview": "Selects a collection within the database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-isAcknowledged",
            "title": "MongoDB\\InsertOneResult::isAcknowledged()",
            "headings": [
                "Definition",
                "Return Values",
                "See Also"
            ],
            "paragraphs": "Return whether the write was acknowledged. A boolean indicating whether the write was acknowledged. MongoDB\\Driver\\WriteResult::isAcknowledged() Write Concern  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isAcknowledged(): boolean"
                }
            ],
            "preview": "Return whether the write was acknowledged.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-createIndex",
            "title": "MongoDB\\Collection::createIndex()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "Create a Compound Index",
                "Create a Partial Index",
                "See Also"
            ],
            "paragraphs": "Create an index for the collection. Specifies the field or fields to index and the index order. For example, the following specifies a descending index on the  username \nfield: An array specifying the desired options. The  $options  parameter accepts both index  and  command options. A\nnon-exhaustive list of index options follows. For a complete list of index\noptions, refer to the\n createIndexes  command reference\nin the MongoDB manual. Index Options  (non-exhaustive) Command Options collation array|object expireAfterSeconds integer Creates a  TTL  index. name string A name that uniquely identifies the index. By default, MongoDB creates\nindex names based on the key. partialFilterExpression array|object Creates a  partial  index. sparse boolean Creates a  sparse  index. unique boolean Creates a  unique  index. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. commitQuorum string|integer Specifies how many data-bearing members of a replica set, including the\nprimary, must complete the index builds successfully before the primary\nmarks the indexes as ready. This option accepts the same values for the  w  field in a write\nconcern plus  \"votingMembers\" , which indicates all voting\ndata-bearing nodes. This is not supported for server versions prior to 4.4 and will result\nin an exception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . The name of the created index as a string. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example creates a  compound index \non the  borough  and  cuisine  fields in the  restaurants  collection in\nthe  test  database. The output would then resemble: The following example adds a  partial index  on\nthe  borough  field in the  restaurants  collection in the  test \ndatabase. The partial index indexes only documents where the  borough  field\nexists. The output would then resemble: MongoDB\\Collection::createIndexes() Indexes createIndexes  command reference\nin the MongoDB manual Index  documentation in the MongoDB Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function createIndex(\n    array|object $key,\n    array $options = []\n): string"
                },
                {
                    "lang": "php",
                    "value": "[ 'username' => -1 ]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'restaurants');\n\n$indexName = $collection->createIndex(['borough' => 1, 'cuisine' => 1]);\n\nvar_dump($indexName);"
                },
                {
                    "lang": "none",
                    "value": "string(19) \"borough_1_cuisine_1\""
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'restaurants');\n\n$indexName = $collection->createIndex(\n   ['borough' => 1],\n   [\n       'partialFilterExpression' => [\n           'borough' => ['$exists' => true],\n       ],\n   ]\n);\n\nvar_dump($indexName);"
                },
                {
                    "lang": "none",
                    "value": "string(9) \"borough_1\""
                }
            ],
            "preview": "Create an index for the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getTiming",
            "title": "MongoDB\\MapReduceResult::getTiming()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns timing statistics for the map-reduce operation. Timing statistics will only be available if the  verbose  option was\nspecified for  MongoDB\\Collection::mapReduce() . An array of timing statistics for the map-reduce operation. If no timing\nstatistics are available, the array will be empty. This example specifies the  verbose  option for\n MongoDB\\Collection::mapReduce()  and reports the timing statistics\nfor a map-reduce operation. The output would then resemble: MongoDB\\Collection::mapReduce() mapReduce  command reference in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function getTiming(): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$map = new MongoDB\\BSON\\Javascript('function() { emit(this.state, this.pop); }');\n$reduce = new MongoDB\\BSON\\Javascript('function(key, values) { return Array.sum(values) }');\n$out = ['inline' => 1];\n\n$result = $collection->mapReduce($map, $reduce, $out, ['verbose' => true]);\n\nvar_dump($result->getTiming());"
                },
                {
                    "lang": "none",
                    "value": "array(5) {\n  [\"mapTime\"]=>\n  int(163)\n  [\"emitLoop\"]=>\n  int(233)\n  [\"reduceTime\"]=>\n  int(9)\n  [\"mode\"]=>\n  string(5) \"mixed\"\n  [\"total\"]=>\n  int(233)\n}"
                }
            ],
            "preview": "Returns timing statistics for the map-reduce operation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-listDatabaseNames",
            "title": "MongoDB\\Client::listDatabaseNames()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns names for all databases on the server. An array specifying the desired options. Name Type Description authorizedDatabases boolean A flag that determines which databases are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listDatabases command documentation . For servers < 4.0.5, this option is ignored. comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. filter array|object A query expression to filter the list of databases. You can specify a query expression for database fields (e.g.  name ,\n sizeOnDisk ,  empty ). maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . session MongoDB\\Driver\\Session Client session to associate with the operation. An  Iterator , which provides the name of each\ndatabase on the server. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example lists all databases on the server: The output would then resemble: MongoDB\\Client::listDatabases() listDatabases  command reference\nin the MongoDB manual Enumerating Databases \nspecification",
            "code": [
                {
                    "lang": "php",
                    "value": "function listDatabaseNames(array $options = []): Iterator"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client;\n\nforeach ($client->listDatabaseNames() as $databaseName) {\n    var_dump($databaseName);\n}"
                },
                {
                    "lang": "none",
                    "value": "string(5) \"local\"\nstring(4) \"test\""
                }
            ],
            "preview": "Returns names for all databases on the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-is2dSphere",
            "title": "MongoDB\\Model\\IndexInfo::is2dSphere()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  2dsphere \nindex. A boolean indicating whether the index is a 2dsphere index. The output would then resemble: MongoDB\\Collection::createIndex() MongoDB\\Collection::listIndexes() 2dsphere Indexes  reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function is2dSphere(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->selectCollection('test', 'places');\n\n$collection->createIndex(['pos' => '2dsphere']);\n\nforeach ($collection->listIndexes() as $index) {\n    if ($index->is2dSphere()) {\n        printf(\"%s has 2dsphereIndexVersion: %d\\n\", $index->getName(), $index['2dsphereIndexVersion']);\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "pos_2dsphere has 2dsphereIndexVersion: 3"
                }
            ],
            "preview": "Return whether the index is a 2dsphere\nindex.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-aggregate",
            "title": "MongoDB\\Collection::aggregate()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Executes an  aggregation framework pipeline  operation on the collection. Specifies an  aggregation pipeline \noperation. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , aggregation\nstages can write data to the  _tmp  sub-directory in the  dbPath \ndirectory. batchSize integer Specifies the batch size for the cursor, which will apply to both the\ninitial  aggregate  command and any subsequent  getMore  commands.\nThis determines the maximum number of documents to return in each\nresponse from the server. A batchSize of  0  is special in that and will only apply to the\ninitial  aggregate  command; subsequent  getMore  commands will use\nthe server's default batch size. This may be useful for quickly\nreturning a cursor or failure from  aggregate  without doing\nsignificant server-side work. bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . This only applies when using the  $out  and\n $out  stages. collation array|object comment mixed The comment can be any valid BSON type for server versions 4.4 and\nabove. Earlier server versions only support string values. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . explain boolean Specifies whether or not to return the information on the processing of\nthe pipeline. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the collection's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. writeConcern MongoDB\\Driver\\WriteConcern This only applies when a  $out  or\n $merge  stage is specified. Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\Driver\\Cursor  or\n ArrayIterator  object. In both cases, the return value\nwill be  Traversable . MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). MongoDB\\Collection::aggregate() 's return value depends on the\nMongoDB server version and whether the  useCursor  option is specified. If\n useCursor  is  true , a  MongoDB\\Driver\\Cursor  object is returned. If  useCursor  is\n false , an  ArrayIterator  is returned that wraps the\n result  array from the command response document. In both cases, the return\nvalue will be  Traversable . The following aggregation example uses a collection called  names  and groups\nthe  first_name  field together, counts the total number of results in each\ngroup, and sorts the results by name. MongoDB\\Database::aggregate() aggregate  command reference in the\nMongoDB manual Aggregation Pipeline  documentation in\nthe MongoDB Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function aggregate(\n    array $pipeline,\n    array $options = []\n): Traversable"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->names;\n\n$cursor = $collection->aggregate(\n    [\n        ['$group' => ['_id' => '$first_name', 'name_count' => ['$sum' => 1]]],\n        ['$sort' => ['_id' => 1]],\n    ]\n);"
                }
            ],
            "preview": "Executes an aggregation framework pipeline operation on the collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-deleteMany",
            "title": "MongoDB\\Collection::deleteMany()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "Deletes all documents that match the filter criteria. The filter criteria that specifies the documents to delete. An array specifying the desired options. Name Type Description collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. session MongoDB\\Driver\\Session Client session to associate with the operation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\DeleteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). The following example deletes all of the documents in the  users  collection\nthat have  \"ny\"  as the value for the  state  field: The output would then resemble: MongoDB\\Collection::deleteOne() MongoDB\\Collection::bulkWrite() CRUD Operations delete  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function deleteMany(\n    array|object $filter,\n    array $options = []\n): MongoDB\\DeleteResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$deleteResult = $collection->deleteMany(['state' => 'ny']);\n\nprintf(\"Deleted %d document(s)\\n\", $deleteResult->getDeletedCount());"
                },
                {
                    "lang": "none",
                    "value": "Deleted 2 document(s)"
                }
            ],
            "preview": "Deletes all documents that match the filter criteria.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFilesCollection",
            "title": "MongoDB\\GridFS\\Bucket::getFilesCollection()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples"
            ],
            "paragraphs": "Returns the files collection used by the bucket. A  MongoDB\\Collection  object for the files collection. The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getFilesCollection(): MongoDB\\Collection"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$filesCollection = $bucket->getFilesCollection();\n\nvar_dump($filesCollection->getCollectionName());"
                },
                {
                    "lang": "none",
                    "value": "string(8) \"fs.files\""
                }
            ],
            "preview": "Returns the files collection used by the bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-delete",
            "title": "MongoDB\\GridFS\\Bucket::delete()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Behavior",
                "Examples"
            ],
            "paragraphs": "Delete a file and its chunks from the GridFS bucket. The  _id  of the file to delete. MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). If the files collection document is not found, this method will still attempt to\ndelete orphaned chunks.",
            "code": [
                {
                    "lang": "php",
                    "value": "function delete($id): void"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$id = $bucket->uploadFromStream('filename', $stream);\n\n$bucket->delete($id);"
                }
            ],
            "preview": "Delete a file and its chunks from the GridFS bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-mapReduce",
            "title": "MongoDB\\Collection::mapReduce()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "paragraphs": "The  mapReduce  command allows you to\nrun map-reduce aggregation operations over a collection. A JavaScript function that associates or \"maps\" a value with a key and emits\nthe key and value pair. Passing a Javascript instance with a scope is deprecated. Put all scope\nvariables in the  scope  option of the MapReduce operation. A JavaScript function that \"reduces\" to a single object all the values\nassociated with a particular key. Passing a Javascript instance with a scope is deprecated. Put all scope\nvariables in the  scope  option of the MapReduce operation. Specifies where to output the result of the map-reduce operation. You can\neither output to a collection or return the result inline. On a primary member\nof a replica set you can output either to a collection or inline, but on a\nsecondary, only inline output is possible. An array specifying the desired options. Name Type Description bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . This only applies when results are output to a collection. collation array|object comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. finalize MongoDB\\BSON\\Javascript Follows the reduce method and modifies the output. Passing a Javascript instance with a scope is deprecated. Put all\nscope variables in the  scope  option of the MapReduce operation. jsMode boolean Specifies whether to convert intermediate data into BSON format between\nthe execution of the map and reduce functions. limit integer Specifies a maximum number of documents for the input into the map\nfunction. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . query array|object Specifies the selection criteria using query operators for determining\nthe documents input to the map function. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. It is not possible to specify a read concern for individual operations as part\nof a transaction. Instead, set the  readConcern  option when\n starting the transaction . readPreference MongoDB\\Driver\\ReadPreference This option will be ignored when results are output to a collection. Read preference  to use for the\noperation. Defaults to the collection's read preference. scope array|object Specifies global variables that are accessible in the map, reduce, and\nfinalize functions. session MongoDB\\Driver\\Session Client session to associate with the operation. sort array|object The sort specification for the ordering of the results. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. verbose boolean Specifies whether to include the timing information in the result\ninformation. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the collection's write concern. It is not possible to specify a write concern for individual operations as\npart of a transaction. Instead, set the  writeConcern  option when\n starting the transaction . A  MongoDB\\MapReduceResult  object, which allows for iteration of\nmap-reduce results irrespective of the output method (e.g. inline, collection)\nvia the  IteratorAggregate  interface. It also\nprovides access to command statistics. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). In MongoDB, the map-reduce operation can write results to a collection\nor return the results inline. If you write map-reduce output to a\ncollection, you can perform subsequent map-reduce operations on the\nsame input collection that merge replace, merge, or reduce new results\nwith previous results. See  Map-Reduce  and\n Perform Incremental Map-Reduce \nfor details and examples. When returning the results of a map-reduce operation  inline , the\nresult documents must be within the  BSON Document Size  limit,\nwhich is currently 16 megabytes. MongoDB supports map-reduce operations on  sharded collections . Map-reduce operations can also output\nthe results to a sharded collection. See\n Map-Reduce and Sharded Collections . This example will use city populations to calculate the overall population of\neach state. The output would then resemble: mapReduce  command reference in the MongoDB\nmanual Map-Reduce  documentation in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function mapReduce(\n    MongoDB\\BSON\\JavascriptInterface $map,\n    MongoDB\\BSON\\JavascriptInterface $reduce,\n    string|array|object $out,\n    array $options = []\n): MongoDB\\MapReduceResult"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$map = new MongoDB\\BSON\\Javascript('function() { emit(this.state, this.pop); }');\n$reduce = new MongoDB\\BSON\\Javascript('function(key, values) { return Array.sum(values) }');\n$out = ['inline' => 1];\n\n$populations = $collection->mapReduce($map, $reduce, $out);\n\nforeach ($populations as $pop) {\n   var_dump($pop);\n};"
                },
                {
                    "lang": "none",
                    "value": "object(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AK\"\n   [\"value\"]=>\n   float(544698)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AL\"\n   [\"value\"]=>\n   float(4040587)\n}\nobject(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AR\"\n   [\"value\"]=>\n   float(2350725)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AZ\"\n   [\"value\"]=>\n   float(3665228)\n}"
                }
            ],
            "preview": "The mapReduce command allows you to\nrun map-reduce aggregation operations over a collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBChangeStream-current",
            "title": "MongoDB\\ChangeStream::current()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Returns the current event in the change stream. The structure of each event document will vary based on the operation type.\nSee  Change Events  in the MongoDB manual\nfor more information. An array or object for the current event in the change stream, or  null  if\nthere is no current event (i.e.  MongoDB\\ChangeStream::valid() \nreturns  false ). The return type will depend on the  typeMap  option for\n MongoDB\\Collection::watch() . This example reports events while iterating a change stream. Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: MongoDB\\Client::watch() MongoDB\\Collection::watch() MongoDB\\Database::watch() Iterator::current() Tailable Cursor Iteration Change Streams  documentation in the MongoDB manual Change Events  documentation in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function current(): array|object|null"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$collection = (new MongoDB\\Client($uri))->test->inventory;\n\n$changeStream = $collection->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    $ns = sprintf('%s.%s', $event['ns']['db'], $event['ns']['coll']);\n    $id = json_encode($event['documentKey']['_id']);\n\n    switch ($event['operationType']) {\n        case 'delete':\n            printf(\"Deleted document in %s with _id: %s\\n\\n\", $ns, $id);\n            break;\n\n        case 'insert':\n            printf(\"Inserted new document in %s\\n\", $ns);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'replace':\n            printf(\"Replaced new document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'update':\n            printf(\"Updated document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['updateDescription']), \"\\n\\n\";\n            break;\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "Inserted new document in test.inventory\n{\"_id\":{\"$oid\":\"5a81fc0d6118fd1af1790d32\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n{\"updatedFields\":{\"quantity\":4},\"removedFields\":[]}\n\nDeleted document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}"
                }
            ],
            "preview": "Returns the current event in the change stream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-rename",
            "title": "MongoDB\\GridFS\\Bucket::rename()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Examples"
            ],
            "paragraphs": "Selects a GridFS file by its  _id  and alters its  filename . The  _id  of the file to rename. The new  filename  value. MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function rename($id, string $newFilename): void"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$id = $bucket->uploadFromStream('a', $stream);\n\n$bucket->rename($id, 'b');\n\nvar_dump(stream_get_contents($bucket->openDownloadStreamByName('b')));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Selects a GridFS file by its _id and alters its filename.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-createCollection",
            "title": "MongoDB\\Database::createCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Explicitly creates a collection. MongoDB creates collections implicitly when you first reference the\ncollection in a command, such as when inserting a document into a new\ncollection. You may also explicitly create a collection with specific options\nusing the  MongoDB\\Database::createCollection()  method, or using\n db.createCollection()  in\nthe MongoDB shell. Explicitly creating collections enables you to create\n capped collections , specify\n document validation criteria ,\nor configure your storage engine or indexing options. The name of the collection to create. An array specifying the desired options. Not all options are available on all versions of MongoDB. Refer to the\n create  command reference in the\nMongoDB manual for compatibility considerations. Name Type Description autoIndexId boolean Specify  false  to disable the automatic creation of an index on the\n _id  field. For replica sets, do not set  autoIndexId  to  false . capped boolean To create a capped collection, specify  true . If you specify\n true , you must also set a maximum size in the  size  option. changeStreamPreAndPostImages document Used to configure support for pre- and post-images in change streams.\nSee the  create  command\ndocumentation for more information. This option is available since MongoDB 6.0 and will result in an\nexception at execution time if specified for an older server version. clusteredIndex document A clustered index specification. See\n Clustered Collections  or the\n create  command documentation for\nmore information. This option is available since MongoDB 5.3 and will result in an\nexception at execution time if specified for an older server version. collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. encryptedFields document A document describing encrypted fields for queryable encryption. If\nomitted, the  encryptedFieldsMap  option within the\n autoEncryption  driver option will be consulted. See\n Field Encryption and Queryability \nin the MongoDB manual for more information. This option is available since MongoDB 7.0 and will result in an\nexception at execution time if specified for an older server version. expireAfterSeconds integer Used to automatically delete documents in time series collections. See\nthe  create  command documentation\nfor more information. This option is available since MongoDB 5.0 and will result in an\nexception at execution time if specified for an older server version. flags integer Available for the MMAPv1 storage engine only to set the\n usePowerOf2Sizes  and  noPadding  flags. The library provides constants that you can combine with a\n bitwise OR operator  to set the flag\nvalues: Defaults to  1 . MongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES :  1 MongoDB\\Operation\\CreateCollection::NO_PADDING :  2 MongoDB 3.0 and later ignores the  usePowerOf2Sizes  flag. See\n collMod  and\n db.createCollection()  for more information. indexOptionDefaults array|object Allows users to specify a default configuration for indexes when\ncreating a collection. The  indexOptionDefaults  option accepts a  storageEngine \ndocument, which should take the following form: Storage engine configurations specified when creating indexes are\nvalidated and logged to the  oplog  during replication to support\nreplica sets with members that use different storage engines. max integer The maximum number of documents allowed in the capped collection. The\n size  option takes precedence over this limit. If a capped\ncollection reaches the  size  limit before it reaches the maximum\nnumber of documents, MongoDB removes old documents. If you prefer to\nuse the  max  limit, ensure that the  size  limit, which is\nrequired for a capped collection, is sufficient to contain the maximum\nnumber of documents. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . pipeline array An array that consists of the aggregation pipeline stage(s), which will\nbe applied to the collection or view specified by  viewOn . See the\n create  command documentation for\nmore information. session MongoDB\\Driver\\Session Client session to associate with the operation. size integer Specify a maximum size in bytes for a capped collection. Once a capped\ncollection reaches its maximum size, MongoDB removes the older\ndocuments to make space for the new documents. The  size  option is\nrequired for capped collections and ignored for other collections. storageEngine array|object Available for the WiredTiger storage engine only. Allows users to specify configuration to the storage engine on a\nper-collection basis when creating a collection. The value of the\n storageEngine  option should take the following form: Storage engine configurations specified when creating collections are\nvalidated and logged to the  oplog  during replication to support\nreplica sets with members that use different storage engines. timeseries array|object An object containing options for creating time series collections. See\nthe  create  command documentation\nfor supported options. This option is available since MongoDB 5.0 and will result in an\nexception at execution time if specified for an older server version. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. validationAction string Determines whether to  error  on invalid documents or just  warn \nabout the violations but allow invalid documents to be inserted. Validation of documents only applies to those documents as\ndetermined by the  validationLevel . validationAction Description \"error\" Default . Documents must pass validation before the write\noccurs. Otherwise, the write operation fails. \"warn\" Documents do not have to pass validation. If the document fails\nvalidation, the write operation logs the validation failure. validationLevel string Determines how strictly MongoDB applies the validation rules to\nexisting documents during an update. validationLevel Description \"off\" No validation for inserts or updates. \"strict\" Default . Apply validation rules to all inserts and all updates. \"moderate\" Apply validation rules to inserts and to updates on existing\n valid  documents. Do not apply rules to updates on existing\n invalid  documents. validator array|object Allows users to specify  validation rules or expressions  for the collection. For more information,\nsee  Document Validation  in the\nMongoDB manual. The  validator  option takes an array that specifies the validation\nrules or expressions. You can specify the expressions using the same\noperators as MongoDB's\n query operators  with the\nexception of  $geoNear ,  $near ,  $nearSphere ,\n $text , and  $where . Validation occurs during updates and inserts. Existing documents\ndo not undergo validation checks until modification. You cannot specify a validator for collections in the  admin ,\n local , and  config  databases. You cannot specify a validator for  system.*  collections. viewOn string The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view (i.e.\nit does not include the database name). Views must be created in the\nsame databases as the source collection or view. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. An array or object with the result document of the  create  command. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example creates a  users  collection in the  test \ndatabase with document validation criteria: The output would then resemble: create  command reference in the MongoDB\nmanual db.createCollection() Time Series Collections",
            "code": [
                {
                    "lang": "php",
                    "value": "function createCollection(\n    string $collectionName,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "none",
                    "value": "{ <storage-engine-name>: <options> }"
                },
                {
                    "lang": "none",
                    "value": "{ <storage-engine-name>: <options> }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$result = $db->createCollection('users', [\n    'validator' => [\n        'username' => ['$type' => 'string'],\n        'email' => ['$regex' => '@mongodb\\.com$'],\n    ],\n]);\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Explicitly creates a collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-uploadFromStream",
            "title": "MongoDB\\GridFS\\Bucket::uploadFromStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Creates a new GridFS file and copies the contents of a readable stream to it. The  filename  of the file to create. Readable stream, from which the new GridFS file's contents will be read. An array specifying the desired options. Name Type Description _id mixed Value to use as the file document identifier. Defaults to a new\n MongoDB\\BSON\\ObjectId  object. chunkSizeBytes integer The chunk size in bytes. Defaults to the bucket's  chunkSizeBytes \noption. disableMD5 boolean Whether to disable automatic MD5 generation when storing files. Defaults to  false . metadata array|object User data for the  metadata  field of the file document. If not\nspecified, the  metadata  field will not be set on the file document. The  _id  field of the metadata document associated with the newly created\nGridFS file. If the  _id  option is not specified, a new\n MongoDB\\BSON\\ObjectId  object will be used\nby default. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::openUploadStream()",
            "code": [
                {
                    "lang": "php",
                    "value": "function uploadFromStream(\n    string $filename,\n    resource $source,\n    array $options = []\n): mixed"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$id = $bucket->uploadFromStream('filename', $stream);\n\nvar_dump($id);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\BSON\\ObjectId)#3009 (1) {\n  [\"oid\"]=>\n  string(24) \"5acf81017e21e816e538d883\"\n}"
                }
            ],
            "preview": "Creates a new GridFS file and copies the contents of a readable stream to it.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-modifyCollection",
            "title": "MongoDB\\Database::modifyCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Modifies a collection or view according to the specified\n $collectionOptions . The name of the collection or view to modify. Collection or view options to assign. An array specifying the desired options. Name Type Description comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . This option is available since MongoDB 4.4 and will result in an\nexception at execution time if specified for an older server version. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array This will be used for the returned command result document. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. An array or object with the result document of the  collMod  command. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following example changes the expiration time of a TTL collection in the\n test  database: The output would then resemble: collMod  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function modifyCollection(\n    string $collectionName,\n    array $collectionOptions,\n    array $options = []\n): array|object"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$db = (new MongoDB\\Client)->test;\n\n$result = $db->modifyCollection('users', [\n    'keyPattern' => ['lastAccess' => 1],\n    'expireAfterSeconds' => 1000\n]);\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(stdClass)#2779 {\n  [\"expireAfterSeconds_old\"]=>\n  int(3)\n  [\"expireAfterSeconds_new\"]=>\n  int(1000)\n  [\"ok\"]=>\n  float(1)\n}"
                }
            ],
            "preview": "Modifies a collection or view according to the specified\n$collectionOptions.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-downloadToStream",
            "title": "MongoDB\\GridFS\\Bucket::downloadToStream()",
            "headings": [
                "Definition",
                "Parameters",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Selects a GridFS file by its  _id  and copies its contents to a writable\nstream. The  _id  of the file to download. Writable stream, to which the GridFS file's contents will be written. MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The output would then resemble: MongoDB\\GridFS\\Bucket::downloadToStreamByName() MongoDB\\GridFS\\Bucket::openDownloadStream() MongoDB\\GridFS\\Bucket::openDownloadStreamByName()",
            "code": [
                {
                    "lang": "php",
                    "value": "function downloadToStream($id, $destination): void"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = fopen('php://temp', 'w+b');\nfwrite($stream, \"foobar\");\nrewind($stream);\n\n$id = $bucket->uploadFromStream('filename', $stream);\n\n$destination = fopen('php://temp', 'w+b');\n\n$bucket->downloadToStream($id, $destination);\n\nvar_dump(stream_get_contents($destination, -1, 0));"
                },
                {
                    "lang": "none",
                    "value": "string(6) \"foobar\""
                }
            ],
            "preview": "Selects a GridFS file by its _id and copies its contents to a writable\nstream.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-aggregate",
            "title": "MongoDB\\Database::aggregate()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Runs a specified  admin/diagnostic pipeline  which does\nnot require an underlying collection. For aggregations on collection data,\nsee  MongoDB\\Collection::aggregate() . Specifies an  aggregation pipeline \noperation. An array specifying the desired options. Name Type Description allowDiskUse boolean Enables writing to temporary files. When set to  true , aggregation\nstages can write data to the  _tmp  sub-directory in the  dbPath \ndirectory. batchSize integer Specifies the batch size for the cursor, which will apply to both the\ninitial  aggregate  command and any subsequent  getMore  commands.\nThis determines the maximum number of documents to return in each\nresponse from the server. A batchSize of  0  is special in that and will only apply to the\ninitial  aggregate  command; subsequent  getMore  commands will use\nthe server's default batch size. This may be useful for quickly\nreturning a cursor or failure from  aggregate  without doing\nsignificant server-side work. bypassDocumentValidation boolean If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . This only applies when using the  $out  and\n $out  stages. collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed The comment can be any valid BSON type for server versions 4.4 and\nabove. Earlier server versions only support string values. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . explain boolean Specifies whether or not to return the information on the processing of\nthe pipeline. hint string|array|object The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. let array|object Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. maxTimeMS integer The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the database's read concern. readPreference MongoDB\\Driver\\ReadPreference Read preference  to use for the\noperation. Defaults to the database's read preference. session MongoDB\\Driver\\Session Client session to associate with the operation. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database's type map. writeConcern MongoDB\\Driver\\WriteConcern Write concern  to use for the operation.\nDefaults to the database's write concern. A  MongoDB\\Driver\\Cursor  or\n ArrayIterator  object. In both cases, the return value\nwill be  Traversable . MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). The following aggregation example lists all running commands using the\n $currentOp  aggregation pipeline stage, then filters this list to only show\nrunning command operations. MongoDB\\Collection::aggregate() aggregate  command reference in the\nMongoDB manual Aggregation Pipeline  documentation in\nthe MongoDB Manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function aggregate(\n    array $pipeline,\n    array $options = []\n): Traversable"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->admin;\n\n$cursor = $database->aggregate(\n    [\n        ['$currentOp' => []],\n        ['$match' => ['op' => 'command'],\n    ]\n);"
                }
            ],
            "preview": "Runs a specified admin/diagnostic pipeline which does\nnot require an underlying collection. For aggregations on collection data,\nsee MongoDB\\Collection::aggregate().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getDatabaseName",
            "title": "MongoDB\\GridFS\\Bucket::getDatabaseName()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples"
            ],
            "paragraphs": "Returns the name of the database containing this bucket. The name of the database containing this bucket as a string. The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "function getDatabaseName(): string"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\nvar_dump($bucket->getDatabaseName());"
                },
                {
                    "lang": "none",
                    "value": "string(4) \"test\""
                }
            ],
            "preview": "Returns the name of the database containing this bucket.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-getReadConcern",
            "title": "MongoDB\\Database::getReadConcern()",
            "headings": [
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "paragraphs": "Returns the read concern for this database. A  MongoDB\\Driver\\ReadConcern  object. The output would then resemble: Read Concern  in the MongoDB manual MongoDB\\Driver\\ReadConcern::isDefault() MongoDB\\Client::getReadConcern() MongoDB\\Collection::getReadConcern() MongoDB\\GridFS\\Bucket::getReadConcern()",
            "code": [
                {
                    "lang": "php",
                    "value": "function getReadConcern(): MongoDB\\Driver\\ReadConcern"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->selectDatabase('test', [\n   'readConcern' => new MongoDB\\Driver\\ReadConcern('majority'),\n]);\n\nvar_dump($database->getReadConcern());"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}"
                }
            ],
            "preview": "Returns the read concern for this database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isTtl",
            "title": "MongoDB\\Model\\IndexInfo::isTtl()",
            "headings": [
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Return whether the index is a  TTL index . This\ncorrelates with the  expireAfterSeconds  option for\n MongoDB\\Collection::createIndex() . A boolean indicating whether the index is a TTL index. The output would then resemble: MongoDB\\Collection::createIndex() listIndexes  command reference in\nthe MongoDB manual TTL Indexes  in the MongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function isTtl(): boolean"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$info = new IndexInfo([\n    'expireAfterSeconds' => 100,\n]);\n\nvar_dump($info->isTtl());"
                },
                {
                    "lang": "none",
                    "value": "bool(true)"
                }
            ],
            "preview": "Return whether the index is a TTL index. This\ncorrelates with the expireAfterSeconds option for\nMongoDB\\Collection::createIndex().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelCollectionInfo",
            "title": "MongoDB\\Model\\CollectionInfo Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class models information about a collection. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\CollectionInfoIterator ,\nwhich is returned by  MongoDB\\Database::listCollections() . This class implements PHP's  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . The  MongoDB\\Model\\CollectionInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . MongoDB\\Model\\CollectionInfo::getCappedMax() MongoDB\\Model\\CollectionInfo::getCappedSize() MongoDB\\Model\\CollectionInfo::getIdIndex() MongoDB\\Model\\CollectionInfo::getInfo() MongoDB\\Model\\CollectionInfo::getName() MongoDB\\Model\\CollectionInfo::getOptions() MongoDB\\Model\\CollectionInfo::getType() MongoDB\\Model\\CollectionInfo::isCapped()",
            "code": [],
            "preview": "This class models information about a collection. Instances of this class are\nreturned by traversing a MongoDB\\Model\\CollectionInfoIterator,\nwhich is returned by MongoDB\\Database::listCollections().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelIndexInfoIterator",
            "title": "MongoDB\\Model\\IndexInfoIterator Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This interface extends PHP's  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Collection::listIndexes() . This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\IndexInfo .",
            "code": [],
            "preview": "This interface extends PHP's Iterator\ninterface. An instance of this interface is returned by\nMongoDB\\Collection::listIndexes().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBClient-watch",
            "title": "MongoDB\\Client::watch()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Executes a  change stream  operation on the client.\nThe change stream can be watched for cluster-level changes. The pipeline of stages to append to an initial  $changeStream  stage. An array specifying the desired options. Name Type Description batchSize integer Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). collation array|object Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. fullDocument string Determines how the  fullDocument  response field will be populated for\nupdate operations. By default, change streams only return the delta of fields (via an\n updateDescription  field) for update operations and  fullDocument  is\nomitted. Insert and replace operations always include the  fullDocument \nfield. Delete operations omit the field as the document no longer exists. Specify \"updateLookup\" to return the current majority-committed version of the\nupdated document. MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the post-image if available or a null value if not.\nSpecify \"required\" to return the post-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED This is an option of the  $changeStream  pipeline stage. fullDocumentBeforeChange string Determines how the  fullDocumentBeforeChange  response field will be\npopulated. By default, the field is omitted. MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the pre-image if available or a null value if not.\nSpecify \"required\" to return the pre-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED This is an option of the  $changeStream  pipeline stage. maxAwaitTimeMS integer Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the client's read concern. readPreference MongoDB\\Driver\\ReadPreference This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. Read preference  to use for the\noperation. Defaults to the client's read preference. resumeAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is an option of the  $changeStream  pipeline stage. session MongoDB\\Driver\\Session Client session to associate with the operation. showExpandedEvents boolean If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. createIndexes dropIndexes modify create shardCollection reshardCollection  (server 6.1+) refineCollectionShardKey  (server 6.1+) This is an option of the  $changeStream  pipeline stage. startAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\"invalidate\" event. Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. startAtOperationTime MongoDB\\BSON\\TimestampInterface If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client's type map. A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). This example reports events while iterating a change stream. Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: MongoDB\\Collection::watch() MongoDB\\Database::watch() Aggregation Pipeline  documentation in\nthe MongoDB Manual Change Streams  documentation in the MongoDB manual Change Events  documentation in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function watch(\n    array $pipeline = [],\n    array $options = []\n): MongoDB\\ChangeStream"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$client = new MongoDB\\Client($uri);\n\n$changeStream = $client->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    if ($event['operationType'] === 'invalidate') {\n        break;\n    }\n\n    $ns = sprintf('%s.%s', $event['ns']['db'], $event['ns']['coll']);\n    $id = json_encode($event['documentKey']['_id']);\n\n    switch ($event['operationType']) {\n        case 'delete':\n            printf(\"Deleted document in %s with _id: %s\\n\\n\", $ns, $id);\n            break;\n\n        case 'insert':\n            printf(\"Inserted new document in %s\\n\", $ns);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'replace':\n            printf(\"Replaced new document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'update':\n            printf(\"Updated document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['updateDescription']), \"\\n\\n\";\n            break;\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "Inserted new document in app.user\n{\"_id\":{\"$oid\":\"5b329b6674083047cc05e607\"},\"username\":\"bob\"}\n\nInserted new document in app.products\n{\"_id\":{\"$oid\":\"5b329b6a74083047cc05e608\"},\"name\":\"Widget\",\"quantity\":5}\n\nInserted new document in logs.messages\n{\"_id\":{\"$oid\":\"5b329b7374083047cc05e609\"},\"msg\":\"bob purchased a widget\"}"
                }
            ],
            "preview": "Executes a change stream operation on the client.\nThe change stream can be watched for cluster-level changes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBCollection-watch",
            "title": "MongoDB\\Collection::watch()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "paragraphs": "Executes a  change stream  operation on the\ncollection. The change stream can be watched for collection-level changes. The pipeline of stages to append to an initial  $changeStream  stage. An array specifying the desired options. Name Type Description batchSize integer Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). collation array|object Starting in MongoDB 4.2, defaults to simple binary comparison if\nomitted. In earlier versions, change streams opened on a single\ncollection would inherit the collection's default collation. Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . comment mixed Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . The comment can be any valid BSON type since MongoDB 4.4. Earlier server\nversions only support string values. fullDocument string Determines how the  fullDocument  response field will be populated for\nupdate operations. By default, change streams only return the delta of fields (via an\n updateDescription  field) for update operations and  fullDocument  is\nomitted. Insert and replace operations always include the  fullDocument \nfield. Delete operations omit the field as the document no longer exists. Specify \"updateLookup\" to return the current majority-committed version of the\nupdated document. MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the post-image if available or a null value if not.\nSpecify \"required\" to return the post-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED This is an option of the  $changeStream  pipeline stage. fullDocumentBeforeChange string Determines how the  fullDocumentBeforeChange  response field will be\npopulated. By default, the field is omitted. MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\"whenAvailable\" to return the pre-image if available or a null value if not.\nSpecify \"required\" to return the pre-image if available or raise an error if\nnot. The following values are supported: MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED This is an option of the  $changeStream  pipeline stage. maxAwaitTimeMS integer Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. readConcern MongoDB\\Driver\\ReadConcern Read concern  to use for the operation.\nDefaults to the collection's read concern. readPreference MongoDB\\Driver\\ReadPreference This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. Read preference  to use for the\noperation. Defaults to the collection's read preference. resumeAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is an option of the  $changeStream  pipeline stage. session MongoDB\\Driver\\Session Client session to associate with the operation. showExpandedEvents boolean If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. createIndexes dropIndexes modify create shardCollection reshardCollection  (server 6.1+) refineCollectionShardKey  (server 6.1+) This is an option of the  $changeStream  pipeline stage. startAfter array|object Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\"invalidate\" event. Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. startAtOperationTime MongoDB\\BSON\\TimestampInterface If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. This is an option of the  $changeStream  pipeline stage. typeMap array The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection's type map. A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). This example reports events while iterating a change stream. Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: MongoDB\\Client::watch() MongoDB\\Database::watch() Aggregation Pipeline  documentation in\nthe MongoDB Manual Change Streams  documentation in the MongoDB manual Change Events  documentation in the\nMongoDB manual",
            "code": [
                {
                    "lang": "php",
                    "value": "function watch(\n    array $pipeline = [],\n    array $options = []\n): MongoDB\\ChangeStream"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$uri = 'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet';\n\n$collection = (new MongoDB\\Client($uri))->test->inventory;\n\n$changeStream = $collection->watch();\n\nfor ($changeStream->rewind(); true; $changeStream->next()) {\n    if ( ! $changeStream->valid()) {\n        continue;\n    }\n\n    $event = $changeStream->current();\n\n    if ($event['operationType'] === 'invalidate') {\n        break;\n    }\n\n    $ns = sprintf('%s.%s', $event['ns']['db'], $event['ns']['coll']);\n    $id = json_encode($event['documentKey']['_id']);\n\n    switch ($event['operationType']) {\n        case 'delete':\n            printf(\"Deleted document in %s with _id: %s\\n\\n\", $ns, $id);\n            break;\n\n        case 'insert':\n            printf(\"Inserted new document in %s\\n\", $ns);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'replace':\n            printf(\"Replaced new document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['fullDocument']), \"\\n\\n\";\n            break;\n\n        case 'update':\n            printf(\"Updated document in %s with _id: %s\\n\", $ns, $id);\n            echo json_encode($event['updateDescription']), \"\\n\\n\";\n            break;\n    }\n}"
                },
                {
                    "lang": "none",
                    "value": "Inserted new document in test.user\n{\"_id\":{\"$oid\":\"5b329c4874083047cc05e60a\"},\"username\":\"bob\"}\n\nInserted new document in test.products\n{\"_id\":{\"$oid\":\"5b329c4d74083047cc05e60b\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.user with _id: {\"$oid\":\"5b329a4f74083047cc05e603\"}\n{\"updatedFields\":{\"username\":\"robert\"},\"removedFields\":[]}"
                }
            ],
            "preview": "Executes a change stream operation on the\ncollection. The change stream can be watched for collection-level changes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/method/MongoDBDatabase-createEncryptedCollection",
            "title": "MongoDB\\Database::createEncryptedCollection()",
            "headings": [
                "Definition",
                "Parameters",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "paragraphs": "Explicitly creates an encrypted collection. This method will automatically create data keys for any encrypted fields\nwhere  keyId  is  null . Data keys will be created using\n MongoDB\\Driver\\ClientEncryption::createDataKey() \nand the provided  $kmsProvider  and  $masterKey  parameters. A copy of\nthe modified  encryptedFields  option will be returned in addition to the\nresult from creating the collection. This method does not affect any auto encryption settings on existing\n MongoDB\\Client  objects. Users must configure auto encryption\nafter creating the encrypted collection with  createEncryptedCollection() . The name of the encrypted collection to create. The ClientEncryption object used to create data keys. KMS provider (e.g. \"local\", \"aws\") that will be used to encrypt new data keys.\nThis corresponds to the  $kmsProvider  parameter for\n MongoDB\\Driver\\ClientEncryption::createDataKey() . KMS-specific key options that will be used to encrypt new data keys. This\ncorresponds to the  masterKey  option for\n MongoDB\\Driver\\ClientEncryption::createDataKey() . If  $kmsProvider  is \"local\", this should be  null . An array specifying the desired options. The  $options  parameter supports the same options as\n MongoDB\\Database::createCollection() . The  encryptedFields \noption is required. A tuple (i.e. two-element array) containing the result document from the\n create  command (an array or object\naccording to the  typeMap  option) and the modified  encryptedFields \noption. MongoDB\\Exception\\CreateEncryptedCollectionException  if any error\nis encountered creating data keys or the collection. The original exception and\nmodified  encryptedFields  option can be accessed via the  getPrevious() \nand  getEncryptedFields()  methods, respectively. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. The following example creates an encrypted  users  collection in the  test \ndatabase. The  ssn  field within the  users  collection will be defined as\nan encrypted string field. If the encrypted collection was successfully created,  $result  will contain\nthe response document from the  create  command and\n $encryptedFields['fields'][0]['keyId']  will contain a\n MongoDB\\BSON\\Binary  object with subtype 4\n(i.e. UUID). The modified  encryptedFields  option can then be used to construct a new\n MongoDB\\Client  with auto encryption enabled. MongoDB\\Database::createCollection() MongoDB\\Client::createClientEncryption() MongoDB\\Driver\\ClientEncryption::createDataKey() create  command reference in the MongoDB\nmanual",
            "code": [
                {
                    "lang": "php",
                    "value": "function createEncryptedCollection(\n    string $collectionName,\n    MongoDB\\Driver\\ClientEncryption $clientEncryption,\n    string $kmsProvider,\n    ?array $masterKey,\n    array $options\n): array"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n// 96-byte master key used to encrypt/decrypt data keys\ndefine('LOCAL_MASTERKEY', '...');\n\n$client = new MongoDB\\Client;\n\n$clientEncryption = $client->createClientEncryption([\n    'keyVaultNamespace' => 'keyvault.datakeys',\n    'kmsProviders' => [\n        'local' => ['key' => new MongoDB\\BSON\\Binary(base64_decode(LOCAL_MASTERKEY), 0)],\n     ],\n);\n\n[$result, $encryptedFields] = $client->test->createEncryptedCollection(\n    'users',\n    $clientEncryption,\n    'local',\n    null,\n    [\n        'encryptedFields' => [\n            'fields' => [\n                ['path' => 'ssn', 'bsonType' => 'string', 'keyId' => null],\n            ],\n        ],\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$encryptedClient = new MongoDB\\Client(\n    null, // Connection string\n    [], // Additional connection string options\n    [\n        'autoEncryption' => [\n            'keyVaultNamespace' => 'keyvault.datakeys',\n            'kmsProviders' => [\n                'local' => ['key' => new MongoDB\\BSON\\Binary(base64_decode(LOCAL_MASTERKEY), 0)],\n             ],\n             'encryptedFieldsMap' => [\n                 'test.users' => $encryptedFields,\n             ],\n        ],\n    ]\n);"
                }
            ],
            "preview": "Explicitly creates an encrypted collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBBulkWriteResult",
            "title": "MongoDB\\BulkWriteResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class contains information about an executed bulk write operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult \nobject and is returned from  MongoDB\\Collection::bulkWrite() . MongoDB\\BulkWriteResult::getDeletedCount() MongoDB\\BulkWriteResult::getInsertedCount() MongoDB\\BulkWriteResult::getInsertedIds() MongoDB\\BulkWriteResult::getMatchedCount() MongoDB\\BulkWriteResult::getModifiedCount() MongoDB\\BulkWriteResult::getUpsertedCount() MongoDB\\BulkWriteResult::getUpsertedIds() MongoDB\\BulkWriteResult::isAcknowledged()",
            "code": [],
            "preview": "This class contains information about an executed bulk write operation. It\nencapsulates a MongoDB\\Driver\\WriteResult\nobject and is returned from MongoDB\\Collection::bulkWrite().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBDatabase",
            "title": "MongoDB\\Database Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "Provides methods for common operations on a database, such as executing\ndatabase commands and managing collections. You can construct a database directly using the driver's\n MongoDB\\Driver\\Manager  class or\nselect a database from the library's  MongoDB\\Client  class. A\ndatabase may also be cloned from an existing  MongoDB\\Database \nobject via the  withOptions() \nmethod. MongoDB\\Database  supports the  readConcern ,  readPreference ,  typeMap ,\nand  writeConcern  options. If you omit an\noption, the database inherits the value from the  Manager  constructor argument or the  Client \nobject used to select the database. Operations within the  MongoDB\\Database  class inherit the\nDatabase's options. MongoDB\\Database::__construct() MongoDB\\Database::__get() MongoDB\\Database::aggregate() MongoDB\\Database::command() MongoDB\\Database::createCollection() MongoDB\\Database::createEncryptedCollection() MongoDB\\Database::drop() MongoDB\\Database::dropCollection() MongoDB\\Database::getDatabaseName() MongoDB\\Database::getManager() MongoDB\\Database::getReadConcern() MongoDB\\Database::getReadPreference() MongoDB\\Database::getTypeMap() MongoDB\\Database::getWriteConcern() MongoDB\\Database::listCollectionNames() MongoDB\\Database::listCollections() MongoDB\\Database::modifyCollection() MongoDB\\Database::renameCollection() MongoDB\\Database::selectCollection() MongoDB\\Database::selectGridFSBucket() MongoDB\\Database::watch() MongoDB\\Database::withOptions()",
            "code": [],
            "preview": "Provides methods for common operations on a database, such as executing\ndatabase commands and managing collections.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBCollection",
            "title": "MongoDB\\Collection Class",
            "headings": [
                "Definition",
                "Type Map Limitations",
                "Methods"
            ],
            "paragraphs": "Provides methods for common operations on collections and documents,\nincluding CRUD operations and index management. You can construct collections directly using the driver's\n MongoDB\\Driver\\Manager  class or\nselect a collection from the library's  MongoDB\\Client  or\n MongoDB\\Database  classes. A collection may also be cloned from\nan existing  MongoDB\\Collection  object via the\n withOptions()  method. MongoDB\\Collection  supports the  readConcern ,  readPreference ,  typeMap ,\nand  writeConcern  options. If you omit an\noption, the collection inherits the value from the  Manager  constructor argument or the  Client \nor  Database  object used to select the collection. Operations within the  MongoDB\\Collection  class inherit the\ncollection's options. The  aggregate  (when not using a\ncursor),  distinct , and\n findAndModify  helpers do not\nsupport a  typeMap  option due to a driver limitation. The\n aggregate() ,\n distinct() ,\n findOneAndReplace() ,\n findOneAndUpdate() , and\n findOneAndDelete() \nmethods return BSON documents as  stdClass  objects and BSON arrays as arrays. MongoDB\\Collection::__construct() MongoDB\\Collection::aggregate() MongoDB\\Collection::bulkWrite() MongoDB\\Collection::count() MongoDB\\Collection::countDocuments() MongoDB\\Collection::createIndex() MongoDB\\Collection::createIndexes() MongoDB\\Collection::deleteMany() MongoDB\\Collection::deleteOne() MongoDB\\Collection::distinct() MongoDB\\Collection::drop() MongoDB\\Collection::dropIndex() MongoDB\\Collection::dropIndexes() MongoDB\\Collection::estimatedDocumentCount() MongoDB\\Collection::explain() MongoDB\\Collection::find() MongoDB\\Collection::findOne() MongoDB\\Collection::findOneAndDelete() MongoDB\\Collection::findOneAndReplace() MongoDB\\Collection::findOneAndUpdate() MongoDB\\Collection::getCollectionName() MongoDB\\Collection::getDatabaseName() MongoDB\\Collection::getManager() MongoDB\\Collection::getNamespace() MongoDB\\Collection::getReadConcern() MongoDB\\Collection::getReadPreference() MongoDB\\Collection::getTypeMap() MongoDB\\Collection::getWriteConcern() MongoDB\\Collection::insertMany() MongoDB\\Collection::insertOne() MongoDB\\Collection::listIndexes() MongoDB\\Collection::mapReduce() MongoDB\\Collection::rename() MongoDB\\Collection::replaceOne() MongoDB\\Collection::updateMany() MongoDB\\Collection::updateOne() MongoDB\\Collection::watch() MongoDB\\Collection::withOptions()",
            "code": [],
            "preview": "Provides methods for common operations on collections and documents,\nincluding CRUD operations and index management.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBDeleteResult",
            "title": "MongoDB\\DeleteResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class contains information about an executed delete operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult \nobject and is returned from  MongoDB\\Collection::deleteMany()  or\n MongoDB\\Collection::deleteOne() . MongoDB\\DeleteResult::getDeletedCount() MongoDB\\DeleteResult::isAcknowledged()",
            "code": [],
            "preview": "This class contains information about an executed delete operation. It\nencapsulates a MongoDB\\Driver\\WriteResult\nobject and is returned from MongoDB\\Collection::deleteMany() or\nMongoDB\\Collection::deleteOne().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBGridFSBucket",
            "title": "MongoDB\\GridFS\\Bucket Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "GridFS  is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g.  fs.chunks ), and the other stores file\nmetadata (e.g.  fs.files ). The  MongoDB\\GridFS\\Bucket  class\nprovides an interface around these collections for working with the files as\nPHP  Streams . You can construct a GridFS bucket using the driver's\n Manager  class, or select a bucket from\nthe library's  MongoDB\\Database  class via the\n selectGridFSBucket() \nmethod. MongoDB\\GridFS\\Bucket::__construct() MongoDB\\GridFS\\Bucket::delete() MongoDB\\GridFS\\Bucket::downloadToStream() MongoDB\\GridFS\\Bucket::drop() MongoDB\\GridFS\\Bucket::find() MongoDB\\GridFS\\Bucket::findOne() MongoDB\\GridFS\\Bucket::getBucketName() MongoDB\\GridFS\\Bucket::getChunksCollection() MongoDB\\GridFS\\Bucket::getChunkSizeBytes() MongoDB\\GridFS\\Bucket::getDatabaseName() MongoDB\\GridFS\\Bucket::getFileDocumentForStream() MongoDB\\GridFS\\Bucket::getFileIdForStream() MongoDB\\GridFS\\Bucket::getFilesCollection() MongoDB\\GridFS\\Bucket::getReadConcern() MongoDB\\GridFS\\Bucket::getReadPreference() MongoDB\\GridFS\\Bucket::getTypeMap() MongoDB\\GridFS\\Bucket::getWriteConcern() MongoDB\\GridFS\\Bucket::openDownloadStream() MongoDB\\GridFS\\Bucket::openDownloadStreamByName() MongoDB\\GridFS\\Bucket::openUploadStream() MongoDB\\GridFS\\Bucket::rename() MongoDB\\GridFS\\Bucket::uploadFromStream()",
            "code": [],
            "preview": "GridFS is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g. fs.chunks), and the other stores file\nmetadata (e.g. fs.files). The MongoDB\\GridFS\\Bucket class\nprovides an interface around these collections for working with the files as\nPHP Streams.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBInsertOneResult",
            "title": "MongoDB\\InsertOneResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class contains information about an executed insert operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult \nobject and is returned from  MongoDB\\Collection::insertOne() . MongoDB\\InsertOneResult::getInsertedCount() MongoDB\\InsertOneResult::getInsertedId() MongoDB\\InsertOneResult::isAcknowledged()",
            "code": [],
            "preview": "This class contains information about an executed insert operation. It\nencapsulates a MongoDB\\Driver\\WriteResult\nobject and is returned from MongoDB\\Collection::insertOne().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBChangeStream",
            "title": "MongoDB\\ChangeStream Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class extends PHP's  Iterator \ninterface. An instance of this class is returned by\n MongoDB\\Client::watch() ,\n MongoDB\\Database::watch() , and\n MongoDB\\Collection::watch() . This class allows for iteration of events in a change stream. It also allows\niteration to automatically resume after certain errors, such as a replica set\nfailover. MongoDB\\ChangeStream::current() MongoDB\\ChangeStream::getCursorId() MongoDB\\ChangeStream::getResumeToken() MongoDB\\ChangeStream::key() MongoDB\\ChangeStream::next() MongoDB\\ChangeStream::rewind() MongoDB\\ChangeStream::valid()",
            "code": [],
            "preview": "This class extends PHP's Iterator\ninterface. An instance of this class is returned by\nMongoDB\\Client::watch(),\nMongoDB\\Database::watch(), and\nMongoDB\\Collection::watch().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelDatabaseInfoIterator",
            "title": "MongoDB\\Model\\DatabaseInfoIterator Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This interface extends PHP's  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Client::listDatabases() . This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\DatabaseInfo .",
            "code": [],
            "preview": "This interface extends PHP's Iterator\ninterface. An instance of this interface is returned by\nMongoDB\\Client::listDatabases().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBUpdateResult",
            "title": "MongoDB\\UpdateResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class contains information about an executed update or replace\noperation. It encapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::replaceOne() ,\n MongoDB\\Collection::updateMany() , or\n MongoDB\\Collection::updateOne() . MongoDB\\UpdateResult::getMatchedCount() MongoDB\\UpdateResult::getModifiedCount() MongoDB\\UpdateResult::getUpsertedCount() MongoDB\\UpdateResult::getUpsertedId() MongoDB\\UpdateResult::isAcknowledged()",
            "code": [],
            "preview": "This class contains information about an executed update or replace\noperation. It encapsulates a MongoDB\\Driver\\WriteResult object and is returned from\nMongoDB\\Collection::replaceOne(),\nMongoDB\\Collection::updateMany(), or\nMongoDB\\Collection::updateOne().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelCollectionInfoIterator",
            "title": "MongoDB\\Model\\CollectionInfoIterator Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This interface extends PHP's  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Database::listCollections() . This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\CollectionInfo .",
            "code": [],
            "preview": "This interface extends PHP's Iterator\ninterface. An instance of this interface is returned by\nMongoDB\\Database::listCollections().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBMapReduceResult",
            "title": "MongoDB\\MapReduceResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class extends PHP's  IteratorAggregate \ninterface. An instance of this class is returned by\n MongoDB\\Collection::mapReduce() . This class allows for iteration of map-reduce results irrespective of the\noutput method (e.g. inline, collection). It also provides access to command\nstatistics. MongoDB\\MapReduceResult::getCounts() MongoDB\\MapReduceResult::getExecutionTimeMS() MongoDB\\MapReduceResult::getIterator() MongoDB\\MapReduceResult::getTiming()",
            "code": [],
            "preview": "This class extends PHP's IteratorAggregate\ninterface. An instance of this class is returned by\nMongoDB\\Collection::mapReduce().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBInsertManyResult",
            "title": "MongoDB\\InsertManyResult Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class contains information about an executed bulk insert operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult \nobject and is returned from  MongoDB\\Collection::insertMany() . MongoDB\\InsertManyResult::getInsertedCount() MongoDB\\InsertManyResult::getInsertedIds() MongoDB\\InsertManyResult::isAcknowledged()",
            "code": [],
            "preview": "This class contains information about an executed bulk insert operation. It\nencapsulates a MongoDB\\Driver\\WriteResult\nobject and is returned from MongoDB\\Collection::insertMany().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBClient",
            "title": "MongoDB\\Client Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class serves as an entry point for the  MongoDB PHP Library . It is the\npreferred class for connecting to a MongoDB server or cluster of servers and\nacts as a gateway for accessing individual databases and collections.\n MongoDB\\Client  is analogous to the driver's\n MongoDB\\Driver\\Manager  class, which it\n composes . MongoDB\\Client::__construct() MongoDB\\Client::__get() MongoDB\\Client::createClientEncryption() MongoDB\\Client::dropDatabase() MongoDB\\Client::getManager() MongoDB\\Client::getReadConcern() MongoDB\\Client::getReadPreference() MongoDB\\Client::getTypeMap() MongoDB\\Client::getWriteConcern() MongoDB\\Client::listDatabaseNames() MongoDB\\Client::listDatabases() MongoDB\\Client::selectCollection() MongoDB\\Client::selectDatabase() MongoDB\\Client::startSession() MongoDB\\Client::watch()",
            "code": [],
            "preview": "This class serves as an entry point for the MongoDB PHP Library. It is the\npreferred class for connecting to a MongoDB server or cluster of servers and\nacts as a gateway for accessing individual databases and collections.\nMongoDB\\Client is analogous to the driver's\nMongoDB\\Driver\\Manager class, which it\ncomposes.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelIndexInfo",
            "title": "MongoDB\\Model\\IndexInfo Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class models information about an index. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\IndexInfoIterator ,\nwhich is returned by  MongoDB\\Collection::listIndexes() . This class implements PHP's  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . The  MongoDB\\Model\\IndexInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . MongoDB\\Model\\IndexInfo::getKey() MongoDB\\Model\\IndexInfo::getName() MongoDB\\Model\\IndexInfo::getNamespace() MongoDB\\Model\\IndexInfo::getVersion() MongoDB\\Model\\IndexInfo::is2dSphere() MongoDB\\Model\\IndexInfo::isGeoHaystack() MongoDB\\Model\\IndexInfo::isSparse() MongoDB\\Model\\IndexInfo::isText() MongoDB\\Model\\IndexInfo::isTtl() MongoDB\\Model\\IndexInfo::isUnique()",
            "code": [],
            "preview": "This class models information about an index. Instances of this class are\nreturned by traversing a MongoDB\\Model\\IndexInfoIterator,\nwhich is returned by MongoDB\\Collection::listIndexes().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/class/MongoDBModelDatabaseInfo",
            "title": "MongoDB\\Model\\DatabaseInfo Class",
            "headings": [
                "Definition",
                "Methods"
            ],
            "paragraphs": "This class models information about a database. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\DatabaseInfoIterator ,\nwhich is returned by  MongoDB\\Client::listDatabases() . This class implements PHP's  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . The  MongoDB\\Model\\DatabaseInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . MongoDB\\Model\\DatabaseInfo::getName() MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() MongoDB\\Model\\DatabaseInfo::isEmpty()",
            "code": [],
            "preview": "This class models information about a database. Instances of this class are\nreturned by traversing a MongoDB\\Model\\DatabaseInfoIterator,\nwhich is returned by MongoDB\\Client::listDatabases().",
            "tags": null,
            "facets": null
        },
        {
            "slug": "reference/function/with_transaction",
            "title": "MongoDB\\with_transaction()",
            "headings": [
                "Definition",
                "Parameters",
                "Behavior",
                "Errors/Exceptions",
                "See Also"
            ],
            "paragraphs": "Execute a callback within a transaction using the given client session A client session used to execute the transaction. A callback that will be run inside the transaction. The callback must accept a\n MongoDB\\Driver\\Session  object as its first\nargument. Transaction options, which will be passed to\n MongoDB\\Driver\\Session::startTransaction .\nSee the extension documentation for a list of supported options. This function is responsible for starting a transaction, invoking a callback,\nand committing a transaction. It also applies logic to retry this process after\ncertain errors within a preset time limit. The callback is expected to execute\none or more operations within the transactionby passing the callback's\n MongoDB\\Driver\\Session  argument as an option to\nthose operations; however, that is not enforced. Any exception thrown during execution of the callback will be caught and\nevaluated. If an exception has a  TransientTransactionError  error label, the\ntransaction will be aborted, restarted, and the callback will be invoked again.\nFor any other exception, the transaction will be aborted and the exception\nre-thrown to propagate the error to the caller of  with_transaction() . Following successful execution of the callback, the transaction will be\ncommitted. If an exception with an UnknownTransactionCommitResult error label is\nencountered, the commit will be retried. If an exception with a\n TransientTransactionError  error label is encountered, the transaction will\nbe restarted and control will return to invoking the callback. Any other\nexception will be re-thrown to propagate the error to the caller of\n with_transaction() . When an error occurs during callback execution or committing, the process is\nonly retried if fewer than 120 seconds have elapsed since  with_transaction() \nwas first called. This time limit is not configurable. After this time, any\nexception that would normally result in a retry attempt will instead be\nre-thrown. Applications are strongly encouraged to use an\n idempotent  callback, since it\nmay be invoked multiple times if retryable errors are encountered during\neither callback execution or committing. MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). MongoDB\\Driver\\Session::startTransaction MongoDB\\Driver\\Session::commitTransaction Transactions: Drivers API  documentation in the MongoDB manual Convenient API for Transactions  specification",
            "code": [
                {
                    "lang": "php",
                    "value": "function with_transaction(\n    MongoDB\\Driver\\Session $session,\n    callable $callback,\n    array $transactionOptions = []\n): void"
                }
            ],
            "preview": "Execute a callback within a transaction using the given client session",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/commands",
            "title": "Execute Database Commands",
            "headings": [
                "Overview",
                "Commands That Return a Single Result Document",
                "Commands That Yield Multiple Results",
                "Specifying a Custom Read Preference"
            ],
            "paragraphs": "The  MongoDB PHP Library  provides helper methods across the  Client ,  Database , and\n Collection  classes for common\n database commands . In addition, the\n MongoDB\\Database::command()  method may be used to run database\ncommands that do not have a helper method. The  MongoDB\\Database::command()  method always returns a\n MongoDB\\Driver\\Cursor  object, since it must\nsupport execution of commands that return single result documents  and  multiple\nresults via a command cursor. Most database commands return a single result document, which can be obtained by\nconverting the returned cursor to an array and accessing its first element. The\nfollowing example executes a  ping  command\nand prints its result document: The output would resemble: Some database commands return a cursor with multiple results. The following\nexample executes  listCollections ,\nwhich returns a cursor containing a result document for each collection in the\n test  database, and iterates through the results using a  foreach  loop.\nNote that this example is illustrative; applications would generally use\n MongoDB\\Database::listCollections()  in practice. The output might resemble the following: At the  protocol  level, commands that yield multiple results via a cursor\nwill return a single result document with the essential ingredients for\nconstructing the cursor (i.e. the cursor's ID, namespace, and an optional\nfirst batch of results). If the  MongoDB\\Driver\\Manager::executeCommand()  method in the PHP driver detects\nsuch a response, it will construct an iterable command cursor and return it\ninstead of the raw result document. If necessary, raw result documents can\nstill be observed using  command monitoring . Write commands, such as  createUser ,\ncan only be executed on a writable server (e.g.  primary  replica set\nmember). Command helper methods in the  MongoDB PHP Library , such as\n MongoDB\\Database::drop() , know to apply their own  read preference  if necessary. However, the  MongoDB\\Database::command() \nmethod is a generic method and defaults to the read preference of the Database\nobject on which it is invoked. When necessary, the  readPreference  option may\nbe used to override the default read preference. The following example connects to a cluster and specifies  secondaryPreferred \nas the Client's default read preference. It then specifies a  primary  read\npreference when executing the  createUser  command on the  test  database: The output would then resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$cursor = $database->command(['ping' => 1]);\n\nvar_dump($cursor->toArray()[0]);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$cursor = $database->command(['listCollections' => 1]);\n\nforeach ($cursor as $collection) {\n    echo $collection['name'], \"\\n\";\n}"
                },
                {
                    "lang": "none",
                    "value": "persons\nposts\nzips"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n   'mongodb+srv://cluster0.example.com',\n   ['readPreference' => 'secondaryPreferred']\n);\n\n$client->test;\n\n$cursor = $db->command(\n    [\n        'createUser' => 'username',\n        'pwd' => 'password',\n        'roles' => ['readWrite'],\n    ],\n    [\n        'readPreference' => new MongoDB\\Driver\\ReadPreference('primary'),\n    ]\n);\n\nvar_dump($cursor->toArray()[0]);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "The MongoDB PHP Library provides helper methods across the Client, Database, and\nCollection classes for common\ndatabase commands. In addition, the\nMongoDB\\Database::command() method may be used to run database\ncommands that do not have a helper method.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/custom-types",
            "title": "Custom Data-Types",
            "headings": [],
            "paragraphs": "The MongoDB PHP extension and library support custom classes while\nserializing and deserializing. An example of where this might be useful is\nif you want to store date/time information retaining the time zone\ninformation that PHP's  DateTimeImmutable \nclass stores with a point in time. The driver serializes PHP variables, including objects, into BSON when it\ncommunicates to the server, and deserializes BSON back into PHP variables when\nit receives data from the server. It is possible to influence the behavior by implementing the\n MongoDB\\BSON\\Persistable  interface.\nIf a class implements this interface, then upon serialization the\n bsonSerialize  method is\ncalled. This method is responsible for returning an array or stdClass object\nto convert to BSON and store in the database. That data will later be used to\nreconstruct the object upon reading from the database. As an example we present the  LocalDateTime  class. This class wraps around\nthe  MongoDB\\BSON\\UTCDateTime  data\ntype and a time zone. As it implements the  MongoDB\\BSON\\Persistable  interface, the\nclass is required to implement the  bsonSerialize  and  bsonUnserialize  methods. In the\n bsonSerialize  method, we\nreturn an array with the two values that we need to persist: the point in time\nin milliseconds since the Epoch, represented by a\n MongoDB\\BSON\\UTCDateTime  object, and\na string containing the Olson time zone identifier: The driver will additionally add a  __pclass  field to the document, and\nstore that in the database, too. This field contains the PHP class name so that\nupon deserialization the driver knows which class to use for recreating the\nstored object. When the document is read from the database, the driver detects whether a\n __pclass  field is present and then executes\n MongoDB\\BSON\\Persistable::bsonUnserialize  method which is\nresponsible for restoring the object's original state. In the code below, we make sure that the data in the  utc  and  tz  fields\nare of the right time, and then assign their values to the two private\nproperties. You may have noticed that the class also implements the\n MongoDB\\BSON\\UTCDateTimeInterface  interface. This interface defines\nthe two non-constructor methods of the  MongoDB\\BSON\\UTCDateTime  class. It is recommended that wrappers around existing BSON classes implement their\nrespective interface (i.e.  MongoDB\\BSON\\UTCDateTimeInterface ) so that the wrapper objects can be\nused in the same context as their original unwrapped version. It is also\nrecommended that you always type-hint against the interface (i.e.\n MongoDB\\BSON\\UTCDateTimeInterface ) and never against the concrete\nclass (i.e.  MongoDB\\BSON\\UTCDateTime ), as this would prevent wrapped objects from\nbeing accepted into methods. In our new  toDateTime  method we return a  DateTime \nobject with the local time zone set, instead of the UTC time zone that\n MongoDB\\BSON\\UTCDateTime  normally uses\nin its return value. With the class defined, we can now use it in our documents. The snippet below\ndemonstrates the round tripping from the  LocalDateTime  object to BSON, and\nback to  LocalDateTime . Which outputs: Storing the Olson time zone identifier in a separate field also works well\nwith MongoDB's  Aggregation Framework , which allows\ndate manipulation,  formatting , and querying depending on a\nspecific time zone.",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n/* Custom document class that stores a UTCDateTime and time zone and also\n * implements the UTCDateTime interface for portability. */\nclass LocalDateTime implements \\MongoDB\\BSON\\Persistable, \\MongoDB\\BSON\\UTCDateTimeInterface\n{\n    private $utc;\n    private $tz;\n    public function __construct($milliseconds = null, \\DateTimeZone $timezone = null)\n    {\n        $this->utc = new \\MongoDB\\BSON\\UTCDateTime($milliseconds);\n        if ($timezone === null) {\n            $timezone = new \\DateTimeZone(date_default_timezone_get());\n        }\n        $this->tz = $timezone;\n    }\n?>"
                },
                {
                    "lang": "php",
                    "value": "<?php\n    public function bsonSerialize()\n    {\n        return [\n            'utc' => $this->utc,\n            'tz' => $this->tz->getName(),\n        ];\n    }\n?>"
                },
                {
                    "lang": "php",
                    "value": "<?php\n    public function bsonUnserialize(array $data)\n    {\n        if ( ! isset($data['utc']) || ! $data['utc'] instanceof \\MongoDB\\BSON\\UTCDateTime) {\n            throw new Exception('Expected \"utc\" field to be a UTCDateTime');\n        }\n\n        if ( ! isset($data['tz']) || ! is_string($data['tz'])) {\n            throw new Exception('Expected \"tz\" field to be a string');\n        }\n\n        $this->utc = $data['utc'];\n        $this->tz = new \\DateTimeZone($data['tz']);\n    }\n?>"
                },
                {
                    "lang": "php",
                    "value": "<?php\n    public function toDateTime()\n    {\n        return $this->utc->toDateTime()->setTimezone($this->tz);\n    }\n\n    public function __toString()\n    {\n        return (string) $this->utc;\n    }\n}\n?>"
                },
                {
                    "lang": "php",
                    "value": "<?php\n$bson = MongoDB\\BSON\\fromPHP(['date' => new LocalDateTime]);\n$document = MongoDB\\BSON\\toPHP($bson);\n\nvar_dump($document);\nvar_dump($document->date->toDateTime());\n?>"
                },
                {
                    "lang": "none",
                    "value": "object(stdClass)#1 (1) {\n  [\"date\"]=>\n  object(LocalDateTime)#2 (2) {\n    [\"utc\":\"LocalDateTime\":private]=>\n    object(MongoDB\\BSON\\UTCDateTime)#3 (1) {\n      [\"milliseconds\"]=>\n      string(13) \"1533042443716\"\n    }\n    [\"tz\":\"LocalDateTime\":private]=>\n    object(DateTimeZone)#4 (2) {\n      [\"timezone_type\"]=>\n      int(3)\n      [\"timezone\"]=>\n      string(13) \"Europe/London\"\n    }\n  }\n}\nobject(DateTime)#5 (3) {\n  [\"date\"]=>\n  string(26) \"2018-07-31 14:07:23.716000\"\n  [\"timezone_type\"]=>\n  int(3)\n  [\"timezone\"]=>\n  string(13) \"Europe/London\"\n}"
                }
            ],
            "preview": "The MongoDB PHP extension and library support custom classes while\nserializing and deserializing. An example of where this might be useful is\nif you want to store date/time information retaining the time zone\ninformation that PHP's DateTimeImmutable\nclass stores with a point in time.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/stable-api",
            "title": "Stable API",
            "headings": [
                "Declaring an API Version",
                "Strict API",
                "Fail on Deprecated Commands",
                "Usage with the Command Helper"
            ],
            "paragraphs": "To declare an API version, pass a  serverApi  driver option when creating your\nclient. The value is a\n MongoDB\\Driver\\ServerApi  instance that\ncontains API version information. This feature is introduced in MongoDB 5.0,\nwhich will initially support only API version \"1\". Additional versions may be\nintroduced in future versions of the server. Only declare an API version when connecting to a deployment that has no\npre-5.0 members. Older servers will error when encountering commands with a\ndeclared API version. By default, declaring an API version guarantees behavior for commands that are\npart of the stable API, but does not forbid using commands that are not part\nof the API version. To only allow commands and options that are part of the\nstable API, specify the  strict  option when creating the\n MongoDB\\Driver\\ServerApi  instance: The optional  deprecationErrors  option causes MongoDB to fail all commands\nor behaviors that have been deprecated in the API version. This can be used in\ntesting to ensure a smooth transition to a future API version. At the time of this writing, no part of API version \"1\" has been deprecated. When using the  MongoDB\\Database::command()  method to run arbitrary\ncommands, the API version declared to the client is automatically appended to\nthe command document. Setting any of the  apiVersion ,  apiStrict , or\n apiDeprecationErrors  command options in the command document and calling\n MongoDB\\Database::command()  from a client with a declared API\nversion is not supported and will lead to undefined behavior.",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ServerApi;\n\n$serverApi = new ServerApi(ServerApi::V1);\n$client = new Client('mongodb://127.0.0.1', [], ['serverApi' => $serverApi]);\n\n// Command includes the declared API version\n$client->database->collection->find([]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ServerApi;\n\n$serverApi = new ServerApi(ServerApi::V1, true);\n$client = new Client('mongodb://127.0.0.1', [], ['serverApi' => $serverApi]);\n\n// Will fail as the tailable option is not supported in versioned API\n$client->database->collection->find([], ['tailable' => true]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ServerApi;\n\n$serverApi = new ServerApi(ServerApi::V1, null, true);\n$client = new Client('mongodb://127.0.0.1', [], ['serverApi' => $serverApi]);"
                }
            ],
            "preview": "To declare an API version, pass a serverApi driver option when creating your\nclient. The value is a\nMongoDB\\Driver\\ServerApi instance that\ncontains API version information. This feature is introduced in MongoDB 5.0,\nwhich will initially support only API version \"1\". Additional versions may be\nintroduced in future versions of the server.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/decimal128",
            "title": "Decimal128",
            "headings": [
                "Overview",
                "Working with Decimal128 Values",
                "Inserting a Decimal128",
                "Mathematical Operations with BCMath"
            ],
            "paragraphs": "MongoDB 3.4 introduced support for a  Decimal128 BSON type , which is a 128-bit decimal-based\nfloating-point value capable of emulating decimal rounding with exact precision.\nThis functionality is intended for applications that handle  monetary\ndata , such as financial and tax computations. The  MongoDB\\BSON\\Decimal128  class, which was\nintroduced in  PHP driver  1.2.0, may be used to work with this\ntype in PHP. The following example inserts a value of type  Decimal128  into the  price \nfield of a collection named  inventory : The output would then resemble: The  PHP driver  does not provide any functionality for working\nwith  Decimal128  values; however, the string representation of a\n MongoDB\\BSON\\Decimal128  object may be used\nwith PHP's  BCMath  extension. The following example adds two  Decimal128  values and creates a new\n Decimal128  value with the result from  bcadd() : The output would then resemble: This does not match the expected result of \"6.912\". Each operation in the BCMath\nAPI uses a scale to determine the number of decimal digits in the result. The\ndefault scale is zero, which is why the above example produces a result with no\ndecimal precision. In the following example, we use a scale of three for  bcadd()  to\nobtain the expected result: The output would then resemble: In lieu of specifying a scale for each operation, a default scale may be set via\n bcscale()  or the  bcmath.scale INI setting . The  Decimal128  type\nsupports up to 34 decimal digits (i.e. significant digits).",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->inventory;\n\n$collection->insertOne([\n    '_id' => 1,\n    'item' => '26-inch monitor',\n    'price' => new MongoDB\\BSON\\Decimal128('428.79'),\n]);\n\n$item = $collection->findOne(['_id' => 1]);\n\nvar_dump($item);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    int(1)\n    [\"item\"]=>\n    string(15) \"26-inch monitor\"\n    [\"price\"]=>\n    object(MongoDB\\BSON\\Decimal128)#13 (1) {\n      [\"dec\"]=>\n      string(6) \"428.79\"\n    }\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$lhs = new MongoDB\\BSON\\Decimal128('1.234');\n$rhs = new MongoDB\\BSON\\Decimal128('5.678');\n$sum = new MongoDB\\BSON\\Decimal128(bcadd($lhs, $rhs));\n\nvar_dump($sum);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\BSON\\Decimal128)#4 (1) {\n  [\"dec\"]=>\n  string(1) \"6\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$lhs = new MongoDB\\BSON\\Decimal128('1.234');\n$rhs = new MongoDB\\BSON\\Decimal128('5.678');\n$sum = new MongoDB\\BSON\\Decimal128(bcadd($lhs, $rhs, 3));\n\nvar_dump($sum);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\BSON\\Decimal128)#4 (1) {\n  [\"dec\"]=>\n  string(5) \"6.912\"\n}"
                }
            ],
            "preview": "MongoDB 3.4 introduced support for a Decimal128 BSON type, which is a 128-bit decimal-based\nfloating-point value capable of emulating decimal rounding with exact precision.\nThis functionality is intended for applications that handle monetary\ndata, such as financial and tax computations.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/connecting",
            "title": "Connecting to MongoDB",
            "headings": [
                "Creating a Client instance",
                "Connecting to a Standalone server",
                "Connecting to a Replica Set",
                "Connecting with SSL and Authentication",
                "Specifying connection options"
            ],
            "paragraphs": "If you do not specify a  $uri  value, the driver connects to a standalone\n mongod  on  127.0.0.1  via port  27017 . To connect to a different\nserver, pass the corresponding connection string as the first parameter when\ncreating the  Client  instance: The following example demonstrates how to connect to a replica set with a custom\nread preference: The following example demonstrates how to connect to a MongoDB replica set with\nSSL and authentication, as is used for  MongoDB Atlas : Alternatively, the authentication credentials and URI parameters may be\nspecified in the constructor's  $uriOptions  parameter: The driver supports additional  SSL options ,\nwhich may be specified in the constructor's  $driverOptions  parameter. Those\noptions are covered in the  MongoDB\\Driver\\Manager::__construct()  documentation. Connection options can be passed via the  $uri  parameter, or through the\n $options  and  $driverOptions  parameters. The available options are\ndocumented in the  MongoDB\\Client::__construct()  reference.",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client('mongodb://mongodb-deployment:27017');"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet',\n    [\n        'readPreference' => 'secondaryPreferred',\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://myUsername:myPassword@rs1.example.com,rs2.example.com/?ssl=true&replicaSet=myReplicaSet&authSource=admin'\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/'\n    [\n        'username' => 'myUsername',\n        'password' => 'myPassword',\n        'ssl' => true,\n        'replicaSet' => 'myReplicaSet',\n        'authSource' => 'admin',\n    ],\n);"
                }
            ],
            "preview": "Connection options can be passed via the $uri parameter, or through the\n$options and $driverOptions parameters. The available options are\ndocumented in the MongoDB\\Client::__construct() reference.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/indexes",
            "title": "Indexes",
            "headings": [
                "Create Indexes",
                "List Indexes",
                "Drop Indexes"
            ],
            "paragraphs": "Indexes support the efficient execution of queries in MongoDB. Without indexes,\nMongoDB must perform a  collection scan , i.e. scan every document in a\ncollection, to select those documents that match the query statement. If an\nappropriate index exists for a query, MongoDB can use the index to limit the\nnumber of documents it must inspect. The PHP driver supports managing indexes through the\n MongoDB\\Collection  class, which implements MongoDB's\ncross-driver  Index Management \nand  Enumerating Indexes \nspecifications. This document provides an introduction to creating, listing, and dropping\nindexes using the  MongoDB PHP Library . The MongoDB Manual's  Indexes  reference provides more thorough information about indexing in\nMongoDB. Create indexes with the  MongoDB\\Collection::createIndex()  or\n MongoDB\\Collection::createIndexes()  methods. Refer to the method\nreference for more details about each method. The following example creates an ascending index on the  state  field using\nthe  createIndex()  method: When you create an index, the method returns its name, which is automatically\ngenerated from its specification. The above example would output something\nsimilar to: The  MongoDB\\Collection::listIndexes()  method provides information\nabout the indexes in a collection. The\n MongoDB\\Collection::listIndexes()  method returns an iterator of\n MongoDB\\Model\\IndexInfo  objects, which you can use to view\ninformation about each index. Refer to the method reference for more details. The following example lists all indexes in the  zips  collection in the\n test  database: The output would resemble: The  MongoDB\\Collection::dropIndex()  method lets you drop a single\nindex while  MongoDB\\Collection::dropIndexes()  drops all of the\nindexes on a collection. Refer to the method reference for more details about\neach method. The following example drops a single index by its name,  state_1 : The operation's output would resemble:",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$result = $collection->createIndex(['state' => 1]);\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "string(7) \"state_1\""
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\nforeach ($collection->listIndexes() as $indexInfo) {\n    var_dump($indexInfo);\n}"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\IndexInfo)#10 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(4) \"_id_\"\n  [\"ns\"]=>\n  string(9) \"test.zips\"\n}\nobject(MongoDB\\Model\\IndexInfo)#13 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"state\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(7) \"state_1\"\n  [\"ns\"]=>\n  string(9) \"test.zips\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$result = $collection->dropIndex('state_1');\n\nvar_dump($result);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"nIndexesWas\"]=>\n    int(2)\n    [\"ok\"]=>\n    float(1)\n  }\n}"
                }
            ],
            "preview": "Indexes support the efficient execution of queries in MongoDB. Without indexes,\nMongoDB must perform a collection scan, i.e. scan every document in a\ncollection, to select those documents that match the query statement. If an\nappropriate index exists for a query, MongoDB can use the index to limit the\nnumber of documents it must inspect.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/server-selection",
            "title": "Server Selection and Monitoring",
            "headings": [
                "Server Selection and Monitoring",
                "Connection String Options",
                "connectTimeoutMS",
                "heartbeatFrequencyMS",
                "serverSelectionTimeoutMS",
                "serverSelectionTryOnce",
                "socketCheckIntervalMS",
                "socketTimeoutMS"
            ],
            "paragraphs": "Before any operation can be executed, the  MongoDB PHP Library  must first select a\nserver from the topology (e.g. replica set, sharded cluster). Selecting a server\nrequires an accurate view of the topology, so the driver (i.e.  mongodb \nextension) regularly monitors the servers to which it is connected. In most other drivers, server discovery and monitoring is handled by a\nbackground thread; however, the PHP driver is single-threaded and must therefore\nperform monitoring  between  operations initiated by the application. Consider the following example application: Although the application consists of only a few lines of PHP, there is actually\nquite a lot going on behind the scenes! Interested readers can find this process\ndiscussed in greater detail in the following documents: Single-threaded Mode  in the libmongoc documentation Server Discovery and Monitoring  specification Server Selection  specification There are several connection string options relevant to server selection and\nmonitoring. connectTimeoutMS  specifies the limit for both establishing a connection to\na server  and  the socket timeout for server monitoring ( hello  commands).\nThis defaults to 10 seconds for single-threaded drivers such as PHP. When a server times out during monitoring, it will not be re-checked until at\nleast five seconds\n( cooldownMS )\nhave elapsed. This timeout is intended to avoid having single-threaded drivers\nblock for  connectTimeoutMS  on  each  subsequent scan after an error. Applications can consider setting this option to slightly more than the greatest\nlatency among servers in the cluster. For example, if the greatest  ping  time\nbetween the PHP application server and a database server is 200ms, it may be\nreasonable to specify a timeout of one second. This would allow ample time for\nestablishing a connection and monitoring an accessible server, while also\nsignificantly reducing the time to detect an inaccessible server. heartbeatFrequencyMS  determines how often monitoring should occur. This\ndefaults to 60 seconds for single-threaded drivers and can be set as low as\n500ms. serverSelectionTimeoutMS  determines the maximum amount of time to spend in\nthe server selection loop. This defaults to 30 seconds, but applications will\ntypically fail sooner if  serverSelectionTryOnce  is  true  and a smaller\n connectTimeoutMS  value is in effect. The original default was established at a time when replica set elections took\nmuch longer to complete. Applications can consider setting this option to\nslightly more than the expected completion time for an election. For example,\n Replica Set Elections  states that\nelections will not typically exceed 12 seconds, so a 15-second timeout may be\nreasonable. Applications connecting to a sharded cluster may consider a smaller\nvalue still, since  mongos  insulates the driver from elections. That said,  serverSelectionTimeoutMS  should generally not be set to a value\nsmaller than  connectTimeoutMS . serverSelectionTryOnce  determines whether the driver should give up after\nthe first failed server selection attempt or continue waiting until\n serverSelectionTimeoutMS  is reached. PHP defaults to  true , which allows\nthe driver to \"fail fast\" when a server cannot be selected (e.g. no primary\nduring a failover). The default behavior is generally desirable for a high-traffic web applications,\nas it means the worker process will not be blocked in a server selection loop\nand can instead return an error response and immediately go on to serve another\nrequest. Additionally, other driver features such as retryable reads and writes\ncan still enable applications to avoid transient errors such as a failover. That said, applications that prioritize resiliency over response time (and\nworker pool utilization) may want to specify  false  for\n serverSelectionTryOnce . socketCheckIntervalMS  determines how often a socket should be checked (using\na  ping  command) if it has not been used recently. This defaults to 5 seconds\nand is intentionally lower than  heartbeatFrequencyMS  to better allow\nsingle-threaded drivers to recover dropped connections. socketTimeoutMS  determines the maximum amount of time to spend reading or\nwriting to a socket. Since server monitoring uses  connectTimeoutMS  for its\nsocket timeouts,  socketTimeoutMS  only applies to operations executed by the\napplication. socketTimeoutMS  defaults to 5 minutes; however, it's likely that a PHP web\nrequest would be terminated sooner due to\n max_execution_time ,\nwhich defaults to 30 seconds for web SAPIs. In a CLI environment, where\n max_execution_time  is unlimited by default, it is more likely that\n socketTimeoutMS  could be reached. socketTimeoutMS  is not directly related to server selection and\nmonitoring; however, it is frequently associated with the other options and\ntherefore bears mentioning.",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n/**\n * When constructing a Client, the library creates a MongoDB\\Driver\\Manager\n * object from the driver. In turn, the driver will either create a libmongoc\n * client object (and persist it according to the constructor parameters) or\n * re-use a previously persisted client.\n *\n * Assuming a new libmongoc client was created, the host name(s) in the\n * connection string must be resolved via DNS. Likewise, if the connection\n * string includes a mongodb+srv scheme, SRV/TXT records must be resolved.\n * Following DNS resolution, the driver should then have a list of one or\n * more hosts to which it can connect. This is referred to as the seed list.\n *\n * If a previously persisted client was re-used, no DNS resolution is needed\n * and there will likely already be connections and topology state associated\n * with the client.\n *\n * Drivers perform no further IO when constructing a client, so control is\n * returned the the PHP script.\n */\n$client = new MongoDB\\Client('mongodb://a.example.com:27017/?replicaSet=rs0');\n\n/**\n * The library creates a MongoDB\\Database object from the Client. This does\n * not entail any IO, as the Database and Collection objects only associate\n * a database or namespace with a Client object, respectively.\n */\n$database = $client->test;\n\n/**\n * The library creates an internal object for this operation and must select\n * a server to use for executing that operation.\n *\n * If this is the first operation on the underlying libmongoc client, it must\n * first discover the topology. It does so by establishing connections to any\n * host(s) in the seed list (this may entail TLS and OCSP verification) and\n * issuing \"hello\" commands.\n *\n * In the case of a replica set, connecting to a single host in the seed list\n * should allow the driver to discover all other members in the replica set.\n * In the case of a sharded cluster, the driver will start with an initial\n * seed list of mongos hosts and, if SRV polling is utilized, may discover\n * additional mongos hosts over time.\n *\n * If the topology was already initialized (i.e. this is not the first\n * operation on the client), the driver may still need to perform monitoring\n * (i.e. \"hello\" commands) and refresh its view of the topology. This process\n * may entail adding or removing hosts from the topology.\n *\n * Once the topology has been discovered and any necessary monitoring has\n * been performed, the driver may select a server according to the rules\n * outlined in the server selection specification (e.g. applying a read\n * preference, filtering hosts by latency).\n */\n$database->command(['ping' => 1]);"
                }
            ],
            "preview": "Before any operation can be executed, the MongoDB PHP Library must first select a\nserver from the topology (e.g. replica set, sharded cluster). Selecting a server\nrequires an accurate view of the topology, so the driver (i.e. mongodb\nextension) regularly monitors the servers to which it is connected.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/example-data",
            "title": "Example Data",
            "headings": [],
            "paragraphs": "Some examples in this documentation use example data fixtures from\n zips.json  and\n primer-dataset.json . Importing the dataset into MongoDB can be done in several ways. The following\nexample imports the  zips.json  file into a  test.zips  collection:\n driver  directly: The output would then resemble: You may also import the datasets using  mongoimport , which is included with MongoDB:",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$filename = 'https://media.mongodb.org/zips.json';\n$lines = file($filename, FILE_IGNORE_NEW_LINES);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n\nforeach ($lines as $line) {\n    $bson = MongoDB\\BSON\\fromJSON($line);\n    $document = MongoDB\\BSON\\toPHP($bson);\n    $bulk->insert($document);\n}\n\n$manager = new MongoDB\\Driver\\Manager('mongodb://127.0.0.1/');\n\n$result = $manager->executeBulkWrite('test.zips', $bulk);\nprintf(\"Inserted %d documents\\n\", $result->getInsertedCount());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 29353 documents"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --db test --collection zips --file zips.json --drop\nmongoimport --db test --collection restaurants --file primer-dataset.json --drop"
                }
            ],
            "preview": "Some examples in this documentation use example data fixtures from\nzips.json and\nprimer-dataset.json.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/tailable-cursor",
            "title": "Tailable Cursor Iteration",
            "headings": [
                "Overview",
                "Manually Iterating a Normal Cursor",
                "Iterating a Tailable Cursor"
            ],
            "paragraphs": "When the driver executes a query or command (e.g.\n aggregate ), results from the operation\nare returned via a  MongoDB\\Driver\\Cursor \nobject. The Cursor class implements PHP's  Iterator \ninterface, which allows it to be iterated with  foreach  and interface with\nany PHP functions that work with  iterables . Similar to\nresult objects in other database drivers, cursors in MongoDB only support\nforward iteration, which means they cannot be rewound or used with  foreach \nmultiple times. Tailable cursors  are a special type of\nMongoDB cursor that allows the client to read some results and then wait until\nmore documents become available. These cursors are primarily used with\n Capped Collections  and\n Change Streams . While normal cursors can be iterated once with  foreach , that approach will\nnot work with tailable cursors. When  foreach  is used with a tailable cursor,\nthe loop will stop upon reaching the end of the initial result set. Attempting\nto continue iteration on the cursor with a second  foreach  would throw an\nexception, since PHP attempts to rewind the cursor. Therefore, reading from a\ntailable cursor will require direct usage of the  Iterator  API. Before version 1.9.0 of the  ext-mongodb  extension, the cursor class does\nnot implement the  Iterator  interface. To manually iterate\na cursor using the method below, it must first be wrapped with an\n IteratorIterator . Before looking at how a tailable cursor can be iterated, we'll start by\nexamining how the  Iterator  methods interact with a normal cursor. The following example finds five restaurants and uses  foreach  to view the\nresults: While this example is quite concise, there is actually quite a bit going on. The\n foreach  construct begins by rewinding the iterable ( $cursor  in this\ncase). It then checks if the current position is valid. If the position is not\nvalid, the loop ends. Otherwise, the current key and value are accessed\naccordingly and the loop body is executed. Assuming a  break  has\nnot occurred, the iterator then advances to the next position, control jumps\nback to the validity check, and the loop continues. With the inner workings of  foreach  under our belt, we can now translate the\npreceding example to use the Iterator methods directly: The purpose of this example is to demonstrate the functional equivalence between\n foreach  and manual iteration with PHP's  Iterator  API.\nFor normal cursors, there is little reason to manually iterate results instead\nof a concise  foreach  loop. Calling  $cursor->next()  after the  while  loop naturally ends would\nthrow an exception, since all results on the cursor have been exhausted. In order to demonstrate a tailable cursor in action, we'll need two scripts: a\n\"producer\" and a \"consumer\". The producer script will create a new capped\ncollection using  MongoDB\\Database::createCollection()  and proceed\nto insert a new document into that collection each second. With the producer script still running, we will now execute a consumer script to\nread the inserted documents using a tailable cursor, indicated by the\n cursorType  option to  MongoDB\\Collection::find() . We'll start\nby using  foreach  to illustrate its shortcomings: If you execute this consumer script, you'll notice that it quickly exhausts all\nresults in the capped collection and then terminates. We cannot add a second\n foreach , as that would throw an exception when attempting to rewind the\ncursor. This is a ripe use case for directly controlling the iteration process\nusing the  Iterator  interface. Much like the  foreach  example, this version on the consumer script will\nstart by quickly printing all results in the capped collection; however, it will\nnot terminate upon reaching the end of the initial result set. Since we're\nworking with a tailable cursor, calling  next()  will block and wait for\nadditional results rather than throw an exception. We will also use  valid() \nto check if there is actually data available to read at each step. Since we've elected to use a  TAILABLE_AWAIT  cursor, the server will delay\nits response to the driver for a set amount of time. In this example, we've\nrequested that the server block for approximately 100 milliseconds by specifying\nthe  maxAwaitTimeMS  option to  MongoDB\\Collection::find() .",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$cursor = $collection->find([], ['limit' => 5]);\n\nforeach ($cursor as $document) {\n   var_dump($document);\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$cursor = $collection->find([], ['limit' => 5]);\n\n$cursor->rewind();\n\nwhile ($cursor->valid()) {\n   $document = $cursor->current();\n   var_dump($document);\n   $cursor->next();\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$database->createCollection('capped', [\n    'capped' => true,\n    'size' => 16777216,\n]);\n\n$collection = $database->selectCollection('capped');\n\nwhile (true) {\n    $collection->insertOne(['createdAt' => new MongoDB\\BSON\\UTCDateTime()]);\n    sleep(1);\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->capped;\n\n$cursor = $collection->find([], [\n    'cursorType' => MongoDB\\Operation\\Find::TAILABLE_AWAIT,\n    'maxAwaitTimeMS' => 100,\n]);\n\nforeach ($cursor as $document) {\n    printf(\"Consumed document created at: %s\\n\", $document->createdAt);\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->capped;\n\n$cursor = $collection->find([], [\n    'cursorType' => MongoDB\\Operation\\Find::TAILABLE_AWAIT,\n    'maxAwaitTimeMS' => 100,\n]);\n\n$cursor->rewind();\n\nwhile (true) {\n   if ($cursor->valid()) {\n      $document = $cursor->current();\n      printf(\"Consumed document created at: %s\\n\", $document->createdAt);\n   }\n\n   $cursor->next();\n}"
                }
            ],
            "preview": "When the driver executes a query or command (e.g.\naggregate), results from the operation\nare returned via a MongoDB\\Driver\\Cursor\nobject. The Cursor class implements PHP's Iterator\ninterface, which allows it to be iterated with foreach and interface with\nany PHP functions that work with iterables. Similar to\nresult objects in other database drivers, cursors in MongoDB only support\nforward iteration, which means they cannot be rewound or used with foreach\nmultiple times.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/modeling-bson-data",
            "title": "Modeling BSON Data",
            "headings": [
                "Type Maps",
                "Persistable Classes",
                "Working with Enums"
            ],
            "paragraphs": "Most methods that read data from MongoDB support a  typeMap  option, which\nallows control over how BSON is converted to PHP. Additionally,\nthe  MongoDB\\Client ,  MongoDB\\Database , and\n MongoDB\\Collection  classes accept a  typeMap  option, which can\nbe used to specify a default type map to apply to any supporting methods and\nselected classes (e.g.  MongoDB\\Client::selectDatabase() ). The  MongoDB\\Client ,  MongoDB\\Database , and\n MongoDB\\Collection  classes use the following type map by\ndefault: The type map above will convert BSON documents and arrays to\n MongoDB\\Model\\BSONDocument  and\n MongoDB\\Model\\BSONArray  objects, respectively. The  root  and\n document  keys are used to distinguish the top-level BSON document from\nembedded documents, respectively. A type map may specify any class that implements\n MongoDB\\BSON\\Unserializable  as well as\n \"array\" ,  \"stdClass \", and  \"object\"  ( \"stdClass \" and  \"object\" \nare aliases of one another). Deserialization from BSON  in the PHP manual The driver's  persistence specification  outlines how\nclasses implementing its  MongoDB\\BSON\\Persistable  interface are serialized to and deserialized from\nBSON. The  Persistable  interface is analogous\nto PHP's  Serializable interface . The driver automatically handles serialization and deserialization for classes\nimplementing the  Persistable  interface without\nrequiring the use of the  typeMap  option. This is done by encoding the name\nof the PHP class in a special property within the BSON document. Consider the following class definition: The following example constructs a  Person  object, inserts it into the\ndatabase, and reads it back as an object of the same type: The output would then resemble: The same document in the MongoDB shell might display as: When deserializing a PHP variable from BSON, the encoded class name of a\n Persistable  object will override any class\nspecified in the type map, but it will not override  \"array\"  and\n \"stdClass\"  or  \"object\" . This is discussed in the\n persistence specification  but it bears\nrepeating. MongoDB\\BSON\\Persistable  may only be used\nfor root and embedded BSON documents. It may not be used for BSON arrays. Backed enums  can be used with BSON and will\nserialize as their case value (i.e. integer or string).\n Pure enums , which have no backed cases, cannot be\ndirectly serialized. This is similar to how enums are handled by\n json_encode() . Round-tripping a backed enum through BSON requires special handling. In the\nfollowing example, the  bsonUnserialize()  method in the class containing the\nenum is responsible for converting the value back to an enum case: Enums are prohibited from implementing\n MongoDB\\BSON\\Unserializable  and\n MongoDB\\BSON\\Persistable , since enum cases\nhave no state and cannot be instantiated like ordinary objects. Pure and backed\nenums can, however, implement\n MongoDB\\BSON\\Serializable , which can be\nused to overcome the default behavior whereby backed enums are serialized as\ntheir case value and pure enums cannot be serialized.",
            "code": [
                {
                    "lang": "php",
                    "value": "[\n    'array' => 'MongoDB\\Model\\BSONArray',\n    'document' => 'MongoDB\\Model\\BSONDocument',\n    'root' => 'MongoDB\\Model\\BSONDocument',\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nclass Person implements MongoDB\\BSON\\Persistable\n{\n    private MongoDB\\BSON\\ObjectId $id;\n    private string $name;\n    private MongoDB\\BSON\\UTCDateTime $createdAt;\n\n    public function __construct(string $name)\n    {\n        $this->id = new MongoDB\\BSON\\ObjectId;\n        $this->name = $name;\n        $this->createdAt = new MongoDB\\BSON\\UTCDateTime;\n    }\n\n    function bsonSerialize()\n    {\n        return [\n            '_id' => $this->id,\n            'name' => $this->name,\n            'createdAt' => $this->createdAt,\n        ];\n    }\n\n    function bsonUnserialize(array $data)\n    {\n        $this->id = $data['_id'];\n        $this->name = $data['name'];\n        $this->createdAt = $data['createdAt'];\n    }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->persons;\n\n$result = $collection->insertOne(new Person('Bob'));\n\n$person = $collection->findOne(['_id' => $result->getInsertedId()]);\n\nvar_dump($person);"
                },
                {
                    "lang": "none",
                    "value": "object(Person)#18 (3) {\n  [\"id\":\"Person\":private]=>\n  object(MongoDB\\BSON\\ObjectId)#15 (1) {\n    [\"oid\"]=>\n    string(24) \"56fad2c36118fd2e9820cfc1\"\n  }\n  [\"name\":\"Person\":private]=>\n  string(3) \"Bob\"\n  [\"createdAt\":\"Person\":private]=>\n  object(MongoDB\\BSON\\UTCDateTime)#17 (1) {\n    [\"milliseconds\"]=>\n    int(1459278531218)\n  }\n}"
                },
                {
                    "lang": "js",
                    "value": "{\n  \"_id\" : ObjectId(\"56fad2c36118fd2e9820cfc1\"),\n  \"__pclass\" : BinData(128,\"UGVyc29u\"),\n  \"name\" : \"Bob\",\n  \"createdAt\" : ISODate(\"2016-03-29T19:08:51.218Z\")\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nenum Role: int\n{\n    case USER = 1;\n    case ADMIN = 2;\n}\n\nclass User implements MongoDB\\BSON\\Persistable\n{\n    public function __construct(\n        private string $username,\n        private Role $role,\n        private MongoDB\\BSON\\ObjectId $_id = new MongoDB\\BSON\\ObjectId(),\n    ) {}\n\n    public function bsonSerialize(): array\n    {\n        return [\n            '_id' => $this->_id,\n            'username' => $this->username,\n            'role' => $this->role,\n        ];\n    }\n\n    public function bsonUnserialize(array $data): void\n    {\n        $this->_id = $data['_id'];\n        $this->username = $data['username'];\n        $this->role = Role::from($data['role']);\n    }\n}"
                }
            ],
            "preview": "Most methods that read data from MongoDB support a typeMap option, which\nallows control over how BSON is converted to PHP. Additionally,\nthe MongoDB\\Client, MongoDB\\Database, and\nMongoDB\\Collection classes accept a typeMap option, which can\nbe used to specify a default type map to apply to any supporting methods and\nselected classes (e.g. MongoDB\\Client::selectDatabase()).",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/crud",
            "title": "CRUD Operations",
            "headings": [
                "Insert Documents",
                "Insert One Document",
                "Insert Many Documents",
                "Query Documents",
                "Find One Document",
                "Find Many Documents",
                "Query Projection",
                "Limit, Sort, and Skip Options",
                "Regular Expressions",
                "Complex Queries with Aggregation",
                "Update Documents",
                "Update One Document",
                "Update Many Documents",
                "Replace Documents",
                "Upsert",
                "Delete Documents",
                "Delete One Document",
                "Delete Many Documents"
            ],
            "paragraphs": "CRUD operations  create ,  read ,  update , and  delete  documents. The\n MongoDB PHP Library 's  MongoDB\\Collection  class implements MongoDB's\ncross-driver  CRUD specification ,\nproviding access to methods for inserting, finding, updating, and deleting\ndocuments in MongoDB. This document provides a general introduction to inserting, querying, updating,\nand deleting documents using the  MongoDB PHP Library . The MongoDB Manual's\n CRUD Section  provides a more thorough introduction to CRUD\noperations with MongoDB. The  MongoDB\\Collection::insertOne()  method inserts a single\ndocument into MongoDB and returns an instance of\n MongoDB\\InsertOneResult , which you can use to access the ID of the\ninserted document. The output includes the ID of the inserted document. If you include an  _id  value when inserting a document, MongoDB checks to\nensure that the  _id  value is unique for the collection. If the  _id  value\nis not unique, the insert operation fails due to a duplicate key error. The following example inserts a document while specifying the value for the\n _id : The output would then resemble: The following operation inserts a document into the  users  collection in the\n test  database: The output would then resemble: MongoDB\\Collection::insertOne() The  MongoDB\\Collection::insertMany()  method allows you to insert\nmultiple documents in one write operation and returns an instance of\n MongoDB\\InsertManyResult , which you can use to access the IDs of\nthe inserted documents. The following operation inserts two documents into the  users  collection\nin the  test  database: The output would then resemble: MongoDB\\Collection::insertMany() The  MongoDB PHP Library  provides the  MongoDB\\Collection::findOne()  and\n MongoDB\\Collection::find()  methods for querying documents and the\n MongoDB\\Collection::aggregate()  method for performing\n aggregation operations . When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP's\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). MongoDB\\Collection::findOne()  returns the  first document  that matches the query or  null  if no document matches the\nquery. The following example searches for the document with  _id  of  \"94301\" : The output would then resemble: The criteria in this example matched an  _id  with a string value of\n \"94301\" . The same criteria would not have matched a document with an\ninteger value of  94301  due to MongoDB's  comparison rules for\nBSON types . Similarly, users should\nuse a  MongoDB\\BSON\\ObjectId  object\nwhen matching an  _id  with an  ObjectId \nvalue, as strings and ObjectIds are not directly comparable. MongoDB\\Collection::findOne() MongoDB\\Collection::find()  returns a\n MongoDB\\Driver\\Cursor  object, which you can\niterate upon to access all matched documents. The following example lists the documents in the  zips  collection with the\nspecified city and state values: The output would resemble: MongoDB\\Collection::find() By default, queries in MongoDB return all fields in matching documents. To limit\nthe amount of data that MongoDB sends to applications, you can include a\n projection document  in\nthe query operation. The following example finds restaurants based on the  cuisine  and  borough \nfields and uses a  projection  to limit the fields that are\nreturned. It also limits the results to 5 documents. The output would then resemble: MongoDB includes the  _id  field by default unless you explicitly exclude\nit in a projection document. In addition to  projection criteria , you can\nspecify options to limit, sort, and skip documents during queries. The following example uses the  limit  and  sort  options to query for the\nfive most populous zip codes in the United States: The output would then resemble: Filter criteria may include regular expressions, either by using the\n MongoDB\\BSON\\Regex  class directory or the\n $regex  operator. The following example lists documents in the  zips  collection where the city\nname starts with \"garden\" and the state is Texas: The output would then resemble: An equivalent filter could be constructed using the  $regex  operator: Although MongoDB's regular expression syntax is not exactly the same as PHP's\n PCRE  syntax,  preg_quote() \nmay be used to escape special characters that should be matched as-is. The\nfollowing example finds restaurants whose name starts with \"(Library)\": $regex  in the MongoDB manual MongoDB's  Aggregation Framework  allows\nyou to issue complex queries that filter, transform, and group collection data.\nThe  MongoDB PHP Library 's  MongoDB\\Collection::aggregate()  method\nreturns a  Traversable  object, which you can iterate upon to\naccess the results of the aggregation operation. Refer to the\n MongoDB\\Collection::aggregate()  method's  behavior\nreference  for more about the method's output. The following example lists the 5 US states with the most zip codes associated\nwith them: The output would then resemble: MongoDB\\Collection::aggregate() Use the  MongoDB\\Collection::updateOne()  method to update a single\ndocument matching a filter.  MongoDB\\Collection::updateOne() \nreturns a  MongoDB\\UpdateResult  object, which you can use to access\nstatistics about the update operation. Update methods have two required parameters: the query filter that identifies\nthe document or documents to update, and an update document that specifies what\nupdates to perform. The  MongoDB\\Collection::updateOne()  reference\ndescribes each parameter in detail. The following example inserts two documents into an empty  users  collection\nin the  test  database using the  MongoDB\\Collection::insertOne() \nmethod, and then updates the documents where the value for the  state  field\nis  \"ny\"  to include a  country  field set to  \"us\" : Since the update operation uses the\n MongoDB\\Collection::updateOne()  method, which updates the first\ndocument to match the filter criteria, the results would then resemble: It is possible for a document to match the filter but  not be modified  by an\nupdate, as is the case where the update sets a field's value to its existing\nvalue, as in this example: The number of matched documents and the number of  modified  documents would\ntherefore not be equal, and the output from the operation would resemble: MongoDB\\Collection::updateOne() MongoDB\\Collection::findOneAndUpdate() MongoDB\\Collection::updateMany()  updates one or more documents\nmatching the filter criteria and returns a  MongoDB\\UpdateResult \nobject, which you can use to access statistics about the update operation. Update methods have two required parameters: the query filter that identifies\nthe document or documents to update, and an update document that specifies what\nupdates to perform. The  MongoDB\\Collection::updateMany()  reference\ndescribes each parameter in detail. The following example inserts three documents into an empty  users  collection\nin the  test  database and then uses the  $set  operator to update the\ndocuments matching the filter criteria to include the  country  field with\nvalue  \"us\" : If an update operation results in no change to a document, such as setting the\nvalue of the field to its current value, the number of modified documents can be\nless than the number of  matched  documents. Since the update document with\n name  of  \"Bob\"  results in no changes to the document, the output of the\noperation therefore resembles: MongoDB\\Collection::updateMany() Replacement operations are similar to update operations, but instead of updating\na document to include new fields or new field values, a replacement operation\nreplaces the entire document with a new document, but retains the original\ndocument's  _id  value. The  MongoDB\\Collection::replaceOne()  method replaces a single\ndocument that matches the filter criteria and returns an instance of\n MongoDB\\UpdateResult , which you can use to access statistics about\nthe replacement operation. MongoDB\\Collection::replaceOne()  has two required parameters: the\nquery filter that identifies the document or documents to replace, and a\nreplacement document that will replace the original document in MongoDB. The\n MongoDB\\Collection::replaceOne()  reference describes each\nparameter in detail. The following example inserts one document into an empty  users  collection in\nthe  test  database, and then replaces that document with a new one: The output would then resemble: Replacement operations replace all of the fields in a document except the\n _id  value. To avoid accidentally overwriting or deleting desired fields,\nuse the  MongoDB\\Collection::updateOne()  or\n MongoDB\\Collection::updateMany()  methods to update individual\nfields in a document rather than replacing the entire document. MongoDB\\Collection::replaceOne() MongoDB\\Collection::findOneAndReplace() Update and replace operations support an  upsert  option. When  upsert  is  true \n and  no documents match the specified filter, the operation creates a new\ndocument and inserts it. If there  are  matching documents, then the operation\nmodifies or replaces the matching document or documents. When a document is upserted, the ID is accessible via\n MongoDB\\UpdateResult::getUpsertedId() . The following example uses  MongoDB\\Collection::updateOne()  with\nthe  upsert  option set to  true  and an empty  users  collection in the\n test  database, therefore inserting the document into the database: The output would then resemble: The  MongoDB\\Collection::deleteOne()  method deletes a single\ndocument that matches the filter criteria and returns a\n MongoDB\\DeleteResult , which you can use to access statistics about\nthe delete operation. If multiple documents match the filter criteria,\n MongoDB\\Collection::deleteOne()  deletes the  first  matching document. MongoDB\\Collection::deleteOne()  has one required parameter: a\nquery filter that specifies the document to delete. Refer to the\n MongoDB\\Collection::deleteOne()  reference for full method\ndocumentation. The following operation deletes the first document where the  state  field's\nvalue is  \"ny\" : The output would then resemble: MongoDB\\Collection::deleteOne() MongoDB\\Collection::deleteMany()  deletes all of the documents that\nmatch the filter criteria and returns a  MongoDB\\DeleteResult , which\nyou can use to access statistics about the delete operation. MongoDB\\Collection::deleteMany()  has one required parameter: a\nquery filter that specifies the document to delete. Refer to the\n MongoDB\\Collection::deleteMany()  reference for full method\ndocumentation. The following operation deletes all of the documents where the  state  field's\nvalue is  \"ny\" : The output would then resemble: MongoDB\\Collection::deleteMany()",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n\n$insertOneResult = $collection->insertOne(['_id' => 1, 'name' => 'Alice']);\n\nprintf(\"Inserted %d document(s)\\n\", $insertOneResult->getInsertedCount());\n\nvar_dump($insertOneResult->getInsertedId());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 1 document(s)\nint(1)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n\n$insertOneResult = $collection->insertOne([\n    'username' => 'admin',\n    'email' => 'admin@example.com',\n    'name' => 'Admin User',\n]);\n\nprintf(\"Inserted %d document(s)\\n\", $insertOneResult->getInsertedCount());\n\nvar_dump($insertOneResult->getInsertedId());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 1 document(s)\nobject(MongoDB\\BSON\\ObjectId)#11 (1) {\n  [\"oid\"]=>\n  string(24) \"579a25921f417dd1e5518141\"\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n\n$insertManyResult = $collection->insertMany([\n    [\n        'username' => 'admin',\n        'email' => 'admin@example.com',\n        'name' => 'Admin User',\n    ],\n    [\n        'username' => 'test',\n        'email' => 'test@example.com',\n        'name' => 'Test User',\n    ],\n]);\n\nprintf(\"Inserted %d document(s)\\n\", $insertManyResult->getInsertedCount());\n\nvar_dump($insertManyResult->getInsertedIds());"
                },
                {
                    "lang": "none",
                    "value": "Inserted 2 document(s)\narray(2) {\n  [0]=>\n  object(MongoDB\\BSON\\ObjectId)#11 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518141\"\n  }\n  [1]=>\n  object(MongoDB\\BSON\\ObjectId)#12 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518142\"\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$document = $collection->findOne(['_id' => '94301']);\n\nvar_dump($document);"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(5) {\n    [\"_id\"]=>\n    string(5) \"94301\"\n    [\"city\"]=>\n    string(9) \"PALO ALTO\"\n    [\"loc\"]=>\n    object(MongoDB\\Model\\BSONArray)#12 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(2) {\n        [0]=>\n        float(-122.149685)\n        [1]=>\n        float(37.444324)\n      }\n    }\n    [\"pop\"]=>\n    int(15965)\n    [\"state\"]=>\n    string(2) \"CA\"\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$cursor = $collection->find(['city' => 'JERSEY CITY', 'state' => 'NJ']);\n\nforeach ($cursor as $document) {\n    echo $document['_id'], \"\\n\";\n}"
                },
                {
                    "lang": "none",
                    "value": "07302\n07304\n07305\n07306\n07307\n07310"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$cursor = $collection->find(\n    [\n        'cuisine' => 'Italian',\n        'borough' => 'Manhattan',\n    ],\n    [\n        'projection' => [\n            'name' => 1,\n            'borough' => 1,\n            'cuisine' => 1,\n        ],\n        'limit' => 4,\n    ]\n);\n\nforeach($cursor as $restaurant) {\n   var_dump($restaurant);\n};"
                },
                {
                    "lang": "none",
                    "value": "object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f98d\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(18) \"Marchis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#10 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f99b\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(19) \"Forlinis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#12 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#13 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9a8\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(22) \"Angelo Of Mulberry St.\"\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$cursor = $collection->find(\n    [],\n    [\n        'limit' => 5,\n        'sort' => ['pop' => -1],\n    ]\n);\n\nforeach ($cursor as $document) {\n    printf(\"%s: %s, %s\\n\", $document['_id'], $document['city'], $document['state']);\n}"
                },
                {
                    "lang": "none",
                    "value": "60623: CHICAGO, IL\n11226: BROOKLYN, NY\n10021: NEW YORK, NY\n10025: NEW YORK, NY\n90201: BELL GARDENS, CA"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$cursor = $collection->find([\n    'city' => new MongoDB\\BSON\\Regex('^garden', 'i'),\n    'state' => 'TX',\n]);\n\nforeach ($cursor as $document) {\n   printf(\"%s: %s, %s\\n\", $document['_id'], $document['city'], $document['state']);\n}"
                },
                {
                    "lang": "none",
                    "value": "78266: GARDEN RIDGE, TX\n79739: GARDEN CITY, TX\n79758: GARDENDALE, TX"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n[\n    'city' => ['$regex' => '^garden', '$options' => 'i'],\n    'state' => 'TX',\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->restaurants;\n\n$cursor = $collection->find([\n    'name' => new MongoDB\\BSON\\Regex('^' . preg_quote('(Library)')),\n]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->zips;\n\n$cursor = $collection->aggregate([\n    ['$group' => ['_id' => '$state', 'count' => ['$sum' => 1]]],\n    ['$sort' => ['count' => -1]],\n    ['$limit' => 5],\n]);\n\nforeach ($cursor as $state) {\n    printf(\"%s has %d zip codes\\n\", $state['_id'], $state['count']);\n}"
                },
                {
                    "lang": "none",
                    "value": "TX has 1671 zip codes\nNY has 1595 zip codes\nCA has 1516 zip codes\nPA has 1458 zip codes\nIL has 1237 zip codes"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$updateResult = $collection->updateOne(\n    ['state' => 'ny'],\n    ['$set' => ['country' => 'us']]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 1 document(s)\nModified 1 document(s)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$updateResult = $collection->updateOne(\n    ['name' => 'Bob'],\n    ['$set' => ['state' => 'ny']]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 1 document(s)\nModified 0 document(s)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny', 'country' => 'us']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Sam', 'state' => 'ny']);\n$updateResult = $collection->updateMany(\n    ['state' => 'ny'],\n    ['$set' => ['country' => 'us']]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 3 document(s)\nModified 2 document(s)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$updateResult = $collection->replaceOne(\n    ['name' => 'Bob'],\n    ['name' => 'Robert', 'state' => 'ca']\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());"
                },
                {
                    "lang": "none",
                    "value": "Matched 1 document(s)\nModified 1 document(s)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$updateResult = $collection->updateOne(\n    ['name' => 'Bob'],\n    ['$set' => ['state' => 'ny']],\n    ['upsert' => true]\n);\n\nprintf(\"Matched %d document(s)\\n\", $updateResult->getMatchedCount());\nprintf(\"Modified %d document(s)\\n\", $updateResult->getModifiedCount());\nprintf(\"Upserted %d document(s)\\n\", $updateResult->getUpsertedCount());\n\n$upsertedDocument = $collection->findOne([\n    '_id' => $updateResult->getUpsertedId(),\n]);\n\nvar_dump($upsertedDocument);"
                },
                {
                    "lang": "none",
                    "value": "Matched 0 document(s)\nModified 0 document(s)\nUpserted 1 document(s)\nobject(MongoDB\\Model\\BSONDocument)#16 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#15 (1) {\n      [\"oid\"]=>\n      string(24) \"57509c4406d7241dad86e7c3\"\n    }\n    [\"name\"]=>\n    string(3) \"Bob\"\n    [\"state\"]=>\n    string(2) \"ny\"\n  }\n}"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$deleteResult = $collection->deleteOne(['state' => 'ny']);\n\nprintf(\"Deleted %d document(s)\\n\", $deleteResult->getDeletedCount());"
                },
                {
                    "lang": "none",
                    "value": "Deleted 1 document(s)"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->users;\n$collection->drop();\n\n$collection->insertOne(['name' => 'Bob', 'state' => 'ny']);\n$collection->insertOne(['name' => 'Alice', 'state' => 'ny']);\n$deleteResult = $collection->deleteMany(['state' => 'ny']);\n\nprintf(\"Deleted %d document(s)\\n\", $deleteResult->getDeletedCount());"
                },
                {
                    "lang": "none",
                    "value": "Deleted 2 document(s)"
                }
            ],
            "preview": "CRUD operations create, read, update, and delete documents. The\nMongoDB PHP Library's MongoDB\\Collection class implements MongoDB's\ncross-driver CRUD specification,\nproviding access to methods for inserting, finding, updating, and deleting\ndocuments in MongoDB.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/collation",
            "title": "Collation",
            "headings": [
                "Overview",
                "Usage",
                "Collation Parameters",
                "Assign a Default Collation to a Collection",
                "Assign a Collation to an Index",
                "Operations that Support Collation",
                "find() with sort",
                "findOneAndUpdate()",
                "findOneAndDelete()",
                "deleteMany()",
                "Aggregation"
            ],
            "paragraphs": "MongoDB 3.4 introduced support for  collations , which provide a set of rules to comply with the\nconventions of a particular language when comparing strings. For example, in Canadian French, the last accent in a given word determines the\nsorting order. Consider the following French words: The sort order using the Canadian French collation would result in the\nfollowing: If collation is unspecified, MongoDB uses simple binary comparison for strings.\nAs such, the sort order of the words would be: You can specify a default collation for collections and indexes when they are\ncreated, or specify a collation for CRUD operations and aggregations. For\noperations that support collation, MongoDB uses the collection's default\ncollation unless the operation specifies a different collation. The only required parameter is  locale , which the server parses as an  ICU\nformat locale ID . For example, set\n locale  to  en_US  to represent US English or  fr_CA  to represent\nCanadian French. For a complete description of the available parameters, see  Collation\nDocument  in the MongoDB manual. The following example creates a new collection called  contacts  on the\n test  database and assigns a default collation with the  fr_CA  locale.\nSpecifying a collation when you create the collection ensures that all\noperations involving a query that are run against the  contacts  collection\nuse the  fr_CA  collation, unless the query specifies another collation. Any\nindexes on the new collection also inherit the default collation, unless the\ncreation command specifies another collation. To specify a collation for an index, use the  collation  option when you\ncreate the index. The following example creates an index on the  name  field of the\n address_book  collection, with the  unique  parameter enabled and a default\ncollation with  locale  set to  en_US . To use this index, make sure your queries also specify the same collation. The\nfollowing query uses the above index: The following queries do  NOT  use the index. The first query uses no\ncollation, and the second uses a collation with a different  strength  value\nthan the collation on the index. All reading, updating, and deleting methods support collation. Some examples are\nlisted below. Individual queries can specify a collation to use when matching and sorting\nresults. The following query and sort operation uses a German collation with the\n locale  parameter set to  de . A collection called  names  contains the following documents: The following  findOneAndUpdate()  operation on the collection does not\nspecify a collation. Because  Gunter  is lexically first in the collection, the above operation\nreturns no results and updates no documents. Consider the same  findOneAndUpdate()  operation but with a collation\nspecified, which uses the locale  de@collation=phonebook . The operation returns the following updated document: Some locales have a  collation=phonebook  option available for use with\nlanguages which sort proper nouns differently from other words. According to\nthe  de@collation=phonebook  collation, characters with umlauts come before\nthe same characters without umlauts. Set the  numericOrdering  collation parameter to  true  to compare numeric\nstrings by their numeric values. The collection  numbers  contains the following documents: The following example matches the first document in which field  a  has a\nnumeric value greater than 100 and deletes it. After the above operation, the following documents remain in the collection: If you perform the same operation without collation, the server deletes the\nfirst document it finds in which the lexical value of  a  is greater than\n \"100\" . After the above operation is executed, the document in which  a  was equal to\n \"16\"  has been deleted, and the following documents remain in the collection: You can use collations with all the various CRUD operations which exist in the\n MongoDB PHP Library . The collection  recipes  contains the following documents: Setting the  strength  parameter of the collation document to  1  or  2 \ncauses the server to disregard case in the query filter. The following example\nuses a case-insensitive query filter to delete all records in which the\n cuisine  field matches  French . After the above operation runs, the documents with  _id  values of  2  and\n 4  are deleted from the collection. To use collation with an  aggregate()  operation, specify a collation in the\naggregation options. The following aggregation example uses a collection called  names  and groups\nthe  first_name  field together, counts the total number of results in each\ngroup, and sorts the results by German phonebook order.",
            "code": [
                {
                    "lang": "none",
                    "value": "cote < cot\u00e9 < c\u00f4te < c\u00f4t\u00e9"
                },
                {
                    "lang": "none",
                    "value": "cote < c\u00f4te < cot\u00e9 < c\u00f4t\u00e9"
                },
                {
                    "lang": "none",
                    "value": "cote < cot\u00e9 < c\u00f4te < c\u00f4t\u00e9"
                },
                {
                    "lang": "php",
                    "value": "'collation' => [\n    'locale' => <string>,\n    'caseLevel' => <boolean>,\n    'caseFirst' => <string>,\n    'strength' => <integer>,\n    'numericOrdering' => <boolean>,\n    'alternate' => <string>,\n    'maxVariable' => <string>,\n    'normalization' => <boolean>,\n    'backwards' => <boolean>,\n]"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$database = (new MongoDB\\Client)->test;\n\n$database->createCollection('contacts', [\n    'collation' => ['locale' => 'fr_CA'],\n]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->address_book;\n\n$collection->createIndex(\n    ['first_name' => 1],\n    [\n        'collation' => ['locale' => 'en_US'],\n        'unique' => true,\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->address_book;\n\n$cursor = $collection->find(\n    ['first_name' => 'Adam'],\n    [\n        'collation' => ['locale' => 'en_US'],\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->address_book;\n\n$cursor1 = $collection->find(['first_name' => 'Adam']);\n\n$cursor2 = $collection->find(\n    ['first_name' => 'Adam'],\n    [\n        'collation' => [\n            'locale' => 'en_US',\n            'strength' => 2,\n        ],\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->contacts;\n\n$cursor = $collection->find(\n    ['city' => 'New York'],\n    [\n        'collation' => ['locale' => 'de'],\n        'sort' => ['name' => 1],\n    ]\n);"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"first_name\" : \"Hans\" }\n{ \"_id\" : 2, \"first_name\" : \"Gunter\" }\n{ \"_id\" : 3, \"first_name\" : \"G\u00fcnter\" }\n{ \"_id\" : 4, \"first_name\" : \"J\u00fcrgen\" }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->names;\n\n$document = $collection->findOneAndUpdate(\n    ['first_name' => ['$lt' => 'Gunter']],\n    ['$set' => ['verified' => true]]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->names;\n\n$document = $collection->findOneAndUpdate(\n    ['first_name' => ['$lt' => 'Gunter']],\n    ['$set' => ['verified' => true]],\n    [\n        'collation' => ['locale' => 'de@collation=phonebook'],\n        'returnDocument' => MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER,\n    ]\n);"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" => 3, \"first_name\" => \"G\u00fcnter\", \"verified\" => true }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"a\" : \"16\" }\n{ \"_id\" : 2, \"a\" : \"84\" }\n{ \"_id\" : 3, \"a\" : \"179\" }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->numbers;\n\n$document = $collection->findOneAndDelete(\n    ['a' => ['$gt' =-> '100']],\n    [\n        'collation' => [\n            'locale' => 'en',\n            'numericOrdering' => true,\n        ],\n    ]\n);"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"a\" : \"16\" }\n{ \"_id\" : 2, \"a\" : \"84\" }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->numbers;\n\n$document = $collection->findOneAndDelete(['a' => ['$gt' =-> '100']]);"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 2, \"a\" : \"84\" }\n{ \"_id\" : 3, \"a\" : \"179\" }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"dish\" : \"veggie empanadas\", \"cuisine\" : \"Spanish\" }\n{ \"_id\" : 2, \"dish\" : \"beef bourgignon\", \"cuisine\" : \"French\" }\n{ \"_id\" : 3, \"dish\" : \"chicken mol\u00e9\", \"cuisine\" : \"Mexican\" }\n{ \"_id\" : 4, \"dish\" : \"chicken paillard\", \"cuisine\" : \"french\" }\n{ \"_id\" : 5, \"dish\" : \"pozole verde\", \"cuisine\" : \"Mexican\" }"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->recipes;\n\n$collection->deleteMany(\n    ['cuisine' => 'French'],\n    [\n        'collation' => [\n            'locale' => 'en_US',\n            'strength' => 1,\n        ],\n    ]\n);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$collection = (new MongoDB\\Client)->test->names;\n\n$cursor = $collection->aggregate(\n    [\n        ['$group' => ['_id' => '$first_name', 'name_count' => ['$sum' => 1]]],\n        ['$sort' => ['_id' => 1]],\n    ],\n    [\n        'collation' => ['locale' => 'de@collation=phonebook'],\n    ]\n);"
                }
            ],
            "preview": "MongoDB 3.4 introduced support for collations, which provide a set of rules to comply with the\nconventions of a particular language when comparing strings.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/client-side-encryption",
            "title": "Client-Side Encryption",
            "headings": [
                "Creating an Encryption Key",
                "Automatic Encryption and Decryption",
                "Specifying an Explicit Schema for Encryption",
                "Manually Encrypting and Decrypting Values",
                "Referencing Encryption Keys by an Alternative Name",
                "Automatic Queryable Encryption"
            ],
            "paragraphs": "Client-Side Field Level Encryption allows administrators and developers to\nencrypt specific data fields in addition to other MongoDB encryption features. To create an encryption key, create a  MongoDB\\Driver\\ClientEncryption \ninstance with encryption options and create a new data key. The method will\nreturn the key ID which can be used to reference the key later. You can also\npass multiple alternate names for this key and reference the key by these names\ninstead of the key ID. Creating a new data encryption key would typically be\ndone on initial deployment, but depending on your use case you may want to use\nmore than one encryption key or create them dynamically. The following examples use a local master key; however, other key providers\nsuch as AWS KMS are also an option. This master key is used to encrypt data\nkeys that are stored locally. It is important that you keep this key secure. The following example sets up a collection with automatic encryption based on a\n $jsonSchema  validator. The data in the  encryptedField  field is\nautomatically encrypted on insertion and decrypted when reading on the client\nside. Auto encryption is an enterprise only feature. The following example uses the  schemaMap  encryption option to define\nencrypted fields. Supplying a  schemaMap  provides more security than relying on JSON schemas\nobtained from the server. It protects against a malicious server advertising\na false JSON schema, which could trick the client into sending unencrypted\ndata that should be encrypted. In the MongoDB Community Edition, you will have to manually encrypt values\nbefore storing them in the database. The following example assumes that you have\nalready created an encryption key in the key vault collection and explicitly\nencrypts and decrypts values in the document. While it is possible to create an encryption key every time data is encrypted,\nthis is not the recommended approach. Instead, you should create your encryption\nkeys depending on your use case, e.g. by creating a user-specific encryption\nkey. To reference keys in your software, you can use the keyAltName attribute\nspecified when creating the key. The following example creates an encryption key\nwith an alternative name, which could be done when deploying the application.\nThe software then encrypts data by referencing the key by its alternative name. To use an alternate name when referencing an encryption key, use the\n keyAltName  option instead of  keyId . The following example uses a local key; however, other key providers such as AWS\nare also an option. The data in the  encryptedIndexed  and\n encryptedUnindexed  fields will be automatically encrypted on insertion and\ndecrypted when querying on the client side. Additionally, it is possible to\nquery on the  encryptedIndexed  field. Automatic queryable encryption is an enterprise only feature and requires\nMongoDB 7.0+.",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ClientEncryption;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n\n$clientEncryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => [\n        'local' => ['key' => $localKey],\n    ],\n];\n\n$client = new Client();\n$clientEncryption = $client->createClientEncryption($clientEncryptionOpts);\n\n// Create an encryption key with an alternate name\n// To store the key ID for later use, you can use serialize or var_export\n$keyId = $clientEncryption->createDataKey('local', ['keyAltNames' => ['my-encryption-key']]);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ClientEncryption;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n$encryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => [\n        'local' => ['key' => $localKey],\n    ],\n];\n\n$client = new Client();\n\n$database = $client->selectDatabase('test');\n$database->dropCollection('coll'); // remove old data\n\n// This uses the key ID from the first example. The key ID could be read from\n// a configuration file.\n$keyId = readDataKey();\n\n$database->createCollection('coll', [\n    'validator' => [\n        '$jsonSchema' => [\n            'bsonType' => 'object',\n            'properties' => [\n                'encryptedField' => [\n                    'encrypt' => [\n                        'keyId' => [$keyId],\n                        'bsonType' => 'string',\n                        'algorithm' => ClientEncryption::AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC,\n                    ],\n                ],\n            ],\n        ],\n    ],\n]);\n\n$encryptedClient = new Client('mongodb://127.0.0.1', [], ['autoEncryption' => $encryptionOpts]);\n\n$collection = $encryptedClient->selectCollection('test', 'coll');\n\n$collection->insertOne(['encryptedField' => '123456789']);\n\nvar_dump($collection->findOne([]));"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ClientEncryption;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n\n$client = new Client();\n\n// This uses the key ID from the first example. The key ID could be read from\n// a configuration file.\n$keyId = readDataKey();\n\n$autoEncryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => [\n        'local' => ['key' => $localKey],\n    ],\n    'schemaMap' => [\n        'test.coll' => [\n            'bsonType' => 'object',\n            'properties' => [\n                'encryptedField' => [\n                    'encrypt' => [\n                        'keyId' => [$keyId],\n                        'bsonType' => 'string',\n                        'algorithm' => ClientEncryption::AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC,\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n\n$encryptedClient = new Client(null, [], ['autoEncryption' => $autoEncryptionOpts]);\n\n$collection = $encryptedClient->selectCollection('test', 'coll');\n$collection->drop(); // clear old data\n\n$collection->insertOne(['encryptedField' => '123456789']);\n\nvar_dump($collection->findOne([]));"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ClientEncryption;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n\n$clientEncryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => [\n        'local' => ['key' => $localKey],\n    ],\n];\n\n$client = new Client();\n$clientEncryption = $client->createClientEncryption($clientEncryptionOpts);\n\n// This uses the key ID from the first example. The key ID could be read from\n// a configuration file.\n$keyId = readDataKey();\n\n$collection = $client->selectCollection('test', 'coll');\n$collection->drop(); // clear old data\n\n$encryptionOpts = [\n    'keyId' => $keyId,\n    'algorithm' => ClientEncryption::AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC,\n];\n$encryptedValue = $clientEncryption->encrypt('123456789', $encryptionOpts);\n\n$collection->insertOne(['encryptedField' => $encryptedValue]);\n\n$document = $collection->findOne();\nvar_dump($clientEncryption->decrypt($document->encryptedField));"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\nuse MongoDB\\Driver\\ClientEncryption;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n\n$clientEncryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => [\n        'local' => ['key' => $localKey],\n    ],\n];\n\n$client = new Client();\n$clientEncryption = $client->createClientEncryption($clientEncryptionOpts);\n\n$collection = $client->selectCollection('test', 'coll');\n$collection->drop(); // clear old data\n\n// Reference the encryption key created in the first example by its\n// alternative name\n$encryptionOpts = [\n    'keyAltName' => 'my-encryption-key',\n    'algorithm' => ClientEncryption::AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC,\n];\n$encryptedValue = $clientEncryption->encrypt('123456789', $encryptionOpts);\n\n$collection->insertOne(['encryptedField' => $encryptedValue]);\n\n$document = $collection->findOne();\nvar_dump($clientEncryption->decrypt($document->encryptedField));"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nuse MongoDB\\BSON\\Binary;\nuse MongoDB\\Client;\n\n$localKey = new Binary('<binary key data (96 bytes)>', Binary::TYPE_GENERIC);\n\n$encryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => ['local' => ['key' => $localKey]],\n];\n\n$client = new Client();\n$clientEncryption = $client->createClientEncryption($encryptionOpts);\n\n// Create two data keys, one for each encrypted field\n$dataKeyId1 = $clientEncryption->createDataKey('local');\n$dataKeyId2 = $clientEncryption->createDataKey('local');\n\n$autoEncryptionOpts = [\n    'keyVaultNamespace' => 'encryption.__keyVault',\n    'kmsProviders' => ['local' => ['key' => $localKey]],\n    'encryptedFieldsMap' => [\n        'test.coll' => [\n            'fields' => [\n                [\n                    'path' => 'encryptedIndexed',\n                    'bsonType' => 'string',\n                    'keyId' => $dataKeyId1,\n                    'queries' => ['queryType' => 'equality'],\n                ],\n                [\n                    'path' => 'encryptedUnindexed',\n                    'bsonType' => 'string',\n                    'keyId' => $dataKeyId2,\n                ],\n            ],\n        ],\n    ],\n];\n\n$encryptedClient = new Client(null, [], ['autoEncryption' => $autoEncryptionOpts]);\n\n/* Drop and create the collection under test. The createCollection() helper\n * will reference the client's encryptedFieldsMap and create additional,\n * internal collections automatically. */\n$encryptedClient->selectDatabase('test')->dropCollection('coll');\n$encryptedClient->selectDatabase('test')->createCollection('coll');\n$encryptedCollection = $encryptedClient->selectCollection('test', 'coll');\n\n/* Using a client with auto encryption, insert a document with encrypted\n * fields and assert that those fields are automatically decrypted when\n * querying. The encryptedIndexed and encryptedUnindexed fields should both\n * be strings. */\n$indexedValue = 'indexedValue';\n$unindexedValue = 'unindexedValue';\n\n$encryptedCollection->insertOne([\n    '_id' => 1,\n    'encryptedIndexed' => $indexedValue,\n    'encryptedUnindexed' => $unindexedValue,\n]);\n\nvar_dump($encryptedCollection->findOne(['encryptedIndexed' => $indexedValue]));\n\n/* Using a client without auto encryption, query for the same document and\n * assert that encrypted data is returned. The encryptedIndexed and\n * encryptedUnindexed fields should both be Binary objects. */\n$unencryptedCollection = $client->selectCollection('test', 'coll');\n\nvar_dump($unencryptedCollection->findOne(['_id' => 1]));"
                }
            ],
            "preview": "Client-Side Field Level Encryption allows administrators and developers to\nencrypt specific data fields in addition to other MongoDB encryption features.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/install-php-library",
            "title": "Install the MongoDB PHP Library",
            "headings": [
                "Installing the Extension",
                "Installing the Library",
                "Using Composer",
                "Manual Installation Without Composer"
            ],
            "paragraphs": "The  MongoDB PHP Library  is a high-level abstraction for the\n PHP driver  (i.e.  mongodb  extension). This page\nwill briefly explain how to install both the  mongodb  extension and the\n MongoDB PHP Library . Linux, Unix, and macOS users can either\n install the extension with PECL \n(recommended) or\n manually compile from source .\nThe following command may be used to install the extension with PECL: Once the extension is installed, add the following line to your  php.ini \nfile: Windows users can download precompiled binaries of the extension from its\n GitHub releases .\nAfter downloading the appropriate archive for your PHP environment, extract the\n php_mongodb.dll  file to PHP's extension directory and add the following line\nto your  php.ini  file: See  Installing the MongoDB PHP Driver on Windows \nfor additional information. If the build process for either installation method fails to find a TLS\nlibrary, check that the development packages (e.g.  libssl-dev ) and\n pkg-config  are both installed. The preferred method of installing the  MongoDB PHP Library  is with\n Composer  by running the following command from\nyour project root: Once you have installed the library, ensure that your application includes\nComposer's autoloader as in the following example: Refer to Composer's  autoloading documentation  for more\ninformation about setting up autoloading. While not recommended, you may also manually install the library using a source\narchive attached to the\n GitHub releases .\nWhen installing the library without Composer, you must ensure that all library\nclasses  and  functions are loaded for your application: If you are using a  PSR-4  autoloader,\nmap the top-level  MongoDB\\  namespace to the  src/  directory. If you\nare not using an autoloader, manually require _all_ class files found\nrecursively within the  src/  directory. Regardless of whether you are using an autoloader, manually require the\n src/functions.php  file. This is necessary because PHP does not support\nautoloading for functions.",
            "code": [
                {
                    "lang": "sh",
                    "value": "sudo pecl install mongodb"
                },
                {
                    "lang": "ini",
                    "value": "extension=mongodb.so"
                },
                {
                    "lang": "ini",
                    "value": "extension=php_mongodb.dll"
                },
                {
                    "lang": "sh",
                    "value": "composer require mongodb/mongodb"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';"
                }
            ],
            "preview": "The MongoDB PHP Library is a high-level abstraction for the\nPHP driver (i.e. mongodb extension). This page\nwill briefly explain how to install both the mongodb extension and the\nMongoDB PHP Library.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "tutorial/gridfs",
            "title": "GridFS",
            "headings": [
                "Creating a GridFS Bucket",
                "Uploading Files with Writable Streams",
                "Downloading Files with Readable Streams",
                "Selecting Files by Filename and Revision",
                "Deleting Files",
                "Finding File Metadata",
                "Accessing File Metadata for an Existing Stream"
            ],
            "paragraphs": "GridFS  is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g.  fs.chunks ), and the other stores file metadata\n(e.g.  fs.files ). The  MongoDB\\GridFS\\Bucket  class provides an\ninterface around these collections for working with the files as PHP\n Streams . You can construct a GridFS bucket using the PHP extension's\n MongoDB\\Driver\\Manager  class, or select\na bucket from the  MongoDB PHP Library 's  MongoDB\\Database  class via the\n selectGridFSBucket() \nmethod. The bucket can be constructed with various options: bucketName  determines the prefix for the bucket's metadata and chunk\ncollections. The default value is  \"fs\" . chunkSizeBytes  determines the size of each chunk. GridFS divides the file\ninto chunks of this length, except for the last, which is only as large as\nneeded. The default size is  261120  (i.e. 255 KiB). readConcern ,  readPreference  and  writeConcern  options can be used\nto specify defaults for read and write operations, much like the\n MongoDB\\GridFS\\Collection  options. To upload a file to GridFS using a writable stream, you can either open a stream\nand write to it directly or write the entire contents of another readable stream\nto GridFS all at once. To open an upload stream and write to it: To upload the entire contents of a readable stream in one call: To download a file from GridFS using a readable stream, you can either open a\nstream and read from it directly or download the entire file all at once. To open a download stream and read from it: To download the file all at once and write it to a writable stream: You can also download a file specified by filename and (optionally) revision\nnumber. Revision numbers are used to distinguish between files sharing the same\n filename  metadata field, ordered by date of upload (i.e. the  uploadDate \nmetadata field). The  revision  option accepted by\n openDownloadStreamByName()  and\n downloadToStreamByName()  can be positive or negative. A positive  revision  number may be used to select files in order of the\noldest upload date. A revision of  0  would denote the file with the oldest\nupload date, a revision of  1  would denote the second oldest upload, and so\non. A negative revision may be used to select files in order of the most recent\nupload date. A revision of  -1  would denote a file with the most recent\nupload date, a revision of  -2  would denote the second most recent upload,\nand so on. The  revision  option defaults to  -1  if not specified. The following example downloads the contents of the oldest version of a\nparticular file: You can delete a GridFS file by its  _id . The  find()  method allows you to\nretrieve documents from the GridFS files collection, which contain metadata\nabout the GridFS files. The  getFileDocumentForStream()  method may be used to get\nthe file document for an existing readable or writable GridFS stream. The  getFileIdForStream()  method may be used to get the\n _id  for an existing readable or writable GridFS stream. This is a\nconvenience for accessing the  _id  property of the object returned by\n getFileDocumentForStream() . Since the file document for a writable stream is not committed to MongoDB\nuntil the stream is closed,\n getFileDocumentForStream()  can only return an\nin-memory document, which will be missing some fields (e.g.  length ,\n md5 ).",
            "code": [
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openUploadStream('my-file.txt');\n\n$contents = file_get_contents('/path/to/my-file.txt');\nfwrite($stream, $contents);\nfclose($stream);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$file = fopen('/path/to/my-file.txt', 'rb');\n$bucket->uploadFromStream('my-file.txt', $file);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n// In practice, $fileId denotes the _id of an existing file in GridFS\n$fileId = new MongoDB\\BSON\\ObjectId;\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openDownloadStream($fileId);\n$contents = stream_get_contents($stream);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n// In practice, $fileId denotes the _id of an existing file in GridFS\n$fileId = new MongoDB\\BSON\\ObjectId;\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$file = fopen('/path/to/my-output-file.txt', 'wb');\n\n$bucket->downloadToStream($fileId, $file);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openDownloadStreamByName('my-file.txt', ['revision' => 0]);\n$contents = stream_get_contents($stream);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n// In practice, $fileId denotes the _id of an existing file in GridFS\n$fileId = new MongoDB\\BSON\\ObjectId;\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$bucket->delete($fileId);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$cursor = $bucket->find(['filename' => 'my-file.txt']);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n// In practice, $fileId denotes the _id of an existing file in GridFS\n$fileId = new MongoDB\\BSON\\ObjectId;\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openDownloadStream($fileId);\n$metadata = $bucket->getFileDocumentForStream($stream);"
                },
                {
                    "lang": "php",
                    "value": "<?php\n\n$bucket = (new MongoDB\\Client)->test->selectGridFSBucket();\n\n$stream = $bucket->openDownloadStreamByName('my-file.txt');\n$fileId = $bucket->getFileIdForStream($stream);"
                }
            ],
            "preview": "GridFS is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g. fs.chunks), and the other stores file metadata\n(e.g. fs.files). The MongoDB\\GridFS\\Bucket class provides an\ninterface around these collections for working with the files as PHP\nStreams.",
            "tags": null,
            "facets": null
        }
    ]
}