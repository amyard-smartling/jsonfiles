{
    "url": "http://mongodb.com/docs/bi-connector/current",
    "includeInGlobalSearch": true,
    "documents": [
        {
            "slug": "atlas-bi-connector",
            "title": "Enable BI Connector in Atlas",
            "headings": [],
            "paragraphs": "You can host the MongoDB Connector for Business Intelligence in MongoDB Atlas. To learn how to enable and\nconnect to an Atlas-hosted BI Connector, see\n Connect via BI Connector for Atlas . To install the MongoDB Connector for Business Intelligence locally instead, see the\n Installation Guides . You can also deploy the MongoDB Connector for Business Intelligence to\n MongoDB Cloud Manager  or\n MongoDB Ops Manager .",
            "code": [],
            "preview": "Enable MongoDB Connector for Business Intelligence in MongoDB Atlas, Cloud Manager, or Ops Manager",
            "tags": "bi connector, atlas, cloud manager, ops manager",
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema-configuration",
            "title": "Map Relational Schemas to MongoDB",
            "headings": [
                "Standalone Schema Mode (Cached Sampling)",
                "Auto Schema Mode (Persist a Schema in MongoDB)",
                "Use MongoDB Views",
                "Load a Schema from a DRDL File",
                "Resample Schema Data with \"FLUSH SAMPLE\"",
                "Geospatial Data",
                "Sampling Type Conflicts"
            ],
            "paragraphs": "Business intelligence tools connect to a data source and, given a fixed\ntabular schema, allow users to visually explore their data.\nMongoDB uses a  flexible schema , so some\nbusiness intelligence tools cannot use MongoDB as a native data source. To use MongoDB with a relational business intelligence tool such as\n Tableau , you must define a relational\nmapping for your MongoDB data.  MongoDB Connector for BI  provides several methods for\ncreating and managing a relational schema. For complete documentation on  BI Connector 's schema management options,\nsee the  mongosqld  reference documentation. The default sampling mode which  mongosqld  uses to\nanalyze your collections and derive a static schema. In this mode,\n mongosqld  derives the schema on startup and holds the\nschema in memory. mongosqld  samples your MongoDB collections and\ncreates a schema at the time of startup and writes it to a\nMongoDB collection. Available via the  --schemaSource  option. MongoDB views  allow you to control the\ndisplay of information from a collection by restricting access\nto certain fields, renaming fields, sorting data, and other\ntechniques.  BI Connector  can read data from a view just as it does\nfrom a standard collection. You can generate a text schema for  mongosqld  to use\nwith the  mongodrdl  program. You can edit a text\nschema manually to suit your particular data needs. If the data in your MongoDB instance changes shape significantly\nwith new fields or collections, you may wish to regenerate the\nschema  BI Connector  uses. You can regenerate the schema either by\nrestarting  mongosqld  or by issuing the \"FLUSH\nSAMPLE\" command from within the MySQL shell. BI Connector  handles collections which contain a  2d  or  2dsphere \n geospatial index  such\nthat longitude and latitude data are represented within a single\ntable along with other collection data. Relational databases don't allow dynamically typed columns. When\nthe  BI Connector  samples data from MongoDB to generate a schema, type\nconversion conflicts may occur. To learn more about how the  BI Connector \nresolves these conflicts and displays data when conflicts are present,\nsee the following sections.",
            "code": [],
            "preview": "Business intelligence tools connect to a data source and, given a fixed\ntabular schema, allow users to visually explore their data.\nMongoDB uses a flexible schema, so some\nbusiness intelligence tools cannot use MongoDB as a native data source.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference",
            "title": "Reference",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "faq",
            "title": "FAQ: The MongoDB Connector for BI",
            "headings": [
                "Is there a cloud-hosted version of the BI Connector?",
                "How do I authenticate with the BI Connector?",
                "When upgrading MongoDB, what considerations should be taken for the BI Connector?",
                "Does the BI Connector store any data?",
                "How are queries processed?",
                "How do I skip data incompatible with my DRDL type definition?",
                "Using MongoDB Views",
                "Using a DRDL Filter",
                "Can I use MongoDB views with BI Connector?",
                "Is there any syntax validation tool for DRDL?",
                "How does the BI Connector process dates?",
                "How do I use TLS/SSL with the BI Connector?",
                "Connecting mongosqld to MongoDB",
                "Connecting a client to mongosqld",
                "Can I use the SQL EXPLAIN function?"
            ],
            "paragraphs": "You can host the MongoDB Connector for Business Intelligence in MongoDB Atlas. To learn how to enable and\nconnect to an Atlas-hosted BI Connector, see\n Connect via BI Connector for Atlas . When connecting to a MongoDB deployment using\n authentication , you can\nauthenticate as the users and roles configured in that deployment. See  Authentication  for details on how to specify\nyour authentication source and mechanism. Prior to version 2.0, the  BI Connector  stored its own separate set of\ncredentials. If you are using an older release of the  MongoDB Connector for BI , you should upgrade to 2.0\nby following the steps in  Install BI Connector On Premises . Before upgrading your MongoDB deployment, set the\n --mongo-versionCompatibility \noption to the currently installed major\n release series  of MongoDB, for example\n 3.4 . Once the upgrade is complete, restart  mongosqld \nwithout the\n --mongo-versionCompatibility \noption or set it to the newly updated major release series. If you launch the  BI Connector  with a\n DRDL schema file , you must\nupdate your schema file after the upgrade if you start using\na newly introduced  BSON Type . MongoDB 3.4 introduces the  decimal BSON type .\nWhen you upgrade from MongoDB 3.2 to MongoDB 3.4 and your schema file\ncontains  float64  values (which map to the  double  type in\nMongoDB), you must update your DRDL file after you begin using the\nnew  decimal  type. The  BI Connector  instance only transforms SQL queries into\nMongoDB queries. It does not store any data itself. When starting  mongosqld , you provide it a\n DRDL  file describing the schema of your\ndata. The  BI Connector  constructs  aggregation \nexpressions. mongosqld  always enables the\n aggregate   allowDiskUse \noption. The  BI Connector  cannot map some supported SQL constructs into an\naggregation equivalent. In this case, the  BI Connector  will execute those\nconstructs in memory. MongoDB 3.4 introduces  Read-Only Views  that you can\nuse to filter incompatible data. For example, you can create a view in the  test  database that contains\nonly documents containing a number in the  grade  field of a  grades \ncollection: You can then use  mongodrdl  to generate a schema from this view\nas you would a collection: If documents in a collection contain different data types for a field,\nyou may filter for a specific data type. To accomplish this, you can\ninclude a  $match  stage at the beginning of the pipeline in\nyour  DRDL  table definition. For example, to match only documents containing a number in the  grade  field,\nuse the following pipeline stage: If you are  unwinding  an array field that contains\ndifferent data types, then to filter the array for a specific data type, put\nthe  $match  stage after the  $unwind . Heterogeneous data types Yes.  BI Connector  treats a  view  like any other\ncollection. For more information on using views with  BI Connector , see\n Managing Schema with MongoDB Views . DRDL  files use the  YAML  syntax. Any\nYAML validator such as  https://yaml-online-parser.appspot.com/  can help you\ncheck your DRDL files. The  BI Connector  will correctly process  BSON date  data\nby mapping it to the  SQL   datetime  type. For example: If you store date data as a string, the  BI Connector  treats it as a string\nrather than as a date. For example,  BI Connector  treats the following as a\nstring: The connection between  mongosqld  and your MongoDB deployment\nhas TLS/SSL configured separately from the connection between your SQL\nclient and  mongosqld . If the MongoDB instance you are connecting to uses\n TLS/SSL , provide\nthe  --mongo-ssl \noption to  mongosqld . For example: To specify a TLS/SSL CA root certificate, use the\n --mongo-sslCAFile \noption. To specify a client certificate, use the\n --mongo-sslPEMKeyFile \noption. For example: To specify a TLS/SSL CA root certificate, use the\n --sslCAFile \noption. To specify a client certificate, use the\n --sslPEMKeyFile \noption. For example: If you are using an SQL client which allows you to issue SQL\nstatements directly, such as the MySQL shell, you can precede any\nquery with  EXPLAIN  to get information about how the query will\nbe executed.  EXPLAIN  returns the complete  aggregation\noperation  which  BI Connector  will send to MongoDB,\nwithout running the query or returning any results.  EXPLAIN  is\nuseful if you want to know exactly how a specific SQL query translates\ninto MongoDB Query Language.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "db.runCommand( { create: \"numericGrades\", viewOn: \"grades\", pipeline: [ { \"$match\": { \"grade\": { \"$type\": \"number\" } } } ] } )"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl -d test -c numericGrades"
                },
                {
                    "lang": "javascript",
                    "value": "\"$match\": { \"grade\": { \"$type\": \"number\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "db.data.save({ date: new Date() })"
                },
                {
                    "lang": "javascript",
                    "value": "db.data.save({ date: '32-FEB-2015' })"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schema=schema.drdl --mongo-ssl"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schema=schema.drdl \\\n          --mongo-ssl \\\n          --mongo-sslCAFile=/certs/ca.pem \\\n          --mongo-sslPEMKeyFile=/certs/mongodb_client.pem"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schema=schema.drdl \\\n          --sslCAFile=/certs/ca.pem \\\n          --sslPEMKeyFile=/certs/mongosql_server.pem"
                }
            ],
            "preview": "When connecting to a MongoDB deployment using\nauthentication, you can\nauthenticate as the users and roles configured in that deployment.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "what-is-the-bi-connector",
            "title": "What is the MongoDB Connector for BI?",
            "headings": [
                "System Components",
                "BI Connector Configurations",
                "Hosted Database and BI Connector",
                "Hosted Database and Self-Managed BI Connector",
                "Self-Managed Database and BI Connector",
                "Local Database and BI Connector"
            ],
            "paragraphs": "Traditional business intelligence tools work with flat, tabular data.\nThese tools aren't sophisticated enough to understand three-dimensional\ndata stored in MongoDB databases. The MongoDB Connector for Business Intelligence (BI) allows you to\ncreate queries with  SQL (Structured Query Language)  to visualize, graph, and report on your\nthree-dimensional MongoDB data using relational\nbusiness intelligence tools such as  Tableau \nand  Power BI . The  MongoDB Connector for BI  acts as a layer that translates queries and data between a\n mongod  or  mongos  instance and your reporting tool. The  BI Connector \nstores no data, and purely serves to bridge your MongoDB cluster with\nbusiness intelligence tools. As an alternative to using third-party data visualization tools and\nthe  BI Connector , you can use  MongoDB Charts  to create\ndata visualizations directly from your MongoDB collections. The  BI Connector  deployment includes the following components: Your  BI tool  and  driver  typically run on your local machine.\nYour  BI Connector instance  and your  database  can run on your\nlocal machine, in a data center, or hosted in the cloud. Visualization and reporting tool, such as Tableau and PowerBI. Provides a standard method to connect to the  BI Connector  and MongoDB\ndatabases from a BI tool. Depending on what your BI tool supports, you\ncan use  JDBC (Java Database Connectivity)  or  ODBC (Open Database Connectivity)  drivers to connect to the  BI Connector . Provides a relational schema and translates  SQL (Structured Query Language) \nqueries between your BI tool and MongoDB. MongoDB database deployment, either a self-managed MongoDB server\nor hosted MongoDB Atlas cluster. The following table outlines the supported configurations for the\n BI Connector  and MongoDB database deployments: The following sections describe these configurations: BI Connector  configuration Atlas Database (hosted) MongoDB Database (self-managed) Atlas  BI Connector  (hosted) Clusters M10 and greater only BI Connector  (self-managed) In this configuration, your database and  BI Connector \napplications both run on MongoDB Atlas, MongoDB's fully-managed\ndatabase-as-a-service. Databases hosted on MongoDB Atlas natively support\nthe  BI Connector . Enable the BI Connector  for MongoDB Atlas, then\nuse the connection information that Atlas provides to\nconfigure your  JDBC (Java Database Connectivity)  or  ODBC (Open Database Connectivity)  driver. You must have an M10 or higher MongoDB Atlas cluster to enable the\nbuilt-in  BI Connector . In this configuration, your MongoDB database runs on any tier of\nAtlas cluster and you install and manage the  BI Connector \nlocally or on your network. Install  and  launch  the\n BI Connector , specifying a remote database address, then configure your\n JDBC (Java Database Connectivity)  or  ODBC (Open Database Connectivity)  driver to connect to the  BI Connector . In this configuration, you install and manage both the MongoDB database\nand  BI Connector  applications, either locally or on your network. Install  and  launch  the\n BI Connector , then configure your  JDBC (Java Database Connectivity)  or  ODBC (Open Database Connectivity)  driver to connect to\nthe  BI Connector  server address. For testing and all-in-one-box local experimentation, you can run\nMongoDB and the  BI Connector  on your desktop. This configuration might be\nhelpful for proofs of concept or as a way to explore the possibilities\nof data visualization with the  BI Connector . Learn more about setting up a local  BI Connector  test installation\nin the  Quick Start Guide .",
            "code": [],
            "preview": "Traditional business intelligence tools work with flat, tabular data.\nThese tools aren't sophisticated enough to understand three-dimensional\ndata stored in MongoDB databases.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "",
            "title": "What is the MongoDB Connector for BI",
            "headings": [],
            "paragraphs": "Traditional business intelligence tools are designed to work with\ntabular, row-and-column data. The MongoDB Connector for BI allows you\nquery MongoDB data with SQL using tools such as Tableau, Power BI,\nand Excel.",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "authentication",
            "title": "Authentication",
            "headings": [
                "MongoDB Authentication",
                "BI Connector Authentication",
                "Client Authentication",
                "Authentication Options",
                "Example"
            ],
            "paragraphs": "The  MongoDB Connector for BI  supports the following authentication mechanisms for\nauthenticating with MongoDB and for authenticating connecting users: The  BI Connector  ( mongosqld ) uses admin credentials to\nauthenticate with MongoDB and  sample data  to\ngenerate the  BI Connector 's schema. When a client connects to the\n BI Connector ,  mongosqld  passes connecting client\ncredentials to MongoDB for authentication and will display and restrict\ndata according to the connecting user's permissions. The following sections will guide you through configuring the  BI Connector \nto authenticate with your MongoDB deployment, configuring authentication\nof users connecting to the  BI Connector , and how usernames should be\nformatted from your BI tool using authentcation options. SCRAM-SHA-1 SCRAM-SHA-256 PLAIN  (LDAP) GSSAPI  (Kerberos) If authentication is enabled on your MongoDB deployment, you must\nconfigure the  BI Connector  to use the required authentication mechanism\nand provide admin user credentials. The admin user credentials must be\n authorized  to view the superset of data\nyou wish to query using the  BI Connector . To enable Challenge and Response ( SCRAM-SHA-1 ) as your\n BI Connector  authentication mechanism for MongoDB, you must add\nthe following settings to your\n mongosqld  configuration file: For more information on MongoDB host configuration file\nsettings, see: For information on how to configure  SCRAM (Salted Challenge Response Authentication Mechanism)  on your MongoDB\ndeployment, see  SCRAM . mongodb.net.uri mongodb.net.auth.username mongodb.net.auth.password mongodb.net.auth.source mongodb.net.auth.mechanism To enable  LDAP (Lightweight Directory Access Protocol)  ( PLAIN ) as your\n BI Connector  authentication mechanism for MongoDB, you must add\nthe following settings to your\n mongosqld  configuration file: For more information on MongoDB host configuration file\nsettings, see: For information on how to configure  LDAP (Lightweight Directory Access Protocol)  on your MongoDB\ndeployment, see\n LDAP Proxy Authentication . mongodb.net.uri mongodb.net.auth.username mongodb.net.auth.password mongodb.net.auth.mechanism To enable Kerberos ( GSSAPI ) as your\n BI Connector  authentication mechanism for MongoDB, you must add\nthe following settings to your\n mongosqld  configuration file: For more information on MongoDB host configuration file\nsettings, see: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . mongodb.net.uri mongodb.net.auth.username mongodb.net.auth.password mongodb.net.auth.mechanism To enable Challenge and Response ( SCRAM-SHA-1 ) as your\n BI Connector  authentication mechanism, you must add\n security.enabled   : true  to your\n mongosqld  configuration file: SCRAM-SHA-1  is the default authentication mechanism\nwhen  mechanism  is not specified in the username and\nsecurity is enabled. If you want to omit  source  from\nthe username, add and set\n security.defaultSource   : <authenticationDatabase> \nin the configuration file: For more information on the  BI Connector 's configuration file settings,\nsee: security.enabled security.defaultMechanism security.defaultSource To enable  LDAP (Lightweight Directory Access Protocol)  ( PLAIN ) as your\n BI Connector  authentication mechanism, you must add\n security.enabled   : true  to your\n mongosqld  configuration file: If you want to omit adding  mechanism  and  source \nto the username, add and set these option/value pairs\nto your  mongosqld \nconfiguration file: The resulting  security \nblock in your  mongosqld \nconfiguration file should look like this: For more information on the  BI Connector 's configuration file settings,\nsee: security.defaultMechanism   : PLAIN security.defaultSource   : $external security.enabled security.defaultMechanism security.defaultSource To enable Kerberos ( GSSAPI ) as your\n BI Connector  authentication mechanism, you must add\n security.enabled   : true  to your\n mongosqld  configuration file: If you want to omit adding  mechanism  and  source \nto the username, add and set these option/value pairs\nto your  mongosqld \nconfiguration file: The resulting  security \nblock in your  mongosqld \nconfiguration file should look like this: For more information on the  BI Connector 's configuration file settings,\nsee: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . security.defaultMechanism   : GSSAPI security.defaultSource   : $external security.enabled security.defaultMechanism security.defaultSource security.gssapi.hostname security.gssapi.serviceName If your  BI tool  is using the\n MongoDB BI Connector ODBC Driver , the driver will\nhandle authentication and you do not need to install an authentication\nplugin. If you are not using the MongoDB BI Connector ODBC Driver and need to\nauthenticate using your BI tool, install either the C or JDBC\nauthentication plugin depending on which is compatible with your BI\nTool: For more\ninformation on connecting BI Tools to the  BI Connector , see\n Connect BI Tools . The  MongoDB Connector for BI  requires authentication when running with\n --auth .\nWhen the  MongoDB Connector for BI  receives a connection with authentication credentials\nfrom a client, it passes those credentials through to the underlying\nMongoDB instance. Instructions for installing the C Authentication Plugin, which\nfacilitates authentication between the BI Connector and SQL clients\nsuch as  Tableau  and the\n MySQL shell . Instructions for installing the JDBC Authentication Plugin. The use of TLS/SSL is recommended in addition to using an\nauthentication plugin as: The  SCRAM-SHA-1  and  SCRAM-SHA-256  mechanisms hash the\npasswords in the client plugin. However, all other data is in\ncleartext. The  PLAIN  mechanism sends the password in cleartext. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) The following example shows how to format a username to\nauthenticate with the  BI Connector  using Challenge and Response (username\nand password),  LDAP (Lightweight Directory Access Protocol) , or Kerberos: To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format:",
            "code": [
                {
                    "lang": "yaml",
                    "value": "mongodb:\n  net:\n    auth:\n      username: <admin-username>\n      password: <admin-password>\n      source: <auth-db-name>\n      mechanism: \"SCRAM-SHA-1\""
                },
                {
                    "lang": "yaml",
                    "value": "mongodb:\n  net:\n    auth:\n      username: <admin-username>\n      password: <admin-password>\n      mechanism: \"PLAIN\""
                },
                {
                    "lang": "yaml",
                    "value": "mongodb:\n  net:\n    auth:\n      username: <admin-username>\n      password: <admin-password>\n      mechanism: \"GSSAPI\""
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true"
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true\n  defaultSource: \"admin\""
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true"
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true\n  defaultMechanism: \"PLAIN\"\n  defaultSource: \"$external\""
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true"
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true\n  defaultMechanism: \"GSSAPI\"\n  defaultSource: \"$external\"\n  gssapi:\n    hostname: \"<yourHostname>\"\n    serviceName: \"mongosql\""
                },
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                }
            ],
            "preview": "The MongoDB Connector for BI supports the following authentication mechanisms for\nauthenticating with MongoDB and for authenticating connecting users:",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "components",
            "title": "MongoDB Connector for BI Components",
            "headings": [
                "Choosing a Driver"
            ],
            "paragraphs": "The following tools are available for use with the  MongoDB Connector for BI : As a result, the  MongoDB Connector for BI  no longer requires  mongobiuser  and\n mongobischema . If you are using an older release of the  MongoDB Connector for BI , you should upgrade to 2.0\nby following the steps in  Install BI Connector On Premises . The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. mongodrdl  generates database schema information for use\nwith the  MongoDB Connector for BI . mongosqld  proxies incoming queries between SQL clients\nand a MongoDB server. mongotranslate  translates a given SQL query into a\nMongoDB  aggregation pipeline . The  MongoDB BI Connector ODBC Driver  provides connectivity\nbetween SQL clients and the  MongoDB Connector for BI . The  MySQL JDBC Driver  provides an alternative\nconnection method for some SQL clients and the  MongoDB Connector for BI . The  C Authentication Plugin  and\n JDBC Authentication Plugin \nfacilitate secure transmission of authentication credentials between\n mongosqld  and a MySQL client. Depending on your BI tool of choice, you connect to the\n BI Connector  with the  MongoDB BI Connector ODBC Driver  or with\nthe  MySQL JDBC Driver . The following table lists\nsome common BI tools and their compatible drivers: BI Tool MongoDB BI Connector ODBC Driver MySQL JDBC Driver Tableau MicroStrategy Microsoft Power BI Microsoft Excel MySQL Workbench DBeaver",
            "code": [],
            "preview": "The following tools are available for use with the MongoDB Connector for BI:",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "installation",
            "title": "Install BI Connector On Premises",
            "headings": [
                "Installation Guides",
                "Update BI Connector"
            ],
            "paragraphs": "The  MongoDB Connector for BI  can be installed on premises or hosted in MongoDB Atlas. Follow\nthe guide for your platform below to install the  BI Connector , or see\n Enable BI Connector in Atlas . The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. Instructions for installing the BI Connector on Windows systems. Instructions for installing the BI Connector on macOS systems. Instructions for installing the BI Connector on RHEL-based systems. Instructions for installing the BI Connector on debian-based systems. To update your BI Connector, use the installation guides above to\ninstall the latest version of BI Connector for your platform,\nreplacing your existing installation.",
            "code": [],
            "preview": "The MongoDB Connector for BI can be installed on premises or hosted in MongoDB Atlas. Follow\nthe guide for your platform below to install the BI Connector, or see\nEnable BI Connector in Atlas.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "local-quickstart",
            "title": "Quick Start Guide for Windows",
            "headings": [
                "Prerequisites",
                "Getting Started",
                "Start a mongod Process",
                "Import a Sample Dataset",
                "Start a mongosqld Process",
                "Create a Data Source Name (DSN)",
                "Start an SQL Client or BI Tool"
            ],
            "paragraphs": "Estimated Time to Complete: ~15 minutes This guide provides step-by-step instructions to quickly set up the\nrequired components for the  BI Connector  on your local system using a\n ODBC (Open Database Connectivity)  driver. This guide is recommended for users who would like to experiment\nwith the  BI Connector  or create a local environment for development or\ntesting on Microsoft Windows. In this tutorial you will: Start a local MongoDB  mongod \nprocess Start a local  BI Connector   mongosqld \nprocess Install the  ODBC (Open Database Connectivity)  driver and create a\n data source name  (DSN) Connect with a BI tool of your choice MongoDB installed on your local system.  Download the latest\nproduction release of MongoDB from the  MongoDB Download Center  and install it.\nFor detailed instructions, see  Install MongoDB . MongoDB Connector for BI  installed on your local system. Download the latest production\nrelease of  BI Connector  from the  MongoDB Download Center  and install it.\nFor detailed installation instructions, see  Install BI Connector On Premises . The  MongoDB BI Connector ODBC Driver  installed on your local system. Visual C++ Redistributable for Visual Studio 2015 A BI tool of your choice, such as  Power BI  or  Qlik Sense . If  mongod  is not already\nrunning on your local system, start it from the command line in\nthe MongoDB program directory. You can create the default data\ndirectory at  C:\\data\\db  or specify a different directory\nwith the  --dbpath  option. Make sure your MongoDB instance has at least one collection with\nsome data for testing purposes. A sample dataset with United States\nZIP code information (3.2 MB) is available at\n media.mongodb.org/zips.json . Import the dataset into MongoDB. The following command imports\nthe  zips.json  file into a collection named  zips  in a\ndatabase named  test : See the MongoDB manual for help with  mongoimport , the  mongo shell\nprogram , and  CRUD operations . To save the ZIP code dataset directly to disk, right click on\nthe link and select  \"Save Link As...\"  This tutorial assumes\nthat the saved file is in the directory\n C:\\data . Start a  mongosqld  process from the command line in the\n BI Connector  program directory. With no command line options,  mongosqld  generates a schema from\nall the user-accessible collections in your MongoDB instance. For\nmore information about specifying database namespaces for  BI Connector \nto work with, see the  mongosqld  reference page. If  mongosqld  starts correctly, the last line of on-screen output\ndeclares the namespaces it has found for its schema. For example, the\nfollowing output indicates that  mongosqld  started correctly and\nsampled the  zips  namespace. Create a System DSN by following instructions in the  tutorial . For the\npurposes of this local test installation you can leave the\n User ,  Password  and  Authentication \nfields blank, because  mongosqld  is running without the\n --auth  option. When you press the  Test  button you should see the\n Connection Successful  result. To learn how to connect from your BI Tool, see\n several applications .",
            "code": [
                {
                    "lang": "ps1",
                    "value": "mkdir C:\\data\\db"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Server\\3.6\\bin\\mongod.exe\""
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Server\\3.6\\bin\\mongoimport.exe\" --db test --collection zips --file \"C:\\data\\zips.json\""
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Connector for BI\\2.3\\bin\\mongosqld.exe\""
                },
                {
                    "lang": "ps1",
                    "value": "[schemaDiscovery] mapped schema for 1 namespaces: \"test\" (1): [\"zips\"]"
                }
            ],
            "preview": "Estimated Time to Complete: ~15 minutes",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "client-applications",
            "title": "Connect BI Tools",
            "headings": [],
            "paragraphs": "After you install and configure the  BI Connector , you can use  ODBC (Open Database Connectivity)  and\n JDBC (Java Database Connectivity)  drivers to connect from many BI Tools and clients. The sections\nbelow provide basic instructions for connecting to  BI Connector  using each\ntool. Tableau Desktop Microsoft Power BI Desktop Microsoft Excel MySQL Client",
            "code": [],
            "preview": "After you install and configure the BI Connector, you can use ODBC (Open Database Connectivity) and\nJDBC (Java Database Connectivity) drivers to connect from many BI Tools and clients. The sections\nbelow provide basic instructions for connecting to BI Connector using each\ntool.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "launch",
            "title": "Launch BI Connector",
            "headings": [
                "Overview",
                "Prerequisites",
                "Launching mongosqld",
                "Run BI Connector as a Hosted Service with MongoDB Atlas",
                "Start mongosqld From the Command Line",
                "mongosqld with a Configuration File",
                "Install mongosqld as a System Service",
                "Next Steps"
            ],
            "paragraphs": "mongosqld  is the  BI Connector  program which connects\nyour MongoDB instance to your BI tool.   mongosqld \nrequires a data schema which maps to your MongoDB collections and\ndatabases. You have several options for creating a schema and\nlaunching  mongosqld . This guide will help you choose\nthe best option for your needs. By default,  mongosqld  generates a default  data schema  and stores it in memory. Alternatively, if you prefer\nto create a custom schema and edit it manually, use one of these two methods: To learn more about creating a schema and data sampling, see  Map Relational Schemas to MongoDB . Use the  mongodrdl  program to create a custom  .drdl  schema\nfile and then start  mongosqld  with the\n --schema  option to point to this file. If you previously uploaded a custom schema with the  upload \ncommand, you must use the  name-schema \ncommand to store the schema internally under the provided custom name.\nThen you can start  mongosqld  with\n --schemaSource ,\n --schemaMode , and\n --schemaName  options. Install   BI Connector There are three options for launching and running\n mongosqld . You can: Run  mongosqld  as a  hosted service with MongoDB Atlas Start  mongosqld   from the command line Install  mongosqld  as a  system service You can host the MongoDB Connector for Business Intelligence in MongoDB Atlas. To learn how to enable and\nconnect to an Atlas-hosted BI Connector, see\n Connect via BI Connector for Atlas . You can use command line options to specify collections and databases\nto sample, user credentials, and other configuration options. For a\ncomplete list of command line options, see\n Command Line Options . To start  mongosqld  from the command line, run the\n mongosqld  executable in the  BI Connector  program directory with any\nnecessary command line options. The following example uses the  --sampleNamespaces  option to specify the  books  collection in the\n test  database. The following example uses the  --sampleNamespaces  option to specify the  books  collection in the\n test  database. The following example uses the  --sampleNamespaces  option to specify the  books  collection in the\n test  database. The following example uses the  --sampleNamespaces  option to specify the  books  collection in the\n test  database. mongosqld  defaults to port  3307 . You can set\nthe port number manually by providing the  --addr  option with the host address and port. You can use a  configuration file  to hold all your\n mongosqld  configuration options. Start  mongosqld  with the\n --config  option to specify a\nconfiguration file. BI Connector  requires a configuration file with the\n mongosqld.systemLog.path  setting specified when running as a\nsystem service. Using your preferred text editor, create a\n mongosqld.conf  file. To review the configuration file options,\nsee  Configuration File . For example: To install and run  mongosqld  as a system service, run the\nfollowing commands: Windows returns  mongosql service installed  if your installation\nsucceeded. All the file paths in your configuration file must be\nabsolute and wrapped in single quotes. For example: To install and run  mongosqld  as a system service, run the\nfollowing commands: To install and run  mongosqld  as a system service, run the\nfollowing commands: To enable the service so it starts automatically at boot time,\nrun the following: To install and run  mongosqld  as a system service, run the\nfollowing commands: To enable the service so it starts automatically at boot time,\nrun the following: Once  BI Connector  is up and running, you are ready to begin using it\nwith your preferred BI tool. See  Connect BI Tools  for a\nselected list of connection tutorials.",
            "code": [
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Connector for BI\\2.4\\bin\\mongosqld.exe\" --sampleNamespaces test.books"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --sampleNamespaces test.books"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --sampleNamespaces test.books"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --sampleNamespaces test.books"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Connector for BI\\2.4\\bin\\mongosqld.exe\" --config <pathToConfigFile>\\mongosqld.conf"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --config <pathToConfigFile>/mongosqld.conf"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --config <pathToConfigFile>/mongosqld.conf"
                },
                {
                    "lang": "ps1",
                    "value": "mongosqld --config <pathToConfigFile>/mongosqld.conf"
                },
                {
                    "lang": "text",
                    "value": "systemLog:\n  path: 'C:\\logs\\mongosqld.log'\nnet:\n  bindIp: '127.0.0.1'\n  port: 3307"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MongoDB\\Connector for BI\\2.4\\bin\\mongosqld.exe\" install --config \"<pathToConfigFile>\\mongosqld.conf\"\n\nnet start mongosql"
                },
                {
                    "lang": "text",
                    "value": "systemLog:\n  path: 'C:\\logs\\mongosqld.log'"
                },
                {
                    "lang": "text",
                    "value": "systemLog:\n  path: '/logs/mongosqld.log'\nnet:\n  bindIp: '127.0.0.1'\n  port: 3307"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld install --config <pathToConfigFile>/mongosqld.conf\nlaunchctl load -w /Library/LaunchDaemons/mongosql.plist"
                },
                {
                    "lang": "text",
                    "value": "systemLog:\n  path: '/logs/mongosqld.log'\nnet:\n  bindIp: '127.0.0.1'\n  port: 3307"
                },
                {
                    "lang": "sh",
                    "value": "sudo mongosqld install --config <pathToConfigFile>/mongosqld.conf\nsudo systemctl start mongosql.service"
                },
                {
                    "lang": "sh",
                    "value": "systemctl enable mongosql.service"
                },
                {
                    "lang": "text",
                    "value": "systemLog:\n  path: '/logs/mongosqld.log'\nnet:\n  bindIp: '127.0.0.1'\n  port: 3307"
                },
                {
                    "lang": "sh",
                    "value": "sudo mongosqld install --config <pathToConfigFile>/mongosqld.conf\nsudo systemctl start mongosql.service"
                },
                {
                    "lang": "sh",
                    "value": "systemctl enable mongosql.service"
                }
            ],
            "preview": "mongosqld is the BI Connector program which connects\nyour MongoDB instance to your BI tool.  mongosqld\nrequires a data schema which maps to your MongoDB collections and\ndatabases. You have several options for creating a schema and\nlaunching mongosqld. This guide will help you choose\nthe best option for your needs.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/schema-management-changes",
            "title": "Schema Management Changes in 2.11",
            "headings": [
                "Standalone Reader Changes",
                "Clustered-Reader Mode to Custom Mode",
                "Clustered-Writer Mode to Auto Mode",
                "Deprecations"
            ],
            "paragraphs": "The  MongoDB Connector for BI  version 2.11 release introduces significant improvements to\nstored schema management. The new stored-schema format is\nequivalent to  DRDL  files. These\nimprovements are incompatible with  BI Connector  configurations from\nversions 2.10 and earlier. If you are running  BI Connector  2.10 or\nearlier, use the following sections to update your configuration to be\ncompatible with version 2.11 or later. If you are already running version 2.11 or later, no further\nconfiguration changes are required. To learn more about the different\nschema management configurations introduced in version 2.11, see the\n Sampling Mode Reference Chart . Use the following table to modify your  BI Connector  version 2.10 or\nearlier Standalone Reader configuration to be compatible with version\n2.11 and later: Version 2.10 and Earlier Version 2.11 and Later Mode Standalone Reader Standalone Reader Behavior mongosqld  samples data upon startup and holds the\nschema in memory. mongosqld  samples data upon startup and holds the\nschema in memory. Options --sampleMode read --sampleSource   not used To learn more about version 2.10's schema options, see the\n 2.10 documentation . None. The  --sampleMode  option is deprecated in version 2.11. Remove\nthis command line option or configuration file setting to\ncontinue using standalone mode. Any other standalone mode configurations that worked in earlier\nreleases will continue to work with version 2.11 and later. Example The following example launches  BI Connector  versions 2.10 and\nearlier in Standalone Reader mode: The following example launches  BI Connector  versions 2.11 and later\nin Standalone Reader mode: To learn more about sampling modes, see the\n Sampling Mode Reference Chart . Use the following table to modify your  BI Connector  version 2.10 or\nearlier Clustered-Reader configuration to be compatible with the version\n2.11 and later: Version 2.10 and Earlier Version 2.11 and Later Mode Clustered-Reader Mode Custom Mode Behavior The  BI Connector  does not sample the schema and uses the MongoDB\nschema stored in the  --sampleSource  database to build its\nrelational schema. The  BI Connector  does not sample the schema and uses the\n DRDL  schema from the\n --schemaSource  database. Options --sampleMode read --sampleSource  <dbName> To learn more about version 2.10's schema options, see the\n 2.10 documentation . --schemaMode   custom --schemaSource  <dbName> Optional:   --schemaName  <schemaName> Example The following example launches  BI Connector  versions 2.10 and\nearlier in Clustered-Reader mode: The following example launches  BI Connector  versions 2.11 and later\nin Custom mode: To learn more about sampling modes, see the\n Sampling Mode Reference Chart . Use the following table to modify your  BI Connector  version 2.10 or\nearlier Clustered-Writer configuration to be compatible with version 2.11\nand later: Version 2.10 and Earlier Version 2.11 and Later Mode Clustered-Writer Mode Auto Mode Behavior The  BI Connector  obtains its schema by sampling, and persists\ninformation about the schema to the  --sampleSource  database. The  BI Connector  obtains its schema by sampling and persists each\nsampled schema to the\n --schemaSource  database in\nthe  DRDL  format. Options --sampleMode write --sampleSource  <dbName> To learn more about version 2.10's schema options, see the\n 2.10 documentation . --schemaMode   auto --schemaSource  <dbName> Optional:   --schemaName  <schemaName> Example The following example launches  BI Connector  versions 2.10 and\nearlier in Clustered-Writer mode: The following example launches  BI Connector  versions 2.11 and later\nin Auto mode: To learn more about sampling modes, see the\n Sampling Mode Reference Chart . The  --sampleRefreshIntervalSecs  flag and its corresponding config\nfile setting  schema.sample.refreshIntervalSecs  were deprecated in\nfavor of\n --schemaRefreshIntervalSecs \nand  schema.refreshIntervalSecs . The old command line option\nand configuration file setting will continue to work in the 2.11\nrelease, but switching to the new command line option or configuration\nfile setting is recommended.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongosqld --sampleMode read"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --sampleMode read \\\n          --sampleSource schemaDb"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaMode custom \\\n          --schemaSource schemaDb"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --sampleMode write \\\n          --sampleSource schemaDb"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaMode auto \\\n          --schemaSource schemaDb"
                }
            ],
            "preview": "The MongoDB Connector for BI version 2.11 release introduces significant improvements to\nstored schema management. The new stored-schema format is\nequivalent to DRDL files. These\nimprovements are incompatible with BI Connector configurations from\nversions 2.10 and earlier. If you are running BI Connector 2.10 or\nearlier, use the following sections to update your configuration to be\ncompatible with version 2.11 or later.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/persist-schema",
            "title": "Auto Schema Mode (Persist a Schema in MongoDB)",
            "headings": [
                "Overview",
                "Regenerate the Schema",
                "User Permissions for Persisted Schemas"
            ],
            "paragraphs": "The  --schemaSource \noption directs  mongosqld  to\nuse a particular database on the connected MongoDB instance for schema\nstorage.  mongosqld  can either create a new database to\nuse for schema storage or use an existing database. If you specify an existing database which has been used previously\nfor schema storage, the  --schemaMode  option determines\nwhether  mongosqld  writes new schema data to the specified\ndatabase or only reads from it. If you specify a database which\ndoesn't currently exist, you must set  --schemaMode  to\n auto . The following example command uses a database named  sampleDb  to\nstore schema information and sets  --schemaMode  to  auto . To learn more about sampling modes, see the\n Sampling Mode Reference Chart . By default,  mongosqld  does not automatically resample\ndata after generating the schema. Specify the\n --schemaRefreshIntervalSecs  option to direct\n mongosqld  to automatically resample the data and\nregenerate the schema on a fixed schedule. To force a one-time update of the schema, use the\n FLUSH SAMPLE  command from your\nSQL client. If your MongoDB instance uses authentication, you must specify a\nMongoDB user with write permission on the specified schema database\nin addition to the permissions described under\n cached sampling . To create a user with the necessary permissions to run\n mongosqld  with a persisted schema, you can either create\na custom role with the minimum required permissions as described in\n User Permissions for Cached Sampling , or use the built-in\n readAnyDatabase  role. In\neither case, the user also needs write permission on the\nspecified schema database. In the following example, a user named  bicUser  with the password\n myPass  provides credentials to read from and update a schema\ndatabase called  schemaDb .",
            "code": [
                {
                    "lang": "shell",
                    "value": "mongosqld --schemaSource sampleDb --schemaMode auto"
                },
                {
                    "lang": "javascript",
                    "value": "db.getSiblingDB(\"admin\").createUser(\n  {\n    user: \"<username>\",\n    pwd: \"<password>\",\n    roles: [\n             { \"role\": \"readAnyDatabase\", \"db\": \"admin\"  },\n             { \"role\": \"readWrite\", \"db\": \"<dbname>\"  }\n           ]\n  }\n)"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --auth -u bicUser -p myPass --schemaSource schemaDb --schemaMode auto"
                }
            ],
            "preview": "The --schemaSource\noption directs mongosqld to\nuse a particular database on the connected MongoDB instance for schema\nstorage. mongosqld can either create a new database to\nuse for schema storage or use an existing database.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/cached-sampling",
            "title": "Standalone Schema Mode (Cached Sampling)",
            "headings": [
                "Overview",
                "User Permissions for Cached Sampling",
                "Sample All Namespaces",
                "Sample Specific Namespaces",
                "Create a custom role with the required privileges.",
                "Create a new user and assign the newly created role to them",
                "Start mongosqld with authentication enabled"
            ],
            "paragraphs": "New in version 2.3: By default,  mongosqld  samples each collection on the\nconnected MongoDB instance and generates a relational representation\nof the schema which it then caches in memory. If the schema which  mongosqld  creates doesn't meet your\nBI workload needs, you can manually generate a  schema file  file and edit it as necessary. If you have  authentication  enabled,\nensure that your MongoDB user has the correct permissions. See\n User Permissions  below. By default,  mongosqld  does not automatically resample\ndata after generating the schema. Specify the\n --schemaRefreshIntervalSecs  option to direct\n mongosqld  to automatically resample the data and\nregenerate the schema on a fixed schedule. To learn more about sampling modes, see the\n Sampling Mode Reference Chart . If your MongoDB instance uses  authentication  and you wish to use cached sampling, your\n BI Connector  instance must also use authentication. The admin user that\nconnects to MongoDB via the  mongosqld  program must\nhave permission to read from all the  namespaces \nfrom which you want to sample data. If you wish to sample all namespaces, the admin user requires the\nfollowing privileges: Alternatively, create a user with the built-in  readAnyDatabase  role: To sample all namespaces, start  mongosqld  without the\n --sampleNamespaces  option. listDatabases  on the cluster listCollections  on each database find  on each database Be aware of all privileges included with the\n readAnyDatabase  role before\ngranting it to a user. If you wish to sample specific namespaces, the admin user requires the\nfollowing privileges: Alternatively, create a user with the built-in  readAnyDatabase  role. For an example of creating a\nuser with this role, see the\n Sample All Namespaces  section. The following example creates a\n custom role  in the\n mongo shell  with the\nminimum required privileges to sample every collection in the  test \ndatabase: listCollections  for each database where all collections are sampled find  on each collection or each database where all collections are sampled Be aware of all privileges included with the\n readAnyDatabase  role before\ngranting it to a user. The user in the example above does not have the\n listDatabases  privilege, so you must specify a\ndatabase to sample data from with the\n --sampleNamespaces \noption when running  mongosqld . Run  mongosqld  with authentication enabled and use\nthe  --sampleNamespaces \noption to sample data from all collections in the  test  database: --auth Enable Authentication",
            "code": [
                {
                    "lang": "javascript",
                    "value": "use admin\n\ndb.createUser(\n  {\n    user: \"<username>\",\n    pwd: \"<password>\",\n    roles: [\n            { \"role\": \"readAnyDatabase\", \"db\": \"admin\"  }\n           ]\n  }\n)"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --auth --mongo-username <username> --mongo-password <password>"
                },
                {
                    "lang": "javascript",
                    "value": "use admin\n\ndb.createRole(\n  {\n    role: \"samplingReader\",\n    privileges: [\n      {\n        resource: {\n          db: \"test\",\n          collection: \"\"\n        },\n        actions: [ \"find\", \"listCollections\" ]\n      }\n    ],\n    roles: []\n  }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.createUser(\n  {\n    user: \"<username>\",\n    pwd: \"<password>\",\n    roles: [ \"samplingReader\" ]\n  }\n)"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --auth --mongo-username <username> --mongo-password <password> \\\n  --sampleNamespaces 'test.*'"
                }
            ],
            "preview": "New in version 2.3:",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/use-views",
            "title": "Use MongoDB Views",
            "headings": [
                "Examples"
            ],
            "paragraphs": "Another way to control the data visible to  BI Connector  without using a\n .drdl file  is to read from a\n view . Views allow you to take a source\ncollection and choose which fields to display, change the names of\nfields, sort data, and perform any kind of transformation that the\n aggregation pipeline  can accomplish. Use the  mongo  shell method\n createView  to define a\nview on a collection and then use that view as a specified namespace\nwhen starting  mongosqld . You can use views to redact sensitive information from a collection\nand direct  BI Connector  to read from the view, rather than the source\ncollection. Consider a collection named  salaries  in the  employees  database.\nBy creating a view on the  salaries  collection that excludes all\npersonally identifiable information,  BI Connector  can safely facilitate\ndata analysis on the view without compromising the private data in the\nsource collection. The following command starts  mongosqld  with data from a view named\n salaries_redacted  in the  employees  database: Another use case for managing your schema with a MongoDB view is if\nyour working data set includes a sparsely populated but important field\nwhich may be excluded in the  BI Connector  sampling process. Consider a collection named  sparseCollection  which contains one\nfield which occurs in every document and another field which occurs\nonly occasionally. A portion of the collection might look like this: To ensure that  sparseField  is included when  BI Connector  creates\nits schema, create a view in which  sparseField  is populated with\nzeroes in every document in which it does not occur. To use the view as a data source when starting\n mongosqld , specify it with the\n --sampleNamespaces  option. --sampleNamespaces",
            "code": [
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces \"employees.salaries_redacted\""
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 0, \"mainField\": 247 }\n{ \"_id\" : 1, \"mainField\": 71 }\n{ \"_id\" : 2, \"mainField\": 981 }\n{ \"_id\" : 3, \"mainField\": 712 }\n{ \"_id\" : 4, \"mainField\": 781, \"sparseField\": 1000 }\n{ \"_id\" : 5, \"mainField\": 256 }\n{ \"_id\" : 6, \"mainField\": 910 }"
                },
                {
                    "lang": "javascript",
                    "value": "db.runCommand (\n  {\n    create: \"denseCollection\",\n    viewOn: \"sparseCollection\",\n    pipeline: [\n      {\n        $addFields: {\n           sparseField: { $ifNull: [ \"$sparseField\", 0 ] }\n        }\n      }\n    ]\n  }\n)"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces \"myDatabase.denseCollection\""
                }
            ],
            "preview": "Another way to control the data visible to BI Connector without using a\n.drdl file is to read from a\nview. Views allow you to take a source\ncollection and choose which fields to display, change the names of\nfields, sort data, and perform any kind of transformation that the\naggregation pipeline can accomplish.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/resample-schema",
            "title": "Resample Schema Data with \"FLUSH SAMPLE\"",
            "headings": [
                "Overview"
            ],
            "paragraphs": "When the  mongosqld  process starts it creates a\n schema , either from a\n schema file  or by sampling data from a\nMongoDB instance. If the data in your MongoDB instance changes shape\nsignificantly with new fields or collections, you may wish to\nregenerate the schema  BI Connector  uses. You can regenerate\nthe schema either by restarting  mongosqld  or by issuing\nthe  FLUSH SAMPLE  command from within the\n MySQL shell . By default,  mongosqld  does not automatically resample\ndata after generating the schema. Specify the\n --schemaRefreshIntervalSecs  option to direct\n mongosqld  to automatically resample the data and\nregenerate the schema on a fixed schedule. To use the  FLUSH SAMPLE  command, you must have the\n insert  and  update  privileges. To learn\nmore, see  User Authorization Model . You can't use the\n FLUSH SAMPLE  command if  mongosqld \nstarts with a  schema file \nvia the  --schema  option. --sampleNamespaces --schemaSource --schemaMode",
            "code": [],
            "preview": "When the mongosqld process starts it creates a\nschema, either from a\nschema file or by sampling data from a\nMongoDB instance. If the data in your MongoDB instance changes shape\nsignificantly with new fields or collections, you may wish to\nregenerate the schema BI Connector uses. You can regenerate\nthe schema either by restarting mongosqld or by issuing\nthe FLUSH SAMPLE command from within the\nMySQL shell.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "supported-operations",
            "title": "Supported SQL Functions and Operators",
            "headings": [
                "Comparison Functions and Operators",
                "Logical Operators",
                "JOIN Expressions",
                "Control Flow Functions and Operators",
                "String Functions",
                "Numeric Functions and Operators",
                "Date and Time Functions",
                "Cast Functions and Operators",
                "Subquery Constructors",
                "Information Functions",
                "GROUP BY (Aggregate) Functions",
                "Utility Statements",
                "Database Administration Statements"
            ],
            "paragraphs": "The following tables list the various MySQL functions, constructors, and\noperators supported in  MongoDB Connector for BI  2.2. Function/Operator Description BETWEEN ... AND ... Check whether a value is within a range of values COALESCE() Return the first non-NULL argument = Equal operator <=> NULL-safe equal to operator > Greater than operator >= Greater than or equal operator GREATEST() Return the largest argument EXISTS() Test for the existence of a record you specify in a subquery IN() Check whether a value is within a set of values INTERVAL(N,N1,N2,...) Return the 0-based index position of last number in the list to be\n < N . Return  -1  if  N  is  NULL N1 ,  N2 , etc. must be given in ascending order. Returns  3  because  12  is the last number in the list\nless than  26 . IS Test a value against a boolean IS NOT Test a value against a boolean IS NOT NULL NOT NULL value test IS NULL NULL value test ISNULL() Test whether the argument is NULL LEAST() Return the smallest argument < Less than operator <= Less than or equal operator LIKE Simple pattern matching NOT BETWEEN ... AND ... Check whether a value is not within a range of values != ,  <> Not equal operator NOT IN() Check whether a value is not within a set of values Function/Operator Description AND ,  && Logical AND NOT ,  ! Negates value || ,  OR Logical OR XOR Logical XOR Expression Description JOIN Select records that have matching values in multiple tables. INNER JOIN Semantically equivalent to  JOIN . LEFT JOIN Return all records from the left table, and the matched records\nfrom the right table. RIGHT JOIN Return all records from the right table, and the matched records\nfrom the left table. NATURAL JOIN Return only records which do not appear in both tables. USING Return all records where the given columns appear in both tables. Function/Operator Description CASE Case operator IF() If/else construct IFNULL() Null if/else construct NULLIF() Return NULL if expr1 = expr2 Function/Operator Description ASCII() Return numeric value of left-most character CHAR_LENGTH() Return number of characters in argument CHARACTER_LENGTH() Synonym for CHAR_LENGTH() CONCAT() Return concatenated string CONCAT_WS() Return concatenate with separator ELT() Return string at index number INSERT() Insert a substring at the specified position up to the specified\nnumber of characters INSTR() Return the index of the first occurrence of substring LCASE() Synonym for LOWER() LEFT() Return the leftmost number of characters as specified LENGTH() Return the length of a string in bytes LOCATE() Return the position of the first occurrence of substring LOWER() Return the argument in lowercase LTRIM() Remove leading spaces MID() Return a substring starting from the specified position NOT LIKE Negation of simple pattern matching NOT REGEXP Negation of REGEXP REGEXP Pattern matching using regular expressions REPLACE() Replace occurrences of a specified string RIGHT() Return the specified rightmost number of characters RTRIM() Remove trailing spaces SPACE() Return a string of the specified number of spaces SUBSTR() Return the substring as specified SUBSTRING() Return the substring as specified SUBSTRING_INDEX() Return a substring from a string before the specified number of\noccurrences of the delimiter TRIM() Remove leading and trailing spaces UCASE() Synonym for UPPER() UPPER() Convert to uppercase Function/Operator Description ABS() Return the absolute value ACOS() Return the arc cosine ASIN() Return the arc sine ATAN() Return the arc tangent ATAN2(), ATAN() Return the arc tangent of the two arguments CEIL() Return the smallest integer value not less than the argument CEILING() Return the smallest integer value not less than the argument COS() Return the cosine COT() Return the cotangent DEGREES() Convert radians to degrees DIV Integer division / Division operator EXP() Raise to the power of FLOOR() Return the largest integer value not greater than the argument LN() Return the natural logarithm of the argument LOG() Return the natural logarithm of the first argument LOG10() Return the base-10 logarithm of the argument LOG2() Return the base-2 logarithm of the argument - Minus operator MOD() Return the remainder %, MOD Modulo operator PI() Return the value of pi + Addition operator POW() Return the argument raised to the specified power POWER() Return the argument raised to the specified power RADIANS() Return argument converted to radians ROUND() Round the argument SIGN() Return the sign of the argument SIN() Return the sine of the argument SQRT() Return the square root of the argument TAN() Return the tangent of the argument * Multiplication operator TRUNCATE() Truncate to specified number of decimal places - Change the sign of the argument Function/Operator Description ADDDATE() Add time values (intervals) to a date value CURDATE() Return the current date CURRENT_DATE(), CURRENT_DATE Synonyms for CURDATE() CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP Synonyms for NOW() DATE() Extract the date part of a date or datetime expression DATEDIFF() Returns the difference, in days, between two specified dates. DATE_ADD() Add time values (intervals) to a date value DATE_FORMAT() Format date as specified DATE_SUB() Subtract a time value (interval) from a date DAY() Synonym for DAYOFMONTH() DAYNAME() Return the name of the weekday DAYOFMONTH() Return the day of the month (0-31) DAYOFWEEK() Return the weekday index of the argument DAYOFYEAR() Return the day of the year (1-366) EXTRACT() Extract part of a date FROM_DAYS() Convert a day number to a date HOUR() Extract the hour LAST_DAY Return the last day of the month for the argument MAKEDATE() Create a date from the year and day of year MICROSECOND() Return the microseconds from the input time or datetime expression\nas a number between 0 and 999999 inclusive. MINUTE() Return the minute from the argument MONTH() Return the month from the date passed MONTHNAME() Return the name of the month NOW() Return the current date and time QUARTER() Return the quarter from a date argument SECOND() Return the second (0-59) STR_TO_DATE() Convert a string to a date SUBDATE() Synonym for DATE_SUB() when invoked with three arguments TIME_TO_SEC() Return the argument converted to seconds TIMEDIFF() Subtract time TIMESTAMP() With a single argument, this function returns the date or datetime TIMESTAMPADD() Add an interval to a datetime expression TIMESTAMPDIFF() Subtract an interval from a datetime expression TO_DAYS() Return the date argument converted to days UTC_TIMESTAMP() Return the current UTC date and time WEEK() Return the week number WEEKDAY() Return the weekday index WEEKOFYEAR() Return the calendar week of the date (1-53) YEAR() Return the year YEARWEEK() Return the year and week For more information on how the  BI Connector  performs type conversions,\nsee  Type Conversion Modes . Function Description CAST() Cast a value as a certain type CONVERT() Convert a value as a certain type Function Description ROW() Returns one row of values rather than one column of values Function Description CONNECTION_ID() Return the connection ID (thread ID) for the connection CURRENT_USER(), CURRENT_USER The authenticated user name and host name DATABASE() Return the default (current) database name SCHEMA() Synonym for  DATABASE() SESSION_USER() Synonym for  USER() SYSTEM_USER() Synonym for  USER() USER() The user name and host name provided by the client VERSION() Return a string that indicates the MySQL server version EXPLAIN() Return information about an SQL query without running it or fetching\nresults. Includes the full  aggregation operation  which  BI Connector  will send to MongoDB. Function Description AVG() Return the average value of the argument COUNT() Return a count of the number of rows returned COUNT(DISTINCT) Return the count of a number of different values MAX() Return the maximum value MIN() Return the minimum value STD() Return the population standard deviation STDDEV() Return the population standard deviation STDDEV_POP() Return the population standard deviation STDDEV_SAMP() Return the sample standard deviation SUM() Return the sum GROUP_CONCAT() Return a concatenated string, non- NULL  values only Statement Description USE <databaseName> Choose the database to use as the current database for subsequent statements Statement Description SHOW CREATE TABLE <tableName> Shows the structure of the  <tableName>  table. The structure\nincludes comments that describe the mapping from the SQL table and\ncolumns to MongoDB collection and fields. SHOW [GLOBAL | SESSION] STATUS [LIKE 'pattern' | WHERE expr] Shows  mongosqld  server metrics. The structure contains\nnon-empty values for at least the following fields: By default the  SHOW STATUS  statement will only show statistics\nfor the current connection, corresponding to the  SESSION \nqualifier. If you specify the  GLOBAL  qualifier,\n SHOW STATUS  will instead show aggregate statistics for the\nentire server. Bytes_received Bytes_sent Connections Queries Threads_connected Threads_created Uptime ALTER TABLE <tableName> [alter_specification [, alter_specification] ...] Use to: Rename tables Add, update or remove columns in a table Change the type of a column in a table RENAME TABLE <tableName> TO <newTableName> [, <tableName2> TO <newTableName2> ] ... Use to rename one or more tables.",
            "code": [
                {
                    "lang": "sql",
                    "value": "SELECT INTERVAL(26, 2, 9, 12, 28.5, 62, 2300);"
                }
            ],
            "preview": "The following tables list the various MySQL functions, constructors, and\noperators supported in MongoDB Connector for BI 2.2.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/geospatial-data",
            "title": "Geospatial Data",
            "headings": [
                "Geospatial Data",
                "Example"
            ],
            "paragraphs": "If a collection contains a  2d  or  2dsphere \n geospatial index ,\n BI Connector  maps the indexed field into an array of numeric\nlongitude-latitude coordinates. Given the following collection: BI Connector  generates the following schema: BI Connector  does not recognize geospatial fields\nwhen reading from a  view .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "db.points.createIndex( { pos : \"2dsphere\" } )\ndb.points.insertOne({\n    pos : { type: \"Point\", coordinates: [ -73.97, 40.77 ] },\n    name: \"Central Park\",\n    category : \"Parks\"\n})"
                },
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: test\n  tables:\n  - table: points\n    collection: points\n    pipeline: []\n    columns:\n    - Name: _id\n      MongoType: bson.ObjectId\n      SqlName: _id\n      SqlType: varchar\n    - Name: category\n      MongoType: string\n      SqlName: category\n      SqlType: varchar\n    - Name: name\n      MongoType: string\n      SqlName: name\n      SqlType: varchar\n    - Name: pos.coordinates\n      MongoType: geo.2darray\n      SqlName: pos.coordinates\n      SqlType: numeric[]"
                }
            ],
            "preview": "If a collection contains a 2d or 2dsphere\ngeospatial index,\nBI Connector maps the indexed field into an array of numeric\nlongitude-latitude coordinates.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/load-schema-from-drdl",
            "title": "Load a Schema from a DRDL File",
            "headings": [],
            "paragraphs": "The schema generation tool  mongodrdl  outputs a schema\nfile in  Document Relational Definition Language  (DRDL)\nformat. Examine the generated schema's table structure and field types\nto verify that the generated schema supports your reporting\nrequirements. You can manually edit the schema definition files to perform the\nfollowing actions: When you're done editing your  .drdl  file, you can follow the steps in\none of the following options: Add fields that  mongodrdl  didn't discover within\nthe subset of documents that it sampled Remove fields Remove tables Rename tables, so long as the  collection  field remains the same Rename fields using the  sqlname  option To apply any changes you make to your DRDL files, you must restart\n mongosqld . BI Connector  does not recognize geospatial fields\nwhen reading from a  view . Option 1. Upload the schema, give it a name, and start  mongosqld ,\nspecifying both the schema's name, source, and mode, as in the following steps: Use  mongodrdl  to  upload  the schema\nto your MongoDB deployment, similar to the following example: The string representation of the  ObjectId \nof the uploaded schema is returned: Name your schema, using the  name-schema \ncommand, similar to the following example: Start  mongosqld  with a named schema, using\n --schemaSource ,\n --schemaMode ,\nand  --schemaName  options,\nsimilar to the following example: Option 2. Start  mongosqld  with the\n --schema  option to specify the path to the\n .drdl  schema file.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongodrdl upload --host <hostName> --schemaSource schemas --drdl ./movies.drdl"
                },
                {
                    "lang": "sh",
                    "value": "5d793f3f6a26a3ce66c304ea"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl name-schema --name movies --schemaSource schemas --schema 5d793f3f6a26a3ce66c304ea"
                },
                {
                    "lang": null,
                    "value": "mongosqld --schemaMode custom --schemaSource schemas --schemaName movies"
                }
            ],
            "preview": "The schema generation tool mongodrdl outputs a schema\nfile in Document Relational Definition Language (DRDL)\nformat. Examine the generated schema's table structure and field types\nto verify that the generated schema supports your reporting\nrequirements.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "schema/type-conflicts",
            "title": "Sampling Type Conflicts",
            "headings": [
                "Scalar-Scalar Conflicts",
                "Composite Conflicts",
                "Document Conflicts",
                "Array Conflicts"
            ],
            "paragraphs": "The flexible schema model of MongoDB allows a given field to contain\ndata of multiple types, while relational databases restrict columns to a\nsingle data type. The  BI Connector  samples data from MongoDB to generate a\nrelational schema model, but\n type conversion  conflicts may occur\nwhen the  BI Connector  samples different data types from a field in\nMongoDB documents. There are two main categories of type conversion conflicts that may\noccur in the presence of multiple data types: conflicts\nbetween scalar types and conflicts involving composite types like\ndocuments and arrays. The  BI Connector  only uses the sampled subset of your data to\ndetect type conflicts during schema generation. If your data set\ncontains type conflicts on a field and the conflicting types were\nnot both present in the sample, the generated schema will not be\nprepared to resolve these conflicts and may result in increased query\nlatency. For more information on sampling configuration, such as setting\nthe  --samplesize  and\n --schemaRefreshIntervalSecs ,\nsee  Schema Options . When a scalar-scalar confict occurs, the  BI Connector  uses the following\nlattice to determine the least upper bound of the two different data\ntypes: When a scalar-scalar conflict occurs, the  BI Connector  inserts a row into\nthe  information_schema.COLUMNS  table and lists the different sampled\ntypes in the  COLUMN_COMMENT  column. If a given field contains  int ,  double , and  string  types,\nthe least upper bound is  string . Composite conflicts are type conversion conflicts involving a document\nor an array. The following sections describe how the  BI Connector  resolves\nboth types of composite conflicts. When a conflict occurs involving a document, the  BI Connector \ndisplays the fields of the document type as separate columns using\ndot notation. For example, the  conflict  collection contains the\nfollowing documents: The  BI Connector  detects a scalar-composite conflict and generates the\nfollowing relational schema: Table:   conflict When a conflict occurs involving a document, the  BI Connector  inserts a\nrow into the  information_schema.COLUMNS  table and lists the\ndifferent sampled types in the  COLUMN_COMMENT  column. _id a a.a a.b 0 \"foo\" NULL NULL 1 NULL \"bar\" \"baz\" When a conflict occurs involving an array, the  BI Connector  creates a new\ntable for the conflict field with a column for the foreign key, array\nindex, and value. The  BI Connector  unwinds the array into multiple rows in\nnew table and fills in the columns accordingly. For example, the\n conflict  collection contains the following documents: The  BI Connector  renders the above into the following two tables: Table:   conflict Table:   conflict_a When a conflict occurs involving an array, the  BI Connector : _id 0 1 _id a_idx a 0 NULL \"foo\" 1 0 \"bar\" 1 1 \"baz\" Inserts a row into the  information_schema.COLUMNS  table and lists\nany different types sampled in the  COLUMN_COMMENT  column Inserts a row into the  information_schema.TABLES  table containing\ninformation on how the array maps to the row in the\n information_schema.COLUMNS  table",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{ _id: 0, a: \"foo\" } // \"a\" is scalar (string)\n{ _id: 1, a: { a: \"bar\", b: \"baz\" } } // \"a\" is composite (document)"
                },
                {
                    "lang": "javascript",
                    "value": "{ _id: 0, a: \"foo\" } // \"a\" is scalar (string)\n{ _id: 1, a: [\"bar\", \"baz\"] } // \"a\" is composite (array)"
                }
            ],
            "preview": "The flexible schema model of MongoDB allows a given field to contain\ndata of multiple types, while relational databases restrict columns to a\nsingle data type. The BI Connector samples data from MongoDB to generate a\nrelational schema model, but\ntype conversion conflicts may occur\nwhen the BI Connector samples different data types from a field in\nMongoDB documents.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "release-notes",
            "title": "Release Notes for MongoDB Connector for BI",
            "headings": [
                "MongoDB Connector for BI 2.14.12",
                "Improvements",
                "MongoDB Connector for BI 2.14.11",
                "Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.10",
                "Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.9",
                "Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.8",
                "Improvements",
                "MongoDB Connector for BI 2.14.7",
                "Improvements",
                "MongoDB Connector for BI 2.14.6",
                "Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.5",
                "Bug Fixes",
                "Behavioral Changes",
                "MongoDB Connector for BI 2.14.4",
                "Improvements",
                "Bug Fixes",
                "Behavioral Changes",
                "MongoDB Connector for BI 2.14.3",
                "New Features",
                "Bug Fixes",
                "Improvements",
                "MongoDB Connector for BI 2.14.2",
                "New Features",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.1",
                "Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.14.0",
                "New Features",
                "Bug Fix",
                "MongoDB Connector for BI 2.13.4",
                "Bug Fixes",
                "MongoDB Connector for BI 2.13.3",
                "Bug Fixes",
                "MongoDB Connector for BI 2.13.2",
                "Bug Fixes",
                "MongoDB Connector for BI 2.13.1",
                "MongoDB Connector for BI 2.13.0",
                "Bug Fixes",
                "Improvements",
                "MongoDB Connector for BI 2.12.0",
                "Bug Fixes",
                "Improvements",
                "Pushdown",
                "Go Driver",
                "Behavioral Changes",
                "MongoDB Connector for BI 2.11.1",
                "Bug Fixes",
                "MongoDB Connector for BI 2.11.0",
                "New Features",
                "Bug Fixes",
                "Chages/Deprecations",
                "MongoDB Connector for BI 2.10.0",
                "Bug Fixes",
                "Date and Time Changes",
                "MongoDB Connector for BI 2.9.0",
                "Features and Performance Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.8.2",
                "MongoDB Connector for BI 2.8.1",
                "MongoDB Connector for BI 2.8.0",
                "Features and Performance Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.7.0",
                "Features and Performance Improvements",
                "Bug Fixes",
                "MongoDB Connector for BI 2.6.1",
                "MongoDB Connector for BI 2.6.0",
                "EXPLAIN Support",
                "Common Table Expression Support",
                "MongoDB Connector for BI 2.5.0",
                "New SSPI Support",
                "NULL Valued Types Are Now Cast to Varchar During Sampling",
                "SIN, COS, TAN Are Now Pushed Down",
                "MongoDB Connector for BI 2.4.1",
                "MongoDB Connector for BI 2.4.0",
                "Aggregate Expressions",
                "Improved Support for Subqueries and Non-equijoins",
                "MongoDB Connector for BI 2.3.1",
                "MongoDB Connector for BI 2.3.0",
                "Improved Schema Management",
                "Log Rotation",
                "MongoDB Connector for BI 2.2.1",
                "MongoDB Connector for BI 2.2.0",
                "Authentication Plugins",
                "MongoDB Connector for BI 2.1.0",
                "MongoDB Connector for BI 2.0.0",
                "Improved Server-Side Execution",
                "Pass-through Authentication",
                "Simplified Architecture",
                "SQL Compatibility",
                "MongoDB Connector for BI 2.0.2",
                "MongoDB Connector for BI 2.0.1"
            ],
            "paragraphs": "Released December 18th, 2023 Now built with Go 1.21.0+. Adds MacOS 13.0 ARM support. Adds Debian 12 support. Released September 13, 2023 Adds support for the following distributions: Amazon Linux 2023 ARM Amazon Linux 2023 x86 RHEL9 ARM RHEL9 x86 Ubuntu 22.04 ARM Ubuntu 22.04 x86 Fixes a bug where  MongoDB Connector for BI  used the same  unwindPaths  map for all databases\nwhen adding foreign keys during catalog building. Released August 7, 2023 Now built with Go 1.20.7 to fix  CVE-2023-29409 . Fixes a bug where schema wouldn't load when a column of a virtual\ntable from an array is renamed. Fixes a bug where foreign key calculation returned an error when there\nwas no  _id  field. Released July 24th, 2023 Now built with Go 1.20.6+ to fix  CVE-2023-29406 . Fixes a bug where a cursor timeout in  mongod  didn't result in\nan error message or error log in  MongoDB Connector for BI . Released July 10th, 2023 Now built with Go 1.19.10. Released June 8th, 2023 Now built with Go 1.19.9+. Released May 17th, 2023 Now built with Go 1.19.0. Fixes an issue where setting the schema mode to  auto  would\nalways trigger initial sampling even when a preexisting stored schema\nwas available. Released September 2, 2022 Fixes the  amazon2-arm  URL for the release JSON feed. Adds support for MongoDB 6.0. Adds MacOS 11.0 ARM support. Adds Debian 11 support. Adds Enterprise RHEL 8 zSeries support. Removes all zSeries/IBM POWER PC platforms support except for RHEL 8 zSeries. Removes RHEL 6.x/7.x on S390x support. Released September 17, 2021 Now built with Go 1.16.0. Adds support for MongoDB 5.0. Adds the RHEL8 ARM distribution to the download center. Fixes an issue where empty field paths were not skipped when mapping\nthe subpaths of objects that conflict with scalars. Fixes an issue where tarballs for the RHEL 8.1 (IBM POWER) 2.14.3\nrelease were incorrectly structured. Removes support for MongoDB 3.2, 3.4, and 3.6. Removes support for zSeries distributions. Released March 23, 2021 Enables the use of externally sourced values in .yaml\n configuration files . Adds support for the following fields in .yaml configuration files: trim type digest digest_key Fixes an issue where documents with  null  values were incorrectly\nreturned from some queries. Fixes an issue where some queries took longer to complete than in\nprevious versions of  BI Connector . Fixes an issue where the  listDatabases  command returned an error\nwhen read preference was set to an analytics node in some sharded\ncluster configurations. Now built with Go 1.5.0. Adds the Amazon Linux 2 ARM 64 distribution to the download center. Released January 27, 2021 Detached signatures are now available for release archives. Fixes an issue that resulted in inefficient\ntranslations for  in  and  or  expressions. Released January 6, 2021 Now built with Go 1.15. Fixes an issue in which geospatial data did not map correctly. Fixes an issue with regard to DRDL extended character encoding. Fixes an issue in which sharding information failed to load for mixed-case\ndatabases. Fixes an issue in which the response to  COM_FIELD_LIST  was malformed. Released July 13, 2020 Database schemas  are now\ncase-sensitive. Queries containing UNION can be fully pushed down. Object-array conflict resolution produces NULL data for conflicting\nobject fields nested in array. Released February 12, 2020 Fixes bug in mapping that did not deep copy pipelines during table\npost-processing, leading to invalid SQL schemas. Released January 8, 2020 Fixes bug that caused panics on document keys containing characters\nthat need to be escaped, such as  \"  or  \\usb . Released January 8, 2020 Fixes bug that caused index loading to fail with mixed-case databases. Fixes connectivity bug caused by non-nil interface in custom go-driver dialer. Fixes  mongotranslate  not including pipelines defined on\ntables in  DRDL file schemas . Fixes bug that caused natural left joins to fail in some cases. Released November 26, 2019 The  max_num_global_tables   system variable  now defaults to  4000 ,\nraised from  1000 . Released November 11, 2019 Fixes the following bugs: unix_timestamp  returning incorrect results\nbecause it did not handle Daylight Savings Time when necessary. DRDL  tables incorrectly marshalling\nto BSON if the aggregation pipeline was empty. Version 2.13.0 includes the following improvements: Updates an error message for  FLUSH SAMPLE \nauthorization that was unclear. Updates  schema mapping  to skip empty field\nnames and field names containing  .  characters. Enables  self-join  optimization for sharded\ncollections. Replaces the  max_num_columns_per_table   system variable  with  max_num_fields_per_collection . Enhances performance while sampling collections with many fields by reducing\nthe amount of memory used. Improves ambiguous column behavior in subqueries,  GROUP BY  and  ORDER BY \nclauses. Adds support for Ubuntu 18.04, SLES 15, and RHEL8. Adds non-string support for  regexp . Improves performance for  schemas  that contain\narrays. Released September 16, 2019 Fixes the following bugs: mongosqld  hangs if an election occurred during\nsampling. Some queries using  $lookup  fail. Panics occur when connecting with a\n DRDL  file that excludes a child table's\n _id . Versions 2.10+ install to the wrong directory on Windows. Fixes a bug in the  div  operator\u2019s in-memory evaluation. mongosqld  incorrectly kills long-running queries. Some queries on  ObjectId  fields\ndo not push down. mongodrdl  not parsing replica set seedlists passed to\nthe  --host  flag. timestampadd  fails with out-of-range months. Allows aggregate functions as grouping expressions. datediff  fails to push down with polymorphic arguments. Displays incorrect foreign key constraints. Incorrect pushdown and  type conversions \nfor  date  and  datetime  types that are too large or too small. Aliases for tables in  information_schema  are ignored. Some queries with aggregate functions fail to push down. Pipeline parsing error for unwind paths with numeric field names. mongodrdl  ignores the  --gssapiHostName  and\n --gssapiServiceName  flags. Allows extra arguments to the  current_timestamp  and  trim \nfunctions. str_to_date  returns a  date  instead of a  datetime  for some\nnon-constant format-string arguments. This release includes a number of improvements to pushdown. Existing\ntranslations were improved and expanded pushdown coverage to more\nfunctions and query shapes. Adds support for pushing down correlated subqueries to MongoDB\nversions 3.6 and later. Adds pushdown support for  ln ,  ascii ,  user ,  database ,\n version ,  connection_id , and constant-valued time/date\nfunctions. Adds support for pushing down  regexp  to the aggregation language. Removes some unnecessary rounding from pushdown translations. Adds support for pushing down  LIKE  expressions with literal\npattern strings to the aggregation language. Improves the efficiency of pipelines generated for  EXISTS \nsubqueries. Improves truncate pushdown coverage and updated the translation to use\n $trunc  with MongoDB versions 4.1.9 and later. Adds pushdown support for the  char  and  str_to_date  functions. This release includes a number of improvements made possible by\nupgrading to the new go driver: Adds support for SRV URI support to  mongodrdl  and\n mongosqld . Adds MongoDB URI support to  mongodrdl  via a\n --uri  flag. Adds support for zlib and snappy compression for connections to\nMongoDB. Updates  DRDL  file parsing to support\nthe most recent version of the extjson spec. Adds new reserved words to the parser:  INSERT ,  INTO ,  KEY ,\n FULLTEXT , and  PRIMARY . Going forward, these words must be wrapped in backticks to be used as\nidentifiers in queries. Removes support for altering sampled schema with  ALTER TABLE \nstatements. Prior to 2.12,  mongosqld  supported renaming and\nremoving tables and columns via a modified  ALTER TABLE  syntax when\nin  standalone schema mode . Any customer\ncurrently using this feature is advised to migrate their schema\nmanagement needs to  views ,\n DRDL , or\n custom schema mode . The variable/config\nparameter that enabled this feature,  enable_table_alterations , is\nstill supported but doesn\u2019t do anything in  BI Connector  2.12. It will be\nremoved in a future release. Released July 8, 2019 Fixes a bug that caused the MySQL schema to include incorrect foreign\nkey constraints. Fixes a bug that caused incorrect pushdown for some very large or very\nsmall  date  and  datetime  values. Fixes a bug that caused aliases to be ignored for tables in the\n information_schema  database. Released May 16, 2019 Adds a number of optimizations that are applied to generated\naggregation pipelines before sending them to MongoDB. Adds new subcommands to  mongodrdl  for storing a\n DRDL  file in MongoDB and for manipulating stored schemas. Enables  mongosqld  to use stored  DRDL  schemas instead\nof sampling. To learn more, see  Schema Management Changes in 2.11 . Introduces the beta version of  mongotranslate , a\ncommand-line utility that can translate SQL queries to\naggregation pipelines without a running  BI Connector  or MongoDB\ninstance. Fixes a problem that caused the  BI Connector  to generate unnecessarily\nlong  $group  key names. Fixes a bug that caused the  BI Connector  to generate incorrect table\npipelines in\n polymorphic schema mapping mode . Fixes a bug that caused the  BI Connector  to panic when printing some\nquery plans. Fixes a bug where the  BI Connector \u2019s in-memory evaluation of\nstring-to-date conversions did not match the pushdown behavior. Updates the supported Amazon Linux version to match the version\nsupported by MongoDB 4.2. Fixes a bug with Active Directory constrained delegation in the\n BI Connector \u2019s GSSAPI implementation (linux and macOS). Introduces a  --gssapiConstrainedDelegation  flag that must be enabled\nto ensure existing Kerberos configurations are not broken. Fixes a bug that caused Kerberos authentication to fail with a linux\n mongosqld , MongoDB 4.0, and an Active Directory KDC. Fixes a number of small bugs related to correlated subqueries. Changes some schema-management configuration options. Deprecates schema-modification support via  ALTER TABLE , as well as\nthe  enable_table_alterations   system variable  and\n setParameter Released Mar 15, 2019 Fixes a bug where aggregate functions returned  NULL  in dual\nqueries with the  DUAL  keyword omitted. Fixes a bug where some invalid  DUAL  queries did not return an\nerror. Fixes a bug that prevented pushdown of some joins to derived tables\nselecting from  DUAL . Fixes some correctness bugs in the in-memory evaluation for\n mysql-mode conversions . Fixes a bug where some trig functions ( ascii ,  acos , and\n asin ) could return incorrect results due to missing\n type conversions . Fixes a bug where some subquery comparisons could return incorrect\nresults due to missing\n type conversions . Fixes a bug where we lost precision while converting a  Uint64  to a\n Decimal . Fixes a correctness bug with the  INSERT  scalar function's pushdown\ntranslation. Fixes a bug where unstable sorting caused non-deterministic renaming\nof colliding collection/field names during schema mapping. Fixes a bug where some valid subquery comparisons returned errors. Fixes a bug where some valid subquery and tuple comparisons returned\nerrors. Fixes a bug where queries using  xor  returned errors on MongoDB 3.2\nbecause the generated pipelines required features added in MongoDB\n3.4. Fixes a bug that caused kerberos\n authentication  to fail with MongoDB\n4.0. This release resolves a number of inconsistencies in the  BI Connector 's\ndate and timestamp semantics. Resolving these inconsistencies resulted\nin some changes to user-facing behavior: Removes inconsistent support for partial dates. MySQL can represent partial dates that are\n missing month or day components .\nIt is impossible to represent these incomplete dates with\nMongoDB dates. Attempting to correctly manipulate and render\nincomplete dates was causing a number of bugs and inconsistencies\nwith complete dates. Starting with version 2.10, the  BI Connector  does not support\noperations on or expressions that return incomplete dates.\nGoing forward, we cannot provide guarantees about the behavior of\noperations that attempt to construct incomplete dates. Updates the  DATE(a)  and  TIMESTAMP(a)  scalar functions to be\nequivalent to  CAST(a AS DATE) , and  CAST(a AS DATETIME) ,\nrespectively. The behavior of the  DATE  and  TIMESTAMP  scalar functions will\ndepend on the value of the  type_conversion_mode  variable. This\nwill change the default behavior for those scalar functions. Queries affected by this change can be rewritten to use a more\nexplicit conversion function (such as  str_to_date ) that does not\ndepend on  type_conversion_mode . If an affected query cannot be\nrewritten, a user may set  type_conversion_mode  variable to\n mysql , which instructs the BI Connector to perform all type\nconversions with MySQL semantics instead of MongoDB semantics. This is discouraged unless absolutely necessary, as it\nsignificantly curtails the ability to push down type conversions\nacross the board. For more information on type conversions and the\n type_conversion_mode  system variable, see\n Type Conversion Modes . Released Dec 18, 2018 Includes a sample  mongosqld \n configuration file  in the release archive. Allows setting commonly used system variables in the configuration\nfile. Optimizes conversions of years to days. Optimizes  join  performance. General performance improvements. Improves the  BI Connector 's resiliency to queries against fields that\nmay contain unsupported  BSON types . Released Nov 16, 2018 Fixes correctness bugs discovered in polymorphic schema mapping, query\ncancellation, and  IN  queries. Fixes a performance regression in a common query pattern. Released Nov 09, 2018 Fixes a bug in the behavior of the  max_execution_time  system\nvariable. Released Nov 06, 2018 Improvements to the  BI Connector \u2019s  type system  and the way it handles polymorphic\ndata. Users can  alter the type  of a given\ncolumn. Users can access \u201cdirty\u201d datasets without query errors. Support for pushdown of the GROUP_CONCAT aggregation function. Non-admin users can  set global variables . Improvements in parsing  strToDateTime  to  float . Fixes to how the  BI Connector  honors  readPreference  specifications. Released Oct 02, 2018 Collapse associative functions Support the  optimize_view_sampling  global variable Support the  polymorphic_type_conversion_mode  session/global\nvariable Improve filter optimization for MongoDB versions 3.6 and later Expose  type_conversion_mode \nin configuration parameters Cache catalog columns for quicker lookup Released version 1.2.0 of the\n MongoDB BI Connector ODBC Driver . Fix incorrect semantics for null safe equality operator (  <=>  ) The  ||  operator returns incorrect type (and value) when operating\non two strings Add  DRDL  type validation Support  CAST  to unsigned Fix  WHERE  clause removed in certain cross-join queries Fix some incorrect left self-join results when dynamic schemas are\nused Support turning off view optimization with  $match MongoDB BI Connector ODBC Driver  on macOS should install in versioned directories Fix  MongoDB BI Connector ODBC Driver  installer issue on macOS that caused unicode driver to\nbe reported as ANSI Released Sep 21, 2018 We encourage  Tableau  users running BIC 2.6.0 to upgrade to 2.6.1. Resolved an issue caused by how scalar functions handle string values. Released Sep 04, 2018 Added\n EXPLAIN() \nsupport. Push down  type conversions  to\nMongoDB servers running version 4.0 or later. Improved the handling of polymorphic data by updating the  BI Connector 's\n type conflict resolution system . Added Common Table Expression (CTE) support. Improved  UNION  performance. Added the  SCRAM-SHA-256  mechanism to the following: mongosqld  command line options and\nconfiguration file settings: Command Line Option Configuration File Setting --mongo-authenticationMechanism mongodb.net.auth.mechanism --defaultAuthMechanism security.defaultMechanism mongodrdl --authenticationMechanism  command line\noption. MongoDB BI Connector ODBC Driver C Authentication Plugin Java Authentication Plugin Released the  MongoDB BI Connector ODBC Driver  for\nLinux. Added the  mongosqld --prejoin  command line option for\ncombining array data and non-array data into a single table. Users can use EXPLAIN to return details of aggregation pipeline used to generate query results. The  BI Connector  now supports queries that include Common Table Expressions. Released May 23, 2018 Improved memory management for  mongosqld . New SSPI support for  mongosqld  on Windows. The  --sampleNamespaces \noption now supports  exclusion . NULL  valued types are now cast to varchar during sampling. Optimized  COUNT(*)  query performance. SIN ,  COS ,  TAN  are now pushed down. Windows Clients may now use kerberos to authenticate against the\n BI Connector . This resolves the issue where queries would fail due to  NULL  values\nbeing ignored during sampling. Now,  NULL  values will be cast as SQL\ntype  VARCHAR . BI Connector  will now push down  SIN ,  COS , and  TAN  SQL\nfunctions. This will improve performance for queries using these\nfunctions. Released Mar 09, 2018 We've released version 2.4.1 of the  MongoDB Connector for BI  for production deployment. This\nrelease contains minor bug fixes for users of the  BI Connector  and is a\nrecommended upgrade for all 2.4 users. Released Feb 21, 2018 MongoDB Connector for BI  version 2.4 improves more expressive queries. New features include: Support for 3.6 Aggregate Expressions. Pushdown for subqueries and non-equijoins. Killing SQL query now also kills MongoDB operation. Permission changes for  DRDL  file users. When\n mongosqld  runs with authentication enabled,\nadmin credentials must be provided with the\n --mongo-username  and\n --mongo-password  options or\nthe  mongodb.net.auth.username  and  mongodb.net.auth.password \nsettings in the  configuration file . BI Connector  2.4 improves support for aggregate expressions including\nmath, date, and string functions. With version 2.4,  mongosqld  has improved support for\nsubqueries and non-equijoins. Released Nov 10, 2017 Fixes minor incompatibility with MongoDB 3.2. Released Nov 08, 2017 Simplified and centralized Schema Management. Supports log rotation. Standardized logging in the  BI Connector . Push  LTRIM ,  RTRIM  and  TRIM  functions down to MongoDB. MongoDB Connector for BI  version 2.3 improves enterprise deployment support. The new\nfeatures include: In  BI Connector  2.3,  mongosqld  includes the\nschema mapping functionality previously found in\n mongodrdl . With version 2.3, you can rotate the  mongosqld  logs. To rotate the logs,  issue a command\nor restart   mongosqld . Released Aug 29, 2017 Fixes lack of support for Read Preference tags which are used when\ntargeting reads to specific members of a replica set. Released Jul 31, 2017 Supports authenticating directly against MongoDB using the new\n C  and\n JDBC  authentication plugins.\nThese plugins support\n SCRAM-SHA-1  and\n PLAIN  mechanisms and remove the\nSSL requirement for authentication. The authentication plugins can be\nfound on GitHub: C JDBC . Supports  configuration files  for\n mongosqld . Supports  installing and running \n mongosqld  as a Windows system service. Provides a Windows  MSI installer  for the  MongoDB Connector for BI . Provides new  command line arguments  for\ndefault auth mechanism and database: Authentication Options: default user source (default of  admin ) default authentication mechanism (default of\n SCRAM-SHA-1 ) Provides a new startup option to specify default\n VARCHAR length Provides  mongosqld  status metrics with  SHOW STATUS Reports the following metrics reported: Connections Queries BytesSent Threads Connected Can bind  mongosqld  to multiple\n IP (Internet Protocol)  addresses Provides a new  runtime options \nto limit memory usage of  GROUP ,  SORT , and  JOIN  stages MongoDB Connector for BI  Version 2.0 introduced passthrough authentication,\nin which clients authenticate as a user defined in MongoDB, without\nthe need to create a separate user within the connector itself. MongoDB Connector for BI  Version 2.2 further increases ease of use with\na set of authentication plugins which can authenticate users\nthrough the connector without the need for SSL certificates.\nThese plugins perform user authentication via the SASL framework\nand support the SCRAM-SHA-1 and PLAIN authentication mechanisms.\nWe currently provide authentication plugins in the following languages: Java  - for use with\nMySQL\u2019s Connector/J driver C  - for use with the MySQL ODBC\ndriver and the MySQL Shell Provides substantial performance improvements for some common  JOIN \nscenarios. Pushes  $match  stages earlier in the aggregation pipeline to improve to\nindex utilization. Pushes down more SQL functions and operators to the aggregation pipeline. Supports additional SQL language features, such as  USE  and\n SHOW CREATE TABLE  statements,  STRAIGHT_JOIN , the unary\nplus ( + ) operator, and the  INTERVAL  keyword in\n date arithmetic . mongosqld  no longer offers the  --fork  option. To run  mongosqld  in the background, use the  nohup \ncommand: Released Nov 29, 2016 The  MongoDB Connector for BI  delivers significant performance and scalability improvements\nby moving as much execution as possible to the underlying MongoDB\ninstance. Pushing execution down to the server reduces network\nlatency and reduces bandwidth consumption. This approach also reduces memory and CPU consumption in the  MongoDB Connector for BI  itself. The user authentication process is now passed through the  MongoDB Connector for BI  to the\nunderlying MongoDB instance. Users now authenticate as a user already\ncreated within MongoDB. The  MongoDB Connector for BI  package is now trimmed down from four separate components to\ntwo: This tool connects to a MongoDB instance and\ngenerates a  Document-Relational Definition Language (DRDL) \nfile, which maps a given collection shape to relational schema. Once installed and run as a daemon,\n mongosqld  responds to SQL queries, requests for DB\ninformation, and schema from the requesting BI tool via the MySQL\nwire protocol. mongosqld  requires at least one  DRDL  file to start.\nYou will need to have defined your schema with    mongodrdl  before\nstarting  mongosqld . MongoDB Connector for BI  Version 2.x is compatible with SQL-99 SELECT statements, and uses\nthe MySQL wire protocol. Released Jan 5, 2017 Hides  .pem  key file passwords in logs. mongodrdl  ignores binary fields when generating  DRDL  files. Supports queries that  SELECT  variables prefixed with \" mongodb \". Fixes incorrect result set from a  CROSS JOIN . Supports leading \" . \" characters on table names. Released Dec 13, 2016 Fixes precedence issue with the  NOT  operator. Fixes error looking up privilege information in databases with capital\nletters. Supports  LIKE  pattern matching in  SHOW COLUMNS  queries. Improves formatting of aggregation pipeline in logs. Fixes substring function when the combined length of the\nstarting index and substring exceeds the length of the\nstring.",
            "code": [
                {
                    "lang": "sh",
                    "value": "nohup mongosqld [options] &"
                }
            ],
            "preview": "Released December 18th, 2023",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/mongotranslate",
            "title": "mongotranslate",
            "headings": [
                "Description",
                "Usage",
                "Command Line Options",
                "Examples"
            ],
            "paragraphs": "mongotranslate  is a learning tool designed to help users understand\nhow SQL queries can be expressed in the MongoDB  aggregation\nlanguage . The  BI Connector 's SQL-to-aggregation\ntranslation engine provides the translations, which can also be used to\ntroubleshoot specific  BI Connector  translation issues. mongotranslate  is a standalone program. It requires\na  drdl  file generated by\n mongodrdl , but does not require\n mongosqld  or  mongod  to be running at the\ntime of execution. mongotranslate  has the following syntax: Specifies a SQL query to translate into a MongoDB aggregation\npipeline. Either  --query  or  --queryFile  is required. Specifies a path to a file containing a SQL query to translate\ninto a MongoDB aggregation pipeline. Either  --query  or  --queryFile  is required. Required.  Specifies a  .drdl  schema file or a directory\ncontaining one or more  .drdl  schema files created by the\n mongodrdl  program to use when translating a\nSQL query into an aggregation pipeline. Default :  test The database name to use for unqualified table names in the SQL\nquery. The following example uses a collection named  fruit  and the\n --dbName  option to specify that  fruit  is in the  groceries \ndatabase: If you do not use the  --dbName  option to specify a database,\n mongotranslate  assumes that  fruit  is in the  test \ndatabase. If the schema does not contain a database named  test ,\nor a table name  fruit  in the  test  database,\n mongotranslate  returns an error. The following example uses a fully-qualified table name, so it does\nnot need the  --dbName  option. If you specify a database with each table name in your SQL query, the\n --dbName  option is ignored if it is used. Optional.  Returns the  explain  output for the query plan\ninstead of the translated aggregation pipeline. Using\n --explain  returns similar output to running  EXPLAIN <query> \non a BI tool connected to  BI Connector . Default :  multiline Optional.  Valid options are  none  and  multiline . The\ndefault  multiline  option displays results in a more easily\nreadable format. Command Type Option Description Without the  --explain  option --format none Returns an aggregation pipeline all on one line. Without the  --explain  option --format multiline Returns an aggregation pipeline with one pipeline\nstage per line. With the  --explain  option --format none Returns all fields on one line. With the  --explain  option --format multiline Returns one field per line, with additional formatting for\narrays and object subfields. Default :  latest Optional.  Returns an aggregation pipeline compatible with the\nspecified MongoDB version. Acceptable values include: The default value is  latest . 3.2 3.4 3.6 4.0 latest The following example specifies an inline query for translation: The above command returns the following results: The following example specifies a query file and returns a one-line\nresult: The following example uses the  --explain  option: The above command returns the following results: If you need to quote a string inside the  --query  parameter, be sure to use single quotes.\nIf you must use double quotes or backticks in your query, use the\n --queryFile  option.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "mongotranslate [--query | --queryFile] <query | queryfile> [options]"
                },
                {
                    "lang": "none",
                    "value": "mongotranslate \"SELECT * FROM fruit WHERE _id > 100;\" \\\n  --schema schema.drdl --dbName groceries"
                },
                {
                    "lang": "sql",
                    "value": "mongotranslate \"SELECT * FROM groceries.fruit WHERE _id > 100;\" \\\n  --schema schema.drdl"
                },
                {
                    "lang": "javascript",
                    "value": "mongotranslate --query=\u201cselect test.name from restaurants where name like 'Brooklyn%'\u201d \\\n--schema=schema.drdl"
                },
                {
                    "lang": "json",
                    "value": "[\n  {\"$match\": {\"name\": {\"$regex\": \"^Brooklyn.*$\",\"$options\": \"i\"}}},\n  {\"$project\": {\"test_DOT_restaurants_DOT_name\": \"$name\",\"_id\": {\"$numberInt\":\"0\"}}},\n]"
                },
                {
                    "lang": "javascript",
                    "value": "mongotranslate --queryFile=query.txt --schema=schema.drdl --format=none"
                },
                {
                    "lang": "javascript",
                    "value": "mongotranslate --query=\"select count(name) from restaurants;\" \\\n--schema=schema.drdl --explain"
                },
                {
                    "lang": "json",
                    "value": "[\n      {\n         \"ID\": 1,\n         \"StageType\": \"MongoSourceStage\",\n         \"Columns\": \"[{name: 'count(name)', type: 'int'}]\",\n         \"Sources\": null,\n         \"Database\": {},\n         \"Tables\": {},\n         \"Aliases\": {},\n         \"Collections\": {},\n         \"Pipeline\": {},\n         \"PipelineExplain\": {},\n         \"PushdownFailures\": null\n      }\n]"
                }
            ],
            "preview": "The mongotranslate reference page.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/auth-plugin-jdbc",
            "title": "JDBC Authentication Plugin",
            "headings": [
                "Prerequisites",
                "Installing the Plugin",
                "Download from the GitHub repository",
                "Use Maven"
            ],
            "paragraphs": "The  MongoDB Connector for BI  provides a client-side MySQL authentication plugin for Java that\nintegrates with  MySQL's Connector/J JDBC driver .\nThe  mongosql_auth  plugin allows a client to authenticate with a\n BI Connector  and MongoDB deployment running with authentication enabled\nusing one of the following authentication mechanisms: SCRAM-SHA-1 SCRAM-SHA-256 PLAIN  (LDAP) GSSAPI  (Kerberos) The  SCRAM-SHA-1  and  SCRAM-SHA-256  mechanisms hash the\npasswords in the client plugin; however, all other data is in\ncleartext. If possible, use with encrypted connections. The  PLAIN  mechanism sends the password in cleartext. Use\nencrypted connections with the  PLAIN  mechanism . This plugin requires a version of MySQL Connector/J between\n 5.1.39 \nand the latest 5.1.x. It can't use MySQL Server or MySQL Connector/J 8.0 or later. To download the plugin  .jar  file, choose one of the following\noptions: Select the  .jar  file from the download site. Save it to a local directory. Refer to the directory as needed. Include the  MongoSQL Authentication Plugin for MySQL Connector/J \nlibrary in the  CLASSPATH . The Maven coordinates are: To learn more about Maven, refer to its  documentation site . Include  MySQL Connector/J \nin the  CLASSPATH . The Maven coordinates are: Add the authentication plugin in the MySQL connection string: You may also specify the authentication mechanism and authentication\nsource as a query parameter on the  username . To learn about the  authenticationPlugins  query parameter,\nsee the  MySQL documentation . Parameter Default Value Authentication mechanism Username and Password ( SCRAM-SHA-1 ). Authentication source admin  for Username and Password ( SCRAM-SHA-1 ) $external  for LDAP ( PLAIN ) Specify an authentication mechanism: Specify an authentication source using default authentication\nmechanism:",
            "code": [
                {
                    "lang": "xml",
                    "value": "<dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>mongosql-auth</artifactId>\n    <version>1.0.0</version>\n</dependency>"
                },
                {
                    "lang": "xml",
                    "value": "<dependency>\n   <groupId>mysql</groupId>\n   <artifactId>mysql-connector-java</artifactId>\n   <version>5.1.49</version>\n</dependency>"
                },
                {
                    "lang": "sh",
                    "value": "jdbc:mysql://127.0.0.1:3307?useSSL=false&authenticationPlugins=org.mongodb.mongosql.auth.plugin.MongoSqlAuthenticationPlugin"
                },
                {
                    "lang": "sh",
                    "value": "{username}?mechanism=PLAIN"
                },
                {
                    "lang": "sh",
                    "value": "{username}?source={somedb}"
                }
            ],
            "preview": "This plugin requires a version of MySQL Connector/J between\n5.1.39\nand the latest 5.1.x. It can't use MySQL Server or MySQL Connector/J 8.0 or later.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "meta/404",
            "title": "File not found",
            "headings": [],
            "paragraphs": "The URL you requested does not exist or has been removed.",
            "code": [],
            "preview": "The URL you requested does not exist or has been removed.",
            "tags": null,
            "facets": {
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/type-conversion",
            "title": "Type Conversion Modes",
            "headings": [
                "Mode Comparison Table"
            ],
            "paragraphs": "The  MongoDB Connector for BI  attempts to convert SQL queries into MongoDB\n aggregation pipelines .\nWhen the  BI Connector  cannot translate a query into an aggregation\npipeline, it executes the query in memory resulting in increased\nlatency. Prior to version 2.6,  mongosqld  could not\ntranslate type conversions to aggregation expressions, which\nprevented the translation of any query relying on type conversions. Starting in version 2.6, the  mongosql  type conversion mode pushes\nall type conversions down to MongoDB servers running version 4.0\nor later for improved expression performance. This mode is enabled by\ndefault but you can configure it on a per-session basis by setting the\n type_conversion_mode  session variable to one of the following\nvalues: The following example sets the  type_conversion_mode  variable to\n mysql : The type conversion mode applies to both: Mode Description mongosql Default.  Pushes all type conversions down to MongoDB servers\nrunning version 4.0 or later. For MongoDB versions prior\nto 4.0, the  BI Connector  performs type conversions in memory. mysql Instructs the  BI Connector  to match MySQL's type conversion\nsemantics as closely as possible. If the  BI Connector  can reproduce\nMySQL's type casting behavior in the aggregation language, it\nwill push the expression down to the MongoDB server for\nexecution. Otherwise,  mongosqld  executes the\nexpression in memory. mongosql  is the recommended type casting mode unless you require\nclose replication of MySQL's behavior. The example above sets\nthe  mysql  type conversion mode because  mongosql  is the\ndefault and does not need to be explicitly set. Explicit type conversions. For example: Implicit type conversions. For example,  \"123\" + 456 The following table provides an overview of how MySQL's type conversion\nbehavior differs from the  BI Connector 's default type\nconversion behavior ( mongosql  mode): From Type To Type MySQL Behavior mongosql -mode Behavior Varchar Numeric Parse the number from a string in a variety of different formats.\nFor more information, see the MySQL\n Numeric Literals \ndocumentation. Parse the number from a string in decimal format with optional\nleading sign character. Varchar Timestamp Parse the date from a string in a variety of different formats.\nFor more information, see the MySQL\n Date and Time Literals . Parse the date from a string in the  \"%Y-%m-%dT%H:%M:%S.%LZ\" \nformat. Int Timestamp Attemps to parse the date from the varchar representation of the\nint. For example, the integer  20180809183456  becomes the date\n 2018-08-09 18:34:56.000000 . Treats the input as milliseconds since the unix epoch. For\nexample,  1533839696000 . Timestamp Long Parse the timestamp as a long in the  YYYYMMDDHHMMSS  format.\nFor example,  20180701123400 . Parse the timestamp as a long representing the milliseconds since\nthe unix epoch. For example,  1530448440000 . Timestamp Varchar Parse the timestamp as a varchar in the\n YYYY-MM-DD HH:MM:SS.MMMMMM  format. For example,\n \u201c2018-07-01 12:34:00.000000\u201d . Parse the timestamp as a varchar in the\n YYYY-MM-DDTHH:MM:SS:MMMZ  format. For example,\n \u201c2018-07-01T12:34:00.000Z\u201d . mongosql  is the recommended type casting mode unless close\nreplication of MySQL's behavior is required.",
            "code": [
                {
                    "lang": "sql",
                    "value": "SET SESSION type_conversion_mode = 'mysql';"
                },
                {
                    "lang": "sql",
                    "value": "CAST(\"123\" AS unsigned)"
                }
            ],
            "preview": "The MongoDB Connector for BI attempts to convert SQL queries into MongoDB\naggregation pipelines.\nWhen the BI Connector cannot translate a query into an aggregation\npipeline, it executes the query in memory resulting in increased\nlatency. Prior to version 2.6, mongosqld could not\ntranslate type conversions to aggregation expressions, which\nprevented the translation of any query relying on type conversions.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/auth-plugin-c-mysql-options",
            "title": "MySQL Shell Options",
            "headings": [],
            "paragraphs": "The following table lists some  mysql  command-line options available\nfor use with the  C Authentication Plugin ,  mongosql_auth . A complete list of command line can be found in the\n MySQL client documentation . Option Value Notes --default-auth mongosql_auth Uses the C Authentication plugin. If you are using a MySQL\noption file, specify the following configuration to use the\n mongosql_auth  plugin: To use an option file with an\n ODBC DSN , add the\n USE_MYCNF=1  connection parameter to the\n DSN (Data Source Name) . --user <your-username> Possible parameters to this option are\n source=<authenticated-db>  and\n mechanism=<auth-mechanism> . If no authenticated database\nis specified, it defaults to  admin . If no authentication\nmechanism is specified, it defaults to  SCRAM-SHA-1 . If you use both the  source  and  mechanism  parameters,\nseparate them with a  &  and enclose the entire option in\nsingle quotes. For example: -p None, shell will prompt Required. --plugin-dir <your-plugin-dir> Optional. Use when the  mongosql_auth  plugin is not in the\ndefault MySQL plugin directory. The default plugin directory\ndepnds on your platform: Platform Default Location macOS, Linux <mysql-home>/lib/plugin/ 32-bit Windows \"C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\lib\\plugin\" 64-bit Windows \"C:\\Program Files\\MySQL\\MySQL Server 5.7\\lib\\plugin\"",
            "code": [
                {
                    "lang": "ini",
                    "value": "[client]\ndefault-auth=mongosql_auth"
                },
                {
                    "lang": "sh",
                    "value": "'--user=myTestUser?source=test&mechanism=SCRAM-SHA-1'"
                }
            ],
            "preview": "The following table lists some mysql command-line options available\nfor use with the C Authentication Plugin, mongosql_auth.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/odbc-driver",
            "title": "MongoDB BI Connector ODBC Driver",
            "headings": [
                "Overview",
                "Compatibility",
                "Supported Platforms",
                "Using the MongoDB BI Connector ODBC Driver"
            ],
            "paragraphs": "The  MongoDB BI Connector ODBC Driver  provides connectivity between a SQL client\nand the  MongoDB Connector for BI . The MongoDB BI Connector ODBC Driver enables users to create a\n Data Source Name (DSN)  and connect\na variety of  BI tools  to the  BI Connector . It includes\nthe  BI Connector   authentication plugin ,\nwhich implements the client side of MongoDB-supported authentication\nmechanisms. The  MongoDB BI Connector ODBC Driver  connects the DSN to the BI Connector. The  MongoDB BI Connector ODBC Driver  is compatible with  BI Connector  version 2.5 and\nlater. The latest production version of  BI Connector  is available from\nthe  MongoDB Download Center . The  MongoDB BI Connector ODBC Driver  is available for: Windows (32-bit and 64-bit) Before installing the  MongoDB BI Connector ODBC Driver  for Windows, ensure that the\nMicrosoft  Visual C++ Redistributable for Visual Studio 2015 \nis installed on your system. macOS The 1.0.16 edition of ODBC Manager included with the  MongoDB BI Connector ODBC Driver \nis not compatible with macOS Catalina or later versions of macOS. If\nyou are on Catalina or a later version of macOS, download and install the\n latest version (1.0.19) of ODBC manager. Ubuntu 14.04 and 16.04 RHEL 7 Configure your system to use the  MongoDB BI Connector ODBC Driver  by setting up a\n DSN . A DSN holds configuration\ninformation about your  BI Connector  instance, including server address,\nport number, and login credentials. See\n Create a System DSN  for\ninstructions on setting up a DSN on your system.",
            "code": [],
            "preview": "The MongoDB BI Connector ODBC Driver provides connectivity between a SQL client\nand the MongoDB Connector for BI. The MongoDB BI Connector ODBC Driver enables users to create a\nData Source Name (DSN) and connect\na variety of BI tools to the BI Connector. It includes\nthe BI Connector authentication plugin,\nwhich implements the client side of MongoDB-supported authentication\nmechanisms.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/user-authorization",
            "title": "User Authorization Model",
            "headings": [],
            "paragraphs": "The  MongoDB Connector for BI  restricts which database administration, data definition, and\ndata manipulation statements authenticated users can run. The following\ntable maps a SQL statement and corresponding MySQL privilege to the\nrequired MongoDB  privilege action : MySQL Statement MySQL Privilege MongoDB Privilege FLUSH LOGS RELOAD Only available to the  BI Connector 's admin user specified by the\n --mongo-username  option or\nthe  mongodb.net.auth.username  setting. FLUSH SAMPLE Not in MySQL Depends on your\n sampling configuration : Standalone Reader: Clustered Reader: The statement is not permitted in this mode. Clustered Writer: find  for all sampled namespaces insert  and  update  for all databases\nin the cluster find  for all sampled namespaces insert  and  update  on the schema\ndatabase specified by\n --schemaSource KILL PROCESS \nprivilege to view all threads SUPER \nprivilege to kill all threads and statements No privilege required to view and kill your own threads and\nstatements killop  to kill other user's connections or queries No privilege required to kill your own connection or query ALTER TABLE ALTER ,\n CREATE ,\nand  INSERT \nprivileges for the table. Renaming a table requires\n ALTER \nand  DROP \non the old table, as well as\n ALTER ,\n CREATE ,\nand  INSERT \non the new table. Depends on your\n sampling configuration : Standalone Reader: insert  and  update  for all databases\nin the cluster. Clustered Reader: Not permitted in this mode. Clustered Writer: insert  and  update  on the schema\ndatabase specified by\n --schemaSource . SET (Variables) SUPER \nprivilege is required to set global variables. Setting a session variable generally does not require any\nprivilege, although there are exceptions that require the\n SUPER \nprivilege (such as  sql_log_bin ). Either the  BI Connector 's admin user, as specified by the\n --mongo-username  option or\nthe  mongodb.net.auth.username  setting, or any MongoDB\nuser with the  inprog \nprivilege can set global variables. No privilege required to set session variables. SHOW CHARACTER SET No privilege required. No privilege required. SHOW COLLATION No privilege required. No privilege required. SHOW COLUMNS Displays column information for each column where the user\nhas some privilege. Column information is not\ndisplayed for columns where the user does not have some\nprivilege. find  on the proper collections. SHOW CREATE DATABASE No privilege required. find  on the proper database. SHOW CREATE TABLE Some privilege for the table. find  on the proper database or collection. SHOW {DATABASES | SCHEMAS} SHOW DATABASES  privilege. find  on the proper database or collection. SHOW {INDEX | INDEXES | KEYS} This statement requires some privilege for any column in the table. find  on the proper collection. SHOW PROCESSLIST PROCESS \nprivilege to view all processes. No privilege required to view your own processes. inprog  to view all processes. No privilege required to view your own processes. SHOW STATUS No privilege required. No privilege required. SHOW TABLES Lists non-temporary tables in a given database where the user has\nsome privilege. If you do not have any privilege for a base table or view, it\ndoes not show up in the output from\n SHOW TABLES  . listCollections  on a database displays all tables\nfrom that database. find  on a collection only shows the tables from\nthat collection. SHOW VARIABLES No privilege required. No privilege required.",
            "code": [],
            "preview": "The MongoDB Connector for BI restricts which database administration, data definition, and\ndata manipulation statements authenticated users can run. The following\ntable maps a SQL statement and corresponding MySQL privilege to the\nrequired MongoDB privilege action:",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/drdl",
            "title": "Document Relational Definition Language",
            "headings": [
                "File Format",
                "Example",
                "Field Types",
                "Embedded Documents",
                "Example",
                "Arrays",
                "Example",
                "Pre-Joining",
                "Custom Filters",
                "Aggregation Pipelines",
                "Aggregation Pipelines using Views",
                "Aggregation Pipelines in DRDL",
                "Geospatial Data",
                "Example"
            ],
            "paragraphs": "Document Relational Definition Language ( DRDL ) defines a\nrelational view of a MongoDB schema. mongodrdl  samples documents from your MongoDB\ncollections and derives a  DRDL  file from those documents.\n mongosqld  then\nuses the schema defined in  DRDL  files to allow MySQL clients to\nquery your MongoDB data. The  DRDL  file lists your databases, tables, and columns in\n YAML  format. Given documents of the following shape in the collection  abc  in the\ndatabase  test : Run  mongodrdl  to generate a schema based on this collection: The generated schema file ( schema.drdl ) looks similar to the following: BI Connector  maps fields that always contain the same data\ntype into the relational model. Schema generation deals specially\nwith the following cases: Numeric BI Connector  uses the most precise numeric type that matches the\nsampled documents. If a field in a collection always has the same data type,\n BI Connector  uses that type. If a field in a collection can contain either floating point\nvalues or integers,  BI Connector  uses type  numeric . Dates BI Connector  treats any field of type  data_date  as the\n SQL   timestamp  type. Timestamps BI Connector  ignores any field of type  data_timestamp . ObjectID BI Connector  treats any field of type  data_oid  as\nthe SQL type  varchar . UUID BI Connector  treats any field of type UUID as the SQL type\n varchar . Geospatial If a collection contains a\n geospatial index ,\n BI Connector  maps the indexed field into an array of numeric\nlongitude-latitude coordinates. See  Geospatial Data  for an example. BI Connector  does not recognize geospatial fields\nwhen reading from a  view . Heterogeneous Fields If a field contains inconsistent types,  BI Connector  chooses the\nmost frequently sampled type. If a field can contain either a type or an array of that type, the\ngenerated schema always specifies that the field contains an array. How do I skip data incompatible with my DRDL type definition? BI Connector  maps embedded documents to simple fields\nthat have a  .  separator character, making them appear similar\nto the way you would reference them using  dot notation  in a MongoDB query. While  Tableau  properly quotes\nidentifiers, within ad-hoc SQL expressions you must double-quote\nevery identifier that contains  .  characters or mixed-case\ncharacters. Consider the following document: Running  mongodrdl  on a collection containing this document\nresults in the following fields in the generated schema: _id numeric familyName varchar hometown varchar address.street varchar address.city varchar address.state varchar address.zip varchar members_since timestamp BI Connector  exposes arrays to business intelligence tools using two\ncollections: one without the array, and the other having one document\nper array element. If you run  mongodrdl  on a collection named  families \nwhich contains the following document: This results in the following three tables: You can join these tables together to view the data in a denormalized\nformat. For example, you can list the people named in the above schema\ntogether with their family information using the following query: _id numeric familyName varchar hometown varchar _id numeric familyMembers.age numeric familyMembers.firstname varchar familyMembers_idx numeric _id numeric familyMembers.attributes.name varchar familyMembers.attributes.value varchar familyMembers.attributes_idx numeric familyMembers_idx numeric If you provide the  --preJoined \noption to  mongodrdl ,\n BI Connector  adds the fields in the containing document to each\narray element's document, thus \"pre-joining\" the table. In the previous example, the tables would contain the following\nadditional columns: familyName varchar hometown varchar familyMembers.age numeric familyMembers.firstname varchar familyMembers_idx numeric familyName varchar hometown varchar You can add a column of type  mongo.Filter  to a collection in your\n DRDL  file. This column type allows you to perform a custom\n $match  query. For example, given the following schema describing a cloud of points with\nup to three components: You can select only three-dimensional points using the following query: MongoDB 3.4 introduces  Read-Only Views  that you can\nuse to filter incompatible data. For example, you can create a view in the  test  database that contains\nonly documents containing a number in the  grade  field of a  grades \ncollection: You can then use  mongodrdl  to generate a schema from this view\nas you would a collection: BI Connector  can use  aggregation pipelines  as\npart of the schema to transform documents from the collection into the\nproper form for the relational tables. For example, consider a simple document in a collection named\n simpleFamilies : mongodrdl  generates a schema with the tables\n simpleFamilies  and  simpleFamilies_familyMembers . The table  simpleFamilies_familyMembers  enumerates each family\nmember and has the following pipeline: This pipeline uses  $unwind  to create a new record for each\nmember of  familyMembers . The schema tracks the array index in\nthe field  familyMembers_idx . If a collection contains a  2d  or  2dsphere \n geospatial index ,\n BI Connector  maps the indexed field into an array of numeric\nlongitude-latitude coordinates. Given the following collection: BI Connector  generates the following schema: BI Connector  does not recognize geospatial fields\nwhen reading from a  view .",
            "code": [
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: <database name>\n  tables:\n  - table: <SQL table name>\n    collection: <MongoDB collection name>\n    pipeline:\n    - <optional pipeline elements>\n    columns:\n    - Name: <MongoDB field name>\n      MongoType: <MongoDB field type>\n      SqlName: <mapped SQL column name>\n      SqlType: <mapped SQL column type>"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"_id\": ObjectId(),\n    \"close\": 7.45,\n    \"detail\": { \"a\": 2, \"b\": 3 }\n}"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl -d test -c abc -o schema.drdl"
                },
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: test\n  tables:\n  - table: abc\n    collection: abc\n    pipeline: []\n    columns:\n    - Name: _id\n      MongoType: bson.ObjectId\n      SqlName: _id\n      SqlType: varchar\n    - Name: close\n      MongoType: float64\n      SqlName: close\n      SqlType: numeric\n    - Name: detail.a\n      MongoType: float64\n      SqlName: detail.a\n      SqlType: numeric\n    - Name: detail.b\n      MongoType: float64\n      SqlName: detail.b\n      SqlType: numeric"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"_id\": 1,\n    \"familyName\": \"Partridge\",\n    \"hometown\" : \"Hollywood Hills\",\n    \"address\" : { \"street\": \"123 Main Street\",\n                  \"city\" : \"Hollywood\",\n                  \"state\" : \"CA\",\n                  \"zip\" : \"90210\" },\n    \"members_since\" : ISODate(\"2002-04-12T00:00:00Z\")\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\": 1,\n   \"familyName\": \"Partridge\",\n   \"hometown\" : \"Hollywood Hills\",\n   \"familyMembers\" : [\n     {\n         \"firstname\" : \"Shirley\",\n         \"age\" : 42,\n         \"attributes\" : [\n             { \"name\" : \"instrument\", \"value\" : \"singer\" },\n             { \"name\" : \"role\", \"value\" : \"mom\" }\n         ]\n     },\n     {\n         \"firstname\" : \"Keith\",\n         \"age\" : 18,\n         \"attributes\" : [\n             { \"name\" : \"instrument\", \"value\" : \"guitar\" },\n             { \"name\" : \"role\", \"value\" : \"son\" }\n         ]\n     },\n     {\n         \"firstname\" : \"Laurie\",\n         \"age\" : 16,\n         \"attributes\" : [\n             { \"name\" : \"instrument\", \"value\" : \"keyboard\" },\n             { \"name\" : \"role\", \"value\" : \"sister\" }\n         ]\n     }]\n}"
                },
                {
                    "lang": "sql",
                    "value": "SELECT f.*, m.`familyMembers.firstname`\nFROM families_familyMembers m\nJOIN families f\nON m._id = f._id;"
                },
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: test\n  tables:\n  - table: points\n    collection: points\n    pipeline: []\n    columns:\n    - Name: _id\n      MongoType: bson.ObjectId\n      SqlName: _id\n      SqlType: varchar\n    - Name: x\n      MongoType: float64\n      SqlName: x\n      SqlType: numeric\n    - Name: \"y\"\n      MongoType: float64\n      SqlName: \"y\"\n      SqlType: numeric\n    - Name: z\n      MongoType: float64\n      SqlName: z\n      SqlType: numeric\n    - Name: filter\n      MongoType: mongo.Filter\n      SqlName: filter\n      SqlType: varchar"
                },
                {
                    "lang": "sql",
                    "value": "SELECT x, y, z\nFROM points\nWHERE filter='{\"z\": {\"$exists\": true}}';"
                },
                {
                    "lang": "javascript",
                    "value": "db.runCommand( { create: \"numericGrades\", viewOn: \"grades\", pipeline: [ { \"$match\": { \"grade\": { \"$type\": \"number\" } } } ] } )"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl -d test -c numericGrades"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\": 1,\n   \"familyName\": \"Partridge\",\n   \"familyMembers\" : [ \"Shirley\", \"Keith\", \"Laurie\"]\n}"
                },
                {
                    "lang": "yaml",
                    "value": "pipeline:\n- $unwind:\n    includeArrayIndex: familyMembers_idx\n    path: $familyMembers"
                },
                {
                    "lang": "javascript",
                    "value": "db.points.createIndex( { pos : \"2dsphere\" } )\ndb.points.insertOne({\n    pos : { type: \"Point\", coordinates: [ -73.97, 40.77 ] },\n    name: \"Central Park\",\n    category : \"Parks\"\n})"
                },
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: test\n  tables:\n  - table: points\n    collection: points\n    pipeline: []\n    columns:\n    - Name: _id\n      MongoType: bson.ObjectId\n      SqlName: _id\n      SqlType: varchar\n    - Name: category\n      MongoType: string\n      SqlName: category\n      SqlType: varchar\n    - Name: name\n      MongoType: string\n      SqlName: name\n      SqlType: varchar\n    - Name: pos.coordinates\n      MongoType: geo.2darray\n      SqlName: pos.coordinates\n      SqlType: numeric[]"
                }
            ],
            "preview": "Document Relational Definition Language (DRDL) defines a\nrelational view of a MongoDB schema.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/auth-plugin-c",
            "title": "C Authentication Plugin",
            "headings": [
                "Supported Platforms",
                "Installing the Plugin",
                "Using the Plugin for Authentication"
            ],
            "paragraphs": "The MongoDB authentication plugin is embedded in the  MongoDB BI Connector ODBC Driver .\nIf your BI tool connects using the  MongoDB BI Connector ODBC Driver  through a\n DSN  or the driver\ndirectly, you do not need to install the authentication plugin\nseparately. Install the standalone authentication plugin if your BI\ntool does not use an ODBC driver and accepts authentication plugins,\nsuch the  MySQL shell . The  mongosql_auth  plugin allows a client to authenticate with a\n BI Connector  and MongoDB deployment running with authentication enabled\nusing one of the following authentication mechanisms: SCRAM-SHA-1 SCRAM-SHA-256 PLAIN  (LDAP) GSSAPI  (Kerberos) The  SCRAM-SHA-1  and  SCRAM-SHA-256  mechanisms hash the\npasswords in the client plugin; however, all other data is in\ncleartext. If possible, use with encrypted connections. The  PLAIN  mechanism sends the password in cleartext. Use\nencrypted connections with the  PLAIN  mechanism . The plugin is built and tested on the following platforms: Windows 2008 R2 (32- and 64-bit) macOS 10.12 (64-bit) Ubuntu 14.04 (64-bit) RHEL 7.0 (64-bit) The C Authentication plugin was developed against MySQL 5.7.X\nCommunity Edition (64-bit), and tested with MySQL 5.7.X\nCommunity Edition and the latest version of MongoDB Connector for BI.\n The plugin is not compatible with MySQL Server or Connector/ODBC\ndriver version 8 and later. Download the  MySQL 5.7.x installer . The\nrequired product to install depends on your connection method: Connection Method Required MySQL Component DSN (Data Source Name) \nusing the MySQL Connector/ODBC driver MySQL Connector/ODBC MySQL Shell MySQL Shell Install the version (64-bit or 32-bit) of the MySQL component that\nis appropriate for your operating system. Download the  mongosql_auth  plugin component  .msi installer  and install the\n mongosql_auth  plugin component. The plugin is installed\ninto one of the following directories depending on your\nversion of windows: Platform Default Location 32-bit Windows C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\lib\\plugin 64-bit Windows C:\\Program Files\\MySQL\\MySQL Server 5.7\\lib\\plugin macOS Catalina users: The C authentication plugin uses OpenSSL v1.0. If you have\nOpenSSL v1.1 or greater installed, you must downgrade to v1.0\nto use the C authentication plugin. You can do so with the\nfollowing command: If you have both versions 1.0 and 1.1 of OpenSSL installed,\ncreate a symlink to version 1.0 from  /usr/local/opt/openssl \nand remove the symlink to v1.1. Download the  MySQL 5.7.x installer  and install the\nMySQL Community Server, which includes the MySQL shell. Download  mongosql_auth  plugin library from  the\n releases page . After downloading, move the file  mongosql_auth.so  to either: - OR - <mysql-home>/lib/plugin/  directory. The default location of  <mysql-home>  varies by platform. To discover the location of the plugin directory, run the\nfollowing at the command line: A directory of your choice if you provide the\n plugin-dir=<your-install-dir>  option to your MySQL client. Download the  MySQL 5.7.x installer  and install the\nMySQL Community Server, which includes the MySQL shell. Download  mongosql_auth  plugin library from  the\n releases page . After downloading, move the file  mongosql_auth.so  to either: - OR - <mysql-home>/lib/plugin/  directory. The default location of  <mysql-home>  varies by platform. To discover the location of the plugin directory, run the\nfollowing at the command line: A directory of your choice if you provide the\n plugin-dir=<your-install-dir>  option to your MySQL client. Before you use the authentication plugin, you must set up authenticated\nusers for MongoDB. For more information on creating authenticated users,\nsee   Enable Authentication .\nIf you are using the Atlas-hosted  BI Connector , see  Configure Database Users . The procedure for using the C Authentication plugin library varies\ndepending on your SQL client. The C Authentication plugin can be used\nvia one of the following methods: This plugin can is compatible with both the 32-bit or 64-bit versions of\nthe MySQL shell and MySQL Connector/ODBC driver. The installation\ndirectory differs depending on the version you install. DSN (Data Source Name)  using the\nMySQL Connector/ODBC driver. For more information, see\n Create a System DSN . The  --default-auth  option for the MySQL Shell. For more\ninformation, see  Connect from the MySQL Client .",
            "code": [
                {
                    "lang": "none",
                    "value": "brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/30fd2b68feb458656c2da2b91e577960b11c42f4/Formula/openssl.rb"
                },
                {
                    "lang": "sh",
                    "value": "mysql_config --plugindir"
                },
                {
                    "lang": "sh",
                    "value": "mysql_config --plugindir"
                }
            ],
            "preview": "Before you use the authentication plugin, you must set up authenticated\nusers for MongoDB. For more information on creating authenticated users,\nsee  Enable Authentication.\nIf you are using the Atlas-hosted BI Connector, see Configure Database Users.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/known-issues",
            "title": "Known Issues for MongoDB Connector for BI",
            "headings": [
                "SQL (Structured Query Language) Compatibility Issues",
                "BI Connector Returns Empty Set Where MySQL Returns NULL Values",
                "BI Connector Returns NULL Values Due to Mapping Error"
            ],
            "paragraphs": "Some  SQL aggregate functions \n(like  SUM ,  MIN , or  COUNT ) return  NULL  if there are no\nmatching values for that aggregate function. This response is\neffectively an empty row. Given the exact same  SQL (Structured Query Language)  query, the  BI Connector  does not return\n NULL  for any aggregate functions; it returns an empty set instead. You are analyzing the test performance of students for each of the\nclasses offered in the last year by a university. Using Tableau, you\nrun a  SQL (Structured Query Language)  query to find statistics for each class, including the\nhighest and lowest test scores as well as the sum and count of all\nthe scores in the class. Unfortunately, you accidentally run the query on the data for next\nyear's classes, so there are no test scores for the query to find. If the student data was stored in MySQL, this query would return a\nsingle row with  NULL  values for fields that are calculated with\nthe  SUM ,  MAX , and  MIN  functions and  0  for fields\nthat are calculated with the  COUNT  function. If the student data was stored in MongoDB and accessed via the\n BI Connector , this query would return an empty set. A known mapping error can occur that causes  BI Connector  to return all  NULL \nvalues. This error occurs when you query a collection that\ncontains an array field that can be  NULL , and the same array contains\nan additional field that can also be  NULL . A workaround for this error is to\ncreate a view with the  $match  filter that only returns documents in which\nthe field  $type  is  array  with the  createView  method. For a collection named  nextDeparture  with an array field named\n response.schedule  that is sometimes  NULL , you can create\nthe following view:",
            "code": [
                {
                    "lang": "sql",
                    "value": "SELECT SUM(scores), COUNT(*), COUNT(scores), MAX(scores), MIN(scores)\nFROM students_2019\nGROUP BY class;"
                },
                {
                    "lang": "sql",
                    "value": "SELECT SUM(scores), COUNT(*), COUNT(scores), MAX(scores), MIN(scores)\nFROM students_2019\nGROUP BY class;\n\n+-------------+----------+---------------+-------------+-------------+\n| sum(scores) | count(*) | count(scores) | max(scores) | min(scores) |\n+-------------+----------+---------------+-------------+-------------+\n|   NULL      |        0 |             0 |   NULL      |   NULL      |\n+-------------+----------+---------------+-------------+-------------+"
                },
                {
                    "lang": "sql",
                    "value": "SELECT SUM(scores), COUNT(*), COUNT(scores), MAX(scores), MIN(scores)\nFROM students_2019\nGROUP BY class;\n\nEmpty set (0.00 sec)"
                },
                {
                    "lang": "javascript",
                    "value": "db.createView('nonullsched', '\"nextDeparture\"',  [{'$match': {'response.schedule': {'$type': 'array'}}}])"
                }
            ],
            "preview": "A known mapping error can occur that causes BI Connector to return all NULL\nvalues. This error occurs when you query a collection that\ncontains an array field that can be NULL, and the same array contains\nan additional field that can also be NULL. A workaround for this error is to\ncreate a view with the $match filter that only returns documents in which\nthe field $type is array with the createView method.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/jdbc-driver",
            "title": "MySQL JDBC Driver",
            "headings": [],
            "paragraphs": "The MongoDB Connector for Business Intelligence uses the  MySQL Connector/J \nfor  JDBC (Java Database Connectivity)  connectivity. You must use a MySQL Connector/J version from the 5.1.x series with the\n BI Connector . The minimum supported version is  5.1.44 . You can't use MySQL Connector/J versions 6.x, 8.x, or later\nwith the  BI Connector .",
            "code": [],
            "preview": "The MongoDB Connector for Business Intelligence uses the MySQL Connector/J\nfor JDBC (Java Database Connectivity) connectivity.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/log-messages",
            "title": "Log Messages",
            "headings": [
                "Timestamp",
                "Severity Levels",
                "Components",
                "Configure Log Verbosity Level",
                "Log Filename Format"
            ],
            "paragraphs": "mongosqld  log messages have the form: For example: Log messages use  iso8601 \nformat for the timestamp, with a UTC offset set by the server on which\n mongosqld  is running. The following table lists the severity levels associated with each log\nmessage: The default log verbosity level is  0 , which includes all\nnon- Debug  messages. Increasing the verbosity level adds additional\n Debug  messages to the logs. To set the verbosity level, see\n Configure Log Verbosity Levels . Level Description F Fatal E Error W Warning I Informational, for Verbosity Level of  0 D Debug, for All Verbosity Levels >  0 Log messages include a component field, providing functional\ncategorization of the messages: Level Description Messages related to control activities, such as initialization. Messages related to network activities, such as accepting connections. Messages related to query plan generation. Messages related to query plan optimization. Messages related to query execution. To configure the log verbosity level: To specify a verbosity level when starting  mongosqld , use the\n -v  option. Repeating  v  increases the verbosity level. To learn more about the verbosity levels and how to use them, see\n --verbose . Include the  -v  option when starting\n mongosqld  from the command line, or Specify  systemLog.verbosity  in a\n mongosqld configuration file . The following invocation of  mongosqld  sets the log verbosity\nlevel to  Developer . If you direct  mongosqld  to rotate log files with\nthe  --logRotate  option,  BI Connector \nadds a sequence number to ensure the uniqueness of each new log file\nname. Log files have the following format: For example: For more information on log file rotation, see the\n --logRotate  option.",
            "code": [
                {
                    "lang": "none",
                    "value": "<timestamp> <severity> <component> [<context>] <message>"
                },
                {
                    "lang": "none",
                    "value": "2017-08-17T13:34:48.910-0700 I NETWORK [initandlisten] waiting for connections at 127.0.0.1:3307"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schema schema.drdl --auth -vv"
                },
                {
                    "lang": "sh",
                    "value": "<filename>.<logSeqNumber>.<timeStamp>"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld.log.000000.2018-04-20T15_10_23.898858222-07_00"
                }
            ],
            "preview": "mongosqld log messages have the form:",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/system-variables",
            "title": "System Variables",
            "headings": [
                "Overview",
                "Setting System Variables"
            ],
            "paragraphs": "BI Connector  provides the following environment variables: System Variable Data Type Description Default Value full_pushdown_exec_mode boolean Specifies whether a query error is returned for queries with\nclauses that aren't fully translated to the MongoDB query language.\nSQL query predicates are used to filter data returned by the query. 0 (false) log_level integer Specifies the logging level for  BI Connector : -1 : Do not log. 0 : Log only messages for database users, such as basic\n mongosqld  events and state changes. 1 : Log messages for database users and  mongosqld  administrators. 2 : For internal use only. 2 (Atlas-hosted) and 0 (self-managed) max_nested_table_depth integer Specifies the maximum number of unique nested field paths that\n mongosqld  maps to a relational table for a collection. 50 max_num_global_tables integer The maximum number of tables allowed in a MongoDB deployment with an automatically-\ngenerated schema. 4000 max_num_tables_per_collection integer The maximum number of tables allowed in a collection in a table with an\nautomatically-generated schema. 200 max_nested_table_depth integer The default limit for table's nesting depth of arrays\nthat MongoDB translates to tables, in a collection with an\nautomatically-generated schema. 10 max_num_fields_per_collection integer The maximum number of fields examined per collection in a table with an\nautomatically-generated schema. 2000 mongodb_max_varchar_length integer Specifies the maximum string length returned for columns using\nthe  VARCHAR  data type. A value of  0  specifies\nno limit. 0 polymorphic_type_conversion_mode string Determines how  BI Connector  evaluates document fields that are\nspecified with multiple data types. For example,  count \ncould be a number in one document and a string in another.\nThe data type that  BI Connector  selects depends on the value\nof the  schema_mapping_mode  system variable. A value of\n majority  causes  BI Connector  to select the type\nthat appears in the majority of document fields, while a value\nof  lattice  would cause  BI Connector  to select string as the\ndata type for  count . See  Cached Sampling \nfor more information. Set  polymorphic_type_conversion_mode  to one of the following\nvalues: off :\nQueries may fail if you do not explicitly cast\ndocument fields that are specified with multiple data types. fast :\n BI Connector  converts only document fields that\nappeared as multiple data types during sampling. safe :\n BI Connector  converts all document fields to the data type\ndiscovered during sampling, even if the fields do not appear\nas multiple data types. off reconcile_arithmetic_agg_functions boolean Allows you to choose the behavior where MongoDB does not\nautomatically convert types for some queries using arithmetic\naggregate functions. In MongoDB version 3.6 and earlier, this\nbehavior results in improved performance, compared with implicit\ntype conversions for arithmetic aggregation functions in subsequent\nversions. See  Type Conversion Modes  for\nmore information. true sample_refresh_interval_secs integer Specifies how frequently, in seconds, that the  BI Connector  schema\nis updated. A value of  0  specifies that the schema is not\nrefreshed after  BI Connector  starts. See  Cached Sampling  for more\ninformation. 0 sample_size integer Specifies how many documents  BI Connector  samples when generating\nits schema. A value of  0  specifies that  BI Connector  performs\na collection scan across all sample  namespaces . See  Cached Sampling  for more\ninformation. 100 schema_mapping_mode string Specifies how the MongoDB schema is transformed into a relational\nschema: lattice : See  Sampling Type Conflicts \nfor more information. majority :  BI Connector  assigns the most common data type for\na field occuring in a sample. lattice type_conversion_mode string Specifies the semantics that  BI Connector  uses for type conversions,\nsuch as the  CAST  function. mysql mongosql mongosql You must have the  atlasAdmin  database role to set environment\nvariables on an Atlas-hosted  BI Connector . To set them for a self-managed\n BI Connector , you must have the  inprog  privilege on the\nMongoDB database to which you've connected the  BI Connector . Use any SQL client that is connected to  BI Connector  to set these\nvariables. The following example sets  mongodb_max_varchar_length \nto  100 : You must start a new connection to the  BI Connector  after setting a system\nvariable. The connection you used to set the system variable is not affected.",
            "code": [
                {
                    "lang": "json",
                    "value": "SET GLOBAL mongodb_max_varchar_length = 100"
                }
            ],
            "preview": "BI Connector provides the following environment variables:",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/powerbi",
            "title": "Connect from Microsoft Power BI Desktop",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Start Power BI Desktop.",
                "Select an ODBC (Open Database Connectivity) Data Source Name",
                "Select the Data to Work With",
                "Begin Working with Power BI"
            ],
            "paragraphs": "This tutorial demonstrates how to connect to the  MongoDB Connector for BI  using\n Microsoft Power BI Desktop . Create a 64-bit  system Data Source Name (DSN) . From the  Home  screen: Select the  Get Data  tab. Click  More... Select  ODBC  from the list of data sources and\nclick  Connect . Select your ODBC data source name from the list and click\n OK . The Power BI Navigator shows a list of databases. Select a database\nand one or more collections to work with. A preview of your data\nappears to the right. Click  Load  when your selection is complete. Your selected data is available for use with Power BI's visualization\ntools.",
            "code": [],
            "preview": "This tutorial demonstrates how to connect to the MongoDB Connector for BI using\nMicrosoft Power BI Desktop.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/tableau-no-auth",
            "title": "Connect from Tableau Desktop without Authentication or TLS/SSL",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Start the Microsoft ODBC Data Sources program.",
                "Select the System DSN tab.",
                "Click the Add button.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Fill in the necessary form fields.",
                "Click the Test button to test the ODBC connection.",
                "Start Tableau.",
                "Connect using Tableau.",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Launch ODBC Manager.",
                "Click System DSN, then click Add.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Enter a Data Source Name (DSN).",
                "Add the necessary keywords.",
                "Click OK to finish creating the DSN.",
                "Start Tableau.",
                "Connect using Tableau."
            ],
            "paragraphs": "Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.3 or later A running  mongod  instance A running  mongosqld  instance Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.4 or later A running  mongod  instance A running  mongosqld  instance Download the  MongoDB BI Connector ODBC Driver  and run the Windows installer ( .msi ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: Choose the program version (64-bit or 32-bit) which is\nappropriate for your system and ODBC driver version. Select either the  MongoDB ODBC ANSI Driver  or the\n MongoDB ODBC Unicode Driver , then click\n OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Click the  Details  button to expose the lower half of the form. The following form fields are required: Field Name Description Data Source Name A name of your choice. TCP/IP Server Address of the server where your\n mongosqld  process is running. If you have enabled\n BI Connector  on  MongoDB Atlas , you can find the\nhostname of the server where  mongosqld  is running\nin the  connection information \nfor your cluster. Port Port number of your  mongosqld \nprocess. Database The name of the database to connect to, e.g.  test . If the connection is successful, click  OK  to add the\n DSN (Data Source Name) . Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In . Download the  MongoDB BI Connector ODBC Driver  and run the macOS installer ( .dmg ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: ODBC Manager is included with the  MongoDB BI Connector ODBC Driver . The 1.0.16 edition of ODBC Manager included with the  MongoDB BI Connector ODBC Driver \nis not compatible with macOS Catalina or later versions of macOS. If\nyou are on Catalina or a later version of macOS, download and install the\n latest version (1.0.19) of ODBC manager. Select either the  MongoDB ANSI ODBC  driver or the\n MongoDB Unicode ODBC  driver, then click  OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Optionally enter a  Description . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value SERVER The hostname or IP address of the  MongoDB Connector for BI  host. Use  127.0.0.1  to connect via TCP to localhost.\nSpecifying a value other than an IP address, will attempt to\nconnect via Unix socket. PORT The  IANA (Internet Assigned Numbers Authority) \n port number \nfor the  MongoDB Connector for BI . The default is  3307 . DATABASE The database to use after connecting. Required when connecting with Microsoft Excel. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Do not close the setup window. Proceed to the next step. Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In .",
            "code": [],
            "preview": "Download the MongoDB BI Connector ODBC Driver and run the Windows installer (.msi).",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/tableau",
            "title": "Connect from Tableau Desktop",
            "headings": [],
            "paragraphs": "Instructions  for connecting to Tableau\nDesktop from a local MongoDB instance which does not use authentication. Instructions  for connecting to Tableau\nDesktop from a MongoDB instance which uses authentication. Instructions  for connecting to Tableau Desktop\nfrom a MongoDB with authentication and TLS/SSL.",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/mongodrdl",
            "title": "mongodrdl",
            "headings": [
                "Description",
                "Syntax",
                "Default Minimum TLS Version",
                "Commands",
                "Options",
                "Core Options",
                "TLS/SSL Options",
                "Authentication Options",
                "Custom Filters",
                "Usage Examples",
                "Schema Generation Example",
                "Custom Filter Example",
                "Authentication Example",
                "MongoDB Atlas Example"
            ],
            "paragraphs": "mongodrdl  is a relational schema management tool for the  MongoDB Connector for BI . The\n mongodrdl  binary can: You can edit a  .drdl  file manually to customize the  BI Connector 's\nschema. To learn more about the  .drdl  format and manually editing\n .drdl  files, see  Load a Schema from a DRDL File . To learn more about all  BI Connector  schema management options,\nsee  Map Relational Schemas to MongoDB . The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. Produce a schema  based on the contents of\none or more MongoDB  collections  and write them\nout into  .drdl  files used by  mongosqld . Upload  a  .drdl  file's schema to the\nMongoDB deployment your  BI Connector  is reading from. Download  stored schemas from your MongoDB\ndeployment. Delete  stored schemas from your MongoDB\ndeployment. Name  stored schemas in your MongoDB\ndeployment for easier management. To apply any changes you make to your DRDL files, you must restart\n mongosqld . mongodrdl  uses the following syntax: The default minimum TLS version is 1.1 for outgoing connections\nfrom  mongodrdl  to MongoDB. You can adjust this setting with the  --minimumTLSVersion  option. The behavior of  mongodrdl  is determined by one of the\nfollowing commands. If no command is specified,  mongodrdl \nsamples the specified namespace. Samples the namespaces specified by the\n --db , optional\n --collection , and other\n command line options  to\noutput a  .drdl  file. The  sample  command\nencapsulates all the  mongodrdl  behavior prior to\nversion 2.11. Lists the string representation of the\n ObjectId  of each stored schema\nand the date it was created. list-schema-ids  requires the following option: For example, the following command lists the schema ids in the\n schemas  database: The output resembles the following: Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. Lists the name and string representation of the\n ObjectId  for each stored schema\nthat has a name. list-schema-names  requires the following option: For example, the following command returns the name and ObjectId for\neach named schema in the  schemas  database: The output resembles the following: Stored schemas are unnamed by default. You can refer to a named schema\nby using the  --name  option with the\n download  and\n delete  commands. Use the\n name-schema  command to name or rename a\nschema. Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. Uploads the schema from the specified  .drdl  file to the database\nspecified by the  --schemaSource \noption. Schemas are uploaded to the  schemas  collection. upload  requires the following options: For example, the following command uploads the schema in the\n movies.drdl  file to the  schemas  database: The string representation of the\n ObjectId  of the uploaded schema\nis returned: The next step is to store the schema under a name you provide, using\nthe  name-schema  command: To use the newly uploaded schema that received a specified name,\nrestart  mongosqld  with the schema database specified by the\n --schemaSource  option, with the\nschema's name specified with  --schemaName : Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. --drdl Required.  Path to the  .drdl  file to upload. If you upload a custom schema, you must store it with its specified\nname, using  name-schema , and then specify\nthis name to the  mongosqld  with\n --schemaName .\nIf you don't store the schema's name when you upload it, the schema\nname defaults to  defaultSchema . If the schema's name doesn't exist,\nthis results in an error from  mongosqld  similar to the\nfollowing: MongoDB schema not yet available.\nError initializing schema: no schema found for name. Downloads a schema specified by its name or\nstring representation of the\n ObjectId  and prints it to the\nconsole. download  accepts the following options: For example, the following command prints the  movies  schema to the\nconsole: To store the schema in a  .drdl  file, direct the output to the\ndesired  .drdl  file: Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. --name The name of the schema. To learn more about naming schemas,\nsee the  name-schema \ncommand. Required  if  --schema  is not specified. --schema The string representation of the\n ObjectId  of the schema. Required  if  --name  is not specified. Deletes a schema specified by its name or\nstring representation of the\n ObjectId . delete  accepts the following options: For example, the following command deletes the schema with id\n 5d7941dc6a26a3d0fc397284  in the  schemas  database: Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. --name The name of the schema. To learn more about naming schemas,\nsee the  name-schema \ncommand. Required  if  --schema  is not specified. --schema The string representation of the\n ObjectId  of the schema. Required  if  --name  is not specified. Creates a new name for a schema or updates a schema's existing name. name-schema  requires the following options: For example, the following command names the\n 5d72adea5c23a9e44882a1ad  schema in the  schemas  database as\n movies : Stored schemas are unnamed by default. You can refer to a named schema\nby using the  --name  option with the\n download  and\n delete  commands. Use the\n name-schema  command to name or rename a\nschema. Name Description --schemaSource Required.  Specifies the database where the schema information\nis stored. --name Required.  The new name of the schema. --schema Required  The string representation of the\n ObjectId  of the schema. Returns information on the options and use of  mongodrdl . Returns the  mongodrdl  release number. Specifies that  mongodrdl  should provide more detailed log output. Include\nmultiple times for more verbosity (e.g.  -vvvvv ), or specify a numeric\nvalue (e.g.  --verbose=5 ). Hides all log output. MongoDB URI connection string. The following command-line options cannot be used in conjunction\nwith  --uri  option: Instead, specify these options as part of your  --uri \nconnection string. --host --port --db --username --password  (if the URI connection string also includes\nthe password) --authenticationDatabase --authenticationMechanism Default : localhost:27017 Specifies a resolvable hostname for the  mongod  to which to\nconnect. By default, the  mongodrdl  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: You can always connect directly to a single MongoDB instance by\nspecifying the host and port number directly. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Specifies a database from which to generate a  .drdl  schema file. Specifies a collection from which to generate a  .drdl  schema file.\nIf you do not specify a collection, this option will use all collections in\nthe specified database or instance. Specifies the field name to add for a custom MongoDB filter. See\n Custom Filters  for more details. Default : Standard out. Specifies the path where  mongodrdl  will write the schema file. To\nsend the schema to standard output, specify \" - \" instead of\na path. Default : 1000 Specifies the number of documents to sample when generating the\ncollection's schema. Specify the encoding used to generate UUID binary subtype 3. Choose\none of the following values: old : Old BSON binary subtype representation csharp : The C#/.NET legacy UUID representation java : The Java legacy UUID representation Generate unwound tables including parent columns, resulting in a\n\"pre-joined\" table. Required . Specifies the string representation of the\n ObjectId  of the schema. Specifies the schema name. If you upload a custom schema, you must store it with its specified\nname, using  name-schema , and then specify\nthis name to the  mongosqld  with\n --schemaName .\nIf you don't store the schema's name when you upload it, the schema\nname defaults to  defaultSchema . If the schema's name doesn't exist,\nthis results in an error from  mongosqld  similar to the\nfollowing: MongoDB schema not yet available.\nError initializing schema: no schema found for name. Specifies the database where the schema information is stored. This\noption is not used by the  sample  command. Default : False Instructs  mongodrdl  to use TLS/SSL when connecting to a\nMongoDB instance. Specifies the MongoDB instance's  .pem  file containing the root\ncertificate chain from the Certificate Authority. Specify the file\nname of the  .pem  file using relative or absolute paths. For SSL connections ( --ssl ) to  mongod  and\n mongos , if the  mongodrdl  runs without the\n --sslCAFile ,  mongodrdl  will not attempt\nto validate the server certificates. This creates a vulnerability\nto expired  mongod  and  mongos  certificates as\nwell as to foreign processes posing as valid  mongod  or\n mongos  instances. Ensure that you  always  specify the\nCA file to validate the server certificates in cases where\nintrusion is a possibility. Specifies the  .pem  file containing both the TLS/SSL\ncertificate and key for  mongosqld  to use when\nconnecting to MongoDB. You can specify the file name of the\n .pem  file using either using a relative or absolute\npath. This option is required when using the  --ssl  option to\nconnect to a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Specifies the path to a file containing the certificate and private\nkey for connecting to MongoDB. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. Permits the MongoDB instance to present an invalid server SSL/TLS\ncertificate. When using the  allowInvalidCertificates \nsetting, MongoDB logs the use of the invalid certificate as a warning. Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongodrdl  to connect to MongoDB instances if the hostname their\ncertificates do not match the specified hostname. Directs the  mongodrdl  to use the FIPS mode of the installed OpenSSL\nlibrary. Your system must have a FIPS compliant OpenSSL library to use\nthe  --sslFIPSMode  option. Default : TLS1_1 Specifies the minimum required TLS version for\n mongodrdl  to connect to a  mongod  or\n mongos  instance. The default value  TLS1_1 \ncorresponds to TLS version 1.1. Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. Specifies the database in which the user is created.\nSee  Authentication Database . Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongodrdl  instance uses to\nauthenticate to the  mongod  or  mongos . Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA1\nhash function. SCRAM-SHA-256 New in version 2.6:   RFC 7677 \nstandard Salted Challenge Response Authentication Mechanism using\nthe SHA2 hash function. PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . Default : mongodb Service name to use when authenticating using GSSAPI/Kerberos. Default : remote server's address Hostname to use when authenticating using GSSAPI/Kerberos. BI Connector  uses a MongoDB  aggregation pipeline \nto perform queries against a MongoDB database.\nYou can add a special field to your schema to pass a custom\nMongoDB  $match \nquery string to your MongoDB instance. Use the  --customFilterField  option with  mongodrdl  to name\na custom filter field. This field passes a native MongoDB\n $match \nstage to use as the first stage of the aggregation pipeline,\nwhich filters any results returned from MongoDB.\nThe  BI Connector  applies this stage before any additional stages\npushed down from SQL. The query can refer to any field in the collection, even if the fields\nare not exposed in the relational schema. For an example of custom filter usage, see\n Custom Filter Example . Given documents of the following shape in the collection  abc  in the\ndatabase  test : Run  mongodrdl  to generate a schema based on this collection: The generated schema file ( schema.drdl ) looks similar to the following: To use this field, specify the  --customFilterField  flag with the name you\nwant this field to have: Your DRDL file  schema.drdl  will include the following field in every generated table: To add the special MongoDB query stage to your standard SQL, use the following\nSQL syntax: The  BI Connector  will translate the above SQL into the following MongoDB\n aggregation  expression: You can use this custom filter in any business intelligence tool by filtering\non your special field and providing the value to match as a single quoted string\nrepresenting valid  JSON . All quotes inside the JSON must be double\nquotes. If your MongoDB server is running with  authentication  enabled, you must specify a username,\npassword, and authentication database as options to your\n mongodrdl  command. To create a  .drdl  file from a\n mongod  instance with authentication\nenabled, use the following command format: MongoDB Atlas  is a cloud service\nfor running, monitoring, and maintaining MongoDB deployments, including\nthe provisioning of dedicated servers for MongoDB instances. If you are running the  BI Connector  locally and wish to create a\n .drdl  file from an Atlas database, use the\nfollowing command format: MongoDB Atlas now offers a hosted  BI Connector  and does not\nrequire a  .drdl  file. For more information on the\nAtlas-hosted  BI Connector , see  Connect via BI Connector for Atlas .",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongodrdl [<command>] [<options...>]"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl sample --db <db-name> --collection <collection-name> --out <filename>.drdl"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl list-schema-ids --schemaSource schemas"
                },
                {
                    "lang": "sh",
                    "value": "5d72ad695c23a9e3e26e3c85 2019-09-06T15:03:05.556Z\n5d72adea5c23a9e44882a1ad 2019-09-06T15:05:14.349Z"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl list-schema-names --schemaSource schemas"
                },
                {
                    "lang": "sh",
                    "value": "movies 5d72ad695c23a9e3e26e3c85\ntheaters 5d72adea5c23a9e44882a1ad"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl upload --schemaSource schemas --drdl ./movies.drdl"
                },
                {
                    "lang": "sh",
                    "value": "5d793f3f6a26a3ce66c304ea"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl name-schema --name movies --schemaSource schemas --schema 5d793f3f6a26a3ce66c304ea"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaSource <schema-db> --schemaName movies"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl download --schemaSource schemas --name movies"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl download --schemaSource schemas --name movies > ./movies.drdl"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl delete --schemaSource schemas --schema 5d7941dc6a26a3d0fc397284"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl name-schema --name movies --schemaSource schemas --schema 5d72adea5c23a9e44882a1ad"
                },
                {
                    "lang": "none",
                    "value": "<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"_id\": ObjectId(),\n    \"close\": 7.45,\n    \"detail\": { \"a\": 2, \"b\": 3 }\n}"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl -d test -c abc -o schema.drdl"
                },
                {
                    "lang": "yaml",
                    "value": "schema:\n- db: test\n  tables:\n  - table: abc\n    collection: abc\n    pipeline: []\n    columns:\n    - Name: _id\n      MongoType: bson.ObjectId\n      SqlName: _id\n      SqlType: varchar\n    - Name: close\n      MongoType: float64\n      SqlName: close\n      SqlType: numeric\n    - Name: detail.a\n      MongoType: float64\n      SqlName: detail.a\n      SqlType: numeric\n    - Name: detail.b\n      MongoType: float64\n      SqlName: detail.b\n      SqlType: numeric"
                },
                {
                    "lang": "sh",
                    "value": "mongodrdl [ other options ] --customFilterField _MONGOFILTER -o schema.drdl"
                },
                {
                    "lang": "yaml",
                    "value": "- Name: _MONGOFILTER\n  MongoType: mongo.Filter\n  SqlName: _MONGOFILTER\n  SqlType: varchar"
                },
                {
                    "lang": "sql",
                    "value": "SELECT <normal>\n  FROM <tablename>\n  WHERE <normal conditions> AND\n      _MONGOFILTER='{ <json string that represents query to use> }'\n\nSELECT name,age\n  FROM users\n  WHERE active='t' AND\n      _MONGOFILTER='{\"addr\":{\"$elemMatch\":{\"city\":\"Springfield\",\"state\":\"CA\"}}}'"
                },
                {
                    "lang": "javascript",
                    "value": "db.users.aggregate([\n   {$match:{\"addr\":{\"$elemMatch\":{\"city\":\"Springfield\",\"state\":\"CA\"}}},\n   {$match:{\"active\":true}},\n   {$project:{\"name\":1, \"age\":1}}\n]);"
                },
                {
                    "lang": "shell",
                    "value": "mongodrdl --host myhost.example.net:27017 \\\n          --username dbUser \\\n          --password myPassword \\\n          --db reports \\\n          --collection FY2017 \\\n          --authenticationDatabase admin \\\n          --out schema.drdl"
                },
                {
                    "lang": "shell",
                    "value": "mongodrdl --host <domain0>.mongodb.net:27017,<domain1>.mongodb.net:27017,... \\\n          --username <username> \\\n          --password <password> \\\n          --ssl \\\n          --authenticationDatabase admin \\\n          --db <database> \\\n          --out schema.drdl"
                }
            ],
            "preview": "The mongodrdl command reference page.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/qlik",
            "title": "Connect from Qlik Sense",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Start Qlik Sense",
                "Create a Connection to a MongoDB Database Using BI Connector"
            ],
            "paragraphs": "This tutorial demonstrates how to connect to  MongoDB Connector for BI  using\n Qlik Sense . Create a 64-bit  system Data Source Name (DSN) . Start the Qlik Sense desktop application. Click  Create a New App Give your app a name and open it. Click  Add Data . Select  ODBC  from the list of data sources. In the  Create New Connection  window, select the\nODBC data source you created in Step 1. The username and password values you specified in your DSN\noverride any values you enter in this dialog window, so you\ncan leave those fields blank. The database and tables listed in your  schema file  should appear in your app's overview.",
            "code": [],
            "preview": "This tutorial demonstrates how to connect to MongoDB Connector for BI using\nQlik Sense.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/mysql",
            "title": "Connect from the MySQL Client",
            "headings": [
                "Connect from MySQL without Authentication or TLS/SSL",
                "32-bit Windows",
                "64-bit Windows",
                "Connect from MySQL with Authentication",
                "32-bit Windows",
                "64-bit Windows",
                "Connect from MySQL with Authentication and TLS/SSL",
                "32-bit Windows",
                "64-bit Windows"
            ],
            "paragraphs": "You can use the command-line MySQL client to connect to the  MongoDB Connector for BI . To connect to a  mongosqld  instance listening on the MySQL\ndefault port  3307 , run the following command: Install the C Authentication Plugin as described in\n C Authentication Plugin . The following example uses the C authentication plugin to\nconnect to a  mongosqld  instance listening on port\n 3307  as user  reportsUser . The MySQL shell prompts for the\npassword after the command has been entered. For additional options, see the\n MySQL Commands . The C Authentication plugin was developed against MySQL 5.7.X\nCommunity Edition (64-bit), and tested with MySQL 5.7.X\nCommunity Edition and the latest version of MongoDB Connector for BI.\n The plugin is not compatible with MySQL Server or Connector/ODBC\ndriver version 8 and later. This example assumes that the authentication plugin file\n mongosql_auth.so  is located in the default MySQL plugin\nfolder: Platform Default Location 32-bit Windows C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\lib\\plugin 64-bit Windows C:\\Program Files\\MySQL\\MySQL Server 5.7\\lib\\plugin This example assumes that the authentication plugin file\n mongosql_auth.so  is located in the default MySQL plugin folder.\nThe location of the plugin folder varies by platform, but you can\nlocate it by running the following command: mysql_config.pl  can find the plugin directory only on macOS and\nLinux hosts. This example assumes that the authentication plugin file\n mongosql_auth.so  is located in the default MySQL plugin folder.\nThe location of the plugin folder varies by platform, but you can\nlocate it by running the following command: mysql_config.pl  can find the plugin directory only on macOS and\nLinux hosts. To connect to a  mongosqld  instance listening on port  3307 ,\nas user  grace  using authentication mechanism  PLAIN , and using\nspecific TLS/SSL CA and x.509 certificates, run the following command: If using the  $external  authentication source, wrap your username in\nsingle quotes or escape the  $  character with a backslash to prevent\nyour shell from performing interpolation. Authentication requires your client to send your password in plain\ntext. To send the password in plain text, either: For additional options, see the\n MySQL Commands . See the\n MySQL documentation \nfor additional details on enabling the MySQL cleartext plugin. The  binary distribution of MySQL Community \nuses the  yaSSL \n SSL (Secure Sockets Layer)  library to encrypt connections.\nMySQL Enterprise uses  OpenSSL  which is\ncompatible with  MongoDB Connector for BI . Use MySQL Enterprise to connect to  BI Connector \nover  TLS (Transport Layer Security)  /\n SSL (Secure Sockets Layer) . Use the  --enable-cleartext-plugin  option shown in the\nprevious example, or Set the environment variable  LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN=1 .",
            "code": [
                {
                    "lang": "bat",
                    "value": "\"C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --protocol tcp --port 3307"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --protocol tcp --port 3307"
                },
                {
                    "lang": "sh",
                    "value": "mysql --protocol tcp --port 3307"
                },
                {
                    "lang": "sh",
                    "value": "mysql --protocol tcp --port 3307"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --user='reportsUser?source=admin' ^\n  --default-auth=mongosql_auth -p"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --user='reportsUser?source=admin' ^\n  --default-auth=mongosql_auth -p"
                },
                {
                    "lang": "sh",
                    "value": "mysql --user='reportsUser?source=admin' --default-auth=mongosql_auth -p"
                },
                {
                    "lang": "sh",
                    "value": "mysql_config --plugindir"
                },
                {
                    "lang": "sh",
                    "value": "mysql --user='reportsUser?source=admin' --default-auth=mongosql_auth -p"
                },
                {
                    "lang": "sh",
                    "value": "mysql_config --plugindir"
                },
                {
                    "lang": "bat",
                    "value": "\"C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --enable-cleartext-plugin --protocol tcp --port 3307 ^\n  --user='grace?mechanism=PLAIN&source=$external' ^\n  --ssl-ca=X:\\path_to_the_CAcert\\ca.crt ^\n  --ssl-key=X:\\path_to_my_certificate_key\\mysql.key ^\n  --ssl-cert=X:\\path_to_my_client_certificate\\mysql.crt ^\n  -p"
                },
                {
                    "lang": "ps1",
                    "value": "\"C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe\" ^\n  --enable-cleartext-plugin --protocol tcp --port 3307 ^\n  --user='grace?mechanism=PLAIN&source=$external' ^\n  --ssl-ca=X:\\path_to_the_CAcert\\ca.crt ^\n  --ssl-key=X:\\path_to_my_certificate_key\\mysql.key ^\n  --ssl-cert=X:\\path_to_my_client_certificate\\mysql.crt ^\n  -p"
                },
                {
                    "lang": "sh",
                    "value": "mysql --enable-cleartext-plugin --protocol tcp --port 3307 \\\n  --user='grace?mechanism=PLAIN&source=$external' \\\n  --ssl-ca=/path_to_the_CAcert/ca.crt \\\n  --ssl-key=/path_to_my_certificate_key/mysql.key \\\n  --ssl-cert=/path_to_my_client_certificate/mysql.crt \\\n  -p"
                },
                {
                    "lang": "sh",
                    "value": "mysql --enable-cleartext-plugin --protocol tcp --port 3307 \\\n  --user='grace?mechanism=PLAIN&source=$external' \\\n  --ssl-ca=/path_to_the_CAcert/ca.crt \\\n  --ssl-key=/path_to_my_certificate_key/mysql.key \\\n  --ssl-cert=/path_to_my_client_certificate/mysql.crt \\\n  -p"
                }
            ],
            "preview": "You can use the command-line MySQL client to connect to the MongoDB Connector for BI.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/spotfire-cloud",
            "title": "Connect from Spotfire Cloud",
            "headings": [
                "Prerequisites",
                "Connect from Spotfire Cloud",
                "Start the Spotfire Application",
                "Add Data Connection",
                "Specify Tables and Columns"
            ],
            "paragraphs": "This tutorial demonstrates how to connect to  MongoDB Connector for BI  using\n Spotfire Cloud . Create a 64-bit  system Data Source Name (DSN) . From the  File  menu, select the  Add Data\nTables  item. In the  Add Data Tables  dialog, click the\n Add  dropdown menu in the upper right corner.\nSelect  Database  at the bottom of the menu. In the  Open Database  dialog, select\n Odbc Data Provider , then click\n Configure . In the  Configure Data Source Connection  dialog,\nselect your  DSN (Data Source Name)  from the dropdown menu\nlabelled  System or user data source . Fill in your MongoDB username and password and click\n OK . The  Open Database  dialog should now display a\nconnection string for your DSN. Click  OK . You are now ready to add visualizations and analyze your data. Select the data you would like to work with from the available\nfields. Give this data connection a name in the  Data source\nname  text box. The name you use here is only for the Spotfire application's\nuse. It does not change the name of your ODBC System DSN. Click  OK . The  Add Data Tables  dialog should now list your\nconnection as ready for import. Click  OK .",
            "code": [],
            "preview": "This tutorial demonstrates how to connect to MongoDB Connector for BI using\nSpotfire Cloud.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/microstrategy",
            "title": "Connect from MicroStrategy Desktop",
            "headings": [
                "Procedure",
                "Prerequisites",
                "Start MicroStrategy.",
                "Select New Dossier from the File menu to create a new dossier.",
                "Add new data.",
                "Add a data source.",
                "Build the visualization which suits your needs.",
                "Select a Data Access mode.",
                "Prerequisites",
                "Start MicroStrategy.",
                "Select New Dossier from the File menu to create a new dossier.",
                "Add new data.",
                "Add a data source.",
                "Select a Data Access mode.",
                "Build the visualization which suits your needs."
            ],
            "paragraphs": "You can use  MicroStrategy Desktop  to analyze a MongoDB\ndatabase through the  MongoDB Connector for BI . This tutorial is for version MicroStrategy Desktop version 10.11. Create a 64-bit  system Data Source Name (DSN) . Install the  MongoDB BI Connector ODBC Driver  for Windows. Make sure you have a running  mongosqld \ninstance. For instructions on starting and running\n mongosqld , see  Launch BI Connector . Start the MicroStrategy Desktop application by double-clicking on the\napplication icon. Click the  New Data  button in the  Datasets \npanel. Click the  Databases  icon in the  Data\nSources  window. Select  Select Tables  from the popup window and\nclick  Next . Click the plus icon next to the  Data Sources  text in\nthe upper left corner of the window. Select the  DSN Data Sources  radio button. Select your DSN from the  DSN  dropdown menu. Select  MongoDB BI Connector  from the\n Version  dropdown menu. Enter your  mongosqld  username and password. If you are running  mongosqld  without authentication\nenabled, you still need to enter something in the\nusername and password fields. Any string will do. Give the data source a name. Click  OK . Click on your newly created data source in the  Data\nSources  panel. Your MongoDB databases should appear in the\ncenter panel. Select the database you'd like to work with. The database's\ncollections should appear. Drag the collections you'd like to work with to the right side\npanel. Click the  Finish  button. See the\n MicroStrategy documentation \nfor more information about data visualizations. Select a data access mode that is appropriate for your situation. Download the MongoDB  Authentication Plugin for JDBC . Save the  .jar  file in\na folder called  jdbc . Download the MySQL  Connector/J plugin .\nSave the  .jar  file in your  jdbc  folder. Make sure you have a running  mongosqld \ninstance. For instructions on starting and running\n mongosqld , see  Launch BI Connector . Use the 5.x version of Connector/J. The 8.x version is\nnot compatible. Start the MicroStrategy Desktop application by double-clicking on the\napplication icon. Click the  New Data  button in the  Datasets \npanel. Click the  Databases  icon in the  Data\nSources  window. Select  Select Tables  from the popup window and\nclick  Next . Click the plus icon next to the  Data Sources  text in\nthe upper left corner of the window. Check the checkbox marked \"Show databases whose certified drivers\nwere not found\". Select  MySQL  from the  Databases  dropdown\nmenu. Click the  Add driver  link and navigate to the  jdbc \nfolder where your  .jar  files are stored. Select the\nMySQL  .jar  file. Enter your  mongosqld  host name and port number. Click the  Show connection string  link. Check the checkbox marked \"Edit connection string\". Use the following connection string. Replace the placeholder\nvalues with the correct values. Enter your  mongosqld  username and password. If you are running  mongosqld  without authentication\nenabled, you still need to enter something in the\nusername and password fields. Any string will do. Give the data source a name. Click  OK . Click on your newly created data source in the  Data\nSources  panel. Your MongoDB databases should appear in the\ncenter panel. Select the database you'd like to work with. The database's\ncollections should appear. Drag the collections you'd like to work with to the right side\npanel. Click the  Finish  button. Select a data access mode that is appropriate for your situation. See the\n MicroStrategy documentation \nfor more information about data visualizations.",
            "code": [
                {
                    "lang": "none",
                    "value": "JDBC;DRIVER={com.mysql.jdbc.Driver};URL={jdbc:mysql://<hostname>:<port number>?useSSL=false&authenticationPlugins=org.mongodb.mongosql.auth.plugin.MongoSqlAuthenticationPlugin};MSTR_JDBC_JAR_FOLDER=<path-to-jar-files>;"
                }
            ],
            "preview": "You can use MicroStrategy Desktop to analyze a MongoDB\ndatabase through the MongoDB Connector for BI.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/tableau-auth-ssl",
            "title": "Connect from Tableau Desktop with Authentication and TLS/SSL",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Start the Microsoft ODBC Data Sources program.",
                "Select the System DSN tab.",
                "Click the Add button.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Fill in the necessary form fields.",
                "Provide connection information.",
                "Fill in the SSL form fields.",
                "Click the Test button to test the ODBC connection.",
                "Start Tableau.",
                "Connect using Tableau.",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Launch ODBC Manager.",
                "Click System DSN, then click Add.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Enter a Data Source Name (DSN).",
                "Add the necessary keywords.",
                "Add the authentication keywords.",
                "Add the SSL keywords.",
                "Click OK to finish creating the DSN.",
                "Start Tableau.",
                "Connect using Tableau."
            ],
            "paragraphs": "Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.3 or later A running  mongod  instance A running  mongosqld  instance Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.4 or later A running  mongod  instance A running  mongosqld  instance The connect Tableau to the  MongoDB Connector for BI  using\n TLS (Transport Layer Security) / SSL (Secure Sockets Layer) : Download the  MongoDB BI Connector ODBC Driver  and run the Windows installer ( .msi ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: Choose the program version (64-bit or 32-bit) which is\nappropriate for your system and ODBC driver version. Select either the  MongoDB ODBC ANSI Driver  or the\n MongoDB ODBC Unicode Driver , then click\n OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Click the  Details  button to expose the lower half of the form. The following form fields are required: Field Name Description Data Source Name A name of your choice. TCP/IP Server Address of the server where your\n mongosqld  process is running. If you have enabled\n BI Connector  on  MongoDB Atlas , you can find the\nhostname of the server where  mongosqld  is running\nin the  connection information \nfor your cluster. Port Port number of your  mongosqld \nprocess. Database The name of the database to connect to, e.g.  test . The following fields are required when running with\n --auth  enabled or when connecting to an\nBI Connector for Atlas instance. Field Name Description User Username of the  MongoDB user \nwho is authenticated to use your target database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: Password The authenticated user's password. Authentication The default authentication method. When using the\n MongoDB BI Connector ODBC Driver , this field is not required. To use the  authentication plugin  in conjunction with\nanother ODBC driver, fill in this field with the\nstring  mongosql_auth . Access the TLS/SSL form fields by clicking  Details >> ,\nthen the  SSL  tab. The following parameters are available\nand may be required, depending on your\n TLS/SSL  configuration: Field Name Description SSL Key The location of the client/server key file. SSL Cert The location of the client/server certificate file. SSL CA File The location of the file containing a list of trusted\ncertificate authorities. SSL Cipher The location of the file containing a list of permitted\nciphers. SSL Mode Set to  REQUIRED  to require an encrypted channel. If an\nencyrpted channel is not provided, the connection fails. RSA Public Key The location of the PEM file that contains the RSA public key. The  BI Connector for Atlas  uses TLS/SSL but does not require any TLS/SSL\nsettings to be configured in your system DSN. If the connection is successful, click  OK  to add the\n DSN (Data Source Name) . If the connection fails,\ncheck to make sure your MongoDB user is correctly authenticated for\nthe database named in the connection. Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In . Download the  MongoDB BI Connector ODBC Driver  and run the macOS installer ( .dmg ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: ODBC Manager is included with the  MongoDB BI Connector ODBC Driver . The 1.0.16 edition of ODBC Manager included with the  MongoDB BI Connector ODBC Driver \nis not compatible with macOS Catalina or later versions of macOS. If\nyou are on Catalina or a later version of macOS, download and install the\n latest version (1.0.19) of ODBC manager. Select either the  MongoDB ANSI ODBC  driver or the\n MongoDB Unicode ODBC  driver, then click  OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Optionally enter a  Description . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value SERVER The hostname or IP address of the  MongoDB Connector for BI  host. Use  127.0.0.1  to connect via TCP to localhost.\nSpecifying a value other than an IP address, will attempt to\nconnect via Unix socket. PORT The  IANA (Internet Assigned Numbers Authority) \n port number \nfor the  MongoDB Connector for BI . The default is  3307 . DATABASE The database to use after connecting. Required when connecting with Microsoft Excel. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value UID The username for the user that can access the active\n MongoDB Connector for BI  database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: PWD The password associated with the  UID . For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Using the procedure above, add the following keywords depending on\nyour TLS/SSL configuration: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. The  BI Connector for Atlas  uses TLS/SSL but does not require any TLS/SSL\nsettings to be configured in your system DSN. Keyword Value SSLKEY The path to the .pem key file. SSLCERT The path to the SSL certificate. SSLMODE Set to  REQUIRED . SSLCA The path to the SSL certificate authority file. SSLCIPHER The path to the file containing a list of permitted\nciphers. RSAKEY The path to the PEM file containing the RSA public key. ENABLE_CLEARTEXT_PLUGIN Set to  1  to enable cleartext authentication. If you are connecting with Microsoft Excel, certificates must be\nlocated in the  /Library/ODBC/  directory. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In .",
            "code": [
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                }
            ],
            "preview": "The connect Tableau to the MongoDB Connector for BI using\nTLS (Transport Layer Security)/SSL (Secure Sockets Layer):",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/looker",
            "title": "Connect from Looker",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Add whitelist entries to Atlas for Looker.",
                "Connect Looker to your Atlas cluster."
            ],
            "paragraphs": "You can import data from a MongoDB collection into the Looker BI Platform\nwith the  MongoDB Connector for BI . You do not need an ODBC data connection or\na System DSN. Connecting the Looker BI Platform to the  MongoDB Connector for Business Intelligence for MongoDB Atlas  requires the\nfollowing: M10  or larger Atlas cluster with the  BI Connector  enabled Looker  account Add whitelist entries \nto your Atlas cluster for all of  Looker's IP addresses . Log in to Looker. Click  Admin , then click  Connections. Click  New Connection . Enter the required settings in the  Connection Settings \nmodal. See  Connecting Looker to Your Database \nfor more information. For example: Select  MongoBI  from  Dialect . You can find\nthe other required settings in the Atlas  Connect  modal.\nSee  Connect via BI Connector for Atlas \nfor more information.",
            "code": [],
            "preview": "You can import data from a MongoDB collection into the Looker BI Platform\nwith the MongoDB Connector for BI. You do not need an ODBC data connection or\na System DSN.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/tableau-auth",
            "title": "Connect from Tableau Desktop with Authentication",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Start the Microsoft ODBC Data Sources program.",
                "Select the System DSN tab.",
                "Click the Add button.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Fill in the necessary form fields.",
                "Provide connection information.",
                "Click the Test button to test the ODBC connection.",
                "Start Tableau.",
                "Connect using Tableau.",
                "Download and install the MongoDB BI Connector ODBC Driver.",
                "Create a system DSN.",
                "Launch ODBC Manager.",
                "Click System DSN, then click Add.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Enter a Data Source Name (DSN).",
                "Add the necessary keywords.",
                "Add the authentication keywords.",
                "Click OK to finish creating the DSN.",
                "Start Tableau.",
                "Connect using Tableau."
            ],
            "paragraphs": "Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.3 or later A running  mongod \ninstance or\n Atlas deployment A running  mongosqld  instance running with\nauthentication enabled using\n --auth , or the  BI Connector for Atlas \nenabled. Connecting Tableau to the  MongoDB Connector for BI  requires\nthe following: Tableau version 10.4 or later A running  mongod \ninstance or  Atlas deployment A running  mongosqld  instance running with\nauthentication enabled using\n --auth , or the\n BI Connector for Atlas  enabled. Download the  MongoDB BI Connector ODBC Driver  and run the Windows installer ( .msi ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: Choose the program version (64-bit or 32-bit) which is\nappropriate for your system and ODBC driver version. Select either the  MongoDB ODBC ANSI Driver  or the\n MongoDB ODBC Unicode Driver , then click\n OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Click the  Details  button to expose the lower half of the form. The following form fields are required: Field Name Description Data Source Name A name of your choice. TCP/IP Server Address of the server where your\n mongosqld  process is running. If you have enabled\n BI Connector  on  MongoDB Atlas , you can find the\nhostname of the server where  mongosqld  is running\nin the  connection information \nfor your cluster. Port Port number of your  mongosqld \nprocess. Database The name of the database to connect to, e.g.  test . The following fields are required when running with\n --auth  enabled or when connecting to an\nBI Connector for Atlas instance. Field Name Description User Username of the  MongoDB user \nwho is authenticated to use your target database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: Password The authenticated user's password. Authentication The default authentication method. When using the\n MongoDB BI Connector ODBC Driver , this field is not required. To use the  authentication plugin  in conjunction with\nanother ODBC driver, fill in this field with the\nstring  mongosql_auth . If the connection is successful, click  OK  to add the\n DSN (Data Source Name) . If the connection fails,\ncheck to make sure your MongoDB user is correctly authenticated for\nthe database named in the connection. Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In . Download the  MongoDB BI Connector ODBC Driver  and run the macOS installer ( .dmg ). To securely connect Tableau to the  BI Connector , a system\n DSN (Data Source Name)  configured to use the  MongoDB BI Connector ODBC Driver \nis required. To create a system DSN, follow the steps below: ODBC Manager is included with the  MongoDB BI Connector ODBC Driver . The 1.0.16 edition of ODBC Manager included with the  MongoDB BI Connector ODBC Driver \nis not compatible with macOS Catalina or later versions of macOS. If\nyou are on Catalina or a later version of macOS, download and install the\n latest version (1.0.19) of ODBC manager. Select either the  MongoDB ANSI ODBC  driver or the\n MongoDB Unicode ODBC  driver, then click  OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Optionally enter a  Description . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value SERVER The hostname or IP address of the  MongoDB Connector for BI  host. Use  127.0.0.1  to connect via TCP to localhost.\nSpecifying a value other than an IP address, will attempt to\nconnect via Unix socket. PORT The  IANA (Internet Assigned Numbers Authority) \n port number \nfor the  MongoDB Connector for BI . The default is  3307 . DATABASE The database to use after connecting. Required when connecting with Microsoft Excel. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value UID The username for the user that can access the active\n MongoDB Connector for BI  database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: PWD The password associated with the  UID . For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Start the Tableau Desktop application or restart it if it is\nalready running. In the left-side navigation under  To a server , click\non  More...  then click\n Other Databases (ODBC) . From the  Other Databases (ODBC)  dialog box, select your\nDSN from the dropdown and click  Connect . Once the connection test completes, click  Sign In .",
            "code": [
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                }
            ],
            "preview": "Download the MongoDB BI Connector ODBC Driver and run the Windows installer (.msi).",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "connect/excel",
            "title": "Connect from Microsoft Excel",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Start Excel",
                "Select the Data Tab",
                "Open a Data Connection Wizard Dialog",
                "Select ODBC DSN",
                "Select Your DSN",
                "Select a Database and Table",
                "Save the Connection File",
                "Specify Worksheet Format",
                "Start Excel",
                "Open the iODBC Data Source Chooser dialog",
                "Select Your DSN",
                "Enter Credentials",
                "Select a Table",
                "Import the Data"
            ],
            "paragraphs": "You can import data from a MongoDB collection into a Microsoft Excel\nspreadsheet with the  MongoDB Connector for BI  and\nan ODBC data connection. To connect Excel to the  MongoDB Connector for BI , you must first create a system\n Data Source Name (DSN) . Connecting Excel to the  MongoDB Connector for BI  requires the following: 64-bit version of Excel. Run the following command to\ndetermine whether the 64-bit or 32-bit version of Excel is\ninstalled: The following table lists the possible outputs of the\ncommand above and their respective meanings: For information on upgrading to the 64-bit version of Excel,\nsee  Microsoft Support . Return Value Meaning 64-bit binary 32-bit binary FAT binary (compatible with both 32-bit and 64-bit processes) Install  iODBC . Both the 64-bit and 32-bit versions of iODBC are\nincluded with the installer. If you use iODBC to test your\nDSN, you must use the 64-bit version of the application. iODBC is not recommended for creating or modifying your\n Data Source Name (DSN) .\nTo create or modify your DSN, use the ODBC Manager\napplication that is included with the  MongoDB BI Connector ODBC Driver . Create a  Data Source Name (DSN) . Excel requires the following settings in your\n Data Source Name (DSN) \nconfiguration: The  DATABASE  keyword must be specified in your DSN.\nIf the  DATABASE  keyword is not set, Excel will not\nrecognize any collections. TLS/SSL certificates must be stored in the\n /Library/ODBC/  directory. All TLS/SSL keywords in the\nDSN must point to the certificates in this directory. Before beginning this tutorial, make sure you have a running\n mongosqld  instance. Start Microsoft Excel and open a blank worksheet. Select the  Data  tab to open the Data toolbar. Click the  Get External Data  button on the left side of\nthe toolbar. Click  From Other Sources . Select the  From Data Connection Wizard  option. Select  ODBC DSN  from the list of data source options and\nclick  Next . Select the DSN which connects to your  BI Connector  instance and\nclick  Next . Select a database from the dropdown list and a collection from which\nto import data. Click  Next  when finished. Save the data connection file and click  Finish . If you\nwish to re-use this connection in the future, you can select it from\nthe  Data -> Get External Data -> Existing Connections \nmenu. In the final dialog window you can specify a format for your\nworksheet. Click  OK  when finished. Start Microsoft Excel and open a blank worksheet. Select the  Data  tab to open the Data toolbar. Click the  New Database Query  button on the left side of\nthe toolbar. If the  New Database Query  button is not displayed,\nclick  Get External Data , then\n New Database Query . Click  From Database . Click the  System DSN  tab. Select the  DSN (Data Source Name)  which connects to your\n BI Connector  instance. Click  OK . If you are running the  BI Connector  with authentication enabled, in\nthe ensuing dialog enter the  username  and\n password  used to connect to your  BI Connector  instance. If you are not running the  BI Connector  with authentication enabled,\nleave these fields blank. Click  Ok . When specifying a  username , include the authentication\ndatabase for the user. For example,  salesadmin?source=admin . In the left side of the dialog, click your server name to expand\nthe list collections in your database. Select the collection from the list from which contains the data\nyou want to import. To view your data before importing, click  Run  to run\nthe generated  SQL statement . Your data appears in the\ntable below the statement. Click  Return Data . Select how you would like to import the data into Excel. You can choose to import the data into: An  Existing Sheet , specifying in which cell to begin\nthe table. A  New Sheet , automatically beginning the table in\ncell  A1 . A  PivotTable  in a new sheet. Click  OK  to complete the import process. The following image shows the results of importing data from\nthe  supplySales  table into a new sheet: Excel for Mac may not properly display special characters,\nsuch as letters with accent marks.",
            "code": [
                {
                    "lang": "sh",
                    "value": "file -N /Applications/Microsoft\\ Excel.app/Contents/MacOS/Microsoft\\ Excel"
                },
                {
                    "lang": "none",
                    "value": "Mach-O 64-bit executable x86_64"
                },
                {
                    "lang": "none",
                    "value": "Mach-O executable i386"
                },
                {
                    "lang": "none",
                    "value": "Mach-O 64-bit executable x86_64\nMach-O executable i386"
                }
            ],
            "preview": "You can import data from a MongoDB collection into a Microsoft Excel\nspreadsheet with the MongoDB Connector for BI and\nan ODBC data connection.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/install-bi-connector-rhel",
            "title": "Install BI Connector on Red Hat Enterprise-based Linux",
            "headings": [
                "Prerequisites",
                "MongoDB User Permissions",
                "Install the BI Connector",
                "Download the MongoDB Connector for BI.",
                "Install the MongoDB Connector for BI.",
                "Launch the BI Connector"
            ],
            "paragraphs": "To set up  MongoDB Connector for BI  with a business intelligence tool such as Tableau,\nfollow the steps on this page. The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. To verify OpenSSL is installed on your system, run the following\ncommand: If OpenSSL is not installed, use your package manager to install it. OpenSSL installed on your host. If your MongoDB instance uses  authentication , your  BI Connector  instance must also use\nauthentication. The user that connects to MongoDB via the\n mongosqld  program must have permission to read from all\nthe namespaces you wish to sample data from. For more details about MongoDB user permissions in  BI Connector , see\n User Permissions for Cached Sampling . Download the  BI Connector  from the  MongoDB Download Center . Extract the downloaded  .tar  archive: Install the programs within the  bin/  directory into a\ndirectory listed in your system  PATH : If a prior version exists, overwrite the binaries. To help you get started, a sample  mongosqld \n configuration file  named\n example-mongosqld-config.yml  is included\nwith the installation package. To learn how to start  BI Connector \nwith a configuration file, refer to the  mongosqld \ndocumentation section on the  Configuration File . You are now ready to launch the  BI Connector .  The following guide\ncontains detailed information on  BI Connector  configuration, schema\ngeneration, and launch options: Launch BI Connector",
            "code": [
                {
                    "lang": "sh",
                    "value": "rpm -qa | grep -i openssl"
                },
                {
                    "lang": "sh",
                    "value": "tar -xvzf mongodb-bi-linux-{arch}-{platform}-{version}.tgz"
                },
                {
                    "lang": "sh",
                    "value": "sudo install -m755 bin/mongo* /usr/bin/"
                }
            ],
            "preview": "To set up MongoDB Connector for BI with a business intelligence tool such as Tableau,\nfollow the steps on this page.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/install-bi-connector-windows",
            "title": "Install BI Connector on Windows",
            "headings": [
                "Prerequisites",
                "MongoDB User Permissions",
                "Install the BI Connector",
                "Download the MongoDB Connector for BI.",
                "Install the MongoDB Connector for BI.",
                "Launch the BI Connector"
            ],
            "paragraphs": "To set up  MongoDB Connector for BI  with a business intelligence tool such as Tableau,\nfollow the steps on this page. The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. Visual C++ Redistributable for Visual Studio 2015 \ninstalled on your host. If your MongoDB instance uses  authentication , your  BI Connector  instance must also use\nauthentication. The user that connects to MongoDB via the\n mongosqld  program must have permission to read from all\nthe namespaces you wish to sample data from. For more details about MongoDB user permissions in  BI Connector , see\n User Permissions for Cached Sampling . Download the  BI Connector  from the  MongoDB Download Center . Run the downloaded  .msi  file. Follow the wizard instructions to install the files. The binaries\ninstall into a  bin  directory inside the installation\ndirectory. If a prior version exists, you might need to configure your system\nservices to launch the new installation. You can delete the old\nbinaries. To help you get started, a sample  mongosqld \n configuration file  named\n example-mongosqld-config.yml  is included\nwith the installation package. To learn how to start  BI Connector \nwith a configuration file, refer to the  mongosqld \ndocumentation section on the  Configuration File . You are now ready to launch the  BI Connector .  The following guide\ncontains detailed information on  BI Connector  configuration, schema\ngeneration, and launch options: Launch BI Connector",
            "code": [],
            "preview": "To set up MongoDB Connector for BI with a business intelligence tool such as Tableau,\nfollow the steps on this page.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/create-system-dsn",
            "title": "Create a System DSN",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Start the Microsoft ODBC Data Sources program.",
                "Select the System DSN tab.",
                "Click the Add button.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Fill in the necessary form fields.",
                "(Optional) If authentication is enabled, provide connection information.",
                "(Optional) If TLS/SSL is enabled, fill in the TLS/SSL form fields.",
                "Click the Test button to test the ODBC connection.",
                "Launch ODBC Manager.",
                "Click System DSN, then click Add.",
                "Select a MongoDB BI Connector ODBC Driver from the list of available drivers.",
                "Enter a Data Source Name (DSN).",
                "Add the necessary keywords.",
                "(Optional) If authentication is enabled, add the authentication keywords.",
                "(Optional) If TLS/SSL is enabled, add the TLS/SSL keywords.",
                "Click OK to finish creating the DSN.",
                "Check the location of your .so files",
                "Create an odbc.ini file",
                "Install unixODBC",
                "Test with iusql"
            ],
            "paragraphs": "The following steps describe how to create a system Data Source\nName (DSN) for the BI Connector's  mongosqld \nprocess. A DSN is a saved configuration which\ndescribes a database connection to be\nused by an  ODBC (Open Database Connectivity)  driver.\nOnce the DSN is created for the  BI Connector , you can configure a wide\nrange of SQL clients and BI tools to use the DSN and import\ndata from MongoDB. Before creating a  DSN (Data Source Name) , you should: Install the BI Connector  and\nconfigure it to connect to your replica set. This prerequisite doesn't apply if you are using BI Connector for Atlas. Download and install  Visual C++ Redistributable for Visual Studio\n2015 . Download and install the  MongoDB BI Connector ODBC Driver . Install the BI Connector  and configure it to connect to your replica set. This prerequisite doesn't apply if you are using BI Connector for Atlas. Download and install the  MongoDB BI Connector ODBC Driver . Install the BI Connector on\n Red Hat Enterprise-based Linux \nor  Debian-based Linux  and\nconfigure it to connect to your replica set. This prerequisite doesn't apply if you are using BI Connector for Atlas. Download and extract the  MongoDB BI Connector ODBC Driver  for your platform. Choose the program version (64-bit or 32-bit) which is\nappropriate for your system and ODBC driver version. Select either the  MongoDB ODBC ANSI Driver  or the\n MongoDB ODBC Unicode Driver , then click\n OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Click the  Details  button to expose the lower half of the form. The following form fields are required: Field Name Description Data Source Name A name of your choice. TCP/IP Server Address of the server where your\n mongosqld  process is running. If you have enabled\n BI Connector  on  MongoDB Atlas , you can find the\nhostname of the server where  mongosqld  is running\nin the  connection information \nfor your cluster. Port Port number of your  mongosqld \nprocess. Database The name of the database to connect to, e.g.  test . The following fields are required when running with\n --auth  enabled or when connecting to an\nBI Connector for Atlas instance. Field Name Description User Username of the  MongoDB user \nwho is authenticated to use your target database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: Password The authenticated user's password. Authentication The default authentication method. When using the\n MongoDB BI Connector ODBC Driver , this field is not required. To use the  authentication plugin  in conjunction with\nanother ODBC driver, fill in this field with the\nstring  mongosql_auth . Access the TLS/SSL form fields by clicking  Details >> ,\nthen the  SSL  tab. The following parameters are available\nand may be required, depending on your\n TLS/SSL  configuration: Field Name Description SSL Key The location of the client/server key file. SSL Cert The location of the client/server certificate file. SSL CA File The location of the file containing a list of trusted\ncertificate authorities. SSL Cipher The location of the file containing a list of permitted\nciphers. SSL Mode Set to  REQUIRED  to require an encrypted channel. If an\nencyrpted channel is not provided, the connection fails. RSA Public Key The location of the PEM file that contains the RSA public key. The  BI Connector for Atlas  uses TLS/SSL but does not require any TLS/SSL\nsettings to be configured in your system DSN. If the connection is successful, click  OK  to add the\n DSN (Data Source Name) . If the connection fails,\ncheck to make sure your MongoDB user is correctly authenticated for\nthe database named in the connection. ODBC Manager is included with the  MongoDB BI Connector ODBC Driver . The 1.0.16 edition of ODBC Manager included with the  MongoDB BI Connector ODBC Driver \nis not compatible with macOS Catalina or later versions of macOS. If\nyou are on Catalina or a later version of macOS, download and install the\n latest version (1.0.19) of ODBC manager. Select either the  MongoDB ANSI ODBC  driver or the\n MongoDB Unicode ODBC  driver, then click  OK . The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. Optionally enter a  Description . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value SERVER The hostname or IP address of the  MongoDB Connector for BI  host. Use  127.0.0.1  to connect via TCP to localhost.\nSpecifying a value other than an IP address, will attempt to\nconnect via Unix socket. PORT The  IANA (Internet Assigned Numbers Authority) \n port number \nfor the  MongoDB Connector for BI . The default is  3307 . DATABASE The database to use after connecting. Required when connecting with Microsoft Excel. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Do not close the setup window. Proceed to the next step. Using the procedure above, add the following keywords: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. Keyword Value UID The username for the user that can access the active\n MongoDB Connector for BI  database. You can specify the following authentication options after your\nusername as URI-style query parameters: Connection Option Description source Specify the name of the database which stores the user's\ncredentials. If you do not specify this option, the  MongoDB Connector for BI  will\ndefault to the current database associated with the MySQL\nconnection. For authentication mechanisms such as  PLAIN  (LDAP) or\n GSSAPI  (Kerberos) that delegate credential storage to other\nservices, set the  source  value to  $external . Not required if  defaultSource  is set in your\n MongoDB Connector for BI   configuration file . mechanism Specify the mechanism that the  MongoDB Connector for BI  should use to\nauthenticate the connection. Accepted values include: LDAP and Kerberos require  MongoDB Enterprise .\nSet the source to  $external  when using LDAP or Kerberos. Not required if  defaultMechanism  is set in your\n MongoDB Connector for BI   configuration file . SCRAM-SHA-1  (default) SCRAM-SHA-256 PLAIN  (LDAP SASL) GSSAPI  (Kerberos) To authenticate as user  grace  using the  admin \ndatabase and the Challenge and\nResponse ( SCRAM-SHA-1 ) authentication mechanism, write\nthe username in this format: To authenticate as user  grace  with the  LDAP (Lightweight Directory Access Protocol) \n( PLAIN ) authentication mechanism, write the\nusername in this format: For more information about Kerberos configuration, see\n Configure Kerberos for  BI Connector . To authenticate as user  grace  on the  EXAMPLE.COM \n Kerberos realm \nwith the Kerberos authentication mechanism, write the\nusername in this format: PWD The password associated with the  UID . For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . Using the procedure above, add the following keywords depending on\nyour TLS/SSL configuration: For example, your user DSN configuration should look similar to\nthe following: Add a keyword value pair by clicking the  Add  button. Modify the  Keyword  by double-clicking on it, entering\nthe desired keyword, then pressing enter. Modify the  Value  by double-clicking on it, entering the\ndesired keyword, then pressing enter. The  BI Connector for Atlas  uses TLS/SSL but does not require any TLS/SSL\nsettings to be configured in your system DSN. Keyword Value SSLKEY The path to the .pem key file. SSLCERT The path to the SSL certificate. SSLMODE Set to  REQUIRED . SSLCA The path to the SSL certificate authority file. SSLCIPHER The path to the file containing a list of permitted\nciphers. RSAKEY The path to the PEM file containing the RSA public key. ENABLE_CLEARTEXT_PLUGIN Set to  1  to enable cleartext authentication. If you are connecting with Microsoft Excel, certificates must be\nlocated in the  /Library/ODBC/  directory. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . The following procedure has been tested with Ubuntu and RHEL,\nand should work in a similar fashion with other Linux\ndistributions. The  MongoDB BI Connector ODBC Driver  files are named  libmdbodbca.so  and\n libmdbodbcw.so . After downloading the  MongoDB BI Connector ODBC Driver ,\nmove them to your  /usr/local/lib  directory. The file  /etc/odbc.ini  defines your Data Source Names. Below is\nan example  odbc.ini  file which is configured to use the\n MongoDB BI Connector ODBC Driver  with a DSN called  MongoDBODBC . Replace all\nnecessary placeholder values with values for your system. The file named  libmdbodbca.so  is the ANSI driver, and the\nfile named  libmdbodbcw.so  is the Unicode driver. Specify the\ndesired driver by setting the  Driver  parameter in your\n odbc.ini  file. The previous example contains only one DSN, but it is possible to\ninclude multiple DSNs in an  odbc.ini  file. The following table describes the parameters used in the previous\nexample. Your DSN is now ready to use. If you wish to test your DSN,\nproceed to step 3. The ANSI  ODBC (Open Database Connectivity)  driver offers maximum performance but has a\nlimited character set. The Unicode  ODBC (Open Database Connectivity)  driver supports a wider\ncharacter set but may be slightly less performant as a result. All  odbc.ini  parameters are case-insensitive. Parameter Description DESCRIPTION Optional. Text description of the DSN. DRIVER Path to  ODBC (Open Database Connectivity)  driver file. TRACE On  or  Off . Enable ODBC tracing. TRACEFILE If ODBC tracing is enabled, the path to the file in which to\nstore the trace output. READONLY yes  or  no . Enforce a read-only ODBC session. SERVER Address of the server where a  BI Connector \n mongosqld  instance is running. PORT Port number of the  mongosqld  instance. USER Username of the MongoDB user with permission to connect to\nthe  mongosqld  instance. PASSWORD Password of the MongoDB user with permission to connect to\nthe  mongosqld  instance. DATABASE Name of the MongoDB database to use. SSLKEY Full path to an SSL key file to use for establishing a secure\nconnection. SSLCERT Name of the SSL certificate file to use for establishing a\nsecure connection. SSLMODE Accepted values are: DISABLED PREFERRED REQUIRED SSLCA Full path to a file with a list of trust SSL Certificate\nAuthorities. SSLCAPATH Full path to a directory that contains trusted SSL CA\ncertificates in PEM format. SSLCIPHER Full path to the file containing a list of permitted\nciphers. RSAKEY Full path to the PEM file containing the RSA public key. ENABLE_CLEARTEXT_PLUGIN Set to  1  to enable cleartext authentication. For the complete list of ODBC parameters, see\n Connector/ODBC Connection Parameters . The  BI Connector for Atlas  uses TLS/SSL but does not require any TLS/SSL\nsettings to be configured in your system DSN. Install  unixODBC  with your preferred package manager. On Ubuntu: On RHEL: Alternatively, you can download binaries from the  unixODBC website . The  unixODBC  package includes an SQL client called  iusql . You\ncan use it to test your DSN. The following example uses  iusql  to connect to the\n MongoDBODBC  DSN, then looks for tables in a database named\n test :",
            "code": [
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace?source=admin"
                },
                {
                    "lang": "none",
                    "value": "grace?mechanism=PLAIN&source=$external"
                },
                {
                    "lang": "none",
                    "value": "grace@EXAMPLE.COM?mechanism=GSSAPI&source=$external"
                },
                {
                    "lang": "none",
                    "value": "[MongoDBODBC]\nDESCRIPTION = ODBC for MongoDB BI Connector\nDRIVER      = /usr/local/lib/libmdbodbcw.so\nTRACE       = Off\nTRACEFILE   = stderr\nREADONLY    = yes\nSERVER      = <server address>\nPORT        = <port number>\nUSER        = <username>\nPASSWORD    = <password>\nDATABASE    = <dbname>\n\n; optional SSL configuration\n\nSSLKEY      = </path/to/.pem-key-file>\nSSLCERT     = </path/to/ssl-certificate>\nSSLMODE     = DISABLED|PREFERRED|REQUIRED\nSSLCA       = </path/to/ssl-ca-list-file>\nSSLCAPATH   = </path/to/ssl-ca-file-directory>\nSSLCIPHER   = </path/to/ssl-cipher-file>\nRSAKEY      = </path/to/rsa-public-key-file>"
                },
                {
                    "lang": "shell",
                    "value": "sudo apt-get install unixodbc"
                },
                {
                    "lang": "shell",
                    "value": "sudo yum install unixODBC"
                },
                {
                    "lang": "shell",
                    "value": "iusql -v MongoDBODBC"
                },
                {
                    "lang": "shell",
                    "value": "SQL> use test;\n\nSQL> show tables;"
                }
            ],
            "preview": "The following steps describe how to create a system Data Source\nName (DSN) for the BI Connector's mongosqld\nprocess. A DSN is a saved configuration which\ndescribes a database connection to be\nused by an ODBC (Open Database Connectivity) driver.\nOnce the DSN is created for the BI Connector, you can configure a wide\nrange of SQL clients and BI tools to use the DSN and import\ndata from MongoDB.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/install-bi-connector-macos",
            "title": "Install BI Connector on macOS",
            "headings": [
                "Prerequisites",
                "MongoDB User Permissions",
                "Install the BI Connector",
                "Download the MongoDB Connector for BI.",
                "Install the MongoDB Connector for BI.",
                "Launch the BI Connector"
            ],
            "paragraphs": "To set up  MongoDB Connector for BI  with a business intelligence tool such as Tableau,\nfollow the steps on this page. The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. To install OpenSSL via Homebrew, run the following command: OpenSSL installed on your host. If your MongoDB instance uses  authentication , your  BI Connector  instance must also use\nauthentication. The user that connects to MongoDB via the\n mongosqld  program must have permission to read from all\nthe namespaces you wish to sample data from. For more details about MongoDB user permissions in  BI Connector , see\n User Permissions for Cached Sampling . Download the  BI Connector  from the  MongoDB Download Center . Extract the downloaded  .zip  archive. Replace {SOURCE-PATH} with\nthe path to the directory where you downloaded the  .zip \narchive. Replace {DESTINATION-PATH} with the path to the directory\nwhere you want to extract the archive. Change to the  mongodb-bi-osx-x86_64-{version}  directory.\nReplace {DESTINATION-PATH} with the path to the directory\nwhere you extracted the archive in the previous step. Install the programs within the  bin/  directory into a directory\nlisted in your system  PATH . If a prior version exists,\noverwrite the binaries. To help you get started, a sample  mongosqld \n configuration file  named\n example-mongosqld-config.yml  is included\nwith the installation package. To learn how to start  BI Connector \nwith a configuration file, refer to the  mongosqld \ndocumentation section on the  Configuration File . You are now ready to launch the  BI Connector .  The following guide\ncontains detailed information on  BI Connector  configuration, schema\ngeneration, and launch options: Launch BI Connector",
            "code": [
                {
                    "lang": "sh",
                    "value": "/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew update\nbrew install openssl"
                },
                {
                    "lang": "sh",
                    "value": "unzip {SOURCE-PATH}/mongodb-bi-osx-x86_64-{version}.zip -d {DESTINATION-PATH}"
                },
                {
                    "lang": "sh",
                    "value": "cd {DESTINATION-PATH}/mongodb-bi-osx-x86_64-{version}/"
                },
                {
                    "lang": "sh",
                    "value": "sudo install -m755 bin/mongo* /usr/local/bin/"
                }
            ],
            "preview": "To set up MongoDB Connector for BI with a business intelligence tool such as Tableau,\nfollow the steps on this page.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/kerberos",
            "title": "Configure Kerberos for BI Connector",
            "headings": [
                "Active Directory Configuration",
                "MongoDB Configuration",
                "BI Connector Configuration",
                "MongoDB Configuration",
                "BI Connector Configuration"
            ],
            "paragraphs": "The  MongoDB Connector for BI  supports Kerberos authentication for connecting BI tools and\nfor the  BI Connector 's admin user authenticating with MongoDB. The following section guides you through configuring the  BI Connector  to use Kerberos authentication with two of the most common use cases: If you have another use case, please contact  MongoDB Support  for assistance. Windows/Linux client machines authenticating to Active Directory macOS client machine authenticating to Linux  KDC (Key Distribution Center) The domain part of any username must be written\nin all capital letters. This part of the username\ncorresponds to a Kerberos realm or Active\nDirectory domain. It  is  case sensitive. Make sure you have a domain configured. Create a user  for MongoDB on the domain you created. Create a user   for MongoSQL on the domain you created. Register an  SPN (Service Principal Name)  for the MongoDB Service. Register an  SPN (Service Principal Name)  for the MongoSQL Service. Enable delegation for your MongoSQL Service user. Assuming this configuration: In Active Directory, you create three users: Create an  SPN (Service Principal Name)  for each service: Open the  Active Directory Administrative Center \nand double-click on your MongoDB service user\n( mongodb ). Set the  mongosql  user to delegate for the\n mongodb  user from the  BI.EXAMPLE.COM  host. Your name is  Grace Smith . Your Windows domain is named  EXAMPLE.COM . You are running your BI tool on a Windows host\nnamed  BI.EXAMPLE.COM . For MongoDB:  mongodb@EXAMPLE.COM For  BI Connector :  mongosql@EXAMPLE.COM For you:  grace.smith@EXAMPLE.COM The names can be anything you choose as long as you use\nthem consistently throughout this setup. If you are authenticating a user from a Linux host and\nthe schema user is using a keytab file instead of a\npassword, the following is required in addition to\ncreating the user in MongoDB: Creating a  UPN (User Principal Name)  for the schema user. Setting the  KRB5_CLIENT_KTNAME \nenvironment variable to this user's keytab. This  KRB5_CLIENT_KTNAME  must include the key for both the schema user and the  BI Connector  service user. Install MongoDB Enterprise \nand  start it as a service . Set the following options in the  configuration file : For more information, see\n net.bindIp ,\n setParameter ,\nand  authenticationMechanisms . Run  mongod  as the MongoDB Windows user you\ncreated in Active Directory. Create a user \non your MongoDB database with the\n appropriate roles \nto sample data. Install the  BI Connector as a service . Launch  mongosqld  as the MongoSQL Windows user you\ncreated in Active Directory. Add the following  BI Connector  authentication settings to your\n mongosqld  configuration file: For more information, see: security.gssapi.hostname  should match the\nvalue in  security.gssapi.serviceName . If you configured Active Directory to use\n constrained delegation ,\nadd  security.gssapi.constrainedDelegation \n : true  to the  mongosqld  config file or authentication fails. security.enabled security.defaultMechanism security.defaultSource security.gssapi.hostname security.gssapi.serviceName Add the following settings that the  BI Connector  will use to\nauthenticate with MongoDB: For more information, see: mongodb.net.uri mongodb.net.auth.username mongodb.net.auth.password mongodb.net.auth.source mongodb.net.auth.mechanism On  BI.EXAMPLE.COM : Your name is  Grace Smith . Your Windows domain is named  EXAMPLE.COM . You are running your BI tool on a Windows host\nnamed  BI.EXAMPLE.COM . Install MongoDB and  MongoDB Connector for BI  as services. Edit your  mongod.cfg  file to resemble: Log on to the  mongo  shell and create your\n BI Connector  user. Edit your  mongosqld.cfg  file to resemble: Open  Services . Set MongoDB to\n Log on as: This account: \n mongodb@EXAMPLE.COM Set  MongoDB Connector for BI  to\n Log on as: This account: \n mongosql@EXAMPLE.COM Start the MongoDB and  MongoDB Connector for BI  services. If you are authenticating a user from a Linux host and\nyour schema user is going to use a username and password,\nthe following is required: Setting  mongodb.net.auth.username  to the\nschema user's  UPN (User Principal Name) . Setting  mongodb.net.auth.password  to no\nvalue. To learn how to configure Active Directory to\nmanage your MongoDB instance, see\n Configure MongoDB with Kerberos Authentication and Active Directory Authorization . Make sure your  mongod  and\n mongos  instances are running\n MongoDB Enterprise . Configure your  mongod  and\n mongos  instances to use\n Kerberos (GSSAPI) authentication . Verify you set the following options the MongoDB\n configuration file : Create a keytab file  on the  KDC (Key Distribution Center)  that has the\nneeded Kerberos  service principals \nfor  mongosql  and  mongosql2 . Copy the  keytab  file you created for your MongoDB\ndeployment to the same host that serves the  BI Connector . If your keytab does not use the default name\n( krb5.keytab ), you must set the\n KRB5_KTNAME \nenvironment variable. The Kerberos implementation on macOS,\n Heimdal , does not support the\n default_keytab_name  configuration\nsetting, like MIT Kerberos does. You must set\nthe  KRB5_KTNAME  environment variable. If your Kerberos configuration file does not use\nthe default name ( krb5.conf ), you must set the\n KRB5_CONFIG \nenvironment variable. (Heimdal also supports\n this environment variable .) Add the following  BI Connector  authentication settings to your\n mongosqld  configuration file: For more information, see: security.gssapi.hostname  should match the value in  security.gssapi.serviceName . security.enabled security.defaultMechanism security.defaultSource security.gssapi.hostname security.gssapi.serviceName Add the following settings that the  BI Connector  will use to\nauthenticate with MongoDB: For more information, see: mongodb.net.uri mongodb.net.auth.username mongodb.net.auth.password mongodb.net.auth.source mongodb.net.auth.mechanism If you are testing Kerberos with a  mongosqld  running\non a  localhost , you must set\n net.unixDomainSocket.enabled  to\n true  in the  mongosqld \nconfiguration file.",
            "code": [
                {
                    "lang": "powershell",
                    "value": "setspn.exe -S mongodb/BI.EXAMPLE.COM mongodb\nsetspn.exe -S mongosql/BI.EXAMPLE.COM mongosql"
                },
                {
                    "lang": "yaml",
                    "value": "net:\n  bindIp: <fullHostnameOfBIConnector>\nsetParameter:\n  authenticationMechanisms: \"GSSAPI\""
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true\n  defaultMechanism: \"GSSAPI\"\n  defaultSource: \"$external\"\n  gssapi:\n    hostname: <host running mongosqld>\n    serviceName: <name of mongosqld service>"
                },
                {
                    "lang": "yaml",
                    "value": "mongodb:\n net:\n   uri: \"mongodb://<hostname and port of mongodb database>/\"\n   auth:\n     username: <database username>\n     password: <database password>\n     source: \"$external\"\n     mechanism: \"GSSAPI\""
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  destination: \"file\"\n  path: \"c:\\\\data\\\\log\\\\mongod.log\"\n  verbosity: 2\nstorage:\n  dbPath: \"c:\\\\data\\\\db\"\nnet:\n  bindIp: BI.EXAMPLE.COM\nsetParameter:\n  authenticationMechanisms: \"GSSAPI\""
                },
                {
                    "lang": "javascript",
                    "value": "db.getSiblingDB(\"$external\").createUser(\n  {\n    user: \"grace.smith@EXAMPLE.COM\",\n    roles: [ { role: \"readAnyDatabase\", db: \"admin\" } ]\n  }\n)"
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  path: \"c:\\\\data\\\\log\\\\mongosqld.log\"\n  logAppend: true\n  logRotate: \"reopen\"\n  verbosity: 3\nruntime:\n  memory:\n    maxPerStage: 102400\nnet:\n  bindIp: BI.EXAMPLE.COM\n  port: 3306\nsecurity:\n  enabled: true\n  defaultSource: \"$external\"\n  defaultMechanism: \"GSSAPI\"\n  gssapi:\n    hostname: \"BI.EXAMPLE.COM\"\n    serviceName: \"mongosql\"\nmongodb:\n  net:\n    uri: \"mongodb://BI.EXAMPLE.COM/\"\n    auth:\n      username: \"grace.smith@EXAMPLE.COM\"\n      password: \"abc123!\"\n      source: \"$external\"\n      mechanism: \"GSSAPI\"\nprocessManagement:\n  service:\n    displayName: \"MongoDB BI Connector\""
                },
                {
                    "lang": "yaml",
                    "value": "net:\n  bindIp: <fullHostnameOfBIConnector>\nsetParameter:\n  authenticationMechanisms: \"GSSAPI\""
                },
                {
                    "lang": "sh",
                    "value": "mongosql/<fullHostnameOfBIConnector>@<KERBEROS_REALM>"
                },
                {
                    "lang": "yaml",
                    "value": "security:\n  enabled: true\n  defaultMechanism: \"GSSAPI\"\n  defaultSource: \"$external\"\n  gssapi:\n    hostname: <host running mongosqld>\n    serviceName: <name of mongosqld service>"
                },
                {
                    "lang": "yaml",
                    "value": "mongodb:\n net:\n   uri: \"mongodb://<hostname and port of mongodb database>/\"\n   auth:\n     username: <database username>\n     password: <database password>\n     source: \"$external\"\n     mechanism: \"GSSAPI\""
                }
            ],
            "preview": "The MongoDB Connector for BI supports Kerberos authentication for connecting BI tools and\nfor the BI Connector's admin user authenticating with MongoDB.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/ssl-setup",
            "title": "Configure TLS for BI Connector",
            "headings": [
                "Prerequisites",
                "Note on Cluster Availability",
                "Create and Test Self-Signed Certificates",
                "Create a Certificates Directory.",
                "Generate a Self-Signed Certificate Authority.",
                "Generate a PEM Certificate for the MongoDB Server.",
                "Sign the MongoDB CSR.",
                "Create a PEM file for the MongoDB server.",
                "Update mongod configuration file.",
                "Restart your mongod server.",
                "Test your connection with the mongo shell.",
                "Create a key and a CSR (Certificate Signing Request) for BI Connector.",
                "Sign the BI Connector certificate.",
                "Create a BI Connector PEM file.",
                "Start mongosqld",
                "Test with an ODBC (Open Database Connectivity) DSN (Data Source Name).",
                "Create a Certificates Directory.",
                "Generate a Self-Signed Certificate Authority.",
                "Generate a PEM Certificate for the MongoDB Server.",
                "Sign the MongoDB CSR.",
                "Create a PEM file for the MongoDB server.",
                "Update mongod configuration file.",
                "Restart your mongod server.",
                "Test your connection with the mongo shell.",
                "Create a key and a CSR (Certificate Signing Request) for BI Connector.",
                "Sign the BI Connector certificate.",
                "Create a BI Connector PEM file.",
                "Start mongosqld.",
                "Test with the MySQL shell"
            ],
            "paragraphs": "For  BI Connector  to transmit data securely, you should enable Transport\nLayer Security (TLS) encryption on your MongoDB instance, your\n mongosqld  instance, and in your BI tool. A complete description of\n TLS (Transport Layer Security)  configuration is outside the scope of this document, but this\ntutorial outlines the process for creating your own  TLS (Transport Layer Security)  certificates\nfor testing purposes and starting the MongoDB components with  TLS (Transport Layer Security) \nenabled. Use these procedures for testing purposes only. Your production\nenvironment should use  TLS (Transport Layer Security)  certificates that a recognized\ncertificate authority (CA) has issued. A MongoDB user with sufficient permissions to run  mongosqld . A  mongod  instance which you can start and stop. A  mongosqld  instance which you can start and stop. OpenSSL The  MySQL shell User Permissions for Cached Sampling To ensure read availability for your MongoDB  replica sets  and  sharded clusters  while  BI Connector  enables  TLS (Transport Layer Security) , use a\n rolling upgrade procedure .\nWhile the replica set primary upgrades, applications must wait until\nafter failover and election cycle completes. Replica Set Availability This tutorial contains instructions on creating several files which\nallow a  mongosqld  process to accept OpenSSL encrypted connections\nfrom an  SQL (Structured Query Language)  client, such as the MySQL shell, and make an encrypted\nconnection with a  mongod  instance. We create two\n .pem files . Each file\ncontains an encryption key and a self-signed  TLS (Transport Layer Security)  certificate. Using the Windows  cmd  prompt, create a directory to hold\nyour certificates. This tutorial uses  C:\\opt\\certs . This tutorial assumes that your OpenSSL directory is at\n C:\\OpenSSL . If it is located somewhere else on your system,\neither edit the commands appropriately or move the directory to\n C:\\OpenSSL . If your  C:\\OpenSSL\\bin  directory does not contain a\nconfiguration file named  openssl.cfg , create one. This is an example configuration file. Set up an environment variable for later use. We now have two files: The  mdbca.crt  certificate authority file,\nand the  mdbprivate.key  key used to sign that request. Change directory to  C:\\opt\\certs . Start the OpenSSL application. The following command generates and outputs a private key to\n mdbprivate.key . The following command generates and outputs a certificate\nauthority file to  mdbca.crt . The following command prompts the user to enter several pieces of\ninformation which are incorporated into the certificate request.\nOne of the fields is called  Common Name , which is a Fully\nQualified Domain Name (FQDN). The  Common Name  entry for the\ncertificate generated in this step of the tutorial must be\ndifferent from the  Common Name  entry for the certificates\ngenerated in steps 3 and 9. The following command generates a key for the  mongod  process  TLS (Transport Layer Security) \nuse and a  CSR (Certificate Signing Request) . For this step, the  Common Name  response must be\nthe  FQDN (Fully Qualified Domain Name)  of the server where your  mongod  instance  TLS (Transport Layer Security)  such as\n www.example.com . Enter the following command at the OpenSSL prompt: Enter the following command at the OpenSSL prompt: A  .pem  file consists of a key and a certificate concatenated\ntogether. To create a  .pem  file for your MongoDB instance to use,\nexit the OpenSSL prompt and enter the following command at the\n cmd  prompt in the  C:\\opt\\certs  directory: You should now have the following files in your certificates\ndirectory: If any are missing, go back and review the previous steps, checking\nfor errors. To configure  mongod  to require  TLS (Transport Layer Security)  for incoming connections,\nmodify your configuration file as follows. Your values may vary,\ndepending on where you created your  TLS (Transport Layer Security)  files. If you prefer to start  mongod  with command-line options instead of a\nconfiguration file, see  mongosqld  for equivalent options. Option Value net.ssl.mode requireSSL net.ssl.PEMKeyFile C:\\opt\\certs\\mdb.pem net.ssl.CAFile C:\\opt\\certs\\mdbca.crt net.ssl.clusterFile C:\\opt\\certs\\mdb.pem security.clusterAuthmode x509 The following configuration file contains directives for  TLS (Transport Layer Security) \nconnections and  x.509  authentication. Your configuration file may require additional or different options. Connect to your server with the  mongo  shell to test your  TLS (Transport Layer Security) \nconnection. Your  mongo  command needs the following  TLS (Transport Layer Security)  options: Edit your options appropriately. Option Value --tls none --tlsCAFile C:\\opt\\certs\\mdbca.crt  (file generated in step 2d) --tlsCertificateKeyFile C:\\opt\\certs\\mdb.pem  (file generated in step 5) The  Common Name  entry for this  CSR (Certificate Signing Request)  should match the  FQDN (Fully Qualified Domain Name)  of\nthe server where you run  mongosqld . Start the OpenSSL application and enter the following command at the\nOpenSSL prompt: The  Common Name  entry for this  CSR (Certificate Signing Request)  must be different from\nthe  Common Name  entry for the first  CSR (Certificate Signing Request)  you created, in\n step 2 . Enter the following command at the OpenSSL prompt: Exit the OpenSSL application and enter the following command at the\n cmd  prompt: Your  mongosqld  configuration file requires several  TLS (Transport Layer Security) -specific\noptions. Your values may vary, depending on where you created your\n TLS (Transport Layer Security)  certificates and  .pem  files. The following example  configuration file  uses\nfiles located in the  C:\\opt\\certs  directory. It specifies a\nusername and password which correspond to a MongoDB user with\nsufficient  permissions  to\nrun  mongosqld  and read from the  test  database. Start  mongosqld  with the  --config \noption to use a configuration file. Option Value mongodb.net.ssl.enabled true mongodb.net.ssl.PEMKeyFile C:\\opt\\certs\\mdb.pem mongodb.net.sslCAFile C:\\opt\\certs\\mdbca.crt net.ssl.mode requireSSL net.ssl.PEMKeyFile C:\\opt\\certs\\bi.pem net.ssl.CAFile C:\\opt\\certs\\mdbca.crt To create an  ODBC (Open Database Connectivity)   DSN (Data Source Name)  which connects over  TLS (Transport Layer Security) , follow the\ninstructions in the  DSN tutorial \nand configure the new  DSN (Data Source Name)  with your  TLS (Transport Layer Security)  certificate path\ninformation. On the  Connection  tab of the DSN configuration screen,\ncheck the box labeled  Enable Cleartext Authentication . Click the  Test  button to test your ODBC connection. Once you have set up your  DSN (Data Source Name) , you can use it to connect to any of\nseveral BI tools, such as  Power BI  or\n Qlik Sense . You don't need to enter a certificate path into the\n SSL Certificate  field. Create a directory to hold your certificates. This tutorial uses\n /opt/certs . Your certificate directory must be readable by\nthe system user which runs the  mongod  and\n mongosqld  programs. We now have two files: The  mdbca.crt  certificate authority file,\nand the  mdbprivate.key  key used to sign that request. The following command generates and outputs a private key to\n mdbprivate.key . The following command generates and outputs a certificate\nauthority file to  mdbca.crt . The following command prompts the user to enter several pieces of\ninformation which are incorporated into the certificate request.\nOne of the fields is called  Common Name , which is a Fully\nQualified Domain Name (FQDN). The  Common Name  entry for the\ncertificate generated in this step of the tutorial must be\ndifferent from the  Common Name  entry for the certificates\ngenerated in steps 3 and 9. The following command generates a key for the  mongod  process to use\nand a Certificate Signing Request (CSR). The  Common Name  response\nmust be the Fully Qualified Domain Name ( FQDN (Fully Qualified Domain Name) ) of the host where\nyour  mongod  instance runs such as  www.example.com . To determine\nthe  FQDN (Fully Qualified Domain Name)  of your server, use  hostname -f  at the command prompt. You may be prompted to enter a challenge password for the  Extra\nAttribute  element. For the purposes of this tutorial, you can leave\nthis element blank. A  .pem  file consists of a key and a certificate concatenated\ntogether. To create a  .pem  file for your MongoDB instance to use,\nenter the following command in the  /opt/certs/  directory: You should now have the following files in your certificates\ndirectory: If any are missing, go back and review the previous steps, checking\nfor errors. To configure  mongod  to require  TLS (Transport Layer Security)  for incoming connections,\nmodify your configuration file as follows. Your values may vary,\ndepending on where you created your  TLS (Transport Layer Security)  files. If you prefer to start  mongod  with command-line options instead of\na configuration file, see  mongosqld  for equivalent options. Option Value net.ssl.mode requireSSL net.ssl.PEMKeyFile /opt/certs/mdb.pem net.ssl.CAFile /opt/certs/mdbca.crt net.ssl.clusterFile /opt/certs/mdb.pem security.clusterAuthmode x509 The following configuration file contains directives for  TLS (Transport Layer Security) \nconnections and  x.509 \nauthentication. Your configuration file may require additional or different options. Connect to your server with the  mongo  shell to test your  TLS (Transport Layer Security) \nconnection. Your  mongo  command needs the following  TLS (Transport Layer Security)  options: Edit your options appropriately. Option Value --tls none --tlsCAFile /opt/certs/mdbca.crt  (file generated in step 2.2) --tlsCertificateKeyFile /opt/certs/mdb.pem  (file generated in step 5) The  Common Name  entry for this  CSR (Certificate Signing Request)  should match the  FQDN (Fully Qualified Domain Name)  of\nthe host where you run  mongosqld . To determine the  FQDN (Fully Qualified Domain Name)  of your\nhost, use  hostname -f  at the command prompt. You may be prompted to enter a challenge password for the  Extra\nAttribute  element. For the purposes of this tutorial, you can leave\nthis element blank. The  Common Name  entry for this  CSR (Certificate Signing Request)  must be different from the\n Common Name  entry for the first  CSR (Certificate Signing Request)  you created, in step 2. Your  mongosqld  configuration file requires several\n TLS (Transport Layer Security) -specific options. Your values may vary, depending on where\nyou created your  TLS (Transport Layer Security)  files. Start  mongosqld  with the\n --config  option to use a\nconfiguration file. Option Value mongodb.net.ssl.enabled true mongodb.net.ssl.PEMKeyFile /opt/certs/mdb.pem mongodb.net.sslCAFile /opt/certs/mdbca.crt net.ssl.mode requireSSL net.ssl.PEMKeyFile /opt/certs/bi.pem net.ssl.CAFile /opt/certs/mdbca.crt The following  configuration file  uses files\nlocated in the  /opt/certs/  directory. It specifies a username\nand password which correspond to a MongoDB user with sufficient\n permissions  to run\n mongosqld  and read from the  test  database. To connect to your  mongosqld  instance, start the MySQL shell with\nthe following command line options.",
            "code": [
                {
                    "lang": "ps1",
                    "value": "mkdir C:\\opt\\certs\ncd C:\\opt\\certs"
                },
                {
                    "lang": "apache",
                    "value": "#\n# OpenSSL configuration file.\n#\n\n# Establish working directory.\n\ndir                         = .\n\n[ ca ]\ndefault_ca                  = CA_default\n\n[ CA_default ]\nserial                      = $dir/serial\ndatabase                    = $dir/certindex.txt\nnew_certs_dir               = $dir/certs\ncertificate                 = $dir/cacert.pem\nprivate_key                 = $dir/private/cakey.pem\ndefault_days                = 365\ndefault_md                  = md5\npreserve                    = no\nemail_in_dn                 = no\nnameopt                     = default_ca\ncertopt                     = default_ca\npolicy                      = policy_match\n\n[ policy_match ]\ncountryName                 = match\nstateOrProvinceName         = match\norganizationName            = match\norganizationalUnitName      = optional\ncommonName                  = supplied\nemailAddress                = optional\n\n[ req ]\ndefault_bits                = 1024\ndefault_keyfile             = key.pem\ndefault_md                  = md5\nstring_mask                 = nombstr\ndistinguished_name          = req_distinguished_name\nreq_extensions              = v3_req\n\n[ req_distinguished_name ]\n# Variable name               Prompt string\n#---------------------------  ----------------------------------\n0.organizationName          = Organization Name (company)\norganizationalUnitName      = Organizational Unit Name (department, division)\nemailAddress                = Email Address\nemailAddress_max            = 40\nlocalityName                = Locality Name (city, district)\nstateOrProvinceName         = State or Province Name (full name)\ncountryName                 = Country Name (2 letter code)\ncountryName_min             = 2\ncountryName_max             = 2\ncommonName                  = Common Name (hostname, IP, or your name)\ncommonName_max              = 64\n\n# Default values for the above, for consistency and less typing.\n# Variable name               Value\n#---------------------------  ------------------------------\n0.organizationName_default  = My Company\nlocalityName_default        = My Town\nstateOrProvinceName_default = State or Providence\ncountryName_default         = US\n\n[ v3_ca ]\nbasicConstraints            = CA:TRUE\nsubjectKeyIdentifier        = hash\nauthorityKeyIdentifier      = keyid:always,issuer:always\n\n[ v3_req ]\nbasicConstraints            = CA:FALSE\nsubjectKeyIdentifier        = hash"
                },
                {
                    "lang": "ps1",
                    "value": "set OPENSSL_CONF=C:\\OpenSSL\\bin\\openssl.cfg"
                },
                {
                    "lang": "ps1",
                    "value": "cd C:\\opt\\certs"
                },
                {
                    "lang": "ps1",
                    "value": "C:\\OpenSSL\\bin\\openssl.exe"
                },
                {
                    "lang": "ps1con",
                    "value": "C:\\Users\\username>cd C:\\opt\\certs\nC:\\Users\\username>C:\\OpenSSL\\bin\\openssl.exe\nOpenSSL>"
                },
                {
                    "lang": "ps1",
                    "value": "genrsa -out C:\\opt\\certs\\mdbprivate.key -aes256 \\\n       -passout pass:password"
                },
                {
                    "lang": "ps1",
                    "value": "req -x509 -new -key C:\\opt\\certs\\mdbprivate.key -days 1000 -out C:\\opt\\certs\\mdbca.crt -passin pass:password"
                },
                {
                    "lang": "ps1",
                    "value": "req -new -nodes -newkey rsa:2048 -keyout .\\mdb.key -out .\\mdb.csr"
                },
                {
                    "lang": "ps1",
                    "value": "x509 -CA .\\mdbca.crt -CAkey .\\mdbprivate.key -CAcreateserial -req -days 1000 -in .\\mdb.csr -out .\\mdb.crt -passin pass:password"
                },
                {
                    "lang": "ps1",
                    "value": "copy .\\mdb.key + .\\mdb.crt mdb.pem"
                },
                {
                    "lang": "ps1",
                    "value": "mdb.crt\nmdb.csr\nmdb.key\nmdb.pem\nmdbca.crt\nmdbprivate.key"
                },
                {
                    "lang": "ps1",
                    "value": "systemLog:\n   destination: file\n   path: 'C:\\data\\mongod.log'\n   logAppend: true\nnet:\n   bindIp: <step-3-FQDN>\n   port: 27017\n   ssl:\n      mode: requireSSL\n      PEMKeyFile: 'C:\\opt\\certs\\mdb.pem'\n      CAFile: 'C:\\opt\\certs\\mdbca.crt'\n      clusterFile: 'C:\\opt\\certs\\mdb.pem'\nsecurity:\n   clusterAuthMode: x509\nstorage:\n   dbPath: 'C:\\data\\db'"
                },
                {
                    "lang": "ps1",
                    "value": "mongod.exe --config C:\\path\\to\\mongod.conf"
                },
                {
                    "lang": "ps1",
                    "value": ".\\mongo.exe --ssl --host <step3-common-name> ^\n            --sslCAFile \"C:\\opt\\certs\\mdbca.crt\" ^\n            --sslPEMKeyFile \"C:\\opt\\certs\\mdb.pem\""
                },
                {
                    "lang": "ps1",
                    "value": "req -new -nodes -newkey rsa:2048 -keyout .\\bi.key -out .\\bi.csr"
                },
                {
                    "lang": "ps1",
                    "value": "x509 -CA .\\mdbca.crt -CAkey .\\mdbprivate.key -CAcreateserial -req -days 1000 -in .\\bi.csr -out .\\bi.crt -passin pass:password"
                },
                {
                    "lang": "ps1",
                    "value": "copy .\\bi.key + .\\bi.crt bi.pem"
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  logAppend: false\n  path: 'C:\\logs\\mongosqld.log'\n  verbosity: 2\n\nsecurity:\n  enabled: true\n\nmongodb:\n  net:\n    uri: <step-3-FQDN>\n    auth:\n      username: <username>\n      password: <password>\n    ssl:\n      enabled: true\n      PEMKeyFile: 'C:\\opt\\certs\\mdb.pem'\n      CAFile: 'C:\\opt\\certs\\mdbca.crt'\n\nnet:\n  bindIp: localhost\n  port: 3307\n  ssl:\n    mode: 'requireSSL'\n    PEMKeyFile: 'C:\\opt\\certs\\bi.pem'\n    CAFile: 'C:\\opt\\certs\\mdbca.crt'\n\nschema:\n  sample:\n    namespaces: 'test.*'"
                },
                {
                    "lang": "ps1",
                    "value": ".\\mongosqld --config C:\\path\\to\\mongosqld.conf"
                },
                {
                    "lang": "sh",
                    "value": "mkdir /opt/certs\ncd /opt/certs"
                },
                {
                    "lang": "sh",
                    "value": "openssl genrsa -out /opt/certs/mdbprivate.key -aes256 \\\n               -passout pass:password"
                },
                {
                    "lang": "sh",
                    "value": "openssl req -x509 -new -key /opt/certs/mdbprivate.key \\\n            -days 1000 -out /opt/certs/mdbca.crt \\\n            -passin pass:password"
                },
                {
                    "lang": "sh",
                    "value": "openssl req -new -nodes -newkey rsa:2048 -keyout /opt/certs/mdb.key \\\n-out /opt/certs/mdb.csr"
                },
                {
                    "lang": "sh",
                    "value": "openssl x509 -CA /opt/certs/mdbca.crt\n             -CAkey /opt/certs/mdbprivate.key \\\n             -CAcreateserial -req -days 1000 \\\n             -in /opt/certs/mdb.csr -out /opt/certs/mdb.crt \\\n             -passin pass:password"
                },
                {
                    "lang": "sh",
                    "value": "cat /opt/certs/mdb.key /opt/certs/mdb.crt > /opt/certs/mdb.pem"
                },
                {
                    "lang": "sh",
                    "value": "mdb.crt\nmdb.csr\nmdb.key\nmdb.pem\nmdbca.crt\nmdbprivate.key"
                },
                {
                    "lang": "sh",
                    "value": "systemLog:\n   destination: file\n   path: '/data/mongod.log'\n   logAppend: true\nprocessManagement:\n   fork: true\n   pidFilePath: '/data/mongod.pid'\nnet:\n   bindIp: localhost\n   port: 27017\n   ssl:\n      mode: requireSSL\n      PEMKeyFile: '/opt/certs/mdb.pem'\n      CAFile: '/opt/certs/mdbca.crt'\n      clusterFile: '/opt/certs/mdb.pem'\nsecurity:\n   clusterAuthMode: x509\nstorage:\n   dbPath: '/data'"
                },
                {
                    "lang": "sh",
                    "value": "mongod --config /path/to/mongod.conf"
                },
                {
                    "lang": "sh",
                    "value": "mongo --tls --host <step3-common-name> \\\n      --tlsCAFile /opt/certs/mdbca.crt \\\n      --tlsPEMKeyFile /opt/certs/mdb.pem"
                },
                {
                    "lang": "sh",
                    "value": "openssl req -new -nodes -newkey rsa:2048 \\\n            -keyout /opt/certs/bi.key \\\n            -out /opt/certs/bi.csr"
                },
                {
                    "lang": "sh",
                    "value": "openssl x509 -CA /opt/certs/mdbca.crt \\\n             -CAkey /opt/certs/mdbprivate.key \\\n             -CAcreateserial -req -days 1000 \\\n             -in /opt/certs/bi.csr -out /opt/certs/bi.crt \\\n             -passin pass:password"
                },
                {
                    "lang": "sh",
                    "value": "cat /opt/certs/bi.key /opt/certs/bi.crt > /opt/certs/bi.pem"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --config /path/to/mongosqld.conf"
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  logAppend: false\n  path: './logs/mongosqld.log'\n  verbosity: 2\n\nsecurity:\n  enabled: true\n\nmongodb:\n  net:\n    uri: <step9-common-name>\n    auth:\n      username: <username>\n      password: <password>\n    ssl:\n      enabled: true\n      PEMKeyFile: '/opt/certs/mdb.pem'\n      CAFile: '/opt/certs/mdbca.crt'\n\nnet:\n  bindIp: localhost\n  port: 3307\n  ssl:\n    mode: 'requireSSL'\n    PEMKeyFile: '/opt/certs/bi.pem'\n    CAFile: '/opt/certs/mdbca.crt'\n\nschema:\n  sample:\n    namespaces: 'test.*'"
                },
                {
                    "lang": "sh",
                    "value": "mysql --ssl-mode REQUIRED --ssl-ca=/opt/certs/mdbca.crt \\\n      --enable-cleartext-plugin --port 3307 -u <username> -p"
                }
            ],
            "preview": "For BI Connector to transmit data securely, you should enable Transport\nLayer Security (TLS) encryption on your MongoDB instance, your\nmongosqld instance, and in your BI tool. A complete description of\nTLS (Transport Layer Security) configuration is outside the scope of this document, but this\ntutorial outlines the process for creating your own TLS (Transport Layer Security) certificates\nfor testing purposes and starting the MongoDB components with TLS (Transport Layer Security)\nenabled.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "tutorial/install-bi-connector-debian",
            "title": "Install BI Connector on Debian-based Linux",
            "headings": [
                "Prerequisites",
                "MongoDB User Permissions",
                "Install the BI Connector",
                "Download the MongoDB Connector for BI.",
                "Install the MongoDB Connector for BI.",
                "Launch the BI Connector"
            ],
            "paragraphs": "To set up  MongoDB Connector for BI  with a business intelligence tool such as Tableau,\nfollow the steps on this page. The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. To verify OpenSSL is installed on your system, run the following\ncommand: If OpenSSL is not installed, use your package manager to install it. OpenSSL installed on your host. If your MongoDB instance uses  authentication , your  BI Connector  instance must also use\nauthentication. The user that connects to MongoDB via the\n mongosqld  program must have permission to read from all\nthe namespaces you wish to sample data from. For more details about MongoDB user permissions in  BI Connector , see\n User Permissions for Cached Sampling . Download the  BI Connector  from the  MongoDB Download Center . Extract the  .tar  archive you downloaded. Install the programs within the  bin/  directory into a\ndirectory listed in your system  PATH . If a prior version exists, overwrite the binaries. To help you get started, a sample  mongosqld \n configuration file  named\n example-mongosqld-config.yml  is included\nwith the installation package. To learn how to start  BI Connector \nwith a configuration file, refer to the  mongosqld \ndocumentation section on the  Configuration File . You are now ready to launch the  BI Connector .  The following guide\ncontains detailed information on  BI Connector  configuration, schema\ngeneration, and launch options: Launch BI Connector",
            "code": [
                {
                    "lang": "sh",
                    "value": "dpkg -l | grep -i openssl"
                },
                {
                    "lang": "sh",
                    "value": "tar -xvzf mongodb-bi-linux-{arch}-{platform}-{version}.tgz"
                },
                {
                    "lang": "sh",
                    "value": "sudo install -m755 bin/mongo* /usr/local/bin/"
                }
            ],
            "preview": "To set up MongoDB Connector for BI with a business intelligence tool such as Tableau,\nfollow the steps on this page.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        },
        {
            "slug": "reference/mongosqld",
            "title": "mongosqld",
            "headings": [
                "Description",
                "Usage",
                "Starting mongosqld with a Schema File",
                "Starting mongosqld with a Schema Database",
                "Starting mongosqld with Specified Namespaces",
                "MongoDB User Permissions",
                "Default Minimum TLS Version",
                "Command Line Options",
                "Core Options",
                "Schema Options",
                "Log Options",
                "MongoDB TLS/SSL Options",
                "Client TLS/SSL Options",
                "Service Options",
                "Kerberos Options",
                "Socket Options",
                "Set Parameter Option",
                "Configuration File",
                "Logging Options",
                "Schema Options",
                "Data Sampling Options",
                "Runtime Options",
                "Network Options",
                "Security Options",
                "MongoDB Host Options",
                "Process Management Options",
                "Set Parameter Options",
                "Load External Configuration Values",
                "Example Configuration File",
                "Usage Examples",
                "mongosqld with a Schema File",
                "Specify a Collection to Sample",
                "Specify Multiple Collections to Sample",
                "Exclude Databases and Collections from Sampling",
                "Sample All Documents in a Collection",
                "Specify a Database to Persist a Schema",
                "Specify a Data Resampling Interval",
                "mongosqld with Authentication Enabled",
                "mongosqld with a Configuration File",
                "Usage with Atlas",
                "Sampling Mode Reference Chart",
                "Invalid Configurations"
            ],
            "paragraphs": "mongosqld  accepts incoming requests from a SQL client and\nproxies those requests to a  mongod  or\n mongos  instance. The  MongoDB Connector for BI  and associated utilities are compatible with all  currently\nsupported  MongoDB server\nversions. New in version 2.3: You can start  mongosqld  either with a schema file in\n .drdl format  using the\n --schema  option or by sampling data\nfrom a MongoDB instance to create the schema. You can specify which namespace or namespaces to sample data from with\nthe  --sampleNamespaces \noption. If you don't specify any\nnamespaces or a schema file,  mongosqld  samples data from all\ndatabases in the target MongoDB instance except the  admin  and\n local  databases. You can specify a database in which to store schema information with\nthe  --schemaSource \noption. Otherwise,  mongosqld  holds the schema in memory. Use the  --schema  option to\nspecify a schema file when starting  mongosqld . Use  mongodrdl  to create a schema file from a MongoDB\ninstance. Use the  --schemaSource \noption to specify a database to store schema information. Use the  --sampleNamespaces \noption to specify databases and collections for\n mongosqld  to sample data from to\ncreate the schema. See additional  usage examples  below. For more information on MongoDB\nusers and roles, see\n Role-Based Access Control . See the  example  below of\n mongosqld  with authentication. If your MongoDB instance uses  authentication , your  BI Connector  instance must also use\nauthentication. The user that connects to MongoDB via the\n mongosqld  program must have permission to read from all\nthe namespaces you wish to sample data from. For more details about MongoDB user permissions in  BI Connector , see\n User Permissions for Cached Sampling . The default minimum TLS version is 1.1 for all client connections.\nThis includes incoming client connections to  mongosqld \nand outgoing connections to MongoDB. You can adjust this setting for incoming connections with the\n --minimumTLSVersion  option\nand for outgoing connections with the\n --mongo-minimumTLSVersion  option. Returns information on the options and use of  mongosqld . Default : 127.0.0.1:3307 Specifies the host address to listen on. Returns the  mongosqld  release number. Specifies the path to a  configuration file . Default : mongodb://localhost:27017 Specifies a MongoDB  connection string  to connect to. The  --mongo-uri  option supports the following options within the connection\nstring: For more information on these URI options see\n Read Preference Options  and\n Replica Set Option . For options set in the Mongo URI not included in the list above, use the\nequivalent  mongosqld  option. For the complete list of  mongosqld  options,\nsee  Command Line Options . To disable automatic replica set server discovery logic and force a\nconnection to the specified server, use the  connect=direct \noption. URI options not in the list above  nor  in the list of supported  mongosqld \n options  are not supported. readPreference readPreferenceTags replicaSet connect Instead of specifying a  username  and  password  in\nyour connection string, run  mongosqld  with the  --auth  option to\ndirect  mongosqld  to pass the authentication credentials provided by the\nSQL client to the MongoDB server. Similarly, instead of enabling  ssl  in the connection string,\nrun  mongosqld  with  --mongo-ssl . Restricts  mongosqld  to using features that the specified version of\nMongoDB supports. Only necessary when used with replica sets in which\nmembers use different MongoDB versions or when performing a rolling\nupgrade of MongoDB. Only supports MongoDB version 3.2 or later. For example, if your replica set contains members running MongoDB\n3.2 and other members running MongoDB 3.4, set the following\noption to restrict  mongosqld  to only use features\nsupported by MongoDB 3.2: Specifies the maximum length, in characters, for all varchar fields. If\n mongosqld  encounters a string that is longer than the maximum length,\n mongosqld  truncates it to the maximum length and logs a warning. Specifies the authentication username to use for schema discovery.\nOnly required if  --auth  is enabled. The user specified by\n --mongo-username  must be a valid MongoDB user with the\n listDatabases  privilege. See  mongosqld User\nPermissions . Specifies the authentication password to use for schema discovery.\nOnly required if  --auth  is enabled. Use in conjunction with\n --mongo-username . Default : admin Specifies the database that holds the credentials for the schema\ndiscovery user. Only available if  --auth  is enabled. Use\nin conjunction with credential options  --mongo-username  and\n --mongo-password . Default : SCRAM-SHA-1 Specifies the authentication mechanism to use for schema discovery.\nOnly available if  --auth  is enabled. Use in conjunction with\ncredential options  --mongo-username  and\n --mongo-password . Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA1\nhash function. SCRAM-SHA-256 New in version 2.6:   RFC 7677 \nstandard Salted Challenge Response Authentication Mechanism using\nthe SHA2 hash function. PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . Specifies the path to a schema file or the schema directory. Use  --schema  instead. --sampleNamespaces  specifies a database and collection for either\ninclusion or exclusion from the data sampling process which creates\nthe schema. It is also possible to specify multiple collections from\na single databases, or multiple collections from multiple databases.\nSee  examples  below. If you do not use the  --sampleNamespaces  option or the\n --schema  option,  mongosqld  samples\ndata from all available MongoDB databases and collections except the\n admin  and  local  databases. Default :  custom Configures the  sampling mode  of\n mongosqld . Must be used with the\n --schemaSource  option.\nThe following values determine the sampling behavior: For more information on configuring the sample mode, see the\n Sampling Mode Reference Chart . Value --schemaMode  Behavior custom mongosqld  reads a stored\nschema from the MongoDB database specified by the\n --schemaSource  option. auto mongosqld \nsamples the schema and writes the schema data to the MongoDB\ndatabase specified by the\n --schemaSource  option. If  mongosqld  has  authentication \nenabled, the authenticated user must have the write\nprivilege on the specified  --schemaSource  database. See  Built-In Roles  for more information about the\n readWrite  role. Required whenever the  --schemaMode \nis set. Specifies the database where the schema information is stored. If you do not specify any of the  --schema ,\n --schemaMode , and\n --schemaSource  options,  mongosqld  holds its\nschema in memory. To learn more about sampling modes, see the\n Sampling Mode Reference Chart . Default :  defaultSchema Optional. The name of the schema to load from or write to\nthe  --schemaSource  database.\nSpecifying schema names allows you to store multiple schemas in\nthe  --schemaSource  database.\nThe behavior depends on the value of\n --schemaMode : --schemaMode  Value --schemaName  Behavior custom The name of the schema to load from the database specified\nby the  --schemaSource \noption. auto The name of the schema to write to the  --schemaSource  database after the  BI Connector \nsamples the schema on startup. If you upload a custom schema, you must store it with its specified\nname, using  name-schema , and then specify\nthis name to the  mongosqld  with\n --schemaName .\nIf you don't store the schema's name when you upload it, the schema\nname defaults to  defaultSchema . If the schema's name doesn't exist,\nthis results in an error from  mongosqld  similar to the\nfollowing: MongoDB schema not yet available.\nError initializing schema: no schema found for name. To learn more about sampling modes, see the\n Sampling Mode Reference Chart . Default : 1000 The number of documents per namespace to sample when gathering schema\ninformation. Set  --sampleSize  to  0  to include all\ndocuments in the specified namespace when building the schema. If\nyou do not specify a namespace, setting  --sampleSize  to\n 0  causes  mongosqld  to consider all documents in all\ndatabases (excluding  local ,  admin , and  system ) when\nbuilding the schema. See an  example  below. Default : 0 The interval in seconds at which  mongosqld  re-samples\ndata to create its schema. The default value is  0 , which means\nthat after the initial sampling no re-sampling occurs for the\nduration of the connection. The specified value must be a positive\ninteger. Renamed  --sampleRefreshIntervalSecs  to\n --schemaRefreshIntervalSecs To force a one-time update of the schema, use the\n FLUSH SAMPLE  command from your\nSQL client. Specify the encoding used to generate UUID binary subtype 3. Choose\none of the following values: old : Old BSON binary subtype representation csharp : The C#/.NET legacy UUID representation java : The Java legacy UUID representation Schema option for combining array and non-array data into a\nsingle table. MongoDB documents which contain arrays are normally translated\ninto tabular format with separate tables for array data and\nnon-array data. Consider a MongoDB collection named  test \nwith the following document: The above collection translates to the following two tables in\ntabular format: The  --prejoin  flag causes\ndata from the  a  column to be included in the  test_b  table: Appends new logging output to an existing log file specified by\n --logPath . Requires  --logRotate . Default : stderr Specifies a path to a log file for storing logging output. Default : rename Specifies that you want to rotate logs and how they should be\nrotated. When this option is set, the logs rotate when you issue a  FLUSH\nLOGS  command to the  MongoDB Connector for BI  or when you restart  mongosqld . The existing log file is closed.\nAn  RFC3339 -formatted\ntimestamp is appended to the closed log file.\nA new log file is created. The existing log file is closed and reopened. On UNIX and macOS platforms, you can issue a  SIGUSR1  signal to\nrestart the  mongosqld  process and rotate the logs. Default : 60 The interval, in seconds, at which usage statistics are written to the\nlog. Set to  0  to disable usage logging. Usage logging is not enabled for Windows. Specifies that  mongosqld  should provide more detailed log output. The following table describes the information provided at each log\nlevel: Letter Option Log Level Message Content --quiet None Log nothing. No flag Default Log messages that notify user of basic  mongosqld \nevents and state changes. -v Administrator Log messages that provie information to  mongosqld \nadministrators. -vv Developer Log messages useful to MongoDB support and development. Hides all log output. Default : False Instructs  mongosqld  to use TLS/SSL when connecting to a\nMongoDB instance. Specifies the  .pem  file containing both the TLS/SSL\ncertificate and key for  mongosqld  to use when\nconnecting to MongoDB. You can specify the file name of the\n .pem  file using either using a relative or absolute\npath. This option is required when using the  --mongo-ssl  option to\nconnect to a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Specifies the path to a file containing the certificate and private\nkey for connecting to MongoDB. Permits  mongosqld  to connect to a MongoDB server whose\nhostname differs from the hostname on its TLS/SSL certificate. Permits the MongoDB instance to present an invalid server SSL/TLS\ncertificate. When using the  allowInvalidCertificates \nsetting, MongoDB logs the use of the invalid certificate as a warning. Specifies the MongoDB instance's  .pem  file containing the root\ncertificate chain from the Certificate Authority. Specify the file\nname of the  .pem  file using relative or absolute paths. For SSL connections ( --mongo-ssl ) to  mongod  and\n mongos , if the  mongosqld  runs without the\n --mongo-sslCAFile ,  mongosqld  will not attempt\nto validate the server certificates. This creates a vulnerability\nto expired  mongod  and  mongos  certificates as\nwell as to foreign processes posing as valid  mongod  or\n mongos  instances. Ensure that you  always  specify the\nCA file to validate the server certificates in cases where\nintrusion is a possibility. Specifies the MongoDB instance's  .pem  file containing\nthe certificate revocation list. Enables FIPS mode in the installed OpenSSL library. Default : TLS1_1 Specifies the minimum required TLS version for outgoing\nconnections to a  mongod  or  mongos .\ninstance. The default value  TLS1_1  corresponds to TLS version\n1.1. Default : disabled Enable or disable  TLS (Transport Level Security) / SSL\n(Secure Sockets Layer)  for connections to  mongosqld . The argument to the  sslMode  option can\nbe one of the following: Value Description disabled mongosqld  cannot accept\nconnections secured using TLS/SSL. allowSSL mongosqld  can accept connections\nsecured using TLS/SSL. requireSSL mongosqld  can only accept\nconnections secured using TLS/SSL. Specifies the  .pem  file containing both the TLS/SSL certificate\nand key for MySQL clients. Specify the file name of the  .pem \nfile using relative or absolute paths. Specifies the password used to decrypt the private key specified by\n --sslPEMKeyFile . Permits MySQL clients to present invalid client TLS/SSL certificates. Permits SQL clients to connect to a  mongosqld  whose\nhostname differs from the hostname on its TLS/SSL certificate. Specifies the  mongosqld   .pem  file containing the root\ncertificate chain from the Certificate Authority. Specify the file\nname of the  .pem  file using relative or absolute paths. Specifies the  mongosqld   .pem  file containing the\ncertificate revocation list. Requires authentication for incoming client requests. When authentication is enabled, admin credentials must be provided\nwith the  --mongo-username \nand  --mongo-password \noptions or the  mongodb.net.auth.username  and\n mongodb.net.auth.password  settings in the\n configuration file . mongosqld  uses the admin credentials to gather metadata on the\nsampled namespaces and uses the credentials of the connecting client\nto restrict data to only what the client is authorized to read. For\nmore information on the required permissions for the admin user, see\n User Permissions for Cached Sampling . Default : admin Specifies the default MongoDB authentication source.\nSet this value to specify a default source that  mongosqld \nuses when authenticating with a MongoDB database. The\nauthentication mechanisms\n GSSAPI  and  PLAIN  use the  $external  source, while\n SCRAM-SHA-1  and  SCRAM-SHA-256  use a MongoDB database as its\nsource. If no value is given for this option it defaults to the the\nMongoDB  admin  database. The  $external  authentication source stores a reference\nto system users in a MongoDB database called  $external ,\nbut the credentials are stored in an external,\nnon-MongoDB system, such as an LDAP server. Any connection which uses the default value can omit the\n source  parameter from its  MySQL \nor  Tableau  username. Default : SCRAM-SHA-1 Specifies the default authentication mechanism. Set this value to\nspecify a default mechanism for connecting to  mongosqld . Any\nconnection which uses this specified default value can omit\nthe  mechanism  value from its  MySQL  or\n Tableau  username. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA1\nhash function. SCRAM-SHA-256 New in version 2.6:   RFC 7677 \nstandard Salted Challenge Response Authentication Mechanism using\nthe SHA2 hash function. PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . Default : TLS1_1 Specifies the minimum required TLS version for clients to connect to\n mongosqld . The default value  TLS1_1  corresponds\nto TLS version 1.1. Name of the system service which runs  mongosqld . Display name of the system service which runs  mongosqld . Description of the system service which runs  mongosqld . Default : First IP address for  net.bindIp . An  FQDN (fully qualified domain name)  for the purpose of\nconfiguring Kerberos authentication. The Kerberos hostname overrides\nthe hostname only for the configuration of Kerberos. Default : mongosql Registered name of the service using Kerberos. This option allows\nyou to override the default Kerberos service name component of the\nKerberos  SPN (service principal name) , on a per-instance\nbasis. If unspecified, the default value is used. Default : mongodb Set the Kerberos  SPN (service principal name)  when connecting\nto Kerberized MongoDB instances. This value must match the service\nname set on MongoDB instances. Default : False Use proxy credentials for Kerberos authorization, enabling constrained\ndelegation. Requires  mongosqld  service credentials to be\npresent in the client keytab as well as the service keytab. See\n Configure Kerberos for  BI Connector  for more information about Kerberos configuration. Default : 0700 Specify the permissions for the Unix domain socket file. Disable listening on Unix domain sockets. Default : /tmp Specifies an alternative directory for the  mongosqld  Unix domain\nsocket. mongosqld  will create a socket file called  mysql.sock  underneath\nthis path. If you do not specify  --unixSocketPrefix , the socket will exist at\n /tmp/mysql.sock . The following example starts  mongosqld  and uses\nthe  --setParameter  option to specify the\n type conversion mode : Parameter Type Corresponds to \"polymorphic_type_conversion_mode=<value>\" string Determines how  mongosqld  evaluates document fields\nthat are specified with multiple data types. Accepted values are\n off ,  fast , and  safe . To learn more about these\nvalues, see\n System Variables . \"type_conversion_mode=<value>\" string Specifies which mode  mongosqld  uses to\n convert data types .\n BI Connector  uses its own mode ( mongosql ) by default. Accepted\nvalues are  mongosql  and  mysql . To learn more about\nthese values, see\n System Variables . You may configure  mongosqld  using a  YAML \nconfiguration file. This file may contain the settings listed in the\nfollowing sections. You may use expansion directives in your configuration file to load\nexternally sourced configuration values. Expansion directives\nobscure confidential information like security certificates and\npasswords. To learn more about using expansion directives, see  Externally Sourced Configuration File Values \nin the MongoDB manual. Name Type Corresponds to boolean --logAppend string --logRotate string --logPath boolean --quiet integer --verbose Name Type Corresponds to string --schema integer --maxVarcharLength Name Type Corresponds to string --schemaMode string --schemaSource string --schemaName integer --sampleSize boolean --prejoin string or array of strings --sampleNamespaces integer --schemaRefreshIntervalSecs string --uuidSubtype3Encoding BI Connector  provides the following options for controlling the amount\nof system memory which the  mongosqld  process may use\nfor sending queries to MongoDB. These limits do not include the\nmemory which  BI Connector  uses for other purposes, such as data\nstructure overhead, so the total amount of memory  BI Connector \nuses will be higher than the limits set with these options. Type : integer Default : unlimited Specifies the maximum amount of memory in bytes that a query execution\nstage may use. Type : integer Default : unlimited Specifies the maximum amount of memory in bytes that a\n mongosqld  process may use. Type : integer Default : unlimited Specifies the maximum amount of memory in bytes that a\n mongosqld  client connection may use. Name Type Corresponds to string The hostname component of  --addr \"72.198.41.200,72.198.41.201,72.198.41.202\" integer The port component of  --addr boolean Inverse of  --noUnixSocket string --unixSocketPrefix string --filePermissions boolean --sslAllowInvalidCertificates string --sslMode string --sslPEMKeyFile string --sslPEMKeyPassword string --sslCAFile string --minimumTLSVersion Name Type Corresponds to boolean --auth string --defaultAuthMechanism string --defaultAuthSource string --gssapiHostname string --gssapiServiceName string --gssapiConstrainedDelegation Name Type Corresponds to string --mongo-versionCompatibility string --mongo-uri boolean --mongo-ssl boolean --mongo-sslAllowInvalidCertificates boolean --mongo-sslAllowInvalidHostnames string --mongo-sslPEMKeyFile string --mongo-sslPEMKeyPassword string --mongo-sslCAFile string --mongo-sslCRLFile boolean --mongo-sslFIPSMode string --mongo-minimumTLSVersion string --mongo-username string --mongo-password string --mongo-authenticationSource string --mongo-authenticationMechanism string --mongo-gssapiServiceName Name Type Corresponds to string --serviceName string --serviceDisplayName string --serviceDescription These configuration file options are also available as system variables.\nFor more information, see\n System Variables . Name Type Corresponds to string Determines how  mongosqld  evaluates document fields\nthat are specified with multiple data types. Accepted values are\n off ,  fast , and  safe . To learn more about these\nvalues, see\n System Variables . string Specifies which mode  mongosqld  uses to\n convert data types .\n BI Connector  uses its own mode ( mongosql ) by default. Accepted\nvalues are  mongosql  and  mysql . To learn more about\nthese values, see\n System Variables . You may use expansion directives in your configuration file to load\nexternally sourced configuration values. Expansion directives\nobscure confidential information like security certificates and\npasswords. To learn more about using expansion directives, see  Externally Sourced Configuration File Values \nin the MongoDB manual. The paths used in this example configuration file are\nLinux-specific. Check your local system documentation to\ndetermine the correct paths for your system. Use the  --schema  option to specify a\n schema file  for  mongosqld \nto use. Use the  --sampleNamespaces \noption to specify a database\nand collection for  mongosqld  to sample data from. If you\nstart  mongosqld  without the\n --sampleNamespaces \noption, it samples data from all available databases except\nthe  admin  and  local  databases. The following example samples data from a collection named\n addresses  in a database named  contacts : To sample data from all the collections in a database, use the\n --sampleNamespaces  option with a wildcard ( * ). The following example samples data from all the collections in a\ndatabase named  inventory : You can repeat the  --sampleNamespaces  at the command line to\nsample data from multiple collections within a database, or from\nmultiple collections across several databases. The following example samples data from all the collections in\ndatabases named  cars  and  boats : You can mix and match wildcards and specific collections with multiple\n --sampleNamespaces  options. The following example samples data from all collections in a database\nnamed  orders , as well as the  FY2015  and\n FY2016  collections from the  expenses  database: It is only necessary to enclose the namespace in single quotes\nwhen you use a wildcard. To exclude specified namespaces from the data sampling process, precede\nthe namespace with a  ~  (tilde) character. The following example\nincludes all databases and collections except the  apples  collection\nin the  fruit  database: Use the  *  wildcard character to indicate all collections in a\ndatabase. The following example excludes the entire  vehicles \ndatabase from data sampling: If you have a collection in which some documents have different\nfields from others and you want to ensure that the schema takes them\nall into consideration, set the  --sampleSize  option to  0 . This causes  mongosqld \nto examine all documents in the specified  namespace  when it builds its schema. The following example instructs  mongosqld  to build the\nschema based on all documents in the  inventory.electronics \nnamespace. Use the  --schemaSource  option to\nspecify a database in which to store schema information. Use the\n --schemaMode  option to specify\nwhether  mongosqld  can write to the schema database or\nonly read from it. The following example command uses a database named  sampleDb  to\nstore schema information and sets  --schemaMode  to  auto . If  mongosqld  has  authentication \nenabled, the authenticated user must have the write\nprivilege on the specified  --schemaSource  database. See  Built-In Roles  for more information about the\n readWrite  role. Use the  --schemaRefreshIntervalSecs  option to specify\nan interval in seconds for  mongosqld  to resample data\nand regenerate the schema. The default value for this option is  0 ,\nwhich means that  mongosqld  never resamples data. If you set a resampling interval with\n --schemaRefreshIntervalSecs  and you specify a schema\ndatabase with  --schemaSource , you\ncannot set  --schemaMode  to  custom . The following example does not specify a schema database or a schema\nfile, so it holds its schema in memory. It uses\n --schemaRefreshIntervalSecs  to specify a data resampling\ninterval of 3600 seconds. To connect  mongosqld  to a MongoDB instance running\nwith  authentication  enabled,\nuse the  --auth  option and provide MongoDB user\ncredentials. The following example starts  mongosqld  with\ncredentials for a user named  reportsUser  with password\n reportsPass , who has access to the  reports.inventory \nnamespace. This example does not specify an authenticating database with the\n --mongo-authenticationSource  option, so it defaults to\n admin . It does not specify an authentication mechanism with the\n --mongo-authenticationMechanism  option, so it defaults to\n SCRAM-SHA-1 . If you wish to specify a configuration file which saves logs to\n /var/log/mongosqld.log  and loads a schema from  /var/schema.drdl ,\nyou may save a file such as the following to  /etc/mongosqld.conf : You may then start  mongosqld  with the\n --config  option: For more information on starting  mongosqld  as a system service, see\nthe  Installation Guide  for your operating\nsystem. All paths specified in the configuration file must be absolute,\ne.g. they must begin with  / . Atlas  is a cloud service for\nrunning, monitoring, and maintaining MongoDB deployments, including the\nprovisioning of dedicated servers for the MongoDB instances. Atlas uses TLS/SSL to encrypt connections and enforces authentication by\ndefault. mongosqld  can use any valid TLS certificate issued by a\ncertificate authority, or a self-signed certificate. If you use a\nself-signed certificate, although the communications channel will be\nencrypted, there will be no validation of server identity. Although\nsuch a situation will prevent eavesdropping on the connection, it\nleaves you vulnerable to a man-in-the-middle attack. Using a\ncertificate signed by a trusted certificate authority will permit your\nMySQL client to verify the server's identity. For  testing  purposes, you can create a  .pem  key file named  test.pem \nusing the  openssl  tool: Start  mongosqld  with the following options: If you named your key file  test.pem  as in the previous example, you\ncan run the following, substituting your cluster URI and login\ncredentials: Pass your username, password, and authentication database to your SQL\nclient. For example, using  mysql  without verifying your  mongosqld \nserver certificate: Refer to  Connect from the MySQL Client  for more details on using the\n mysql  client with the  BI Connector . With the MongoDB Atlas free tier,  BI Connector  cannot run aggregation pipelines\nusing the  allowDiskUse  option. This option allows aggregation stages to\nwrite data as temporary files to disk. To review the MongoDB Atlas free\ntier constraints, see the  MongoDB Atlas manual . --mongo-ssl --auth --sslPEMKeyFile --mongo-uri --sslMode --mongo-username --mongo-password The chart below describes types of  mongosqld \nstartup configurations and the  options  used\nwith each. Mode mongosqld  Options Behavior Standalone Schema --schemaMode   not used --schemaSource   not used mongosqld  samples data upon startup. If\n --schemaRefreshIntervalSecs  > 0, resample\nat specified interval. For more information, see  Standalone Schema Mode (Cached Sampling) . Custom Schema --schemaMode   custom --schemaSource  <dbName> --schemaRefreshIntervalSecs   not used Read schema data from the database specified by\n --schemaSource . Auto Schema --schemaMode   auto --schemaSource  <dbName> --schemaRefreshIntervalSecs  > 0 Sample and persist schema data in a user-specified schema\ndatabase. For more information, see  Auto Schema Mode (Persist a Schema in MongoDB) . The following  mongosqld  option configurations are invalid\nand cause an error at startup. Mode mongosqld  Options Behavior Standalone Writer ( invalid ) --schemaMode   auto --schemaSource   not used This configuration is invalid for a  standalone \n mongod  instance because in  auto  mode there\nmust be a writeable database specified. Clustered Sampling Reader ( invalid ) --schemaMode   custom --schemaSource  <dbName> --schemaRefreshIntervalSecs  > 0 When used in a MongoDB  replica set  or  sharded cluster ,\nthis configuration is invalid. When a\ndatabase is specified for storing schema data with\n --schemaSource ,  --schemaMode  must be set to\n auto  so that the schema may be updated from\nthe  primary  to\nmaintain cluster-wide consistency.",
            "code": [
                {
                    "lang": "shell",
                    "value": "mongosqld --schema /path/to/schema-file.drdl"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --schemaSource sampleDb"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces contacts.addresses"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --mongo-uri \"mongodb://<hostname>:<port>/?connect=direct\""
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --mongo-versionCompatibility 3.2"
                },
                {
                    "lang": "json",
                    "value": "{ \"_id\" : 1, \"a\" : 3, \"b\" : [ \"orange\", \"apple\", \"pear\" ] }"
                },
                {
                    "lang": "none",
                    "value": "mysql> select * from test;\n+------+------+\n| _id  | a    |\n+------+------+\n|    1 |    3 |\n+------+------+\n\nmysql> select * from test_b;\n+------+--------+-------+\n| _id  | b      | b_idx |\n+------+--------+-------+\n|    1 | orange |     0 |\n|    1 | apple  |     1 |\n|    1 | pear   |     2 |\n+------+--------+-------+"
                },
                {
                    "lang": "none",
                    "value": "mysql> select * from test_b;\n+------+------+--------+-------+\n| _id  | a    | b      | b_idx |\n+------+------+--------+-------+\n|    1 |    3 | orange |     0 |\n|    1 |    3 | apple  |     1 |\n|    1 |    3 | pear   |     2 |\n+------+------+--------+-------+"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --setParameter \"type_conversion_mode=mongosql\""
                },
                {
                    "lang": null,
                    "value": "systemLog:\n  logAppend: <boolean>\n  logRotate: \"rename\"|\"reopen\"\n  path: <string>\n  quiet: <boolean>\n  verbosity: <integer>"
                },
                {
                    "lang": null,
                    "value": "schema:\n  path: <string>\n  maxVarcharLength: <integer>"
                },
                {
                    "lang": null,
                    "value": "schema:\n  sample:\n    size: <integer>\n    prejoin: <boolean>\n    namespaces: <array of strings>\n    uuidSubtype3Encoding: <[old|csharp|java]>\n  stored:\n    mode: <[custom|auto]>\n    source: <string>\n    name: <db-name>\n  refreshIntervalSecs: <integer>"
                },
                {
                    "lang": null,
                    "value": "runtime:\n  memory:\n    maxPerStage: <integer>\n    maxPerServer: <integer>\n    maxPerConnection: <integer>"
                },
                {
                    "lang": null,
                    "value": "net:\n  bindIp: <string>\n  port: <integer>\n  unixDomainSocket:\n    enabled: <boolean>\n    pathPrefix: <string>\n    filePermissions: <string>\n  ssl:\n    mode: <string>\n    allowInvalidCertificates: <boolean>\n    PEMKeyFile: <string>\n    PEMKeyPassword: <string>\n    CAFile: <string>"
                },
                {
                    "lang": null,
                    "value": "security:\n  enabled: <boolean>\n  defaultMechanism: <string>\n  defaultSource: <string>\n  gssapi:\n    hostname: <string>\n    serviceName: <string>"
                },
                {
                    "lang": null,
                    "value": "mongodb:\n  versionCompatibility: <string>\n  net:\n    uri: <string>\n    ssl:\n      enabled: <boolean>\n      allowInvalidCertificates: <boolean>\n      allowInvalidHostnames: <boolean>\n      PEMKeyFile: <string>\n      PEMKeyPassword: <string>\n      CAFile: <string>\n      CRLFile: <string>\n      FIPSMode: <boolean>\n    auth:\n      username: <username>\n      password: <password>\n      source: <auth-db-name>\n      mechanism: <auth-mechanism>\n      gssapiServiceName: <service>"
                },
                {
                    "lang": null,
                    "value": "processManagement:\n  service:\n    name: <string>\n    displayName: <string>\n    description: <string>"
                },
                {
                    "lang": "sh",
                    "value": "setParameter:\n  polymorphic_type_conversion_mode: <string>\n  type_conversion_mode: <string>"
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  logAppend: false\n  path: \"/var/log/mongosqld/mongosqld.log\"\n  verbosity: 2\n\nsecurity:\n  enabled: true\n\nmongodb:\n  net:\n    uri: \"mongo.example.com:27017\"\n    auth:\n      username: \"root\"\n      password: \"changeme\"\n\nnet:\n  bindIp: 192.0.2.14\n  port: 3307\n  ssl:\n    mode: \"allowSSL\"\n    PEMKeyFile: \"/vagrant/certificates/mongosqld-server.pem\"\n    CAFile: \"/vagrant/certificates/ca.crt\"\n\nschema:\n  sample:\n    namespaces: \"inventory.*\"\n\nprocessManagement:\n  service:\n    name: mongosqld\n    displayName: mongosqld\n    description: \"BI Connector SQL proxy server\""
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --schema /path/to/schema-file.drdl"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces contacts.addresses"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces 'inventory.*'"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces 'cars.*' \\\n          --sampleNamespaces 'boats.*' \\"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces 'orders.*' \\\n          --sampleNamespaces expenses.FY2015 \\\n          --sampleNamespaces expenses.FY2016 \\"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces ~fruit.apples"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces '~vehicles.*'"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --sampleNamespaces inventory.electronics \\\n          --sampleSize 0"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --schemaSource sampleDb --schemaMode auto"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --schemaRefreshIntervalSecs 3600"
                },
                {
                    "lang": "shell",
                    "value": "mongosqld --auth \\\n          --mongo-username reportsUser \\\n          --mongo-password reportsPass \\\n          --sampleNamespaces reports.inventory"
                },
                {
                    "lang": "yaml",
                    "value": "systemLog:\n  path: /var/log/mongosqld.log\nschema:\n  path: /var/schema.drdl"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --config /etc/mongosqld.conf"
                },
                {
                    "lang": "sh",
                    "value": "openssl req -nodes -newkey rsa:2048 -keyout test.key -out test.crt -x509 -days 365 -subj \"/C=US/ST=test/L=test/O=test Security/OU=IT Department/CN=test.com\"\ncat test.crt test.key > test.pem"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --mongo-ssl \\\n          --auth \\\n          --sslPEMKeyFile test.pem \\\n          --mongo-uri <uri> \\\n          --sslMode allowSSL \\\n          --mongo-username <username> \\\n          --mongo-password <password>"
                },
                {
                    "lang": "sh",
                    "value": "mysql --host <mongosqld-host> --port <mongosqld-port> -u <username>?source=admin -p --ssl-mode required --enable-cleartext-plugin"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaRefreshIntervalSecs 3600"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaMode custom \\\n          --schemaSource schemaDb"
                },
                {
                    "lang": "sh",
                    "value": "mongosqld --schemaMode auto \\\n          --schemaSource schemaDb \\\n          --schemaRefreshIntervalSecs 3600"
                }
            ],
            "preview": "The mongosqld command reference page.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "bi-connector"
                ]
            }
        }
    ]
}