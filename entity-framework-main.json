{
    "url": "http://mongodb.com/docs/entity-framework",
    "includeInGlobalSearch": false,
    "documents": [
        {
            "slug": "",
            "title": "MongoDB Entity Framework Provider",
            "headings": [
                "Introduction",
                "Quick Start",
                "Quick Reference"
            ],
            "paragraphs": "Welcome to the documentation site for the official MongoDB Entity Framework Provider.\nYou can add the provider to your .NET application as an object-relational mapper (O/RM)\nto work with data in MongoDB.\nDownload the provider by using  NuGet ,\nor set up a runnable project by following our  Quick Start guide . Learn how to establish a connection to MongoDB Atlas and begin\nworking with data in the  Quick Start  section. See driver syntax examples for common MongoDB commands in the\n Quick Reference  section.",
            "code": [],
            "preview": "Welcome to the documentation site for the official MongoDB Entity Framework Provider.\nYou can add the provider to your .NET application as an object-relational mapper (O/RM)\nto work with data in MongoDB.\nDownload the provider by using NuGet,\nor set up a runnable project by following our Quick Start guide.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "quick-start",
            "title": "Quick Start",
            "headings": [
                "Create a MongoDB Cluster",
                "Set Up a Free Tier Cluster in Atlas",
                "Update the Placeholders",
                "Add Your Connection String to an Environment Variable",
                "Set Up Your Project",
                "Create the Project",
                "Add the MongoDB Entity Framework Provider as a Dependency",
                "Query Your MongoDB Cluster from Your Application",
                "Add the Sample Code",
                "Query the Sample Data",
                "Next Steps"
            ],
            "paragraphs": "This guide shows you how to create a .NET application that uses the Entity Framework Provider\nto connect to a  MongoDB Atlas cluster . If you prefer to connect to MongoDB\nusing another programming language, see our\n list of official MongoDB drivers . The Entity Framework Provider simplifies operations on data in MongoDB clusters by mapping the\ndata to .NET objects. MongoDB Atlas is a fully-managed cloud database service that hosts your data\non MongoDB clusters. In this guide, we show you how to get started with your\nown free (no credit card required) cluster. Follow the steps below to connect your Entity Framework Provider application to a MongoDB Atlas\ncluster. To set up your Atlas free cluster required for this Quick Start, complete the guide\n MongoDB Atlas Setup  guide. After completing the steps in the Atlas guide, you have a new MongoDB\ncluster deployed in Atlas, a new database user, and\nsample datasets loaded into your cluster. You also have\na connection string similar to the following in your copy buffer: Paste the connection string in your copy buffer into a file in your preferred text\neditor. Replace the  <username>  and  <password>  placeholders with\nyour database user's username and password. Save this file to a safe location for use in the next step. Run the following code in your shell to save the MongoDB connection string\nin your copy buffer from the previous step to an\nenvironment variable. Storing your connection string in an\nenvironment variable keeps your credentials separate from your source code. This\nseparation makes it less likely to expose your credentials when sharing your code. Make sure to replace the  <username>  and  <password>  sections of the connection\nstring with the username and password of your database user. Create a new directory and use the  dotnet new  command to initialize your project\nas follows: Use the  dotnet add  command to add the Entity Framework Provider to your project as a\ndependency. After completing these steps, you should have a working Entity Framework application that\nconnects to your MongoDB cluster, runs a query on the\nsample data, and prints out the result. Open the file named  Program.cs  in the base directory of your project. Copy the\nfollowing sample code into  Program.cs : Run the following command in your shell. It should print the plot of the movie\n\"Back to the Future\" from the sample dataset: If your output is empty, ensure you have loaded the\n sample datasets  into your cluster. Learn how to use the Entity Framework Provider to perform common operations in Quick Reference.",
            "code": [
                {
                    "lang": "bash",
                    "value": "export MONGODB_URI='<your connection string>'"
                },
                {
                    "lang": "bash",
                    "value": "\"mongodb+srv://<username>:<password>@cluster0.abc.mongodb.net/?retryWrites=true&w=majority\""
                },
                {
                    "lang": "shell",
                    "value": "mkdir entity-quickstart\ncd entity-quickstart\ndotnet new console"
                },
                {
                    "lang": "shell",
                    "value": "dotnet add package MongoDB.EntityFrameworkCore"
                },
                {
                    "lang": "csharp",
                    "value": "using Microsoft.EntityFrameworkCore;\nusing MongoDB.Bson;\nusing MongoDB.Driver;\nusing MongoDB.EntityFrameworkCore.Extensions;\n\nvar connectionString = Environment.GetEnvironmentVariable(\"MONGODB_URI\");\n\nif (connectionString == null)\n{\n    Console.WriteLine(\"You must set your 'MONGODB_URI' environment variable. To learn how to set it, see https://www.mongodb.com/docs/drivers/csharp/current/quick-start/#set-your-connection-string\");\n    Environment.Exit(0);\n}\nvar client = new MongoClient(connectionString);\n\nvar db = MflixDbContext.Create(client.GetDatabase(\"sample_mflix\"));\n\nvar movie = db.Movies.First(m => m.title == \"Back to the Future\");\nConsole.WriteLine(movie.plot);\n\ninternal class MflixDbContext : DbContext\n{\n    public DbSet<Movie> Movies { get; init; }\n\n    public static MflixDbContext Create(IMongoDatabase database) =>\n        new(new DbContextOptionsBuilder<MflixDbContext>()\n            .UseMongoDB(database.Client, database.DatabaseNamespace.DatabaseName)\n            .Options);\n\n    public MflixDbContext(DbContextOptions options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n\n        modelBuilder.Entity<Movie>().ToCollection(\"movies\");\n    }\n}\n\ninternal class Movie\n{\n    public ObjectId _id { get; set; }\n    public string title { get; set; }\n    public string rated { get; set; }\n    public string plot { get; set; }\n}"
                },
                {
                    "lang": "none",
                    "value": "dotnet run entity-quickstart.csproj"
                },
                {
                    "lang": "none",
                    "value": "A young man is accidentally sent 30 years into the past in a time-traveling\nDeLorean invented by his friend, Dr. Emmett Brown, and must make sure his\nhigh-school-age parents unite in order to save his own existence."
                }
            ],
            "preview": "After completing these steps, you should have a working Entity Framework application that\nconnects to your MongoDB cluster, runs a query on the\nsample data, and prints out the result.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "quick-reference",
            "title": "Quick Reference",
            "headings": [],
            "paragraphs": "This page shows the provider syntax for several commands and links to\ntheir related API documentation. Command Syntax",
            "code": [
                {
                    "lang": "csharp",
                    "value": "internal class PlanetDbContext : DbContext\n{\n    public DbSet<Planet> Planets { get; init; }\n\n    public static PlanetDbContext Create(IMongoDatabase database) =>\n        new(new DbContextOptionsBuilder<PlanetDbContext>()\n            .UseMongoDB(database.Client, database.DatabaseNamespace.DatabaseName)\n            .Options);\n\n    public PlanetDbContext(DbContextOptions options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        modelBuilder.Entity<Planet>().ToCollection(\"planets\");\n    }\n}"
                },
                {
                    "lang": "csharp",
                    "value": "// Replace the placeholder with your connection URI\nvar client = new MongoClient(\"<Your connection URI>\");\nvar db = PlanetDbContext.Create(client.GetDatabase(\"sample_planets\"));"
                },
                {
                    "lang": "csharp",
                    "value": "var planet = db.Planets.FirstOrDefault(p => p.name == \"Mercury\");\n\nConsole.WriteLine(planet.name);"
                },
                {
                    "lang": "json",
                    "value": "Mercury"
                },
                {
                    "lang": "csharp",
                    "value": "var planets = db.Planets.Where(p => p.hasRings == true).ToList();\n\nforeach (var p in planets)\n{\n   Console.WriteLine(p.name);\n}"
                },
                {
                    "lang": "json",
                    "value": "Neptune\nUranus\nSaturn\nJupiter"
                },
                {
                    "lang": "csharp",
                    "value": "db.Planets.Add(new Planet() { name = \"Pluto\", hasRings = false, orderFromSun = 9 });\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var planets = new[]\n{\n    new Planet() { _id = ObjectId.GenerateNewId(), name = \"Pluto\", hasRings = false, orderFromSun = 9 },\n    new Planet() { _id = ObjectId.GenerateNewId(), name = \"Scadrial\", hasRings = false, orderFromSun = 10 }\n};\n\ndb.Planets.AddRange(planets);\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var planet = db.Planets.FirstOrDefault(p => p.name == \"Mercury\");\nplanet.name = \"Mercury the first planet\";\n\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var planets = db.Planets.Where(p => p.orderFromSun > 0);\nforeach (var p in planets)\n{\n    p.orderFromSun++;\n}\n\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var planet = db.Planets.FirstOrDefault(p => p.name == \"Pluto\");\ndb.Planets.Remove(planet);\n\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var pluto = db.Planets.FirstOrDefault(p => p.name == \"Pluto\");\nvar scadrial = db.Planets.FirstOrDefault(p => p.name == \"Scadrial\");\nvar planets = new[] { pluto, scadrial };\ndb.Planets.RemoveRange(planets);\n\ndb.SaveChanges();"
                },
                {
                    "lang": "csharp",
                    "value": "var planetList = db.Planets.OrderBy(p => p.orderFromSun).ToList();\n\nforeach (var p in planetList)\n{\n    Console.WriteLine(p.name);\n}"
                },
                {
                    "lang": "json",
                    "value": "Mercury\nVenus\nEarth\nMars\nJupiter\nSaturn\nUranus\nNeptune"
                },
                {
                    "lang": "csharp",
                    "value": "var planetList = db.Planets.OrderBy(o => o.hasRings).ThenBy(o => o.name).ToList();\n\nforeach (var p in planetList)\n{\n    Console.WriteLine(\"Has rings: \" + p.hasRings + \", Name: \" + p.name);\n}"
                },
                {
                    "lang": "json",
                    "value": "Has rings: False, Name: Earth\nHas rings: False, Name: Mars\nHas rings: False, Name: Mercury\nHas rings: False, Name: Venus\nHas rings: True, Name: Jupiter\nHas rings: True, Name: Neptune\nHas rings: True, Name: Saturn\nHas rings: True, Name: Uranus"
                },
                {
                    "lang": "csharp",
                    "value": "var planetList = db.Planets.Take(3).ToList();\n\nforeach (var p in planetList)\n{\n    Console.WriteLine(p.name);\n}"
                },
                {
                    "lang": "json",
                    "value": "Neptune\nMercury\nMars"
                },
                {
                    "lang": "csharp",
                    "value": "var planetList = db.Planets.OrderBy(p => p.orderFromSun).Skip(5).ToList();\n\nforeach (var p in planetList)\n{\n    Console.WriteLine(p.name);\n}"
                },
                {
                    "lang": "json",
                    "value": "Saturn\nUranus\nNeptune"
                }
            ],
            "preview": "This page shows the provider syntax for several commands and links to\ntheir related API documentation.",
            "tags": null,
            "facets": null
        }
    ]
}