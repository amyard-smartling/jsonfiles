{
    "url": "https://docs.mongodb.com/php-library/v1.17",
    "includeInGlobalSearch": true,
    "aliases": [],
    "documents": [
        {
            "slug": "index.html",
            "title": "MongoDB PHP Library \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB PHP Library",
                "New to the PHP Library?",
                "New to MongoDB?"
            ],
            "text": "\n MongoDB PHP Library \n The MongoDB PHP Library provides a high-level abstraction around the lower-level\n PHP driver , also known as the  mongodb \nextension. \n The  mongodb  extension provides a limited API to connect to the database and\nexecute generic commands, queries, and write operations. In contrast, the\nMongoDB PHP Library provides a full-featured API and models client, database, and\ncollection objects. Each of those classes provide various helper methods for\nperforming operations in context. For example,  MongoDB\\Collection \nimplements methods for executing CRUD operations and managing indexes on the\ncollection, among other things. \n If you are developing a PHP application with MongoDB, you should consider using\nthe MongoDB PHP Library instead of the extension alone. \n \n New to the PHP Library? \n If you have some experience with MongoDB but are new to the PHP library, the\nfollowing pages should help you get started: \n \n Install the MongoDB PHP Library \n Connecting to MongoDB \n CRUD Operations \n Execute Database Commands \n GridFS \n Modeling BSON Data \n BSON \n \n Code examples can be found in the  examples  directory in the source code. \n If you have previously worked with the legacy  mongo  extension, it will be\nhelpful to review the  Legacy Driver Upgrade Guide  for a summary of API changes between the\nold driver and this library. \n \n \n New to MongoDB? \n If you are a new MongoDB user, the following links should help you become more\nfamiliar with MongoDB and introduce some of the concepts and terms you will\nencounter in the library documentation: \n \n Introduction to MongoDB \n Databases and Collections \n Documents  and\n BSON Types \n MongoDB CRUD Operations \n \n \n \n Installation \n Tutorials \n Connecting to MongoDB \n Server Selection and Monitoring \n CRUD Operations \n Codecs \n Collation \n Execute Database Commands \n Custom Data-Types \n Decimal128 \n In-Use Encryption \n GridFS \n Indexes \n Tailable Cursor Iteration \n Example Data \n Modeling BSON Data \n Stable API \n \n \n Legacy Driver Upgrade Guide \n API Documentation \n BSON \n MongoDB\\Client Class \n MongoDB\\Client::__construct() \n MongoDB\\Client::__get() \n MongoDB\\Client::createClientEncryption() \n MongoDB\\Client::dropDatabase() \n MongoDB\\Client::getManager() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Client::getReadPreference() \n MongoDB\\Client::getTypeMap() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Client::listDatabaseNames() \n MongoDB\\Client::listDatabases() \n MongoDB\\Client::selectCollection() \n MongoDB\\Client::selectDatabase() \n MongoDB\\Client::startSession() \n MongoDB\\Client::watch() \n \n \n MongoDB\\Database Class \n MongoDB\\Database::__construct() \n MongoDB\\Database::__get() \n MongoDB\\Database::aggregate() \n MongoDB\\Database::command() \n MongoDB\\Database::createCollection() \n MongoDB\\Database::createEncryptedCollection() \n MongoDB\\Database::drop() \n MongoDB\\Database::dropCollection() \n MongoDB\\Database::getDatabaseName() \n MongoDB\\Database::getManager() \n MongoDB\\Database::getReadConcern() \n MongoDB\\Database::getReadPreference() \n MongoDB\\Database::getTypeMap() \n MongoDB\\Database::getWriteConcern() \n MongoDB\\Database::listCollectionNames() \n MongoDB\\Database::listCollections() \n MongoDB\\Database::modifyCollection() \n MongoDB\\Database::renameCollection() \n MongoDB\\Database::selectCollection() \n MongoDB\\Database::selectGridFSBucket() \n MongoDB\\Database::watch() \n MongoDB\\Database::withOptions() \n \n \n MongoDB\\Collection Class \n MongoDB\\Collection::__construct() \n MongoDB\\Collection::aggregate() \n MongoDB\\Collection::bulkWrite() \n MongoDB\\Collection::count() \n MongoDB\\Collection::countDocuments() \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::createIndexes() \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::deleteMany() \n MongoDB\\Collection::deleteOne() \n MongoDB\\Collection::distinct() \n MongoDB\\Collection::drop() \n MongoDB\\Collection::dropIndex() \n MongoDB\\Collection::dropIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::estimatedDocumentCount() \n MongoDB\\Collection::explain() \n MongoDB\\Collection::find() \n MongoDB\\Collection::findOne() \n MongoDB\\Collection::findOneAndDelete() \n MongoDB\\Collection::findOneAndReplace() \n MongoDB\\Collection::findOneAndUpdate() \n MongoDB\\Collection::getCollectionName() \n MongoDB\\Collection::getDatabaseName() \n MongoDB\\Collection::getManager() \n MongoDB\\Collection::getNamespace() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\Collection::getReadPreference() \n MongoDB\\Collection::getTypeMap() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\Collection::insertMany() \n MongoDB\\Collection::insertOne() \n MongoDB\\Collection::listIndexes() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::mapReduce() \n MongoDB\\Collection::rename() \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::updateSearchIndex() \n MongoDB\\Collection::watch() \n MongoDB\\Collection::withOptions() \n \n \n MongoDB\\GridFS\\Bucket Class \n MongoDB\\GridFS\\Bucket::__construct() \n MongoDB\\GridFS\\Bucket::delete() \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::drop() \n MongoDB\\GridFS\\Bucket::find() \n MongoDB\\GridFS\\Bucket::findOne() \n MongoDB\\GridFS\\Bucket::getBucketName() \n MongoDB\\GridFS\\Bucket::getChunksCollection() \n MongoDB\\GridFS\\Bucket::getChunkSizeBytes() \n MongoDB\\GridFS\\Bucket::getDatabaseName() \n MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \n MongoDB\\GridFS\\Bucket::getFileIdForStream() \n MongoDB\\GridFS\\Bucket::getFilesCollection() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n MongoDB\\GridFSBucket::getWriteConcern() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n MongoDB\\GridFS\\Bucket::openUploadStream() \n MongoDB\\GridFS\\Bucket::rename() \n MongoDB\\GridFS\\Bucket::uploadFromStream() \n \n \n Write Result Classes \n MongoDB\\BulkWriteResult::getDeletedCount() \n MongoDB\\BulkWriteResult::getInsertedCount() \n MongoDB\\BulkWriteResult::getInsertedIds() \n MongoDB\\BulkWriteResult::getMatchedCount() \n MongoDB\\BulkWriteResult::getModifiedCount() \n MongoDB\\BulkWriteResult::getUpsertedCount() \n MongoDB\\BulkWriteResult::getUpsertedIds() \n MongoDB\\BulkWriteResult::isAcknowledged() \n MongoDB\\DeleteResult::getDeletedCount() \n MongoDB\\DeleteResult::isAcknowledged() \n MongoDB\\InsertManyResult::getInsertedCount() \n MongoDB\\InsertManyResult::getInsertedIds() \n MongoDB\\InsertManyResult::isAcknowledged() \n MongoDB\\InsertOneResult::getInsertedCount() \n MongoDB\\InsertOneResult::getInsertedId() \n MongoDB\\InsertOneResult::isAcknowledged() \n MongoDB\\UpdateResult::getMatchedCount() \n MongoDB\\UpdateResult::getModifiedCount() \n MongoDB\\UpdateResult::getUpsertedCount() \n MongoDB\\UpdateResult::getUpsertedId() \n MongoDB\\UpdateResult::isAcknowledged() \n \n \n Result Classes \n MongoDB\\ChangeStream::current() \n MongoDB\\ChangeStream::getCursorId() \n MongoDB\\ChangeStream::getResumeToken() \n MongoDB\\ChangeStream::key() \n MongoDB\\ChangeStream::next() \n MongoDB\\ChangeStream::rewind() \n MongoDB\\ChangeStream::valid() \n MongoDB\\MapReduceResult::getCounts() \n MongoDB\\MapReduceResult::getExecutionTimeMS() \n MongoDB\\MapReduceResult::getIterator() \n MongoDB\\MapReduceResult::getTiming() \n \n \n Enumeration Classes \n MongoDB\\Model\\CollectionInfo::getCappedMax() \n MongoDB\\Model\\CollectionInfo::getCappedSize() \n MongoDB\\Model\\CollectionInfo::getIdIndex() \n MongoDB\\Model\\CollectionInfo::getInfo() \n MongoDB\\Model\\CollectionInfo::getName() \n MongoDB\\Model\\CollectionInfo::getOptions() \n MongoDB\\Model\\CollectionInfo::getType() \n MongoDB\\Model\\CollectionInfo::isCapped() \n MongoDB\\Model\\DatabaseInfo::getName() \n MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() \n MongoDB\\Model\\DatabaseInfo::isEmpty() \n MongoDB\\Model\\IndexInfo::getKey() \n MongoDB\\Model\\IndexInfo::getName() \n MongoDB\\Model\\IndexInfo::getNamespace() \n MongoDB\\Model\\IndexInfo::getVersion() \n MongoDB\\Model\\IndexInfo::is2dSphere() \n MongoDB\\Model\\IndexInfo::isGeoHaystack() \n MongoDB\\Model\\IndexInfo::isSparse() \n MongoDB\\Model\\IndexInfo::isText() \n MongoDB\\Model\\IndexInfo::isTtl() \n MongoDB\\Model\\IndexInfo::isUnique() \n \n \n Functions \n MongoDB\\add_logger() \n MongoDB\\remove_logger() \n MongoDB\\with_transaction() \n \n \n Exception Classes \n \n \n FAQ \n \n \n \n",
            "preview": "The MongoDB PHP Library provides a high-level abstraction around the lower-level PHP driver , also known as the mongodb extension.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/crud",
                "https://php.net/mongodb",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://docs.mongodb.com/php-library/v1.17/upgrade/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-isEmpty/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileDocumentForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getMatchedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getCounts/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-estimatedDocumentCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/custom-types/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-uploadFromStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-rewind/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedSize/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-rename/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunkSizeBytes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/connecting/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "http://docs.mongodb.org/manual/core/databases-and-collections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-rename/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-delete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-explain/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunksCollection/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/collation/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-dropDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getType/",
                "http://docs.mongodb.org/manual/introduction",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createEncryptedCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "http://docs.mongodb.org/manual/reference/bson-types",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedMax/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabases/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getSizeOnDisk/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getCursorId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-key/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getResumeToken/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/example-data/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/faq/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openUploadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getMatchedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-aggregate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getIdIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getKey/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/codecs/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileIdForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getVersion/",
                "https://docs.mongodb.com/php-library/v1.17/reference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/with_transaction/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getBucketName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isTtl/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-renameCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollectionNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-count/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isGeoHaystack/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getIterator/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getInfo/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isUnique/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-next/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-createClientEncryption/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabaseNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/remove_logger/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/commands/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/stable-api/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-countDocuments/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getTiming/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/encryption/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/functions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-isCapped/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-dropCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/install-php-library/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-distinct/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/gridfs/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-modifyCollection/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-current/",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isText/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/decimal128/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/server-selection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "http://docs.mongodb.org/manual/core/document",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFilesCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getExecutionTimeMS/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-startSession/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-is2dSphere/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isSparse/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/add_logger/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedIds/"
            ]
        },
        {
            "slug": "upgrade/index.html",
            "title": "Legacy Driver Upgrade Guide \u2014 PHP Library Manual upcoming",
            "headings": [
                "Legacy Driver Upgrade Guide",
                "Overview",
                "BSON",
                "Type Classes",
                "Emulating the Legacy Driver",
                "Collection API",
                "Accessing IDs of Inserted Documents",
                "Bulk Write Operations",
                "MongoCollection::save() Removed",
                "Group Command Helper"
            ],
            "text": "\n Legacy Driver Upgrade Guide \n \n On this page \n \n Overview \n BSON \n Type Classes \n Emulating the Legacy Driver \n \n \n Collection API \n Accessing IDs of Inserted Documents \n Bulk Write Operations \n MongoCollection::save() Removed \n Group Command Helper \n \n \n \n \n \n Overview \n The MongoDB PHP Library and underlying  mongodb extension  have notable\nAPI differences from the legacy  mongo  extension. This page will summarize\nthose differences for the benefit of those upgrading from the legacy driver. \n Additionally, a community-developed  mongo-php-adapter  library exists, which\nimplements the  mongo  extension API using this library and the new driver.\nWhile this adapter library is not officially supported by MongoDB, it does bear\nmentioning. \n \n \n BSON \n \n Type Classes \n When upgrading from the legacy driver, type classes such as MongoId must be\nreplaced with classes in the\n MongoDB\\BSON namespace . The\nnew driver also introduces interfaces for its BSON types, which should be\npreferred if applications need to type hint against BSON values. \n The following table lists all legacy classes alongside the equivalent class in\nthe new driver. \n \n \n \n \n \n \n \n Legacy class \n BSON type class \n BSON type interface \n \n \n \n MongoId \n MongoDB\\BSON\\ObjectId \n MongoDB\\BSON\\ObjectIdInterface \n \n MongoCode \n MongoDB\\BSON\\Javascript \n MongoDB\\BSON\\JavascriptInterface \n \n MongoDate \n MongoDB\\BSON\\UTCDateTime \n MongoDB\\BSON\\UTCDateTimeInterface \n \n MongoRegex \n MongoDB\\BSON\\Regex \n MongoDB\\BSON\\RegexInterface \n \n MongoBinData \n MongoDB\\BSON\\Binary \n MongoDB\\BSON\\BinaryInterface \n \n MongoInt32 \n Not implemented.  [1] \n \u00a0 \n \n MongoInt64 \n MongoDB\\BSON\\Int64 \n Not implemented.  [2] \n \n MongoDBRef \n Not implemented.  [3] \n \u00a0 \n \n MongoMinKey \n MongoDB\\BSON\\MinKey \n MongoDB\\BSON\\MinKeyInterface \n \n MongoMaxKey \n MongoDB\\BSON\\MaxKey \n MongoDB\\BSON\\MaxKeyInterface \n \n MongoTimestamp \n MongoDB\\BSON\\Timestamp \n MongoDB\\BSON\\TimestampInterface \n \n \n \n \n \n \n [1] The new driver does not implement an equivalent class for MongoInt32.\nWhen decoding BSON, 32-bit integers will always be represented as a PHP\ninteger. When encoding BSON, PHP integers will encode as either a 32-bit or\n64-bit integer depending on their value. \n \n \n \n \n \n [2] MongoDB\\BSON\\Int64  does not have an\ninterface defined. The new driver does not allow applications to instantiate\nthis type (i.e. its constructor is private) and it is only created during\nBSON decoding when a 64-bit integer cannot be represented as a PHP integer on\na 32-bit platform. \n \n \n \n \n \n [3] ( 1 ,  2 ,  3 )  The new driver does not implement an equivalent class for MongoDBRef\nsince  DBRefs  are merely a BSON\ndocument with a particular structure and not a proper BSON type. The new\ndriver also does not provide any helpers for working with DBRef objects,\nsince their use is not encouraged. \n \n \n \n \n Emulating the Legacy Driver \n The legacy  mongo  extension returned both BSON documents and arrays as PHP\narrays. While PHP arrays are convenient to work with, this behavior was\nproblematic: \n \n Different BSON types could deserialize to the same PHP value (e.g.\n {\"0\":   \"foo\"}  and  [\"foo\"] ), which made it impossible to infer the\noriginal BSON type. \n Numerically-indexed PHP arrays would be serialized as BSON documents if there\nwas a gap in their key sequence. Such gaps were caused by unsetting a key to\nremove an element and forgetting to numerically reindex the array. \n \n The MongoDB PHP Library\u2019s  BSONDocument  and\n BSONArray  classes address these concerns\nby preserving the BSON type information during serialization and\ndeserialization; however, some users may still prefer the legacy behavior. If\ndesired, you can use the  typeMap  option to have the library return\neverything as a PHP array: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://127.0.0.1/' , \n     [], \n     [ \n         'typeMap'   =>   [ \n             'array'   =>   'array' , \n             'document'   =>   'array' , \n             'root'   =>   'array' , \n         ], \n     ] \n ); \n\n $document   =   $client -> test -> zips -> findOne ([ '_id'   =>   '94301' ]); \n\n var_dump ( $document ); \n \n \n \n The above example would output something similar to: \n \n \n \ncopy \n \n array(5) { \n   [\"_id\"]=> \n   string(5) \"94301\" \n   [\"city\"]=> \n   string(9) \"PALO ALTO\" \n   [\"loc\"]=> \n   array(2) { \n     [0]=> \n     float(-122.149685) \n     [1]=> \n     float(37.444324) \n   } \n   [\"pop\"]=> \n   int(15965) \n   [\"state\"]=> \n   string(2) \"CA\" \n } \n \n \n \n \n \n \n Collection API \n This library\u2019s  MongoDB\\Collection  class implements MongoDB\u2019s\ncross-driver  CRUD \nand  Index Management \nspecifications. Although some method names have changed in accordance with the\nnew specifications, the new class provides the same functionality as the legacy\ndriver\u2019s MongoCollection class with some notable exceptions. \n A guiding principle in designing the new APIs was that explicit method names are\npreferable to overloaded terms found in the old API. For instance,\n MongoCollection::save()  and  MongoCollection::findAndModify()  have\ndifferent modes of operation, depending on their arguments. Methods were also\nsplit to distinguish between  updating specific fields  and  full-document replacement . \n The following table lists all legacy methods alongside the\nequivalent method(s) in the new driver. \n \n \n \n \n \n \n MongoCollection method \n MongoDB\\Collection  method(s) \n \n \n \n MongoCollection::aggregate() \n MongoDB\\Collection::aggregate() \n \n MongoCollection::aggregateCursor() \n MongoDB\\Collection::aggregate() \n \n MongoCollection::batchInsert() \n MongoDB\\Collection::insertMany() \n \n MongoCollection::count() \n MongoDB\\Collection::count() \n \n MongoCollection::createDBRef() \n Not yet implemented.  [3] \n \n MongoCollection::createIndex() \n MongoDB\\Collection::createIndex() \n \n MongoCollection::deleteIndex() \n MongoDB\\Collection::dropIndex() \n \n MongoCollection::deleteIndexes() \n MongoDB\\Collection::dropIndexes() \n \n MongoCollection::drop() \n MongoDB\\Collection::drop() \n \n MongoCollection::distinct() \n MongoDB\\Collection::distinct() \n \n MongoCollection::ensureIndex() \n MongoDB\\Collection::createIndex() \n \n MongoCollection::find() \n MongoDB\\Collection::find() \n \n MongoCollection::findAndModify() \n MongoDB\\Collection::findOneAndDelete() ,\n MongoDB\\Collection::findOneAndReplace() , and\n MongoDB\\Collection::findOneAndUpdate() \n \n MongoCollection::findOne() \n MongoDB\\Collection::findOne() \n \n MongoCollection::getDBRef() \n Not implemented.  [3] \n \n MongoCollection::getIndexInfo() \n MongoDB\\Collection::listIndexes() \n \n MongoCollection::getName() \n MongoDB\\Collection::getCollectionName() \n \n MongoCollection::getReadPreference() \n MongoDB\\Collection::getReadPreference() \n \n MongoCollection::getSlaveOkay() \n Not implemented. \n \n MongoCollection::getWriteConcern() \n MongoDB\\Collection::getWriteConcern() \n \n MongoCollection::group() \n Not implemented. Use  MongoDB\\Database::command() . See\n Group Command Helper  for an example. \n \n MongoCollection::insert() \n MongoDB\\Collection::insertOne() \n \n MongoCollection::parallelCollectionScan() \n Not implemented. \n \n MongoCollection::remove() \n MongoDB\\Collection::deleteMany()  and\n MongoDB\\Collection::deleteOne() \n \n MongoCollection::save() \n MongoDB\\Collection::insertOne()  or\n MongoDB\\Collection::replaceOne()  with the  upsert \noption. \n \n MongoCollection::setReadPreference() \n Not implemented. Use  MongoDB\\Collection::withOptions() . \n \n MongoCollection::setSlaveOkay() \n Not implemented. \n \n MongoCollection::setWriteConcern() \n Not implemented. Use  MongoDB\\Collection::withOptions() . \n \n MongoCollection::update() \n MongoDB\\Collection::replaceOne() ,\n MongoDB\\Collection::updateMany() , and\n MongoDB\\Collection::updateOne() . \n \n MongoCollection::validate() \n Not implemented. \n \n \n \n \n Accessing IDs of Inserted Documents \n In the legacy driver,  MongoCollection::insert() ,\n MongoCollection::batchInsert() , and  MongoCollection::save()  (when\ninserting) would modify their input argument by injecting an  _id  key with a\ngenerated ObjectId (i.e. MongoId object). This behavior was a bit of a hack, as\nit did not rely on the argument being  passed by reference ; instead, it directly modified memory through the\nextension API and could not be implemented in PHP userland. As such, it is no\nlonger done in the new driver and library. \n IDs of inserted documents (whether generated or not) may be accessed through the\nfollowing methods on the write result objects: \n \n MongoDB\\InsertOneResult::getInsertedId()  for\n MongoDB\\Collection::insertOne() \n MongoDB\\InsertManyResult::getInsertedIds()  for\n MongoDB\\Collection::insertMany() \n MongoDB\\BulkWriteResult::getInsertedIds()  for\n MongoDB\\Collection::bulkWrite() \n \n \n \n Bulk Write Operations \n The legacy driver\u2019s MongoWriteBatch classes have been replaced with a\ngeneral-purpose  MongoDB\\Collection::bulkWrite()  method. Whereas\nthe legacy driver only allowed bulk operations of the same type, the new method\nallows operations to be mixed (e.g. inserts, updates, and deletes). \n \n \n MongoCollection::save() Removed \n MongoCollection::save() , which was syntactic sugar for an insert or upsert\noperation, has been removed in favor of explicitly using\n MongoDB\\Collection::insertOne()  or\n MongoDB\\Collection::replaceOne()  (with the  upsert  option). \n While the  save  method does have its uses for interactive environments, such\nas the MongoDB shell, it was intentionally excluded from the\n CRUD specification \nfor language drivers. Generally, application code should know if the document\nhas an identifier and be able to explicitly insert or replace the document and\nhandle the returned  MongoDB\\InsertOneResult  or\n MongoDB\\UpdateResult , respectively. This also helps avoid\ninadvertent and potentially dangerous  full-document replacements . \n \n \n Group Command Helper \n MongoDB\\Collection  does not have a helper method for the\n group  command. The following example\ndemonstrates how to execute a group command using the\n MongoDB\\Database::command()  method: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'db_name' ); \n $cursor   =   $database -> command ([ \n     'group'   =>   [ \n         'ns'   =>   'collection_name' , \n         'key'   =>   [ 'field_name'   =>   1 ], \n         'initial'   =>   [ 'total'   =>   0 ], \n         '$reduce'   =>   new   MongoDB\\BSON\\Javascript ( '...' ), \n     ], \n ]); \n\n $resultDocument   =   $cursor -> toArray ()[ 0 ]; \n \n \n \n \n \n",
            "preview": "The MongoDB PHP Library and underlying mongodb extension have notable API differences from the legacy mongo extension. This page will summarize those differences for the benefit of those upgrading from the legacy driver.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/tutorial/modify-documents",
                "https://github.com/alcaeus/mongo-php-adapter",
                "http://php.net/mongodb_bson_javascriptinterface",
                "http://docs.mongodb.org/manual/reference/database-references",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "http://php.net/mongodb_bson_minkey",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://php.net/mongodb_bson_binaryinterface",
                "http://docs.mongodb.org/manual/reference/command/group",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "http://php.net/mongodb_bson_javascript",
                "http://php.net/mongodb_bson_maxkeyinterface",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-distinct/",
                "http://php.net/mongodb_bson_regexinterface",
                "http://docs.mongodb.org/manual/tutorial/modify-documents/",
                "http://php.net/mongodb_bson_int64",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "http://php.net/mongodb",
                "http://php.net/mongodb_bson_utcdatetimeinterface",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://php.net/mongodb_bson_utcdatetime",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-count/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/",
                "http://php.net/mongodb_bson_maxkey",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "http://php.net/mongodb_bson_objectidinterface",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "https://github.com/mongodb/specifications/blob/master/source/index-management.rst",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "http://php.net/mongodb_bson_objectid",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "http://php.net/mongodb_bson_binary",
                "http://php.net/mongodb_bson_regex",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedIds/",
                "https://php.net/manual/en/book.bson.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/",
                "https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "http://php.net/mongodb_bson_timestamp",
                "http://php.net/language.references.pass",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "http://php.net/mongodb_bson_minkeyinterface",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "http://php.net/mongodb_bson_timestampinterface",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedIds/"
            ]
        },
        {
            "slug": "tutorial/index.html",
            "title": "Tutorials \u2014 PHP Library Manual upcoming",
            "headings": [
                "Tutorials"
            ],
            "text": "\n Tutorials \n \n \n Connecting to MongoDB \n Creating a Client instance \n Connecting to a Standalone server \n Connecting to a Replica Set \n Connecting with SSL and Authentication \n \n \n Specifying connection options \n \n \n Server Selection and Monitoring \n Server Selection and Monitoring \n Connection String Options \n connectTimeoutMS \n heartbeatFrequencyMS \n serverSelectionTimeoutMS \n serverSelectionTryOnce \n socketCheckIntervalMS \n socketTimeoutMS \n \n \n \n \n CRUD Operations \n Insert Documents \n Insert One Document \n Insert Many Documents \n \n \n Query Documents \n Find One Document \n Find Many Documents \n Query Projection \n Limit, Sort, and Skip Options \n Regular Expressions \n Complex Queries with Aggregation \n \n \n Update Documents \n Update One Document \n Update Many Documents \n Replace Documents \n Upsert \n \n \n Delete Documents \n Delete One Document \n Delete Many Documents \n \n \n \n \n Codecs \n Overview \n Handling Documents \n Handling Fields and Data Types \n Handling Embedded Documents \n \n \n Collation \n Overview \n Usage \n Collation Parameters \n Assign a Default Collation to a Collection \n Assign a Collation to an Index \n \n \n Operations that Support Collation \n find()  with  sort \n findOneAndUpdate() \n findOneAndDelete() \n deleteMany() \n Aggregation \n \n \n \n \n Execute Database Commands \n Overview \n Commands That Return a Single Result Document \n Commands That Yield Multiple Results \n Specifying a Custom Read Preference \n \n \n Custom Data-Types \n Decimal128 \n Overview \n Working with Decimal128 Values \n Inserting a Decimal128 \n Mathematical Operations with BCMath \n \n \n \n \n In-Use Encryption \n Dependencies \n crypt_shared \n mongocryptd \n \n \n Managing Encryption Keys \n Creating an Encryption Key \n Referencing Encryption Keys by an Alternative Name \n \n \n Client-Side Field Level Encryption \n Automatic Client-Side Field Level Encryption \n Server-Side Field Level Encryption Enforcement \n Providing Local Automatic Encryption Rules \n \n \n Explicit Encryption \n Explicit Encryption with Automatic Decryption \n \n \n Queryable Encryption \n Automatic Queryable Encryption \n Explicit Queryable Encryption \n \n \n \n \n GridFS \n Creating a GridFS Bucket \n Uploading Files with Writable Streams \n Downloading Files with Readable Streams \n Selecting Files by Filename and Revision \n Deleting Files \n Finding File Metadata \n Accessing File Metadata for an Existing Stream \n \n \n Indexes \n Create Indexes \n List Indexes \n Drop Indexes \n \n \n Tailable Cursor Iteration \n Overview \n Manually Iterating a Normal Cursor \n Iterating a Tailable Cursor \n \n \n Example Data \n Modeling BSON Data \n Type Maps \n Persistable Classes \n Working with Enums \n \n \n Stable API \n Declaring an API Version \n Strict API \n Fail on Deprecated Commands \n Usage with the Command Helper \n \n \n \n \n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/server-selection/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/commands/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/example-data/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/encryption/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/connecting/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/codecs/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/stable-api/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/custom-types/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/collation/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/gridfs/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/decimal128/"
            ]
        },
        {
            "slug": "tutorial/stable-api/index.html",
            "title": "Stable API \u2014 PHP Library Manual upcoming",
            "headings": [
                "Stable API",
                "Declaring an API Version",
                "Strict API",
                "Fail on Deprecated Commands",
                "Usage with the Command Helper"
            ],
            "text": "\n Stable API \n \n On this page \n \n Declaring an API Version \n Strict API \n Fail on Deprecated Commands \n Usage with the Command Helper \n \n \n \n Declaring an API Version \n To declare an API version, pass a  serverApi  driver option when creating your\nclient. The value is a\n MongoDB\\Driver\\ServerApi  instance that\ncontains API version information. This feature is introduced in MongoDB 5.0,\nwhich will initially support only API version \u201c1\u201d. Additional versions may be\nintroduced in future versions of the server. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ServerApi ; \n\n $serverApi   =   new   ServerApi ( ServerApi :: V1 ); \n $client   =   new   Client ( 'mongodb://127.0.0.1' ,   [],   [ 'serverApi'   =>   $serverApi ]); \n\n // Command includes the declared API version \n $client -> database -> collection -> find ([]); \n \n \n \n \n Note \n Only declare an API version when connecting to a deployment that has no\npre-5.0 members. Older servers will error when encountering commands with a\ndeclared API version. \n \n \n \n Strict API \n By default, declaring an API version guarantees behavior for commands that are\npart of the stable API, but does not forbid using commands that are not part\nof the API version. To only allow commands and options that are part of the\nstable API, specify the  strict  option when creating the\n MongoDB\\Driver\\ServerApi  instance: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ServerApi ; \n\n $serverApi   =   new   ServerApi ( ServerApi :: V1 ,   true ); \n $client   =   new   Client ( 'mongodb://127.0.0.1' ,   [],   [ 'serverApi'   =>   $serverApi ]); \n\n // Will fail as the tailable option is not supported in versioned API \n $client -> database -> collection -> find ([],   [ 'tailable'   =>   true ]); \n \n \n \n \n \n Fail on Deprecated Commands \n The optional  deprecationErrors  option causes MongoDB to fail all commands\nor behaviors that have been deprecated in the API version. This can be used in\ntesting to ensure a smooth transition to a future API version. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ServerApi ; \n\n $serverApi   =   new   ServerApi ( ServerApi :: V1 ,   null ,   true ); \n $client   =   new   Client ( 'mongodb://127.0.0.1' ,   [],   [ 'serverApi'   =>   $serverApi ]); \n \n \n \n \n Note \n At the time of this writing, no part of API version \u201c1\u201d has been deprecated. \n \n \n \n Usage with the Command Helper \n When using the  MongoDB\\Database::command()  method to run arbitrary\ncommands, the API version declared to the client is automatically appended to\nthe command document. Setting any of the  apiVersion ,  apiStrict , or\n apiDeprecationErrors  command options in the command document and calling\n MongoDB\\Database::command()  from a client with a declared API\nversion is not supported and will lead to undefined behavior. \n \n",
            "preview": "To declare an API version, pass a serverApi driver option when creating your client. The value is a MongoDB\\Driver\\ServerApi instance that contains API version information. This feature is introduced in MongoDB 5.0, which will initially support only API version \u201c1\u201d. Additional versions may be introduced in future versions of the server.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-serverapi",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/"
            ]
        },
        {
            "slug": "tutorial/encryption/index.html",
            "title": "In-Use Encryption \u2014 PHP Library Manual upcoming",
            "headings": [
                "In-Use Encryption",
                "Dependencies",
                "crypt_shared",
                "mongocryptd",
                "Managing Encryption Keys",
                "Creating an Encryption Key",
                "Referencing Encryption Keys by an Alternative Name",
                "Client-Side Field Level Encryption",
                "Automatic Client-Side Field Level Encryption",
                "Explicit Encryption",
                "Explicit Encryption with Automatic Decryption",
                "Queryable Encryption",
                "Automatic Queryable Encryption",
                "Explicit Queryable Encryption"
            ],
            "text": "\n In-Use Encryption \n \n On this page \n \n Dependencies \n crypt_shared \n mongocryptd \n \n \n Managing Encryption Keys \n Creating an Encryption Key \n Referencing Encryption Keys by an Alternative Name \n \n \n Client-Side Field Level Encryption \n Automatic Client-Side Field Level Encryption \n Server-Side Field Level Encryption Enforcement \n Providing Local Automatic Encryption Rules \n \n \n Explicit Encryption \n Explicit Encryption with Automatic Decryption \n \n \n Queryable Encryption \n Automatic Queryable Encryption \n Explicit Queryable Encryption \n \n \n \n \n \n Dependencies \n To get started using in-use encryption in your project, the\n PHP driver  (i.e.  mongodb  extension) will need\nto be compiled with  libmongocrypt \n(enabled by default). \n Additionally, either  crypt_shared  or  mongocryptd  are required in order to\nuse  automatic  client-side encryption. Neither is required for  explicit \nencryption. \n \n crypt_shared \n The  Automatic Encryption Shared Library \n(crypt_shared) provides the same functionality as  mongocryptd , but does not\nrequire you to spawn another process to perform automatic encryption. \n By default, the PHP driver attempts to load crypt_shared from the system path(s)\nand uses it automatically if found. To load crypt_shared from another location,\nuse the  cryptSharedLibPath  auto encryption\n driver option \nwhen constructing a client. If the driver cannot load crypt_shared it will\nattempt to fallback to using mongocryptd by default. The\n cryptSharedLibRequired  option may be used to always require crypt_shared and\nfail if it cannot be loaded. \n For detailed installation instructions see the MongoDB documentation for the\n Automatic Encryption Shared Library . \n \n \n mongocryptd \n The mongocryptd binary is an alternative requirement for automatic client-side\nencryption and is included as a component in the\n MongoDB Enterprise Server package .\nFor detailed installation instructions see the\n MongoDB documentation on mongocryptd . \n mongocryptd performs the following: \n \n Parses the automatic encryption rules specified in the client configuration.\nIf the  schemaMap  auto encryption driver option contains invalid syntax,\nmongocryptd returns an error. \n Uses the specified automatic encryption rules to mark fields in read and write\noperations for encryption. \n Rejects read/write operations that may return unexpected or incorrect results\nwhen applied to an encrypted field. For supported and unsupported operations,\nsee  Supported Operations for Automatic Encryption . \n \n A client configured with auto encryption will automatically spawn the\nmongocryptd process from the application\u2019s  PATH . Applications can control\nthe spawning behavior via various auto encryption\n driver options . \n mongocryptd is only responsible for supporting automatic client-side encryption\nand does not itself perform any encryption or decryption. \n \n \n \n Managing Encryption Keys \n \n See also \n Encryption Key Management  in the MongoDB manual \n \n \n Creating an Encryption Key \n \n Note \n The following examples use a local master key. While this is suitable for\ndevelopment, a production application should use a supported cloud provider\n(e.g. AWS KMS). The master key is used to encrypt locally stored data keys\nand thus it is very important that you keep this key secure. \n \n To create an encryption key, create a\n MongoDB\\Driver\\ClientEncryption \ninstance with encryption options and use the\n createDataKey() \nmethod. The method will return the key ID which can be used to reference the key\nlater. You can also pass multiple  alternate names  for this key\nand reference the key by these names instead of the key ID. \n Creating a new data encryption key would typically be done on initial\ndeployment, but depending on your use case you may want to use more than one\nencryption key (e.g. user-specific encryption keys) or create them dynamically. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n /* Prepare the database for this script. Drop the key vault collection and \n  * ensure it has a unique index for keyAltNames. This would typically be done \n  * during application deployment. */ \n $client -> selectCollection ( 'encryption' ,   '__keyVault' ) -> drop (); \n $client -> selectCollection ( 'encryption' ,   '__keyVault' ) -> createIndex ([ 'keyAltNames'   =>   1 ],   [ \n     'unique'   =>   true , \n     'partialFilterExpression'   =>   [ 'keyAltNames'   =>   [ '$exists'   =>   true ]], \n ]); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n /* Create a data encryption key. To store the key ID for later use, you can use \n  * serialize(), var_export(), etc. */ \n $keyId   =   $clientEncryption -> createDataKey ( 'local' ); \n\n print_r ( $keyId ); \n\n // Encrypt a value using the key that was just created \n $encryptedValue   =   $clientEncryption -> encrypt ( 'mySecret' ,   [ \n     'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n     'keyId'   =>   $keyId , \n ]); \n\n print_r ( $encryptedValue ); \n \n \n \n \n \n Referencing Encryption Keys by an Alternative Name \n To reference keys in your application, you can use the  keyAltName \nattribute specified when creating the key. The following example creates an\nencryption key with an alternative name, which could be done when deploying the\napplication. The script then encrypts data by referencing the key by its\nalternative name using the  keyAltName  option instead of  keyId . \n \n Note \n Prior to adding a new key alternate name, you must create a partial, unique\nindex on the  keyAltNames  field. Client-Side Field Level Encryption\ndepends on server-enforced uniqueness of key alternate names. \n \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n use   MongoDB\\Driver\\Exception\\ServerException ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n /* Prepare the database for this script. Drop the key vault collection and \n  * ensure it has a unique index for keyAltNames. This would typically be done \n  * during application deployment. */ \n $client -> selectCollection ( 'encryption' ,   '__keyVault' ) -> drop (); \n $client -> selectCollection ( 'encryption' ,   '__keyVault' ) -> createIndex ([ 'keyAltNames'   =>   1 ],   [ \n     'unique'   =>   true , \n     'partialFilterExpression'   =>   [ 'keyAltNames'   =>   [ '$exists'   =>   true ]], \n ]); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n // Create a data encryption key with an alternate name \n $clientEncryption -> createDataKey ( 'local' ,   [ 'keyAltNames'   =>   [ 'myDataKey' ]]); \n\n /* Attempt to create a second key with the same name to demonstrate that the \n  * unique index is enforced. */ \n try   { \n     $clientEncryption -> createDataKey ( 'local' ,   [ 'keyAltNames'   =>   [ 'myDataKey' ]]); \n }   catch   ( ServerException   $e )   { \n     printf ( \"Error creating key: %s \\n \" ,   $e -> getMessage ()); \n } \n\n // Encrypt a value, using the \"keyAltName\" option instead of \"keyId\" \n $encryptedValue   =   $clientEncryption -> encrypt ( 'mySecret' ,   [ \n     'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n     'keyAltName'   =>   'myDataKey' , \n ]); \n\n print_r ( $encryptedValue ); \n \n \n \n \n \n \n Client-Side Field Level Encryption \n Introduced in MongoDB 4.2,\n Client-Side Field Level Encryption  allows an\napplication to encrypt specific data fields in addition to pre-existing MongoDB\nencryption features such as\n Encryption at Rest  and\n TLS/SSL (Transport Encryption) . \n With field level encryption, applications can encrypt fields in documents prior\nto transmitting data over the wire to the server. Client-side field level\nencryption supports workloads where applications must guarantee that\nunauthorized parties, including server administrators, cannot read the encrypted\ndata. \n \n Automatic Client-Side Field Level Encryption \n \n Note \n Automatic client-side field level encryption requires MongoDB 4.2+ Enterprise\nor a MongoDB 4.2+ Atlas cluster. \n \n Automatic client-side field level encryption is enabled by creating a client and\nspecifying the  autoEncryption \n driver option .\nThe following examples demonstrate how to setup automatic client-side field\nlevel encryption and use a\n MongoDB\\Driver\\ClientEncryption \nobject to create a new encryption key. \n \n Server-Side Field Level Encryption Enforcement \n The MongoDB 4.2+ server supports using schema validation to enforce encryption\nof specific fields in a collection. This schema validation will prevent an\napplication from inserting unencrypted values for any fields marked with the\n \u201cencrypt\u201d schema keyword . \n The following example sets up a collection with automatic encryption using a\n $jsonSchema  validator and\n Encryption Schema syntax .\nData in the  encryptedField  field is automatically encrypted on insertion and\ndecrypted when reading on the client side. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n use   MongoDB\\Driver\\Exception\\ServerException ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n /* Create a data encryption key. Alternatively, this key ID could be read from a \n  * configuration file. */ \n $keyId   =   $clientEncryption -> createDataKey ( 'local' ); \n\n // Create another client with automatic encryption enabled \n $encryptedClient   =   new   Client ( $uri ,   [],   [ \n     'autoEncryption'   =>   [ \n         'keyVaultNamespace'   =>   'encryption.__keyVault' , \n         'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n     ], \n ]); \n\n // Define a JSON schema for the encrypted collection \n $schema   =   [ \n     'bsonType'   =>   'object' , \n     'properties'   =>   [ \n         'encryptedField'   =>   [ \n             'encrypt'   =>   [ \n                 'keyId'   =>   [ $keyId ], \n                 'bsonType'   =>   'string' , \n                 'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n             ], \n         ], \n     ], \n ]; \n\n /* Create a new collection for this script. Configure a server-side schema by \n  * explicitly creating the collection with a \"validator\" option. */ \n $encryptedClient -> selectDatabase ( 'test' ) -> createCollection ( 'coll' ,   [ 'validator'   =>   [ '$jsonSchema'   =>   $schema ]]); \n $encryptedCollection   =   $encryptedClient -> selectCollection ( 'test' ,   'coll' ); \n\n /* Using the encrypted client, insert and find a document to demonstrate that \n  * the encrypted field is automatically encrypted and decrypted. */ \n $encryptedCollection -> insertOne ([ '_id'   =>   1 ,   'encryptedField'   =>   'mySecret' ]); \n\n print_r ( $encryptedCollection -> findOne ([ '_id'   =>   1 ])); \n\n /* Using the client configured without encryption, find the same document and \n  * observe that the field is not automatically decrypted. */ \n $unencryptedCollection   =   $client -> selectCollection ( 'test' ,   'coll' ); \n\n print_r ( $unencryptedCollection -> findOne ([ '_id'   =>   1 ])); \n\n /* Attempt to insert another document with an unencrypted field value to \n  * demonstrate that the server-side schema is enforced. */ \n try   { \n     $unencryptedCollection -> insertOne ([ '_id'   =>   2 ,   'encryptedField'   =>   'myOtherSecret' ]); \n }   catch   ( ServerException   $e )   { \n     printf ( \"Error inserting document: %s \\n \" ,   $e -> getMessage ()); \n } \n \n \n \n \n \n Providing Local Automatic Encryption Rules \n The following example uses the  schemaMap  auto encryption driver option to\ndefine encrypted fields using a\n strict subset of the JSON schema syntax . \n Using  schemaMap  in conjunction with a  server-side schema \nprovides more security than relying entirely on a schema obtained from the\nserver. It protects against a malicious server advertising a false schema, which\ncould trick the client into sending unencrypted data that should be encrypted. \n \n Note \n Only  Encryption Schema syntax \ncan be used with the  schemaMap  option. Do not specify document validation\nkeywords in the automatic encryption rules. To define document validation\nrules, configure  schema validation . \n \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n use   MongoDB\\Driver\\Exception\\ServerException ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n /* Create a data encryption key. Alternatively, this key ID could be read from a \n  * configuration file. */ \n $keyId   =   $clientEncryption -> createDataKey ( 'local' ); \n\n /* Define a JSON schema for the encrypted collection. Since this only utilizes \n  * encryption schema syntax, it can be used for both the server-side and local \n  * schema. */ \n $schema   =   [ \n     'bsonType'   =>   'object' , \n     'properties'   =>   [ \n         'encryptedField'   =>   [ \n             'encrypt'   =>   [ \n                 'keyId'   =>   [ $keyId ], \n                 'bsonType'   =>   'string' , \n                 'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n             ], \n         ], \n     ], \n ]; \n\n /* Create another client with automatic encryption enabled. Configure a local \n  * schema for the encrypted collection using the \"schemaMap\" option. */ \n $encryptedClient   =   new   Client ( $uri ,   [],   [ \n     'autoEncryption'   =>   [ \n         'keyVaultNamespace'   =>   'encryption.__keyVault' , \n         'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n         'schemaMap'   =>   [ 'test.coll'   =>   $schema ], \n     ], \n ]); \n\n /* Create a new collection for this script. Configure a server-side schema by \n  * explicitly creating the collection with a \"validator\" option. \n  * \n  * Note: without a server-side schema, another client could potentially insert \n  * unencrypted data into the collection. Therefore, a local schema should always \n  * be used in conjunction with a server-side schema. */ \n $encryptedClient -> selectDatabase ( 'test' ) -> createCollection ( 'coll' ,   [ 'validator'   =>   [ '$jsonSchema'   =>   $schema ]]); \n $encryptedCollection   =   $encryptedClient -> selectCollection ( 'test' ,   'coll' ); \n\n /* Using the encrypted client, insert and find a document to demonstrate that \n  * the encrypted field is automatically encrypted and decrypted. */ \n $encryptedCollection -> insertOne ([ '_id'   =>   1 ,   'encryptedField'   =>   'mySecret' ]); \n\n print_r ( $encryptedCollection -> findOne ([ '_id'   =>   1 ])); \n\n /* Using the client configured without encryption, find the same document and \n  * observe that the field is not automatically decrypted. */ \n $unencryptedCollection   =   $client -> selectCollection ( 'test' ,   'coll' ); \n\n print_r ( $unencryptedCollection -> findOne ([ '_id'   =>   1 ])); \n\n /* Attempt to insert another document with an unencrypted field value to \n  * demonstrate that the server-side schema is enforced. */ \n try   { \n     $unencryptedCollection -> insertOne ([ '_id'   =>   2 ,   'encryptedField'   =>   'myOtherSecret' ]); \n }   catch   ( ServerException   $e )   { \n     printf ( \"Error inserting document: %s \\n \" ,   $e -> getMessage ()); \n } \n \n \n \n \n \n \n Explicit Encryption \n Explicit encryption is a MongoDB community feature and does not use\n crypt_shared  or  mongocryptd . Explicit encryption is provided by the\n MongoDB\\Driver\\ClientEncryption  class. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n /* Create a data encryption key. Alternatively, this key ID could be read from a \n  * configuration file. */ \n $keyId   =   $clientEncryption -> createDataKey ( 'local' ); \n\n // Insert a document with a manually encrypted field \n $encryptedValue   =   $clientEncryption -> encrypt ( 'mySecret' ,   [ \n     'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n     'keyId'   =>   $keyId , \n ]); \n\n $collection   =   $client -> selectCollection ( 'test' ,   'coll' ); \n $collection -> insertOne ([ '_id'   =>   1 ,   'encryptedField'   =>   $encryptedValue ]); \n\n /* Using the client configured without encryption, find the document and observe \n  * that the field is not automatically decrypted. */ \n\n /** @var object{encryptedField: Binary} $document */ \n $document   =   $collection -> findOne (); \n\n print_r ( $document ); \n\n // Manually decrypt the field \n printf ( \"Decrypted: %s \\n \" ,   $clientEncryption -> decrypt ( $document -> encryptedField )); \n \n \n \n \n \n Explicit Encryption with Automatic Decryption \n Although automatic encryption requires MongoDB 4.2+ enterprise or a MongoDB 4.2+\nAtlas cluster, automatic  decryption  is supported for all users. To configure\nautomatic decryption without automatic encryption set the\n bypassAutoEncryption  auto encryption\n driver option \nwhen constructing a client. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with automatic encryption disabled \n $client   =   new   Client ( $uri ,   [],   [ \n     'autoEncryption'   =>   [ \n         'keyVaultNamespace'   =>   'encryption.__keyVault' , \n         'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n         'bypassAutoEncryption'   =>   true , \n     ], \n ]); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   $localKey ], \n     ], \n ]); \n\n /* Create a data encryption key. Alternatively, this key ID could be read from a \n  * configuration file. */ \n $keyId   =   $clientEncryption -> createDataKey ( 'local' ); \n\n // Insert a document with a manually encrypted field \n $encryptedValue   =   $clientEncryption -> encrypt ( 'mySecret' ,   [ \n     'algorithm'   =>   ClientEncryption :: AEAD_AES_256_CBC_HMAC_SHA_512_DETERMINISTIC , \n     'keyId'   =>   $keyId , \n ]); \n\n $collection   =   $client -> selectCollection ( 'test' ,   'coll' ); \n $collection -> insertOne ([ '_id'   =>   1 ,   'encryptedField'   =>   $encryptedValue ]); \n\n /* Using the client configured with encryption (but not automatic encryption), \n  * find the document and observe that the field is automatically decrypted. */ \n $document   =   $collection -> findOne (); \n\n print_r ( $document ); \n \n \n \n \n \n \n Queryable Encryption \n Introduced in MongoDB 7.0,\n Queryable Encryption  is another\nform of in-use encryption. Data is encrypted client-side. Queryable Encryption\nsupports indexed encrypted fields, which are further processed server-side. \n \n Automatic Queryable Encryption \n \n Note \n Automatic queryable encryption requires MongoDB 7.0+ Enterprise or a MongoDB\n7.0+ Atlas cluster. \n \n Automatic encryption in Queryable Encryption utilizes  crypt_shared  or\n mongocryptd  to automatically encrypt and decrypt data client-side. The data\nin the  encryptedIndexed  and  encryptedUnindexed  fields will be\nautomatically encrypted on insertion and decrypted when querying on the client\nside. Additionally, it is possible to query on the  encryptedIndexed  field. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n ]); \n\n /* Create the data encryption keys for this script. Alternatively, the key IDs \n  * could be read from a configuration file. */ \n $keyId1   =   $clientEncryption -> createDataKey ( 'local' ); \n $keyId2   =   $clientEncryption -> createDataKey ( 'local' ); \n\n /* Create another client with automatic encryption enabled. Configure the \n  * encrypted collection using the \"encryptedFields\" option. */ \n $encryptedClient   =   new   Client ( $uri ,   [],   [ \n     'autoEncryption'   =>   [ \n         'keyVaultNamespace'   =>   'encryption.__keyVault' , \n         'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n         'encryptedFieldsMap'   =>   [ \n             'test.coll'   =>   [ \n                 'fields'   =>   [ \n                     [ \n                         'path'   =>   'encryptedIndexed' , \n                         'bsonType'   =>   'string' , \n                         'keyId'   =>   $keyId1 , \n                         'queries'   =>   [ 'queryType'   =>   ClientEncryption :: QUERY_TYPE_EQUALITY ], \n                     ], \n                     [ \n                         'path'   =>   'encryptedUnindexed' , \n                         'bsonType'   =>   'string' , \n                         'keyId'   =>   $keyId2 , \n                     ], \n                 ], \n             ], \n         ], \n     ], \n ]); \n\n /* Create the data collection for this script. The create and drop helpers will \n  * infer encryptedFields from the client configuration and manage internal \n  * encryption collections automatically. Alternatively, the \"encryptedFields\" \n  * option can also be passed explicitly. */ \n $encryptedClient -> selectDatabase ( 'test' ) -> createCollection ( 'coll' ); \n $encryptedCollection   =   $encryptedClient -> selectCollection ( 'test' ,   'coll' ); \n\n /* Using the encrypted client, insert a document and find it by querying on the \n  * encrypted field. Fields will be automatically encrypted and decrypted. */ \n $encryptedCollection -> insertOne ([ \n     '_id'   =>   1 , \n     'encryptedIndexed'   =>   'indexedValue' , \n     'encryptedUnindexed'   =>   'unindexedValue' , \n ]); \n\n print_r ( $encryptedCollection -> findOne ([ 'encryptedIndexed'   =>   'indexedValue' ])); \n\n /* Using the client configured without encryption, find the same document and \n  * observe that fields are not automatically decrypted. */ \n $unencryptedCollection   =   $client -> selectCollection ( 'test' ,   'coll' ); \n\n print_r ( $unencryptedCollection -> findOne ([ '_id'   =>   1 ])); \n \n \n \n \n \n Explicit Queryable Encryption \n \n Note \n Explicit queryable encryption requires MongoDB 7.0+. \n \n Explicit encryption in Queryable Encryption is performed using the\n MongoDBDriverClientEncryption::encrypt() \nand  decrypt()  methods. Although\nvalues must be explicitly encrypted (e.g. insertions, query criteria), automatic\n decryption  for queries is possible by configuring  encryptedFields  on the\ncollection, as demonstrated in the following example: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Binary ; \n use   MongoDB\\Client ; \n use   MongoDB\\Driver\\ClientEncryption ; \n\n require   __DIR__   .   '/../../../vendor/autoload.php' ; \n\n $uri   =   getenv ( 'MONGODB_URI' )   ?:   'mongodb://127.0.0.1/' ; \n\n /* Note: this script assumes that the test database is empty and that the key \n  * vault collection exists and has a partial, unique index on keyAltNames (as \n  * demonstrated in the encryption key management scripts). */ \n\n // Generate a secure local key to use for this script \n $localKey   =   new   Binary ( random_bytes ( 96 )); \n\n // Create a client with no encryption options \n $client   =   new   Client ( $uri ); \n\n // Create a ClientEncryption object to manage data encryption keys \n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'encryption.__keyVault' , \n     'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n ]); \n\n /* Create the data encryption keys. Alternatively, the key IDs could be read \n  * from a configuration file. */ \n $keyId1   =   $clientEncryption -> createDataKey ( 'local' ); \n $keyId2   =   $clientEncryption -> createDataKey ( 'local' ); \n\n // Create another client with automatic encryption disabled \n $encryptedClient   =   new   Client ( $uri ,   [],   [ \n     'autoEncryption'   =>   [ \n         'keyVaultNamespace'   =>   'encryption.__keyVault' , \n         'kmsProviders'   =>   [ 'local'   =>   [ 'key'   =>   $localKey ]], \n         'bypassQueryAnalysis'   =>   true , \n     ], \n ]); \n\n // Define encrypted fields for the collection \n $encryptedFields   =   [ \n     'fields'   =>   [ \n         [ \n             'path'   =>   'encryptedIndexed' , \n             'bsonType'   =>   'string' , \n             'keyId'   =>   $keyId1 , \n             'queries'   =>   [ 'queryType'   =>   ClientEncryption :: QUERY_TYPE_EQUALITY ], \n         ], \n         [ \n             'path'   =>   'encryptedUnindexed' , \n             'bsonType'   =>   'string' , \n             'keyId'   =>   $keyId2 , \n         ], \n     ], \n ]; \n\n /* Create the data collection for this script. Specify the \"encryptedFields\" \n  * option to ensure that internal encryption collections are also created. The \n  * \"encryptedFields\" option should also be specified when dropping the \n  * collection to ensure that internal encryption collections are dropped. */ \n $encryptedClient -> selectDatabase ( 'test' ) -> createCollection ( 'coll' ,   [ 'encryptedFields'   =>   $encryptedFields ]); \n $encryptedCollection   =   $encryptedClient -> selectCollection ( 'test' ,   'coll' ); \n\n // Insert a document with manually encrypted fields \n $indexedInsertPayload   =   $clientEncryption -> encrypt ( 'indexedValue' ,   [ \n     'algorithm'   =>   ClientEncryption :: ALGORITHM_INDEXED , \n     'contentionFactor'   =>   1 , \n     'keyId'   =>   $keyId1 , \n ]); \n\n $unindexedInsertPayload   =   $clientEncryption -> encrypt ( 'unindexedValue' ,   [ \n     'algorithm'   =>   ClientEncryption :: ALGORITHM_UNINDEXED , \n     'keyId'   =>   $keyId2 , \n ]); \n\n $encryptedCollection -> insertOne ([ \n     '_id'   =>   1 , \n     'encryptedIndexed'   =>   $indexedInsertPayload , \n     'encryptedUnindexed'   =>   $unindexedInsertPayload , \n ]); \n\n /* Encrypt the payload for an \"equality\" query using the same key that was used \n  * to encrypt the corresponding insert payload. */ \n $indexedFindPayload   =   $clientEncryption -> encrypt ( 'indexedValue' ,   [ \n     'algorithm'   =>   ClientEncryption :: ALGORITHM_INDEXED , \n     'queryType'   =>   ClientEncryption :: QUERY_TYPE_EQUALITY , \n     'contentionFactor'   =>   1 , \n     'keyId'   =>   $keyId1 , \n ]); \n\n /* Using the client configured with encryption (but not automatic encryption), \n  * find the document and observe that the fields are automatically decrypted. */ \n print_r ( $encryptedCollection -> findOne ([ 'encryptedIndexed'   =>   $indexedFindPayload ])); \n \n \n \n \n \n",
            "preview": "To get started using in-use encryption in your project, the PHP driver (i.e. mongodb extension) will need to be compiled with libmongocrypt (enabled by default).",
            "tags": "",
            "links": [
                "https://php.net/mongodb",
                "http://docs.mongodb.org/manual/core/csfle/",
                "http://php.net/mongodb-driver-clientencryption.decrypt",
                "http://docs.mongodb.org/manual/core/csfle/fundamentals/manage-keys/",
                "http://docs.mongodb.org/manual/core/security-encryption-at-rest/",
                "http://docs.mongodb.org/manual/core/security-transport-encryption/",
                "http://php.net/class.mongodb-driver-clientencryption",
                "https://github.com/mongodb/libmongocrypt",
                "http://docs.mongodb.org/manual/core/csfle/reference/encryption-schemas/",
                "http://docs.mongodb.org/manual/core/queryable-encryption/",
                "http://docs.mongodb.org/manual/core/queryable-encryption/reference/shared-library/",
                "http://php.net/manual/en/mongodb-driver-manager.construct.php",
                "http://php.net/mongodb-driver-clientencryption",
                "http://docs.mongodb.org/manual/core/csfle/fundamentals/create-schema/",
                "http://php.net/mongodb-driver-clientencryption.encrypt",
                "http://docs.mongodb.org/manual/core/csfle/reference/supported-operations/",
                "http://docs.mongodb.org/manual/core/csfle/reference/mongocryptd/",
                "http://php.net/manual/en/mongodb-driver-clientencryption.createdatakey.php",
                "http://docs.mongodb.org/manual/core/schema-validation/",
                "http://docs.mongodb.org/manual/administration/install-enterprise/"
            ]
        },
        {
            "slug": "tutorial/tailable-cursor/index.html",
            "title": "Tailable Cursor Iteration \u2014 PHP Library Manual upcoming",
            "headings": [
                "Tailable Cursor Iteration",
                "Overview",
                "Manually Iterating a Normal Cursor",
                "Iterating a Tailable Cursor"
            ],
            "text": "\n Tailable Cursor Iteration \n \n On this page \n \n Overview \n Manually Iterating a Normal Cursor \n Iterating a Tailable Cursor \n \n \n \n Overview \n When the driver executes a query or command (e.g.\n aggregate ), results from the operation\nare returned via a  MongoDB\\Driver\\Cursor \nobject. The Cursor class implements PHP\u2019s  Iterator \ninterface, which allows it to be iterated with  foreach  and interface with\nany PHP functions that work with  iterables . Similar to\nresult objects in other database drivers, cursors in MongoDB only support\nforward iteration, which means they cannot be rewound or used with  foreach \nmultiple times. \n Tailable cursors  are a special type of\nMongoDB cursor that allows the client to read some results and then wait until\nmore documents become available. These cursors are primarily used with\n Capped Collections  and\n Change Streams . \n While normal cursors can be iterated once with  foreach , that approach will\nnot work with tailable cursors. When  foreach  is used with a tailable cursor,\nthe loop will stop upon reaching the end of the initial result set. Attempting\nto continue iteration on the cursor with a second  foreach  would throw an\nexception, since PHP attempts to rewind the cursor. Therefore, reading from a\ntailable cursor will require direct usage of the  Iterator  API. \n \n Note \n Before version 1.9.0 of the  ext-mongodb  extension, the cursor class does\nnot implement the  Iterator  interface. To manually iterate\na cursor using the method below, it must first be wrapped with an\n IteratorIterator . \n \n \n \n Manually Iterating a Normal Cursor \n Before looking at how a tailable cursor can be iterated, we\u2019ll start by\nexamining how the  Iterator  methods interact with a normal cursor. \n The following example finds five restaurants and uses  foreach  to view the\nresults: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $cursor   =   $collection -> find ([],   [ 'limit'   =>   5 ]); \n\n foreach   ( $cursor   as   $document )   { \n    var_dump ( $document ); \n } \n \n \n \n While this example is quite concise, there is actually quite a bit going on. The\n foreach  construct begins by rewinding the iterable ( $cursor  in this\ncase). It then checks if the current position is valid. If the position is not\nvalid, the loop ends. Otherwise, the current key and value are accessed\naccordingly and the loop body is executed. Assuming a  break  has\nnot occurred, the iterator then advances to the next position, control jumps\nback to the validity check, and the loop continues. \n With the inner workings of  foreach  under our belt, we can now translate the\npreceding example to use the Iterator methods directly: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $cursor   =   $collection -> find ([],   [ 'limit'   =>   5 ]); \n\n $cursor -> rewind (); \n\n while   ( $cursor -> valid ())   { \n    $document   =   $cursor -> current (); \n    var_dump ( $document ); \n    $cursor -> next (); \n } \n \n \n \n \n Note \n Calling  $cursor->next()  after the  while  loop naturally ends would\nthrow an exception, since all results on the cursor have been exhausted. \n \n The purpose of this example is to demonstrate the functional equivalence between\n foreach  and manual iteration with PHP\u2019s  Iterator <iterator>`API.\nFor normal cursors, there is little reason to manually iterate results instead\nof a concise ``foreach`  loop. \n \n \n Iterating a Tailable Cursor \n In order to demonstrate a tailable cursor in action, we\u2019ll need two scripts: a\n\u201cproducer\u201d and a \u201cconsumer\u201d. The producer script will create a new capped\ncollection using  MongoDB\\Database::createCollection()  and proceed\nto insert a new document into that collection each second. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $database -> createCollection ( 'capped' ,   [ \n     'capped'   =>   true , \n     'size'   =>   16777216 , \n ]); \n\n $collection   =   $database -> selectCollection ( 'capped' ); \n\n while   ( true )   { \n     $collection -> insertOne ([ 'createdAt'   =>   new   MongoDB\\BSON\\UTCDateTime ()]); \n     sleep ( 1 ); \n } \n \n \n \n With the producer script still running, we will now execute a consumer script to\nread the inserted documents using a tailable cursor, indicated by the\n cursorType  option to  MongoDB\\Collection::find() . We\u2019ll start\nby using  foreach  to illustrate its shortcomings: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> capped ; \n\n $cursor   =   $collection -> find ([],   [ \n     'cursorType'   =>   MongoDB\\Operation\\Find :: TAILABLE_AWAIT , \n     'maxAwaitTimeMS'   =>   100 , \n ]); \n\n foreach   ( $cursor   as   $document )   { \n     printf ( \"Consumed document created at: %s \\n \" ,   $document -> createdAt ); \n } \n \n \n \n If you execute this consumer script, you\u2019ll notice that it quickly exhausts all\nresults in the capped collection and then terminates. We cannot add a second\n foreach , as that would throw an exception when attempting to rewind the\ncursor. This is a ripe use case for directly controlling the iteration process\nusing the  Iterator  interface. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> capped ; \n\n $cursor   =   $collection -> find ([],   [ \n     'cursorType'   =>   MongoDB\\Operation\\Find :: TAILABLE_AWAIT , \n     'maxAwaitTimeMS'   =>   100 , \n ]); \n\n $cursor -> rewind (); \n\n while   ( true )   { \n    if   ( $cursor -> valid ())   { \n       $document   =   $cursor -> current (); \n       printf ( \"Consumed document created at: %s \\n \" ,   $document -> createdAt ); \n    } \n\n    $cursor -> next (); \n } \n \n \n \n Much like the  foreach  example, this version on the consumer script will\nstart by quickly printing all results in the capped collection; however, it will\nnot terminate upon reaching the end of the initial result set. Since we\u2019re\nworking with a tailable cursor, calling  next()  will block and wait for\nadditional results rather than throw an exception. We will also use  valid() \nto check if there is actually data available to read at each step. \n Since we\u2019ve elected to use a  TAILABLE_AWAIT  cursor, the server will delay\nits response to the driver for a set amount of time. In this example, we\u2019ve\nrequested that the server block for approximately 100 milliseconds by specifying\nthe  maxAwaitTimeMS  option to  MongoDB\\Collection::find() . \n \n",
            "preview": "When the driver executes a query or command (e.g. aggregate ), results from the operation are returned via a MongoDB\\Driver\\Cursor object. The Cursor class implements PHP\u2019s Iterator interface, which allows it to be iterated with foreach and interface with any PHP functions that work with iterables . Similar to result objects in other database drivers, cursors in MongoDB only support forward iteration, which means they cannot be rewound or used with foreach multiple times.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/changeStreams",
                "http://php.net/class.mongodb-driver-cursor",
                "http://docs.mongodb.org/manual/reference/command/aggregate",
                "http://php.net/iterator",
                "http://php.net/break",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "http://php.net/Iterator <iterator>`API. For normal cursors, there is little reason to manually iterate results instead of a concise ``foreach`",
                "http://php.net/iteratoriterator",
                "http://php.net/types.iterable",
                "http://docs.mongodb.org/manual/core/capped-collections",
                "http://docs.mongodb.org/manual/core/tailable-cursors"
            ]
        },
        {
            "slug": "tutorial/custom-types/index.html",
            "title": "Custom Data-Types \u2014 PHP Library Manual upcoming",
            "headings": [
                "Custom Data-Types"
            ],
            "text": "\n Custom Data-Types \n \n Note \n This tutorial explains implementing custom data types using the  MongoDB\\BSON\\Persistable \ninterface found in the MongoDB extension. Consider using a codec instead to decouple the MongoDB persistence logic\nfrom your business logic. See the  codec tutorial  for an example. \n \n The MongoDB PHP extension and library support custom classes while\nserializing and deserializing. An example of where this might be useful is\nif you want to store date/time information retaining the time zone\ninformation that PHP\u2019s  DateTimeImmutable \nclass stores with a point in time. \n The driver serializes PHP variables, including objects, into BSON when it\ncommunicates to the server, and deserializes BSON back into PHP variables when\nit receives data from the server. \n It is possible to influence the behavior by implementing the\n MongoDB\\BSON\\Persistable  interface.\nIf a class implements this interface, then upon serialization the\n bsonSerialize  method is\ncalled. This method is responsible for returning an array or stdClass object\nto convert to BSON and store in the database. That data will later be used to\nreconstruct the object upon reading from the database. \n As an example we present the  LocalDateTime  class. This class wraps around\nthe  MongoDB\\BSON\\UTCDateTime  data\ntype and a time zone. \n \n \n \ncopy \n \n <?php \n /* Custom document class that stores a UTCDateTime and time zone and also \n  * implements the UTCDateTime interface for portability. */ \n class   LocalDateTime   implements   \\MongoDB\\BSON\\Persistable ,   \\MongoDB\\BSON\\UTCDateTimeInterface \n { \n     private   $utc ; \n     private   $tz ; \n     public   function   __construct ( $milliseconds   =   null ,   \\DateTimeZone   $timezone   =   null ) \n     { \n         $this -> utc   =   new   \\MongoDB\\BSON\\UTCDateTime ( $milliseconds ); \n         if   ( $timezone   ===   null )   { \n             $timezone   =   new   \\DateTimeZone ( date_default_timezone_get ()); \n         } \n         $this -> tz   =   $timezone ; \n     } \n ?> \n \n \n \n As it implements the  MongoDB\\BSON\\Persistable  interface, the\nclass is required to implement the  bsonSerialize  and  bsonUnserialize  methods. In the\n bsonSerialize  method, we\nreturn an array with the two values that we need to persist: the point in time\nin milliseconds since the Epoch, represented by a\n MongoDB\\BSON\\UTCDateTime  object, and\na string containing the Olson time zone identifier: \n \n \n \ncopy \n \n <?php \n     public   function   bsonSerialize () \n     { \n         return   [ \n             'utc'   =>   $this -> utc , \n             'tz'   =>   $this -> tz -> getName (), \n         ]; \n     } \n ?> \n \n \n \n The driver will additionally add a  __pclass  field to the document, and\nstore that in the database, too. This field contains the PHP class name so that\nupon deserialization the driver knows which class to use for recreating the\nstored object. \n When the document is read from the database, the driver detects whether a\n __pclass  field is present and then executes\n MongoDB\\BSON\\Persistable::bsonUnserialize  method which is\nresponsible for restoring the object\u2019s original state. \n In the code below, we make sure that the data in the  utc  and  tz  fields\nare of the right time, and then assign their values to the two private\nproperties. \n \n \n \ncopy \n \n <?php \n     public   function   bsonUnserialize ( array   $data ) \n     { \n         if   (   !   isset ( $data [ 'utc' ])   ||   !   $data [ 'utc' ]   instanceof   \\MongoDB\\BSON\\UTCDateTime )   { \n             throw   new   Exception ( 'Expected \"utc\" field to be a UTCDateTime' ); \n         } \n\n         if   (   !   isset ( $data [ 'tz' ])   ||   !   is_string ( $data [ 'tz' ]))   { \n             throw   new   Exception ( 'Expected \"tz\" field to be a string' ); \n         } \n\n         $this -> utc   =   $data [ 'utc' ]; \n         $this -> tz   =   new   \\DateTimeZone ( $data [ 'tz' ]); \n     } \n ?> \n \n \n \n You may have noticed that the class also implements the\n MongoDB\\BSON\\UTCDateTimeInterface  interface. This interface defines\nthe two non-constructor methods of the  MongoDB\\BSON\\UTCDateTime  class. \n It is recommended that wrappers around existing BSON classes implement their\nrespective interface (i.e.  MongoDB\\BSON\\UTCDateTimeInterface ) so that the wrapper objects can be\nused in the same context as their original unwrapped version. It is also\nrecommended that you always type-hint against the interface (i.e.\n MongoDB\\BSON\\UTCDateTimeInterface ) and never against the concrete\nclass (i.e.  MongoDB\\BSON\\UTCDateTime ), as this would prevent wrapped objects from\nbeing accepted into methods. \n In our new  toDateTime  method we return a  DateTime \nobject with the local time zone set, instead of the UTC time zone that\n MongoDB\\BSON\\UTCDateTime  normally uses\nin its return value. \n \n \n \ncopy \n \n <?php \n     public   function   toDateTime () \n     { \n         return   $this -> utc -> toDateTime () -> setTimezone ( $this -> tz ); \n     } \n\n     public   function   __toString () \n     { \n         return   ( string )   $this -> utc ; \n     } \n } \n ?> \n \n \n \n With the class defined, we can now use it in our documents. The snippet below\ndemonstrates the round tripping from the  LocalDateTime  object to BSON, and\nback to  LocalDateTime . \n \n \n \ncopy \n \n <?php \n $bson   =   MongoDB\\BSON\\fromPHP ([ 'date'   =>   new   LocalDateTime ]); \n $document   =   MongoDB\\BSON\\toPHP ( $bson ); \n\n var_dump ( $document ); \n var_dump ( $document -> date -> toDateTime ()); \n ?> \n \n \n \n Which outputs: \n \n \n \ncopy \n \n object(stdClass)#1 (1) {\n  [\"date\"]=>\n  object(LocalDateTime)#2 (2) {\n    [\"utc\":\"LocalDateTime\":private]=>\n    object(MongoDB\\BSON\\UTCDateTime)#3 (1) {\n      [\"milliseconds\"]=>\n      string(13) \"1533042443716\"\n    }\n    [\"tz\":\"LocalDateTime\":private]=>\n    object(DateTimeZone)#4 (2) {\n      [\"timezone_type\"]=>\n      int(3)\n      [\"timezone\"]=>\n      string(13) \"Europe/London\"\n    }\n  }\n}\nobject(DateTime)#5 (3) {\n  [\"date\"]=>\n  string(26) \"2018-07-31 14:07:23.716000\"\n  [\"timezone_type\"]=>\n  int(3)\n  [\"timezone\"]=>\n  string(13) \"Europe/London\"\n}\n \n \n \n Storing the Olson time zone identifier in a separate field also works well\nwith MongoDB\u2019s  Aggregation Framework , which allows\ndate manipulation,  formatting , and querying depending on a\nspecific time zone. \n",
            "preview": "The MongoDB PHP extension and library support custom classes while serializing and deserializing. An example of where this might be useful is if you want to store date/time information retaining the time zone information that PHP\u2019s DateTimeImmutable class stores with a point in time.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-bson-persistable",
                "http://docs.mongodb.org/manual/aggregation",
                "http://php.net/mongodb-bson-serializable.bsonserialize",
                "http://php.net/class.mongodb-bson-utcdatetimeinterface",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/codecs/",
                "http://php.net/mongodb-bson-unserializable.bsonunserialize",
                "http://php.net/class.mongodb-bson-utcdatetime",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/dateToString",
                "http://php.net/class.datetimeimmutable",
                "http://php.net/class.datetime"
            ]
        },
        {
            "slug": "tutorial/codecs/index.html",
            "title": "Codecs \u2014 PHP Library Manual upcoming",
            "headings": [
                "Codecs",
                "Overview",
                "Handling Documents",
                "Handling Fields and Data Types",
                "Handling Embedded Documents"
            ],
            "text": "\n Codecs \n \n On this page \n \n Overview \n Handling Documents \n Handling Fields and Data Types \n Handling Embedded Documents \n \n \n \n New in version 1.17. \n \n \n Overview \n Codecs are used to decode BSON documents into PHP objects, and encode PHP objects into BSON documents. In contrast to\nother methods (e.g. type maps), codecs allow for greater customization and handling of different data types. They\nseparate logic for BSON encoding and decoding from the domain classes, which also enables BSON to be decoded into plain\nold PHP objects. \n \n \n Handling Documents \n The main logic is contained in a document codec. This class implements the  MongoDB\\Codec\\DocumentCodec  interface and\ndefines what data types can be encoded/decoded and how. The following example defines a  Person  class and a codec to\ntransform it: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\ObjectId ; \n\n final   class   Person \n { \n     public   function   __construct ( \n         public   string   $name , \n         public   readonly   ObjectId   $id   =   new   ObjectId (), \n     )   { \n     } \n } \n \n \n \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Document ; \n use   MongoDB\\Codec\\DecodeIfSupported ; \n use   MongoDB\\Codec\\DocumentCodec ; \n use   MongoDB\\Codec\\EncodeIfSupported ; \n use   MongoDB\\Exception\\UnsupportedValueException ; \n\n /** @template-implements DocumentCodec<Person> */ \n final   class   PersonCodec   implements   DocumentCodec \n { \n     // These traits define commonly used functionality to avoid duplication \n     use   DecodeIfSupported ; \n     use   EncodeIfSupported ; \n\n     public   function   canDecode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Document   &&   $value -> has ( 'name' ); \n     } \n\n     public   function   canEncode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Person ; \n     } \n\n     public   function   decode ( mixed   $value ) :   Person \n     { \n         if   ( !   $this -> canDecode ( $value ))   { \n             throw   UnsupportedValueException :: invalidDecodableValue ( $value ); \n         } \n\n         return   new   Person ( \n             $value -> get ( 'name' ), \n             $value -> get ( '_id' ), \n         ); \n     } \n\n     public   function   encode ( mixed   $value ) :   Document \n     { \n         if   ( !   $this -> canEncode ( $value ))   { \n             throw   UnsupportedValueException :: invalidEncodableValue ( $value ); \n         } \n\n         return   Document :: fromPHP ([ \n             '_id'   =>   $value -> id , \n             'name'   =>   $value -> name , \n         ]); \n     } \n } \n \n \n \n To then use this codec with a collection, specify the  codec  option when selecting the collection: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\Client ; \n\n $client   =   new   Client (); \n $collection   =   $client -> selectCollection ( 'test' ,   'person' ,   [ \n     'codec'   =>   new   PersonCodec (), \n ]); \n\n $person   =   new   Person ( 'Jane Doe' ); \n $collection -> insertOne ( $person ); \n\n $person   =   $collection -> findOne (); \n \n \n \n The example above selects a collection and instructs it to use the  PersonCodec  for encoding and decoding documents.\nWhen inserting data, the  PersonCodec  is used to encode the document. When retrieving data, the same  PersonCodec \nis used to decode BSON data into a  Person  instance. Note that while the  PersonCodec  could technically decode any\nBSON document that contains a name field, we wouldn\u2019t want to use it for any other documents. Document codecs are meant\nto be used with a  MongoDB\\Collection , or when decoding embedded documents. \n When using a collection with a codec, the codec will only accept and return data of that type for certain operations.\nInsert and replace operations (e.g.  insertOne ,  `findOneAndReplace , and some  bulkWrite  operations) will\nattempt to encode the given data using the provided codec. Trying to insert or replace a document that cannot be encoded\nwill result in an exception. Read operations (e.g.  aggregate ,  find , and  findOneAndUpdate ) will attempt to\ndecode returned documents using the provided codec. If the codec does not support the data returned, an exception will\nbe thrown. \n You can disable codec usage for a specific operation or use a different codec (e.g. to decode the result of an\naggregation pipeline) by specifying  null  for the  codec  option for any operation. Alternatively, specifying a\ntype map using the  typeMap  operation will also override the collection-level codec: \n \n \n \ncopy \n \n <?php \n\n // Overrides the collection codec, falling back to the default type map \n $collection -> aggregate ( $pipeline ,   [ 'codec'   =>   null ]); \n\n // Overrides the collection codec, using the specified type map \n $collection -> findOne ( $filter ,   [ 'typeMap'   =>   [ 'root'   =>   'stdClass' ]]); \n \n \n \n \n \n Handling Fields and Data Types \n The previous example showed how to define a codec for a specific class. However, you may want to create a codec that\nhandles a particular data type in any document. This can be achieved by implementing the  MongoDB\\Codec\\Codec \ninterface. \n The following example defines a codec that stores  DateTimeInterface  instances as an embedded document containing a\nBSON date and accompanying timezone string. Those same embedded documents can then be translated back into a\n DateTimeImmutable  during BSON decoding. \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Document ; \n use   MongoDB\\BSON\\UTCDateTime ; \n use   MongoDB\\Codec\\Codec ; \n use   MongoDB\\Codec\\DecodeIfSupported ; \n use   MongoDB\\Codec\\EncodeIfSupported ; \n use   MongoDB\\Exception\\UnsupportedValueException ; \n\n /** @template-implements Codec<Document, DateTimeImmutable> */ \n final   class   DateTimeCodec   implements   Codec \n { \n     use   DecodeIfSupported ; \n     use   EncodeIfSupported ; \n\n     public   function   canDecode ( mixed   $value ) :   bool \n     { \n         /* This codec inspects the BSON document to ensure it has the fields it expects, and that those fields are of \n          * the correct type. This is a robust approach to avoid decoding document that are not supported and would cause \n          * exceptions. \n          * \n          * For large documents, this can be inefficient as we're inspecting the entire document four times (once for \n          * each call to has() and get()). For small documents, this is not a problem. \n          */ \n         return   $value   instanceof   Document \n             &&   $value -> has ( 'utc' )   &&   $value -> get ( 'utc' )   instanceof   UTCDateTime \n             &&   $value -> has ( 'tz' )   &&   is_string ( $value -> get ( 'tz' )); \n     } \n\n     public   function   canEncode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   DateTimeInterface ; \n     } \n\n     public   function   decode ( mixed   $value ) :   DateTimeImmutable \n     { \n         if   ( !   $this -> canDecode ( $value ))   { \n             throw   UnsupportedValueException :: invalidDecodableValue ( $value ); \n         } \n\n         $timeZone   =   new   DateTimeZone ( $value -> get ( 'tz' )); \n         $dateTime   =   $value -> get ( 'utc' ) \n             -> toDateTime () \n             -> setTimeZone ( $timeZone ); \n\n         return   DateTimeImmutable :: createFromMutable ( $dateTime ); \n     } \n\n     public   function   encode ( mixed   $value ) :   Document \n     { \n         if   ( !   $this -> canEncode ( $value ))   { \n             throw   UnsupportedValueException :: invalidEncodableValue ( $value ); \n         } \n\n         return   Document :: fromPHP ([ \n             'utc'   =>   new   UTCDateTime ( $value ), \n             'tz'   =>   $value -> getTimezone () -> getName (), \n         ]); \n     } \n } \n \n \n \n This codec can now be leveraged by other codecs handle date fields. \n First, we add a  createdAt  field to the  Person  class: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\ObjectId ; \n\n final   class   Person \n { \n     public   function   __construct ( \n         public   string   $name , \n         public   readonly   DateTime   $createdAt   =   new   DateTime (), \n         public   readonly   ObjectId   $id   =   new   ObjectId (), \n     )   { \n     } \n } \n \n \n \n Last but not least, we modify the codec to handle the new field: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Document ; \n use   MongoDB\\Codec\\DecodeIfSupported ; \n use   MongoDB\\Codec\\DocumentCodec ; \n use   MongoDB\\Codec\\EncodeIfSupported ; \n use   MongoDB\\Exception\\UnsupportedValueException ; \n\n /** @template-implements DocumentCodec<Person> */ \n final   class   PersonCodec   implements   DocumentCodec \n { \n     use   DecodeIfSupported ; \n     use   EncodeIfSupported ; \n\n     public   function   __construct ( \n         private   readonly   DateTimeCodec   $dateTimeCodec   =   new   DateTimeCodec (), \n     )   { \n     } \n\n     public   function   canDecode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Document   &&   $value -> has ( 'name' ); \n     } \n\n     public   function   canEncode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Person ; \n     } \n\n     public   function   decode ( mixed   $value ) :   Person \n     { \n         if   ( !   $this -> canDecode ( $value ))   { \n             throw   UnsupportedValueException :: invalidDecodableValue ( $value ); \n         } \n\n         return   new   Person ( \n             $value -> get ( 'name' ), \n             $this -> dateTimeCodec -> decode ( $value -> get ( 'createdAt' )), \n             $value -> get ( '_id' ), \n         ); \n     } \n\n     public   function   encode ( mixed   $value ) :   Document \n     { \n         if   ( !   $this -> canEncode ( $value ))   { \n             throw   UnsupportedValueException :: invalidEncodableValue ( $value ); \n         } \n\n         return   Document :: fromPHP ([ \n             '_id'   =>   $value -> id , \n             'name'   =>   $value -> name , \n             'createdAt'   =>   $this -> dateTimeCodec -> encode ( $value -> createdAt ), \n         ]); \n     } \n } \n \n \n \n \n \n Handling Embedded Documents \n A previous example showed how to handle a single document. However, sometimes you want to handle fields that contain\nembedded documents. We will demonstrate this using an  Address  document, which we will embed within a  Person \ndocument. To ensure consistency, we\u2019re going to make this a read-only class: \n \n \n \ncopy \n \n <?php \n\n final   readonly   class   Address \n { \n     public   function   __construct ( \n         public   string   $street , \n         public   string   $postCode , \n         public   string   $city , \n         public   string   $country , \n     )   { \n     } \n } \n \n \n \n We can now create a document codec for this class: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Document ; \n use   MongoDB\\Codec\\DecodeIfSupported ; \n use   MongoDB\\Codec\\DocumentCodec ; \n use   MongoDB\\Codec\\EncodeIfSupported ; \n use   MongoDB\\Exception\\UnsupportedValueException ; \n\n /** @template-implements DocumentCodec<Address> */ \n final   class   AddressCodec   implements   DocumentCodec \n { \n     use   DecodeIfSupported ; \n     use   EncodeIfSupported ; \n\n     public   function   canDecode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Document \n             &&   $value -> has ( 'street' ) \n             &&   $value -> has ( 'postCode' ) \n             &&   $value -> has ( 'city' ) \n             &&   $value -> has ( 'country' ); \n     } \n\n     public   function   canEncode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Address ; \n     } \n\n     public   function   decode ( mixed   $value ) :   Address \n     { \n         if   ( !   $this -> canDecode ( $value ))   { \n             throw   UnsupportedValueException :: invalidDecodableValue ( $value ); \n         } \n\n         return   new   Address ( \n             $value -> get ( 'street' ), \n             $value -> get ( 'postCode' ), \n             $value -> get ( 'city' ), \n             $value -> get ( 'country' ), \n         ); \n     } \n\n     public   function   encode ( mixed   $value ) :   Document \n     { \n         if   ( !   $this -> canEncode ( $value ))   { \n             throw   UnsupportedValueException :: invalidEncodableValue ( $value ); \n         } \n\n         return   Document :: fromPHP ([ \n             'street'   =>   $value -> street , \n             'postCode'   =>   $value -> postCode , \n             'city'   =>   $value -> city , \n             'country'   =>   $value -> country , \n         ]); \n     } \n } \n \n \n \n The  Person  class gets a new  address  field, but we\u2019ll leave this optional: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\ObjectId ; \n\n final   class   Person \n { \n     public   ? Address   $address   =   null ; \n\n     public   function   __construct ( \n         public   string   $name , \n         public   readonly   ObjectId   $id   =   new   ObjectId () \n     )   { \n     } \n } \n \n \n \n The  PersonCodec  can now handle the optional  address  field when transforming data: \n \n \n \ncopy \n \n <?php \n\n use   MongoDB\\BSON\\Document ; \n use   MongoDB\\Codec\\DecodeIfSupported ; \n use   MongoDB\\Codec\\DocumentCodec ; \n use   MongoDB\\Codec\\EncodeIfSupported ; \n use   MongoDB\\Exception\\UnsupportedValueException ; \n\n /** @template-implements DocumentCodec<Person> */ \n final   class   PersonCodec   implements   DocumentCodec \n { \n     use   DecodeIfSupported ; \n     use   EncodeIfSupported ; \n\n     public   function   __construct ( \n         private   readonly   AddressCodec   $addressCodec   =   new   AddressCodec (), \n     )   { \n     } \n\n     public   function   canDecode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Document   &&   $value -> has ( 'name' ); \n     } \n\n     public   function   canEncode ( mixed   $value ) :   bool \n     { \n         return   $value   instanceof   Person ; \n     } \n\n     public   function   decode ( mixed   $value ) :   Person \n     { \n         if   ( !   $this -> canDecode ( $value ))   { \n             throw   UnsupportedValueException :: invalidDecodableValue ( $value ); \n         } \n\n         $person   =   new   Person ( \n             $value -> get ( 'name' ), \n             $value -> get ( '_id' ), \n         ); \n\n         // Address is optional, so only decode if it exists \n         if   ( $value -> has ( 'address' ))   { \n             $person -> address   =   $this -> addressCodec -> decode ( $value -> get ( 'address' )); \n         } \n\n         return   $person ; \n     } \n\n     public   function   encode ( mixed   $value ) :   Document \n     { \n         if   ( !   $this -> canEncode ( $value ))   { \n             throw   UnsupportedValueException :: invalidEncodableValue ( $value ); \n         } \n\n         $data   =   [ \n             '_id'   =>   $value -> id , \n             'name'   =>   $value -> name , \n         ]; \n\n         // Don't add a null value to the document if address is not set \n         if   ( $value -> address )   { \n             $data [ 'address' ]   =   $this -> addressCodec -> encode ( $value -> address ); \n         } \n\n         return   Document :: fromPHP ( $data ); \n     } \n } \n \n \n \n \n",
            "preview": "Codecs are used to decode BSON documents into PHP objects, and encode PHP objects into BSON documents. In contrast to other methods (e.g. type maps), codecs allow for greater customization and handling of different data types. They separate logic for BSON encoding and decoding from the domain classes, which also enables BSON to be decoded into plain old PHP objects.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "tutorial/example-data/index.html",
            "title": "Example Data \u2014 PHP Library Manual upcoming",
            "headings": [
                "Example Data"
            ],
            "text": "\n Example Data \n Some examples in this documentation use example data fixtures from\n zips.json  and\n primer-dataset.json . \n Importing the dataset into MongoDB can be done in several ways. The following\nexample imports the  zips.json  file into a  test.zips  collection:\n driver  directly: \n \n \n \ncopy \n \n <?php \n\n $filename   =   'https://media.mongodb.org/zips.json' ; \n $lines   =   file ( $filename ,   FILE_IGNORE_NEW_LINES ); \n\n $bulk   =   new   MongoDB\\Driver\\BulkWrite ; \n\n foreach   ( $lines   as   $line )   { \n     $bson   =   MongoDB\\BSON\\fromJSON ( $line ); \n     $document   =   MongoDB\\BSON\\toPHP ( $bson ); \n     $bulk -> insert ( $document ); \n } \n\n $manager   =   new   MongoDB\\Driver\\Manager ( 'mongodb://127.0.0.1/' ); \n\n $result   =   $manager -> executeBulkWrite ( 'test.zips' ,   $bulk ); \n printf ( \"Inserted %d documents \\n \" ,   $result -> getInsertedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 29353 documents\n \n \n \n You may also import the datasets using  mongoimport , which is included with MongoDB: \n \n \n \ncopy \n \n mongoimport --db  test  --collection zips --file zips.json --drop\nmongoimport --db  test  --collection restaurants --file primer-dataset.json --drop\n \n \n \n",
            "preview": "Some examples in this documentation use example data fixtures from zips.json and primer-dataset.json .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/program/mongoimport",
                "https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.json",
                "https://media.mongodb.org/zips.json",
                "http://php.net/mongodb"
            ]
        },
        {
            "slug": "tutorial/decimal128/index.html",
            "title": "Decimal128 \u2014 PHP Library Manual upcoming",
            "headings": [
                "Decimal128",
                "Overview",
                "Working with Decimal128 Values",
                "Inserting a Decimal128",
                "Mathematical Operations with BCMath"
            ],
            "text": "\n Decimal128 \n \n On this page \n \n Overview \n Working with Decimal128 Values \n Inserting a Decimal128 \n Mathematical Operations with BCMath \n \n \n \n \n \n Overview \n MongoDB 3.4 introduced support for a  Decimal128 BSON type , which is a 128-bit decimal-based\nfloating-point value capable of emulating decimal rounding with exact precision.\nThis functionality is intended for applications that handle  monetary\ndata , such as financial and tax computations. \n The  MongoDBBSONDecimal128  class, which was\nintroduced in  PHP driver  1.2.0, may be used to work with this\ntype in PHP. \n \n \n Working with Decimal128 Values \n \n Inserting a Decimal128 \n The following example inserts a value of type  Decimal128  into the  price \nfield of a collection named  inventory : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> inventory ; \n\n $collection -> insertOne ([ \n     '_id'   =>   1 , \n     'item'   =>   '26-inch monitor' , \n     'price'   =>   new   MongoDB\\BSON\\Decimal128 ( '428.79' ), \n ]); \n\n $item   =   $collection -> findOne ([ '_id'   =>   1 ]); \n\n var_dump ( $item ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    int(1)\n    [\"item\"]=>\n    string(15) \"26-inch monitor\"\n    [\"price\"]=>\n    object(MongoDB\\BSON\\Decimal128)#13 (1) {\n      [\"dec\"]=>\n      string(6) \"428.79\"\n    }\n  }\n}\n \n \n \n \n \n Mathematical Operations with BCMath \n The  PHP driver  does not provide any functionality for working\nwith  Decimal128  values; however, the string representation of a\n MongoDBBSONDecimal128  object may be used\nwith PHP\u2019s  BCMath  extension. \n The following example adds two  Decimal128  values and creates a new\n Decimal128  value with the result from  bcadd() : \n \n \n \ncopy \n \n <?php \n\n $lhs   =   new   MongoDB\\BSON\\Decimal128 ( '1.234' ); \n $rhs   =   new   MongoDB\\BSON\\Decimal128 ( '5.678' ); \n $sum   =   new   MongoDB\\BSON\\Decimal128 ( bcadd ( $lhs ,   $rhs )); \n\n var_dump ( $sum ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\BSON\\Decimal128)#4 (1) {\n  [\"dec\"]=>\n  string(1) \"6\"\n}\n \n \n \n This does not match the expected result of \u201c6.912\u201d. Each operation in the BCMath\nAPI uses a scale to determine the number of decimal digits in the result. The\ndefault scale is zero, which is why the above example produces a result with no\ndecimal precision. \n In the following example, we use a scale of three for  bcadd()  to\nobtain the expected result: \n \n \n \ncopy \n \n <?php \n\n $lhs   =   new   MongoDB\\BSON\\Decimal128 ( '1.234' ); \n $rhs   =   new   MongoDB\\BSON\\Decimal128 ( '5.678' ); \n $sum   =   new   MongoDB\\BSON\\Decimal128 ( bcadd ( $lhs ,   $rhs ,   3 )); \n\n var_dump ( $sum ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\BSON\\Decimal128)#4 (1) {\n  [\"dec\"]=>\n  string(5) \"6.912\"\n}\n \n \n \n In lieu of specifying a scale for each operation, a default scale may be set via\n bcscale()  or the  bcmath.scale INI setting . The  Decimal128  type\nsupports up to 34 decimal digits (i.e. significant digits). \n \n \n",
            "preview": "MongoDB 3.4 introduced support for a Decimal128 BSON type , which is a 128-bit decimal-based floating-point value capable of emulating decimal rounding with exact precision. This functionality is intended for applications that handle monetary data , such as financial and tax computations.",
            "tags": "",
            "links": [
                "http://php.net/mongodb",
                "http://php.net/mongodb-bson-decimal128",
                "http://php.net/manual/en/bc.configuration.php",
                "http://php.net/bcscale",
                "http://docs.mongodb.org/manual/manual/release-notes/3.4/",
                "http://docs.mongodb.org/manual/tutorial/model-monetary-data",
                "http://php.net/bcadd",
                "http://php.net/bcmath"
            ]
        },
        {
            "slug": "tutorial/install-php-library/index.html",
            "title": "Install the MongoDB PHP Library \u2014 PHP Library Manual upcoming",
            "headings": [
                "Install the MongoDB PHP Library",
                "Installing the Extension",
                "Installing the Library",
                "Using Composer",
                "Manual Installation Without Composer"
            ],
            "text": "\n Install the MongoDB PHP Library \n \n On this page \n \n Installing the Extension \n Installing the Library \n Using Composer \n Manual Installation Without Composer \n \n \n \n \n The MongoDB PHP Library is a high-level abstraction for the\n PHP driver  (i.e.  mongodb  extension). This page\nwill briefly explain how to install both the  mongodb  extension and the\nMongoDB PHP Library. \n \n Installing the Extension \n Linux, Unix, and macOS users can either\n install the extension with PECL \n(recommended) or\n manually compile from source .\nThe following command may be used to install the extension with PECL: \n \n \n \ncopy \n \n sudo pecl install mongodb\n \n \n \n \n Note \n If the build process for either installation method fails to find a TLS\nlibrary, check that the development packages (e.g.  libssl-dev ) and\n pkg-config  are both installed. \n \n Once the extension is installed, add the following line to your  php.ini \nfile: \n \n \n \ncopy \n \n extension = mongodb.so \n \n \n \n Windows users can download precompiled binaries of the extension from its\n GitHub releases .\nAfter downloading the appropriate archive for your PHP environment, extract the\n php_mongodb.dll  file to PHP\u2019s extension directory and add the following line\nto your  php.ini  file: \n \n \n \ncopy \n \n extension = php_mongodb.dll \n \n \n \n See  Installing the MongoDB PHP Driver on Windows \nfor additional information. \n \n \n Installing the Library \n \n Using Composer \n The preferred method of installing the MongoDB PHP Library is with\n Composer  by running the following command from\nyour project root: \n \n \n \ncopy \n \n composer require mongodb/mongodb\n \n \n \n Once you have installed the library, ensure that your application includes\nComposer\u2019s autoloader as in the following example: \n \n \n \ncopy \n \n <?php \n\n require_once   __DIR__   .   '/vendor/autoload.php' ; \n \n \n \n Refer to Composer\u2019s  autoloading documentation  for more\ninformation about setting up autoloading. \n \n \n Manual Installation Without Composer \n While not recommended, you may also manually install the library using a source\narchive attached to the\n GitHub releases .\nWhen installing the library without Composer, you must ensure that all library\nclasses  and  functions are loaded for your application: \n \n If you are using a  PSR-4  autoloader,\nmap the top-level  MongoDB\\  namespace to the  src/  directory. If you\nare not using an autoloader, manually require _all_ class files found\nrecursively within the  src/  directory. \n Regardless of whether you are using an autoloader, manually require the\n src/functions.php  file. This is necessary because PHP does not support\nautoloading for functions. \n \n \n \n",
            "preview": "The MongoDB PHP Library is a high-level abstraction for the PHP driver (i.e. mongodb extension). This page will briefly explain how to install both the mongodb extension and the MongoDB PHP Library.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb.installation.pecl.php",
                "http://php.net/manual/en/mongodb.installation.manual.php",
                "https://github.com/mongodb/mongo-php-driver/releases",
                "https://getcomposer.org/doc/01-basic-usage.md",
                "https://www.php-fig.org/psr/psr-4/",
                "https://en.wikipedia.org/wiki/Pkg-config",
                "https://getcomposer.org/",
                "http://php.net/manual/en/mongodb.installation.windows.php",
                "https://php.net/mongodb",
                "https://github.com/mongodb/mongo-php-library/releases"
            ]
        },
        {
            "slug": "tutorial/gridfs/index.html",
            "title": "GridFS \u2014 PHP Library Manual upcoming",
            "headings": [
                "GridFS",
                "Creating a GridFS Bucket",
                "Uploading Files with Writable Streams",
                "Downloading Files with Readable Streams",
                "Selecting Files by Filename and Revision",
                "Deleting Files",
                "Finding File Metadata",
                "Accessing File Metadata for an Existing Stream"
            ],
            "text": "\n GridFS \n \n On this page \n \n Creating a GridFS Bucket \n Uploading Files with Writable Streams \n Downloading Files with Readable Streams \n Selecting Files by Filename and Revision \n Deleting Files \n Finding File Metadata \n Accessing File Metadata for an Existing Stream \n \n \n GridFS  is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g.  fs.chunks ), and the other stores file metadata\n(e.g.  fs.files ). The  MongoDB\\GridFS\\Bucket  class provides an\ninterface around these collections for working with the files as PHP\n Streams . \n \n Creating a GridFS Bucket \n You can construct a GridFS bucket using the PHP extension\u2019s\n MongoDB\\Driver\\Manager  class, or select\na bucket from the MongoDB PHP Library\u2019s  MongoDB\\Database  class via the\n selectGridFSBucket() \nmethod. \n The bucket can be constructed with various options: \n \n bucketName  determines the prefix for the bucket\u2019s metadata and chunk\ncollections. The default value is  \"fs\" . \n chunkSizeBytes  determines the size of each chunk. GridFS divides the file\ninto chunks of this length, except for the last, which is only as large as\nneeded. The default size is  261120  (i.e. 255 KiB). \n readConcern ,  readPreference  and  writeConcern  options can be used\nto specify defaults for read and write operations, much like the\n MongoDB\\GridFS\\Collection  options. \n \n \n \n Uploading Files with Writable Streams \n To upload a file to GridFS using a writable stream, you can either open a stream\nand write to it directly or write the entire contents of another readable stream\nto GridFS all at once. \n To open an upload stream and write to it: \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openUploadStream ( 'my-file.txt' ); \n\n $contents   =   file_get_contents ( '/path/to/my-file.txt' ); \n fwrite ( $stream ,   $contents ); \n fclose ( $stream ); \n \n \n \n To upload the entire contents of a readable stream in one call: \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $file   =   fopen ( '/path/to/my-file.txt' ,   'rb' ); \n $bucket -> uploadFromStream ( 'my-file.txt' ,   $file ); \n \n \n \n \n \n Downloading Files with Readable Streams \n To download a file from GridFS using a readable stream, you can either open a\nstream and read from it directly or download the entire file all at once. \n To open a download stream and read from it: \n \n \n \ncopy \n \n <?php \n\n // In practice, $fileId denotes the _id of an existing file in GridFS \n $fileId   =   new   MongoDB\\BSON\\ObjectId ; \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openDownloadStream ( $fileId ); \n $contents   =   stream_get_contents ( $stream ); \n \n \n \n To download the file all at once and write it to a writable stream: \n \n \n \ncopy \n \n <?php \n\n // In practice, $fileId denotes the _id of an existing file in GridFS \n $fileId   =   new   MongoDB\\BSON\\ObjectId ; \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $file   =   fopen ( '/path/to/my-output-file.txt' ,   'wb' ); \n\n $bucket -> downloadToStream ( $fileId ,   $file ); \n \n \n \n \n \n Selecting Files by Filename and Revision \n You can also download a file specified by filename and (optionally) revision\nnumber. Revision numbers are used to distinguish between files sharing the same\n filename  metadata field, ordered by date of upload (i.e. the  uploadDate \nmetadata field). The  revision  option accepted by\n openDownloadStreamByName()  and\n downloadToStreamByName()  can be positive or negative. \n A positive  revision  number may be used to select files in order of the\noldest upload date. A revision of  0  would denote the file with the oldest\nupload date, a revision of  1  would denote the second oldest upload, and so\non. \n A negative revision may be used to select files in order of the most recent\nupload date. A revision of  -1  would denote a file with the most recent\nupload date, a revision of  -2  would denote the second most recent upload,\nand so on. The  revision  option defaults to  -1  if not specified. \n The following example downloads the contents of the oldest version of a\nparticular file: \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openDownloadStreamByName ( 'my-file.txt' ,   [ 'revision'   =>   0 ]); \n $contents   =   stream_get_contents ( $stream ); \n \n \n \n \n \n Deleting Files \n You can delete a GridFS file by its  _id . \n \n \n \ncopy \n \n <?php \n\n // In practice, $fileId denotes the _id of an existing file in GridFS \n $fileId   =   new   MongoDB\\BSON\\ObjectId ; \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $bucket -> delete ( $fileId ); \n \n \n \n \n \n Finding File Metadata \n The  find()  method allows you to\nretrieve documents from the GridFS files collection, which contain metadata\nabout the GridFS files. \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $cursor   =   $bucket -> find ([ 'filename'   =>   'my-file.txt' ]); \n \n \n \n \n \n Accessing File Metadata for an Existing Stream \n The  getFileDocumentForStream()  method may be used to get\nthe file document for an existing readable or writable GridFS stream. \n \n \n \ncopy \n \n <?php \n\n // In practice, $fileId denotes the _id of an existing file in GridFS \n $fileId   =   new   MongoDB\\BSON\\ObjectId ; \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openDownloadStream ( $fileId ); \n $metadata   =   $bucket -> getFileDocumentForStream ( $stream ); \n \n \n \n \n Note \n Since the file document for a writable stream is not committed to MongoDB\nuntil the stream is closed,\n getFileDocumentForStream()  can only return an\nin-memory document, which will be missing some fields (e.g.  length ,\n md5 ). \n \n The  getFileIdForStream()  method may be used to get the\n _id  for an existing readable or writable GridFS stream. This is a\nconvenience for accessing the  _id  property of the object returned by\n getFileDocumentForStream() . \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openDownloadStreamByName ( 'my-file.txt' ); \n $fileId   =   $bucket -> getFileIdForStream ( $stream ); \n \n \n \n \n",
            "preview": "GridFS is a specification for storing and retrieving files in MongoDB. GridFS uses two collections to store files. One collection stores the file chunks (e.g. fs.chunks ), and the other stores file metadata (e.g. fs.files ). The MongoDB\\GridFS\\Bucket class provides an interface around these collections for working with the files as PHP Streams .",
            "tags": "",
            "links": [
                "http://php.net/stream",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileDocumentForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileIdForStream/",
                "http://docs.mongodb.org/manual/core/gridfs",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "tutorial/crud/index.html",
            "title": "CRUD Operations \u2014 PHP Library Manual upcoming",
            "headings": [
                "CRUD Operations",
                "Insert Documents",
                "Insert One Document",
                "Insert Many Documents",
                "Query Documents",
                "Find One Document",
                "Find Many Documents",
                "Query Projection",
                "Limit, Sort, and Skip Options",
                "Regular Expressions",
                "Complex Queries with Aggregation",
                "Update Documents",
                "Update One Document",
                "Update Many Documents",
                "Replace Documents",
                "Upsert",
                "Delete Documents",
                "Delete One Document",
                "Delete Many Documents"
            ],
            "text": "\n CRUD Operations \n \n On this page \n \n Insert Documents \n Insert One Document \n Insert Many Documents \n \n \n Query Documents \n Find One Document \n Find Many Documents \n Query Projection \n Limit, Sort, and Skip Options \n Regular Expressions \n Complex Queries with Aggregation \n \n \n Update Documents \n Update One Document \n Update Many Documents \n Replace Documents \n Upsert \n \n \n Delete Documents \n Delete One Document \n Delete Many Documents \n \n \n \n \n CRUD operations  create ,  read ,  update , and  delete  documents. The\nMongoDB PHP Library\u2019s  MongoDB\\Collection  class implements MongoDB\u2019s\ncross-driver  CRUD specification ,\nproviding access to methods for inserting, finding, updating, and deleting\ndocuments in MongoDB. \n This document provides a general introduction to inserting, querying, updating,\nand deleting documents using the MongoDB PHP Library. The MongoDB Manual\u2019s\n CRUD Section  provides a more thorough introduction to CRUD\noperations with MongoDB. \n \n Insert Documents \n \n Insert One Document \n The  MongoDB\\Collection::insertOne()  method inserts a single\ndocument into MongoDB and returns an instance of\n MongoDB\\InsertOneResult , which you can use to access the ID of the\ninserted document. \n The following operation inserts a document into the  users  collection in the\n test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n\n $insertOneResult   =   $collection -> insertOne ([ \n     'username'   =>   'admin' , \n     'email'   =>   'admin@example.com' , \n     'name'   =>   'Admin User' , \n ]); \n\n printf ( \"Inserted %d document(s) \\n \" ,   $insertOneResult -> getInsertedCount ()); \n\n var_dump ( $insertOneResult -> getInsertedId ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 1 document(s)\nobject(MongoDB\\BSON\\ObjectId)#11 (1) {\n  [\"oid\"]=>\n  string(24) \"579a25921f417dd1e5518141\"\n}\n \n \n \n The output includes the ID of the inserted document. \n If you include an  _id  value when inserting a document, MongoDB checks to\nensure that the  _id  value is unique for the collection. If the  _id  value\nis not unique, the insert operation fails due to a duplicate key error. \n The following example inserts a document while specifying the value for the\n _id : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n\n $insertOneResult   =   $collection -> insertOne ([ '_id'   =>   1 ,   'name'   =>   'Alice' ]); \n\n printf ( \"Inserted %d document(s) \\n \" ,   $insertOneResult -> getInsertedCount ()); \n\n var_dump ( $insertOneResult -> getInsertedId ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 1 document(s)\nint(1)\n \n \n \n \n See also \n MongoDB\\Collection::insertOne() \n \n \n \n Insert Many Documents \n The  MongoDB\\Collection::insertMany()  method allows you to insert\nmultiple documents in one write operation and returns an instance of\n MongoDB\\InsertManyResult , which you can use to access the IDs of\nthe inserted documents. \n The following operation inserts two documents into the  users  collection\nin the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n\n $insertManyResult   =   $collection -> insertMany ([ \n     [ \n         'username'   =>   'admin' , \n         'email'   =>   'admin@example.com' , \n         'name'   =>   'Admin User' , \n     ], \n     [ \n         'username'   =>   'test' , \n         'email'   =>   'test@example.com' , \n         'name'   =>   'Test User' , \n     ], \n ]); \n\n printf ( \"Inserted %d document(s) \\n \" ,   $insertManyResult -> getInsertedCount ()); \n\n var_dump ( $insertManyResult -> getInsertedIds ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 2 document(s)\narray(2) {\n  [0]=>\n  object(MongoDB\\BSON\\ObjectId)#11 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518141\"\n  }\n  [1]=>\n  object(MongoDB\\BSON\\ObjectId)#12 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518142\"\n  }\n}\n \n \n \n \n See also \n MongoDB\\Collection::insertMany() \n \n \n \n \n Query Documents \n The MongoDB PHP Library provides the  MongoDB\\Collection::findOne()  and\n MongoDB\\Collection::find()  methods for querying documents and the\n MongoDB\\Collection::aggregate()  method for performing\n aggregation operations . \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n Find One Document \n MongoDB\\Collection::findOne()  returns the  first document  that matches the query or  null  if no document matches the\nquery. \n The following example searches for the document with  _id  of  \"94301\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $document   =   $collection -> findOne ([ '_id'   =>   '94301' ]); \n\n var_dump ( $document ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(5) {\n    [\"_id\"]=>\n    string(5) \"94301\"\n    [\"city\"]=>\n    string(9) \"PALO ALTO\"\n    [\"loc\"]=>\n    object(MongoDB\\Model\\BSONArray)#12 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(2) {\n        [0]=>\n        float(-122.149685)\n        [1]=>\n        float(37.444324)\n      }\n    }\n    [\"pop\"]=>\n    int(15965)\n    [\"state\"]=>\n    string(2) \"CA\"\n  }\n}\n \n \n \n \n Note \n The criteria in this example matched an  _id  with a string value of\n \"94301\" . The same criteria would not have matched a document with an\ninteger value of  94301  due to MongoDB\u2019s  comparison rules for\nBSON types . Similarly, users should\nuse a  MongoDB\\BSON\\ObjectId  object\nwhen matching an  _id  with an  ObjectId \nvalue, as strings and ObjectIds are not directly comparable. \n \n \n See also \n MongoDB\\Collection::findOne() \n \n \n \n Find Many Documents \n MongoDB\\Collection::find()  returns a\n MongoDB\\Driver\\Cursor  object, which you can\niterate upon to access all matched documents. \n The following example lists the documents in the  zips  collection with the\nspecified city and state values: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $cursor   =   $collection -> find ([ 'city'   =>   'JERSEY CITY' ,   'state'   =>   'NJ' ]); \n\n foreach   ( $cursor   as   $document )   { \n     echo   $document [ '_id' ],   \" \\n \" ; \n } \n \n \n \n The output would resemble: \n \n \n \ncopy \n \n 07302\n07304\n07305\n07306\n07307\n07310\n \n \n \n \n See also \n MongoDB\\Collection::find() \n \n \n \n Query Projection \n By default, queries in MongoDB return all fields in matching documents. To limit\nthe amount of data that MongoDB sends to applications, you can include a\n projection document  in\nthe query operation. \n \n Note \n MongoDB includes the  _id  field by default unless you explicitly exclude\nit in a projection document. \n \n The following example finds restaurants based on the  cuisine  and  borough \nfields and uses a  projection  to limit the fields that are\nreturned. It also limits the results to 5 documents. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $cursor   =   $collection -> find ( \n     [ \n         'cuisine'   =>   'Italian' , \n         'borough'   =>   'Manhattan' , \n     ], \n     [ \n         'projection'   =>   [ \n             'name'   =>   1 , \n             'borough'   =>   1 , \n             'cuisine'   =>   1 , \n         ], \n         'limit'   =>   4 , \n     ] \n ); \n\n foreach ( $cursor   as   $restaurant )   { \n    var_dump ( $restaurant ); \n }; \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f98d\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(18) \"Marchis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#10 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f99b\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(19) \"Forlinis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#12 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#13 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9a8\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(22) \"Angelo Of Mulberry St.\"\n  }\n}\n \n \n \n \n \n Limit, Sort, and Skip Options \n In addition to  projection criteria , you can\nspecify options to limit, sort, and skip documents during queries. \n The following example uses the  limit  and  sort  options to query for the\nfive most populous zip codes in the United States: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $cursor   =   $collection -> find ( \n     [], \n     [ \n         'limit'   =>   5 , \n         'sort'   =>   [ 'pop'   =>   - 1 ], \n     ] \n ); \n\n foreach   ( $cursor   as   $document )   { \n     printf ( \"%s: %s, %s \\n \" ,   $document [ '_id' ],   $document [ 'city' ],   $document [ 'state' ]); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n 60623: CHICAGO, IL\n11226: BROOKLYN, NY\n10021: NEW YORK, NY\n10025: NEW YORK, NY\n90201: BELL GARDENS, CA\n \n \n \n \n \n Regular Expressions \n Filter criteria may include regular expressions, either by using the\n MongoDB\\BSON\\Regex  class directory or the\n $regex  operator. \n The following example lists documents in the  zips  collection where the city\nname starts with \u201cgarden\u201d and the state is Texas: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $cursor   =   $collection -> find ([ \n     'city'   =>   new   MongoDB\\BSON\\Regex ( '^garden' ,   'i' ), \n     'state'   =>   'TX' , \n ]); \n\n foreach   ( $cursor   as   $document )   { \n    printf ( \"%s: %s, %s \\n \" ,   $document [ '_id' ],   $document [ 'city' ],   $document [ 'state' ]); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n 78266: GARDEN RIDGE, TX\n79739: GARDEN CITY, TX\n79758: GARDENDALE, TX\n \n \n \n An equivalent filter could be constructed using the  $regex  operator: \n \n \n \ncopy \n \n <?php \n\n [ \n     'city'   =>   [ '$regex'   =>   '^garden' ,   '$options'   =>   'i' ], \n     'state'   =>   'TX' , \n ] \n \n \n \n \n See also \n $regex  in the MongoDB manual \n \n Although MongoDB\u2019s regular expression syntax is not exactly the same as PHP\u2019s\n PCRE  syntax,  preg_quote() \nmay be used to escape special characters that should be matched as-is. The\nfollowing example finds restaurants whose name starts with \u201c(Library)\u201d: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $cursor   =   $collection -> find ([ \n     'name'   =>   new   MongoDB\\BSON\\Regex ( '^'   .   preg_quote ( '(Library)' )), \n ]); \n \n \n \n \n \n Complex Queries with Aggregation \n MongoDB\u2019s  Aggregation Framework  allows\nyou to issue complex queries that filter, transform, and group collection data.\nThe MongoDB PHP Library\u2019s  MongoDB\\Collection::aggregate()  method\nreturns a  Traversable  object, which you can iterate upon to\naccess the results of the aggregation operation. Refer to the\n MongoDB\\Collection::aggregate()  method\u2019s  behavior\nreference  for more about the method\u2019s output. \n The following example lists the 5 US states with the most zip codes associated\nwith them: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $cursor   =   $collection -> aggregate ([ \n     [ '$group'   =>   [ '_id'   =>   '$state' ,   'count'   =>   [ '$sum'   =>   1 ]]], \n     [ '$sort'   =>   [ 'count'   =>   - 1 ]], \n     [ '$limit'   =>   5 ], \n ]); \n\n foreach   ( $cursor   as   $state )   { \n     printf ( \"%s has %d zip codes \\n \" ,   $state [ '_id' ],   $state [ 'count' ]); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n TX has 1671 zip codes\nNY has 1595 zip codes\nCA has 1516 zip codes\nPA has 1458 zip codes\nIL has 1237 zip codes\n \n \n \n \n See also \n MongoDB\\Collection::aggregate() \n \n \n \n \n Update Documents \n \n Update One Document \n Use the  MongoDB\\Collection::updateOne()  method to update a single\ndocument matching a filter.  MongoDB\\Collection::updateOne() \nreturns a  MongoDB\\UpdateResult  object, which you can use to access\nstatistics about the update operation. \n Update methods have two required parameters: the query filter that identifies\nthe document or documents to update, and an update document that specifies what\nupdates to perform. The  MongoDB\\Collection::updateOne()  reference\ndescribes each parameter in detail. \n The following example inserts two documents into an empty  users  collection\nin the  test  database using the  MongoDB\\Collection::insertOne() \nmethod, and then updates the documents where the value for the  state  field\nis  \"ny\"  to include a  country  field set to  \"us\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $updateResult   =   $collection -> updateOne ( \n     [ 'state'   =>   'ny' ], \n     [ '$set'   =>   [ 'country'   =>   'us' ]] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n Since the update operation uses the\n MongoDB\\Collection::updateOne()  method, which updates the first\ndocument to match the filter criteria, the results would then resemble: \n \n \n \ncopy \n \n Matched 1 document(s)\nModified 1 document(s)\n \n \n \n It is possible for a document to match the filter but  not be modified  by an\nupdate, as is the case where the update sets a field\u2019s value to its existing\nvalue, as in this example: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $updateResult   =   $collection -> updateOne ( \n     [ 'name'   =>   'Bob' ], \n     [ '$set'   =>   [ 'state'   =>   'ny' ]] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n The number of matched documents and the number of  modified  documents would\ntherefore not be equal, and the output from the operation would resemble: \n \n \n \ncopy \n \n Matched 1 document(s)\nModified 0 document(s)\n \n \n \n \n See also \n \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::findOneAndUpdate() \n \n \n \n \n Update Many Documents \n MongoDB\\Collection::updateMany()  updates one or more documents\nmatching the filter criteria and returns a  MongoDB\\UpdateResult \nobject, which you can use to access statistics about the update operation. \n Update methods have two required parameters: the query filter that identifies\nthe document or documents to update, and an update document that specifies what\nupdates to perform. The  MongoDB\\Collection::updateMany()  reference\ndescribes each parameter in detail. \n The following example inserts three documents into an empty  users  collection\nin the  test  database and then uses the  $set  operator to update the\ndocuments matching the filter criteria to include the  country  field with\nvalue  \"us\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ,   'country'   =>   'us' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Sam' ,   'state'   =>   'ny' ]); \n $updateResult   =   $collection -> updateMany ( \n     [ 'state'   =>   'ny' ], \n     [ '$set'   =>   [ 'country'   =>   'us' ]] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n If an update operation results in no change to a document, such as setting the\nvalue of the field to its current value, the number of modified documents can be\nless than the number of  matched  documents. Since the update document with\n name  of  \"Bob\"  results in no changes to the document, the output of the\noperation therefore resembles: \n \n \n \ncopy \n \n Matched 3 document(s)\nModified 2 document(s)\n \n \n \n \n See also \n MongoDB\\Collection::updateMany() \n \n \n \n Replace Documents \n Replacement operations are similar to update operations, but instead of updating\na document to include new fields or new field values, a replacement operation\nreplaces the entire document with a new document, but retains the original\ndocument\u2019s  _id  value. \n The  MongoDB\\Collection::replaceOne()  method replaces a single\ndocument that matches the filter criteria and returns an instance of\n MongoDB\\UpdateResult , which you can use to access statistics about\nthe replacement operation. \n MongoDB\\Collection::replaceOne()  has two required parameters: the\nquery filter that identifies the document or documents to replace, and a\nreplacement document that will replace the original document in MongoDB. The\n MongoDB\\Collection::replaceOne()  reference describes each\nparameter in detail. \n \n Important \n Replacement operations replace all of the fields in a document except the\n _id  value. To avoid accidentally overwriting or deleting desired fields,\nuse the  MongoDB\\Collection::updateOne()  or\n MongoDB\\Collection::updateMany()  methods to update individual\nfields in a document rather than replacing the entire document. \n \n The following example inserts one document into an empty  users  collection in\nthe  test  database, and then replaces that document with a new one: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $updateResult   =   $collection -> replaceOne ( \n     [ 'name'   =>   'Bob' ], \n     [ 'name'   =>   'Robert' ,   'state'   =>   'ca' ] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Matched 1 document(s)\nModified 1 document(s)\n \n \n \n \n See also \n \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::findOneAndReplace() \n \n \n \n \n Upsert \n Update and replace operations support an  upsert  option. When  upsert  is  true \n and  no documents match the specified filter, the operation creates a new\ndocument and inserts it. If there  are  matching documents, then the operation\nmodifies or replaces the matching document or documents. \n When a document is upserted, the ID is accessible via\n MongoDB\\UpdateResult::getUpsertedId() . \n The following example uses  MongoDB\\Collection::updateOne()  with\nthe  upsert  option set to  true  and an empty  users  collection in the\n test  database, therefore inserting the document into the database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $updateResult   =   $collection -> updateOne ( \n     [ 'name'   =>   'Bob' ], \n     [ '$set'   =>   [ 'state'   =>   'ny' ]], \n     [ 'upsert'   =>   true ] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n printf ( \"Upserted %d document(s) \\n \" ,   $updateResult -> getUpsertedCount ()); \n\n $upsertedDocument   =   $collection -> findOne ([ \n     '_id'   =>   $updateResult -> getUpsertedId (), \n ]); \n\n var_dump ( $upsertedDocument ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Matched 0 document(s)\nModified 0 document(s)\nUpserted 1 document(s)\nobject(MongoDB\\Model\\BSONDocument)#16 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#15 (1) {\n      [\"oid\"]=>\n      string(24) \"57509c4406d7241dad86e7c3\"\n    }\n    [\"name\"]=>\n    string(3) \"Bob\"\n    [\"state\"]=>\n    string(2) \"ny\"\n  }\n}\n \n \n \n \n \n \n Delete Documents \n \n Delete One Document \n The  MongoDB\\Collection::deleteOne()  method deletes a single\ndocument that matches the filter criteria and returns a\n MongoDB\\DeleteResult , which you can use to access statistics about\nthe delete operation. \n If multiple documents match the filter criteria,\n MongoDB\\Collection::deleteOne()  deletes the  first  matching document. \n MongoDB\\Collection::deleteOne()  has one required parameter: a\nquery filter that specifies the document to delete. Refer to the\n MongoDB\\Collection::deleteOne()  reference for full method\ndocumentation. \n The following operation deletes the first document where the  state  field\u2019s\nvalue is  \"ny\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $deleteResult   =   $collection -> deleteOne ([ 'state'   =>   'ny' ]); \n\n printf ( \"Deleted %d document(s) \\n \" ,   $deleteResult -> getDeletedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Deleted 1 document(s)\n \n \n \n \n See also \n MongoDB\\Collection::deleteOne() \n \n \n \n Delete Many Documents \n MongoDB\\Collection::deleteMany()  deletes all of the documents that\nmatch the filter criteria and returns a  MongoDB\\DeleteResult , which\nyou can use to access statistics about the delete operation. \n MongoDB\\Collection::deleteMany()  has one required parameter: a\nquery filter that specifies the document to delete. Refer to the\n MongoDB\\Collection::deleteMany()  reference for full method\ndocumentation. \n The following operation deletes all of the documents where the  state  field\u2019s\nvalue is  \"ny\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $deleteResult   =   $collection -> deleteMany ([ 'state'   =>   'ny' ]); \n\n printf ( \"Deleted %d document(s) \\n \" ,   $deleteResult -> getDeletedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Deleted 2 document(s)\n \n \n \n \n See also \n MongoDB\\Collection::deleteMany() \n \n \n \n",
            "preview": "CRUD operations create , read , update , and delete documents. The MongoDB PHP Library\u2019s MongoDB\\Collection class implements MongoDB\u2019s cross-driver CRUD specification , providing access to methods for inserting, finding, updating, and deleting documents in MongoDB.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "http://php.net/manual/en/book.pcre.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "http://php.net/preg_quote",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "http://docs.mongodb.org/manual/reference/operator/query/regex",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://docs.mongodb.org/manual/tutorial/update-documents/",
                "http://php.net/manual/en/types.comparisons.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/book.bson.php",
                "https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst",
                "http://docs.mongodb.org/manual/crud",
                "https://www.mongodb.com/docs/manual/reference/operator/query/regex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "http://php.net/traversable",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://php.net/mongodb-driver-cursor",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "http://php.net/mongodb-bson-regex",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "https://www.mongodb.com/docs/manual/reference/operator/update/set/",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "tutorial/server-selection/index.html",
            "title": "Server Selection and Monitoring \u2014 PHP Library Manual upcoming",
            "headings": [
                "Server Selection and Monitoring",
                "Server Selection and Monitoring",
                "Connection String Options",
                "connectTimeoutMS",
                "heartbeatFrequencyMS",
                "serverSelectionTimeoutMS",
                "serverSelectionTryOnce",
                "socketCheckIntervalMS",
                "socketTimeoutMS"
            ],
            "text": "\n Server Selection and Monitoring \n \n On this page \n \n Server Selection and Monitoring \n Connection String Options \n connectTimeoutMS \n heartbeatFrequencyMS \n serverSelectionTimeoutMS \n serverSelectionTryOnce \n socketCheckIntervalMS \n socketTimeoutMS \n \n \n \n \n \n Server Selection and Monitoring \n Before any operation can be executed, the MongoDB PHP Library must first select a\nserver from the topology (e.g. replica set, sharded cluster). Selecting a server\nrequires an accurate view of the topology, so the driver (i.e.  mongodb \nextension) regularly monitors the servers to which it is connected. \n In most other drivers, server discovery and monitoring is handled by a\nbackground thread; however, the PHP driver is single-threaded and must therefore\nperform monitoring  between  operations initiated by the application. \n Consider the following example application: \n \n \n \ncopy \n \n <?php \n\n /** \n  * When constructing a Client, the library creates a MongoDB\\Driver\\Manager \n  * object from the driver. In turn, the driver will either create a libmongoc \n  * client object (and persist it according to the constructor parameters) or \n  * re-use a previously persisted client. \n  * \n  * Assuming a new libmongoc client was created, the host name(s) in the \n  * connection string must be resolved via DNS. Likewise, if the connection \n  * string includes a mongodb+srv scheme, SRV/TXT records must be resolved. \n  * Following DNS resolution, the driver should then have a list of one or \n  * more hosts to which it can connect. This is referred to as the seed list. \n  * \n  * If a previously persisted client was re-used, no DNS resolution is needed \n  * and there will likely already be connections and topology state associated \n  * with the client. \n  * \n  * Drivers perform no further IO when constructing a client, so control is \n  * returned the the PHP script. \n  */ \n $client   =   new   MongoDB\\Client ( 'mongodb://a.example.com:27017/?replicaSet=rs0' ); \n\n /** \n  * The library creates a MongoDB\\Database object from the Client. This does \n  * not entail any IO, as the Database and Collection objects only associate \n  * a database or namespace with a Client object, respectively. \n  */ \n $database   =   $client -> test ; \n\n /** \n  * The library creates an internal object for this operation and must select \n  * a server to use for executing that operation. \n  * \n  * If this is the first operation on the underlying libmongoc client, it must \n  * first discover the topology. It does so by establishing connections to any \n  * host(s) in the seed list (this may entail TLS and OCSP verification) and \n  * issuing \"hello\" commands. \n  * \n  * In the case of a replica set, connecting to a single host in the seed list \n  * should allow the driver to discover all other members in the replica set. \n  * In the case of a sharded cluster, the driver will start with an initial \n  * seed list of mongos hosts and, if SRV polling is utilized, may discover \n  * additional mongos hosts over time. \n  * \n  * If the topology was already initialized (i.e. this is not the first \n  * operation on the client), the driver may still need to perform monitoring \n  * (i.e. \"hello\" commands) and refresh its view of the topology. This process \n  * may entail adding or removing hosts from the topology. \n  * \n  * Once the topology has been discovered and any necessary monitoring has \n  * been performed, the driver may select a server according to the rules \n  * outlined in the server selection specification (e.g. applying a read \n  * preference, filtering hosts by latency). \n  */ \n $database -> command ([ 'ping'   =>   1 ]); \n \n \n \n Although the application consists of only a few lines of PHP, there is actually\nquite a lot going on behind the scenes! Interested readers can find this process\ndiscussed in greater detail in the following documents: \n \n Single-threaded Mode  in the libmongoc documentation \n Server Discovery and Monitoring  specification \n Server Selection  specification \n \n \n \n Connection String Options \n There are several connection string options relevant to server selection and\nmonitoring. \n \n connectTimeoutMS \n connectTimeoutMS  specifies the limit for both establishing a connection to\na server  and  the socket timeout for server monitoring ( hello  commands).\nThis defaults to 10 seconds for single-threaded drivers such as PHP. \n When a server times out during monitoring, it will not be re-checked until at\nleast five seconds\n( cooldownMS )\nhave elapsed. This timeout is intended to avoid having single-threaded drivers\nblock for  connectTimeoutMS  on  each  subsequent scan after an error. \n Applications can consider setting this option to slightly more than the greatest\nlatency among servers in the cluster. For example, if the greatest  ping  time\nbetween the PHP application server and a database server is 200ms, it may be\nreasonable to specify a timeout of one second. This would allow ample time for\nestablishing a connection and monitoring an accessible server, while also\nsignificantly reducing the time to detect an inaccessible server. \n \n \n heartbeatFrequencyMS \n heartbeatFrequencyMS  determines how often monitoring should occur. This\ndefaults to 60 seconds for single-threaded drivers and can be set as low as\n500ms. \n \n \n serverSelectionTimeoutMS \n serverSelectionTimeoutMS  determines the maximum amount of time to spend in\nthe server selection loop. This defaults to 30 seconds, but applications will\ntypically fail sooner if  serverSelectionTryOnce  is  true  and a smaller\n connectTimeoutMS  value is in effect. \n The original default was established at a time when replica set elections took\nmuch longer to complete. Applications can consider setting this option to\nslightly more than the expected completion time for an election. For example,\n Replica Set Elections  states that\nelections will not typically exceed 12 seconds, so a 15-second timeout may be\nreasonable. Applications connecting to a sharded cluster may consider a smaller\nvalue still, since  mongos  insulates the driver from elections. \n That said,  serverSelectionTimeoutMS  should generally not be set to a value\nsmaller than  connectTimeoutMS . \n \n \n serverSelectionTryOnce \n serverSelectionTryOnce  determines whether the driver should give up after\nthe first failed server selection attempt or continue waiting until\n serverSelectionTimeoutMS  is reached. PHP defaults to  true , which allows\nthe driver to \u201cfail fast\u201d when a server cannot be selected (e.g. no primary\nduring a failover). \n The default behavior is generally desirable for a high-traffic web applications,\nas it means the worker process will not be blocked in a server selection loop\nand can instead return an error response and immediately go on to serve another\nrequest. Additionally, other driver features such as retryable reads and writes\ncan still enable applications to avoid transient errors such as a failover. \n That said, applications that prioritize resiliency over response time (and\nworker pool utilization) may want to specify  false  for\n serverSelectionTryOnce . \n \n \n socketCheckIntervalMS \n socketCheckIntervalMS  determines how often a socket should be checked (using\na  ping  command) if it has not been used recently. This defaults to 5 seconds\nand is intentionally lower than  heartbeatFrequencyMS  to better allow\nsingle-threaded drivers to recover dropped connections. \n \n \n socketTimeoutMS \n socketTimeoutMS  determines the maximum amount of time to spend reading or\nwriting to a socket. Since server monitoring uses  connectTimeoutMS  for its\nsocket timeouts,  socketTimeoutMS  only applies to operations executed by the\napplication. \n socketTimeoutMS  defaults to 5 minutes; however, it\u2019s likely that a PHP web\nrequest would be terminated sooner due to\n max_execution_time ,\nwhich defaults to 30 seconds for web SAPIs. In a CLI environment, where\n max_execution_time  is unlimited by default, it is more likely that\n socketTimeoutMS  could be reached. \n \n Note \n socketTimeoutMS  is not directly related to server selection and\nmonitoring; however, it is frequently associated with the other options and\ntherefore bears mentioning. \n \n \n \n",
            "preview": "Before any operation can be executed, the MongoDB PHP Library must first select a server from the topology (e.g. replica set, sharded cluster). Selecting a server requires an accurate view of the topology, so the driver (i.e. mongodb extension) regularly monitors the servers to which it is connected.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/replica-set-elections/",
                "https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst",
                "https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst",
                "https://www.php.net/manual/en/info.configuration.php",
                "https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-monitoring.rst",
                "http://mongoc.org/libmongoc/current/connection-pooling.html"
            ]
        },
        {
            "slug": "tutorial/connecting/index.html",
            "title": "Connecting to MongoDB \u2014 PHP Library Manual upcoming",
            "headings": [
                "Connecting to MongoDB",
                "Creating a Client instance",
                "Connecting to a Standalone server",
                "Connecting to a Replica Set",
                "Connecting with SSL and Authentication",
                "Specifying connection options"
            ],
            "text": "\n Connecting to MongoDB \n \n On this page \n \n Creating a Client instance \n Connecting to a Standalone server \n Connecting to a Replica Set \n Connecting with SSL and Authentication \n \n \n Specifying connection options \n \n \n \n Creating a Client instance \n \n Connecting to a Standalone server \n If you do not specify a  $uri  value, the driver connects to a standalone\n mongod  on  127.0.0.1  via port  27017 . To connect to a different\nserver, pass the corresponding connection string as the first parameter when\ncreating the  Client  instance: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://mongodb-deployment:27017' ); \n \n \n \n \n \n Connecting to a Replica Set \n The following example demonstrates how to connect to a replica set with a custom\nread preference: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' , \n     [ \n         'readPreference'   =>   'secondaryPreferred' , \n     ] \n ); \n \n \n \n \n \n Connecting with SSL and Authentication \n The following example demonstrates how to connect to a MongoDB replica set with\nSSL and authentication, as is used for  MongoDB Atlas : \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://myUsername:myPassword@rs1.example.com,rs2.example.com/?ssl=true&replicaSet=myReplicaSet&authSource=admin' \n ); \n \n \n \n Alternatively, the authentication credentials and URI parameters may be\nspecified in the constructor\u2019s  $uriOptions  parameter: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://rs1.example.com,rs2.example.com/' \n     [ \n         'username'   =>   'myUsername' , \n         'password'   =>   'myPassword' , \n         'ssl'   =>   true , \n         'replicaSet'   =>   'myReplicaSet' , \n         'authSource'   =>   'admin' , \n     ], \n ); \n \n \n \n The driver supports additional  SSL options ,\nwhich may be specified in the constructor\u2019s  $driverOptions  parameter. Those\noptions are covered in the  MongoDB\\Driver\\Manager::__construct()  documentation. \n \n \n \n Specifying connection options \n Connection options can be passed via the  $uri  parameter, or through the\n $options  and  $driverOptions  parameters. The available options are\ndocumented in the  MongoDB\\Client::__construct()  reference. \n \n",
            "preview": "If you do not specify a $uri value, the driver connects to a standalone mongod on 127.0.0.1 via port 27017 . To connect to a different server, pass the corresponding connection string as the first parameter when creating the Client instance:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__construct/",
                "https://cloud.mongodb.com/?jmp=docs",
                "http://php.net/mongodb-driver-manager.construct"
            ]
        },
        {
            "slug": "tutorial/commands/index.html",
            "title": "Execute Database Commands \u2014 PHP Library Manual upcoming",
            "headings": [
                "Execute Database Commands",
                "Overview",
                "Commands That Return a Single Result Document",
                "Commands That Yield Multiple Results",
                "Specifying a Custom Read Preference"
            ],
            "text": "\n Execute Database Commands \n \n On this page \n \n Overview \n Commands That Return a Single Result Document \n Commands That Yield Multiple Results \n Specifying a Custom Read Preference \n \n \n \n Overview \n The MongoDB PHP Library provides helper methods across the  Client ,  Database , and\n Collection  classes for common\n database commands . In addition, the\n MongoDB\\Database::command()  method may be used to run database\ncommands that do not have a helper method. \n The  MongoDB\\Database::command()  method always returns a\n MongoDB\\Driver\\Cursor  object, since it must\nsupport execution of commands that return single result documents  and  multiple\nresults via a command cursor. \n \n \n Commands That Return a Single Result Document \n Most database commands return a single result document, which can be obtained by\nconverting the returned cursor to an array and accessing its first element. The\nfollowing example executes a  ping  command\nand prints its result document: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $cursor   =   $database -> command ([ 'ping'   =>   1 ]); \n\n var_dump ( $cursor -> toArray ()[ 0 ]); \n \n \n \n The output would resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n Commands That Yield Multiple Results \n Some database commands return a cursor with multiple results. The following\nexample executes  listCollections ,\nwhich returns a cursor containing a result document for each collection in the\n test  database, and iterates through the results using a  foreach  loop.\nNote that this example is illustrative; applications would generally use\n MongoDB\\Database::listCollections()  in practice. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $cursor   =   $database -> command ([ 'listCollections'   =>   1 ]); \n\n foreach   ( $cursor   as   $collection )   { \n     echo   $collection [ 'name' ],   \" \\n \" ; \n } \n \n \n \n The output might resemble the following: \n \n \n \ncopy \n \n persons\nposts\nzips\n \n \n \n \n Note \n At the  protocol  level, commands that yield multiple results via a cursor\nwill return a single result document with the essential ingredients for\nconstructing the cursor (i.e. the cursor\u2019s ID, namespace, and an optional\nfirst batch of results). If the  MongoDBDriverManager::executeCommand()  method in the PHP driver detects\nsuch a response, it will construct an iterable command cursor and return it\ninstead of the raw result document. If necessary, raw result documents can\nstill be observed using  command monitoring . \n \n \n \n Specifying a Custom Read Preference \n Write commands, such as  createUser ,\ncan only be executed on a writable server (e.g.  primary  replica set\nmember). Command helper methods in the MongoDB PHP Library, such as\n MongoDB\\Database::drop() , know to apply their own  read preference  if necessary. However, the  MongoDB\\Database::command() \nmethod is a generic method and defaults to the read preference of the Database\nobject on which it is invoked. When necessary, the  readPreference  option may\nbe used to override the default read preference. \n The following example connects to a cluster and specifies  secondaryPreferred \nas the Client\u2019s default read preference. It then specifies a  primary  read\npreference when executing the  createUser  command on the  test  database: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n    'mongodb+srv://cluster0.example.com' , \n    [ 'readPreference'   =>   'secondaryPreferred' ] \n ); \n\n $client -> test ; \n\n $cursor   =   $db -> command ( \n     [ \n         'createUser'   =>   'username' , \n         'pwd'   =>   'password' , \n         'roles'   =>   [ 'readWrite' ], \n     ], \n     [ \n         'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primary' ), \n     ] \n ); \n\n var_dump ( $cursor -> toArray ()[ 0 ]); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n",
            "preview": "The MongoDB PHP Library provides helper methods across the Client , Database , and Collection classes for common database commands . In addition, the MongoDB\\Database::command() method may be used to run database commands that do not have a helper method.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "http://docs.mongodb.org/manual/reference/command/ping",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/",
                "http://php.net/mongodb-driver-manager.executecommand",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "https://www.php.net/manual/en/mongodb.tutorial.apm.php",
                "http://php.net/mongodb-driver-cursor",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "http://docs.mongodb.org/manual/reference/command",
                "http://docs.mongodb.org/manual/reference/command/createUser",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/"
            ]
        },
        {
            "slug": "tutorial/collation/index.html",
            "title": "Collation \u2014 PHP Library Manual upcoming",
            "headings": [
                "Collation",
                "Overview",
                "Usage",
                "Collation Parameters",
                "Assign a Default Collation to a Collection",
                "Assign a Collation to an Index",
                "Operations that Support Collation",
                "find()  with  sort",
                "findOneAndUpdate()",
                "findOneAndDelete()",
                "deleteMany()",
                "Aggregation"
            ],
            "text": "\n Collation \n \n On this page \n \n Overview \n Usage \n Collation Parameters \n Assign a Default Collation to a Collection \n Assign a Collation to an Index \n \n \n Operations that Support Collation \n find()  with  sort \n findOneAndUpdate() \n findOneAndDelete() \n deleteMany() \n Aggregation \n \n \n \n \n \n New in version 1.1. \n \n \n Overview \n MongoDB 3.4 introduced support for  collations , which provide a set of rules to comply with the\nconventions of a particular language when comparing strings. \n For example, in Canadian French, the last accent in a given word determines the\nsorting order. Consider the following French words: \n \n \n \ncopy \n \n cote < cot\u00e9 < c\u00f4te < c\u00f4t\u00e9\n \n \n \n The sort order using the Canadian French collation would result in the\nfollowing: \n \n \n \ncopy \n \n cote < c\u00f4te < cot\u00e9 < c\u00f4t\u00e9\n \n \n \n If collation is unspecified, MongoDB uses simple binary comparison for strings.\nAs such, the sort order of the words would be: \n \n \n \ncopy \n \n cote < cot\u00e9 < c\u00f4te < c\u00f4t\u00e9\n \n \n \n \n \n Usage \n You can specify a default collation for collections and indexes when they are\ncreated, or specify a collation for CRUD operations and aggregations. For\noperations that support collation, MongoDB uses the collection\u2019s default\ncollation unless the operation specifies a different collation. \n \n Collation Parameters \n \n \n \ncopy \n \n 'collation' => [ \n     'locale' => <string>, \n     'caseLevel' => <boolean>, \n     'caseFirst' => <string>, \n     'strength' => <integer>, \n     'numericOrdering' => <boolean>, \n     'alternate' => <string>, \n     'maxVariable' => <string>, \n     'normalization' => <boolean>, \n     'backwards' => <boolean>, \n ] \n \n \n \n The only required parameter is  locale , which the server parses as an  ICU\nformat locale ID . For example, set\n locale  to  en_US  to represent US English or  fr_CA  to represent\nCanadian French. \n For a complete description of the available parameters, see  Collation\nDocument  in the MongoDB manual. \n \n \n Assign a Default Collation to a Collection \n The following example creates a new collection called  contacts  on the\n test  database and assigns a default collation with the  fr_CA  locale.\nSpecifying a collation when you create the collection ensures that all\noperations involving a query that are run against the  contacts  collection\nuse the  fr_CA  collation, unless the query specifies another collation. Any\nindexes on the new collection also inherit the default collation, unless the\ncreation command specifies another collation. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $database -> createCollection ( 'contacts' ,   [ \n     'collation'   =>   [ 'locale'   =>   'fr_CA' ], \n ]); \n \n \n \n \n \n Assign a Collation to an Index \n To specify a collation for an index, use the  collation  option when you\ncreate the index. \n The following example creates an index on the  name  field of the\n address_book  collection, with the  unique  parameter enabled and a default\ncollation with  locale  set to  en_US . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> address_book ; \n\n $collection -> createIndex ( \n     [ 'first_name'   =>   1 ], \n     [ \n         'collation'   =>   [ 'locale'   =>   'en_US' ], \n         'unique'   =>   true , \n     ] \n ); \n \n \n \n To use this index, make sure your queries also specify the same collation. The\nfollowing query uses the above index: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> address_book ; \n\n $cursor   =   $collection -> find ( \n     [ 'first_name'   =>   'Adam' ], \n     [ \n         'collation'   =>   [ 'locale'   =>   'en_US' ], \n     ] \n ); \n \n \n \n The following queries do  NOT  use the index. The first query uses no\ncollation, and the second uses a collation with a different  strength  value\nthan the collation on the index. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> address_book ; \n\n $cursor1   =   $collection -> find ([ 'first_name'   =>   'Adam' ]); \n\n $cursor2   =   $collection -> find ( \n     [ 'first_name'   =>   'Adam' ], \n     [ \n         'collation'   =>   [ \n             'locale'   =>   'en_US' , \n             'strength'   =>   2 , \n         ], \n     ] \n ); \n \n \n \n \n \n \n Operations that Support Collation \n All reading, updating, and deleting methods support collation. Some examples are\nlisted below. \n \n find()  with  sort \n Individual queries can specify a collation to use when matching and sorting\nresults. The following query and sort operation uses a German collation with the\n locale  parameter set to  de . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> contacts ; \n\n $cursor   =   $collection -> find ( \n     [ 'city'   =>   'New York' ], \n     [ \n         'collation'   =>   [ 'locale'   =>   'de' ], \n         'sort'   =>   [ 'name'   =>   1 ], \n     ] \n ); \n \n \n \n \n \n findOneAndUpdate() \n A collection called  names  contains the following documents: \n \n \n \ncopy \n \n {   \"_id\"   :   1 ,   \"first_name\"   :   \"Hans\"   } \n {   \"_id\"   :   2 ,   \"first_name\"   :   \"Gunter\"   } \n {   \"_id\"   :   3 ,   \"first_name\"   :   \"G\u00fcnter\"   } \n {   \"_id\"   :   4 ,   \"first_name\"   :   \"J\u00fcrgen\"   } \n \n \n \n The following  findOneAndUpdate()  operation on the collection does not\nspecify a collation. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> names ; \n\n $document   =   $collection -> findOneAndUpdate ( \n     [ 'first_name'   =>   [ '$lt'   =>   'Gunter' ]], \n     [ '$set'   =>   [ 'verified'   =>   true ]] \n ); \n \n \n \n Because  Gunter  is lexically first in the collection, the above operation\nreturns no results and updates no documents. \n Consider the same  findOneAndUpdate()  operation but with a collation\nspecified, which uses the locale  de@collation=phonebook . \n \n Note \n Some locales have a  collation=phonebook  option available for use with\nlanguages which sort proper nouns differently from other words. According to\nthe  de@collation=phonebook  collation, characters with umlauts come before\nthe same characters without umlauts. \n \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> names ; \n\n $document   =   $collection -> findOneAndUpdate ( \n     [ 'first_name'   =>   [ '$lt'   =>   'Gunter' ]], \n     [ '$set'   =>   [ 'verified'   =>   true ]], \n     [ \n         'collation'   =>   [ 'locale'   =>   'de@collation=phonebook' ], \n         'returnDocument'   =>   MongoDB\\Operation\\FindOneAndUpdate :: RETURN_DOCUMENT_AFTER , \n     ] \n ); \n \n \n \n The operation returns the following updated document: \n \n \n \ncopy \n \n {   \"_id\"   =>   3 ,   \"first_name\"   =>   \"G\u00fcnter\" ,   \"verified\"   =>   true   } \n \n \n \n \n \n findOneAndDelete() \n Set the  numericOrdering  collation parameter to  true  to compare numeric\nstrings by their numeric values. \n The collection  numbers  contains the following documents: \n \n \n \ncopy \n \n {   \"_id\"   :   1 ,   \"a\"   :   \"16\"   } \n {   \"_id\"   :   2 ,   \"a\"   :   \"84\"   } \n {   \"_id\"   :   3 ,   \"a\"   :   \"179\"   } \n \n \n \n The following example matches the first document in which field  a  has a\nnumeric value greater than 100 and deletes it. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> numbers ; \n\n $document   =   $collection -> findOneAndDelete ( \n     [ 'a'   =>   [ '$gt'   =->   '100' ]], \n     [ \n         'collation'   =>   [ \n             'locale'   =>   'en' , \n             'numericOrdering'   =>   true , \n         ], \n     ] \n ); \n \n \n \n After the above operation, the following documents remain in the collection: \n \n \n \ncopy \n \n {   \"_id\"   :   1 ,   \"a\"   :   \"16\"   } \n {   \"_id\"   :   2 ,   \"a\"   :   \"84\"   } \n \n \n \n If you perform the same operation without collation, the server deletes the\nfirst document it finds in which the lexical value of  a  is greater than\n \"100\" . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> numbers ; \n\n $document   =   $collection -> findOneAndDelete ([ 'a'   =>   [ '$gt'   =->   '100' ]]); \n \n \n \n After the above operation is executed, the document in which  a  was equal to\n \"16\"  has been deleted, and the following documents remain in the collection: \n \n \n \ncopy \n \n {   \"_id\"   :   2 ,   \"a\"   :   \"84\"   } \n {   \"_id\"   :   3 ,   \"a\"   :   \"179\"   } \n \n \n \n \n \n deleteMany() \n You can use collations with all the various CRUD operations which exist in the\nMongoDB PHP Library. \n The collection  recipes  contains the following documents: \n \n \n \ncopy \n \n {   \"_id\"   :   1 ,   \"dish\"   :   \"veggie empanadas\" ,   \"cuisine\"   :   \"Spanish\"   } \n {   \"_id\"   :   2 ,   \"dish\"   :   \"beef bourgignon\" ,   \"cuisine\"   :   \"French\"   } \n {   \"_id\"   :   3 ,   \"dish\"   :   \"chicken mol\u00e9\" ,   \"cuisine\"   :   \"Mexican\"   } \n {   \"_id\"   :   4 ,   \"dish\"   :   \"chicken paillard\" ,   \"cuisine\"   :   \"french\"   } \n {   \"_id\"   :   5 ,   \"dish\"   :   \"pozole verde\" ,   \"cuisine\"   :   \"Mexican\"   } \n \n \n \n Setting the  strength  parameter of the collation document to  1  or  2 \ncauses the server to disregard case in the query filter. The following example\nuses a case-insensitive query filter to delete all records in which the\n cuisine  field matches  French . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> recipes ; \n\n $collection -> deleteMany ( \n     [ 'cuisine'   =>   'French' ], \n     [ \n         'collation'   =>   [ \n             'locale'   =>   'en_US' , \n             'strength'   =>   1 , \n         ], \n     ] \n ); \n \n \n \n After the above operation runs, the documents with  _id  values of  2  and\n 4  are deleted from the collection. \n \n \n Aggregation \n To use collation with an  aggregate()  operation, specify a collation in the\naggregation options. \n The following aggregation example uses a collection called  names  and groups\nthe  first_name  field together, counts the total number of results in each\ngroup, and sorts the results by German phonebook order. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> names ; \n\n $cursor   =   $collection -> aggregate ( \n     [ \n         [ '$group'   =>   [ '_id'   =>   '$first_name' ,   'name_count'   =>   [ '$sum'   =>   1 ]]], \n         [ '$sort'   =>   [ '_id'   =>   1 ]], \n     ], \n     [ \n         'collation'   =>   [ 'locale'   =>   'de@collation=phonebook' ], \n     ] \n ); \n \n \n \n \n \n",
            "preview": "MongoDB 3.4 introduced support for collations , which provide a set of rules to comply with the conventions of a particular language when comparing strings.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/manual/reference/collation/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "https://unicode-org.github.io/icu/userguide/locale/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/"
            ]
        },
        {
            "slug": "tutorial/modeling-bson-data/index.html",
            "title": "Modeling BSON Data \u2014 PHP Library Manual upcoming",
            "headings": [
                "Modeling BSON Data",
                "Type Maps",
                "Persistable Classes",
                "Working with Enums"
            ],
            "text": "\n Modeling BSON Data \n \n On this page \n \n Type Maps \n Persistable Classes \n Working with Enums \n \n \n \n Type Maps \n Most methods that read data from MongoDB support a  typeMap  option, which\nallows control over how BSON is converted to PHP. Additionally,\nthe  MongoDB\\Client ,  MongoDB\\Database , and\n MongoDB\\Collection  classes accept a  typeMap  option, which can\nbe used to specify a default type map to apply to any supporting methods and\nselected classes (e.g.  MongoDB\\Client::selectDatabase() ). \n The  MongoDB\\Client ,  MongoDB\\Database , and\n MongoDB\\Collection  classes use the following type map by\ndefault: \n \n \n \ncopy \n \n [ \n     'array' => 'MongoDB\\Model\\BSONArray', \n     'document' => 'MongoDB\\Model\\BSONDocument', \n     'root' => 'MongoDB\\Model\\BSONDocument', \n ] \n \n \n \n The type map above will convert BSON documents and arrays to\n MongoDB\\Model\\BSONDocument  and\n MongoDB\\Model\\BSONArray  objects, respectively. The  root  and\n document  keys are used to distinguish the top-level BSON document from\nembedded documents, respectively. \n A type map may specify any class that implements\n MongoDB\\BSON\\Unserializable  as well as\n \"array\" ,  \"stdClass \u201d, and  \"object\"  ( \"stdClass \u201d and  \"object\" \nare aliases of one another). \n \n See also \n Deserialization from BSON  in the PHP manual \n \n \n \n Persistable Classes \n The driver\u2019s  persistence specification  outlines how\nclasses implementing its  MongoDB\\BSON\\Persistable  interface are serialized to and deserialized from\nBSON. The  Persistable  interface is analogous\nto PHP\u2019s  Serializable interface . \n The driver automatically handles serialization and deserialization for classes\nimplementing the  Persistable  interface without\nrequiring the use of the  typeMap  option. This is done by encoding the name\nof the PHP class in a special property within the BSON document. \n \n Note \n When deserializing a PHP variable from BSON, the encoded class name of a\n Persistable  object will override any class\nspecified in the type map, but it will not override  \"array\"  and\n \"stdClass\"  or  \"object\" . This is discussed in the\n persistence specification  but it bears\nrepeating. \n \n Consider the following class definition: \n \n \n \ncopy \n \n <?php \n\n class   Person   implements   MongoDB\\BSON\\Persistable \n { \n     private   MongoDB\\BSON\\ObjectId   $id ; \n     private   string   $name ; \n     private   MongoDB\\BSON\\UTCDateTime   $createdAt ; \n\n     public   function   __construct ( string   $name ) \n     { \n         $this -> id   =   new   MongoDB\\BSON\\ObjectId ; \n         $this -> name   =   $name ; \n         $this -> createdAt   =   new   MongoDB\\BSON\\UTCDateTime ; \n     } \n\n     function   bsonSerialize () \n     { \n         return   [ \n             '_id'   =>   $this -> id , \n             'name'   =>   $this -> name , \n             'createdAt'   =>   $this -> createdAt , \n         ]; \n     } \n\n     function   bsonUnserialize ( array   $data ) \n     { \n         $this -> id   =   $data [ '_id' ]; \n         $this -> name   =   $data [ 'name' ]; \n         $this -> createdAt   =   $data [ 'createdAt' ]; \n     } \n } \n \n \n \n The following example constructs a  Person  object, inserts it into the\ndatabase, and reads it back as an object of the same type: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> persons ; \n\n $result   =   $collection -> insertOne ( new   Person ( 'Bob' )); \n\n $person   =   $collection -> findOne ([ '_id'   =>   $result -> getInsertedId ()]); \n\n var_dump ( $person ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(Person)#18 (3) {\n  [\"id\":\"Person\":private]=>\n  object(MongoDB\\BSON\\ObjectId)#15 (1) {\n    [\"oid\"]=>\n    string(24) \"56fad2c36118fd2e9820cfc1\"\n  }\n  [\"name\":\"Person\":private]=>\n  string(3) \"Bob\"\n  [\"createdAt\":\"Person\":private]=>\n  object(MongoDB\\BSON\\UTCDateTime)#17 (1) {\n    [\"milliseconds\"]=>\n    int(1459278531218)\n  }\n}\n \n \n \n The same document in the MongoDB shell might display as: \n \n \n \ncopy \n \n { \n   \"_id\"   :   ObjectId ( \"56fad2c36118fd2e9820cfc1\" ), \n   \"__pclass\"   :   BinData ( 128 , \"UGVyc29u\" ), \n   \"name\"   :   \"Bob\" , \n   \"createdAt\"   :   ISODate ( \"2016-03-29T19:08:51.218Z\" ) \n } \n \n \n \n \n Note \n MongoDB\\BSON\\Persistable  may only be used\nfor root and embedded BSON documents. It may not be used for BSON arrays. \n \n \n \n Working with Enums \n Backed enums  can be used with BSON and will\nserialize as their case value (i.e. integer or string).\n Pure enums , which have no backed cases, cannot be\ndirectly serialized. This is similar to how enums are handled by\n json_encode() . \n Round-tripping a backed enum through BSON requires special handling. In the\nfollowing example, the  bsonUnserialize()  method in the class containing the\nenum is responsible for converting the value back to an enum case: \n \n \n \ncopy \n \n <?php \n\n enum   Role :   int \n { \n     case   USER   =   1 ; \n     case   ADMIN   =   2 ; \n } \n\n class   User   implements   MongoDB\\BSON\\Persistable \n { \n     public   function   __construct ( \n         private   string   $username , \n         private   Role   $role , \n         private   MongoDB\\BSON\\ObjectId   $_id   =   new   MongoDB\\BSON\\ObjectId (), \n     )   {} \n\n     public   function   bsonSerialize () :   array \n     { \n         return   [ \n             '_id'   =>   $this -> _id , \n             'username'   =>   $this -> username , \n             'role'   =>   $this -> role , \n         ]; \n     } \n\n     public   function   bsonUnserialize ( array   $data ) :   void \n     { \n         $this -> _id   =   $data [ '_id' ]; \n         $this -> username   =   $data [ 'username' ]; \n         $this -> role   =   Role :: from ( $data [ 'role' ]); \n     } \n } \n \n \n \n Enums are prohibited from implementing\n MongoDB\\BSON\\Unserializable  and\n MongoDB\\BSON\\Persistable , since enum cases\nhave no state and cannot be instantiated like ordinary objects. Pure and backed\nenums can, however, implement\n MongoDB\\BSON\\Serializable , which can be\nused to overcome the default behavior whereby backed enums are serialized as\ntheir case value and pure enums cannot be serialized. \n \n",
            "preview": "Most methods that read data from MongoDB support a typeMap option, which allows control over how BSON is converted to PHP. Additionally, the MongoDB\\Client , MongoDB\\Database , and MongoDB\\Collection classes accept a typeMap option, which can be used to specify a default type map to apply to any supporting methods and selected classes (e.g. MongoDB\\Client::selectDatabase() ).",
            "tags": "",
            "links": [
                "http://php.net/mongodb-bson-persistable",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "http://php.net/enumerations.basics",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "http://php.net/class.serializable",
                "http://php.net/enumerations.backed",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "http://php.net/json-encode",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "http://php.net/mongodb.persistence",
                "http://php.net/mongodb-bson-serializable",
                "http://php.net/mongodb-bson-unserializable",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "tutorial/indexes/index.html",
            "title": "Indexes \u2014 PHP Library Manual upcoming",
            "headings": [
                "Indexes",
                "Create Indexes",
                "List Indexes",
                "Drop Indexes"
            ],
            "text": "\n Indexes \n Indexes support the efficient execution of queries in MongoDB. Without indexes,\nMongoDB must perform a  collection scan , i.e. scan every document in a\ncollection, to select those documents that match the query statement. If an\nappropriate index exists for a query, MongoDB can use the index to limit the\nnumber of documents it must inspect. \n The PHP driver supports managing indexes through the\n MongoDB\\Collection  class, which implements MongoDB\u2019s\ncross-driver  Index Management \nand  Enumerating Indexes \nspecifications. \n This document provides an introduction to creating, listing, and dropping\nindexes using the MongoDB PHP Library. The MongoDB Manual\u2019s  Indexes  reference provides more thorough information about indexing in\nMongoDB. \n \n Create Indexes \n Create indexes with the  MongoDB\\Collection::createIndex()  or\n MongoDB\\Collection::createIndexes()  methods. Refer to the method\nreference for more details about each method. \n The following example creates an ascending index on the  state  field using\nthe  createIndex()  method: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $result   =   $collection -> createIndex ([ 'state'   =>   1 ]); \n\n var_dump ( $result ); \n \n \n \n When you create an index, the method returns its name, which is automatically\ngenerated from its specification. The above example would output something\nsimilar to: \n \n \n \ncopy \n \n string(7) \"state_1\"\n \n \n \n \n \n List Indexes \n The  MongoDB\\Collection::listIndexes()  method provides information\nabout the indexes in a collection. The\n MongoDB\\Collection::listIndexes()  method returns an iterator of\n MongoDB\\Model\\IndexInfo  objects, which you can use to view\ninformation about each index. Refer to the method reference for more details. \n The following example lists all indexes in the  zips  collection in the\n test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n foreach   ( $collection -> listIndexes ()   as   $indexInfo )   { \n     var_dump ( $indexInfo ); \n } \n \n \n \n The output would resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\IndexInfo)#10 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(4) \"_id_\"\n  [\"ns\"]=>\n  string(9) \"test.zips\"\n}\nobject(MongoDB\\Model\\IndexInfo)#13 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"state\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(7) \"state_1\"\n  [\"ns\"]=>\n  string(9) \"test.zips\"\n}\n \n \n \n \n \n Drop Indexes \n The  MongoDB\\Collection::dropIndex()  method lets you drop a single\nindex while  MongoDB\\Collection::dropIndexes()  drops all of the\nindexes on a collection. Refer to the method reference for more details about\neach method. \n The following example drops a single index by its name,  state_1 : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $result   =   $collection -> dropIndex ( 'state_1' ); \n\n var_dump ( $result ); \n \n \n \n The operation\u2019s output would resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"nIndexesWas\"]=>\n    int(2)\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n",
            "preview": "Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan , i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.",
            "tags": "",
            "links": [
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-indexes.rst",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndexes/",
                "https://github.com/mongodb/specifications/blob/master/source/index-management.rst",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "http://docs.mongodb.org/manual/indexes"
            ]
        },
        {
            "slug": "faq/index.html",
            "title": "Frequently Asked Questions \u2014 PHP Library Manual upcoming",
            "headings": [
                "Frequently Asked Questions",
                "Common Extension Installation Errors",
                "PHP Headers Not Found",
                "Multiple PHP Runtimes Installed",
                "Loading an Incompatible DLL on Windows",
                "Server Selection Failures"
            ],
            "text": "\n Frequently Asked Questions \n \n On this page \n \n Common Extension Installation Errors \n PHP Headers Not Found \n Multiple PHP Runtimes Installed \n Loading an Incompatible DLL on Windows \n \n \n Server Selection Failures \n \n \n \n Common Extension Installation Errors \n \n PHP Headers Not Found \n For example: \n \n \n \ncopy \n \n /private/tmp/pear/install/mongodb/php_phongo.c:24:10: fatal error: 'php.h' file not found\n\n#include <php.h>\n         ^~~~~~~\n \n \n \n This error indicates that PHP\u2019s build system cannot find the necessary headers.\nAll PHP extensions require headers in order to compile. Additionally, those\nheaders must correspond to the PHP runtime for which the extension will be used.\nGenerally, the  phpize  command (invoked by  pecl ) will ensure that the\nextension builds with the correct headers. \n Note that the mere presence of a PHP runtime does not mean that headers are\navailable. On various Linux distributions, headers are often published under a\nseparate  php-dev  or  php-devel  package. On macOS, the default PHP runtime\ndoes not include headers and users typically need to install PHP (and headers)\nvia  Homebrew  in order to build an extension. \n \n \n Multiple PHP Runtimes Installed \n If your system has multiple versions of PHP installed, each version will have\nits own  pecl  and  phpize  commands. Additionally, each PHP runtime may\nhave separate  php.ini  files for each SAPI (e.g. FPM, CLI). If the extension\nhas been installed but is not available at runtime, double-check that you have\nused the correct  pecl  command and have modified the appropriate  php.ini \nfile(s). \n If there is any doubt about the  php.ini  file being used by a PHP runtime,\nyou should examine the output of  phpinfo()  for that particular\nSAPI. Additionally,  php_ini_loaded_file()  and\n php_ini_scanned_files()  may be used to determine\nexactly which INI files have been loaded by PHP. \n To debug issues with the extension not being loaded, you can use the\n detect-extension  script provided in the tools directory. You can run this\nscript from the CLI or include it in a script accessible via your web server.\nThe tool will point out potential issues and installation instructions for your\nsystem. Assuming you\u2019ve installed the library through Composer, you can call the\nscript from the vendor directory: \n \n \n \ncopy \n \n php vendor/mongodb/mongodb/tools/detect-extension.php\n \n \n \n If you want to check configuration for a web server SAPI, include the file in\na script accessible from the web server and open it in your browser. Remember to\nwrap the script in  <pre>  tags to properly format its output: \n \n \n \ncopy \n \n <pre> <?php   require ( ... );   ?> </pre> \n \n \n \n \n \n Loading an Incompatible DLL on Windows \n Windows binaries are available for various combinations of PHP version,\nthread safety (TS or NTS), and architecture (x86 or x64). Failure to select the\ncorrect binary will result in an error when attempting to load the extension DLL\nat runtime: \n \n \n \ncopy \n \n PHP Warning:  PHP Startup: Unable to load dynamic library 'mongodb'\n \n \n \n Ensure that you have downloaded a DLL that corresponds to the following PHP\nruntime properties: \n \n PHP version ( PHP_VERSION ) \n Thread safety ( PHP_ZTS ) \n Architecture ( PHP_INT_SIZE ) \n \n In addition to the aforementioned constants, these properties can also be\ninferred from  phpinfo() . If your system has multiple PHP\nruntimes installed, double-check that you are examining the  phpinfo()  output\nfor the correct environment. \n The aforementioned  detect-extension  script can also be used to determine the\nappropriate DLL for your PHP environment. \n \n \n \n Server Selection Failures \n The following are all examples of\n Server Selection  failures: \n \n \n \ncopy \n \n No suitable servers found (`serverSelectionTryOnce` set):\n  [connection refused calling hello on 'a.example.com:27017']\n  [connection refused calling hello on 'b.example.com:27017']\n\nNo suitable servers found: `serverSelectionTimeoutMS` expired:\n  [socket timeout calling hello on 'example.com:27017']\n\nNo suitable servers found: `serverSelectionTimeoutMS` expired:\n  [connection timeout calling hello on 'a.example.com:27017']\n  [connection timeout calling hello on 'b.example.com:27017']\n  [TLS handshake failed: -9806 calling hello on 'c.example.com:27017']\n\nNo suitable servers found: `serverselectiontimeoutms` timed out:\n [TLS handshake failed: certificate verify failed (64): IP address mismatch calling hello on 'a.example.com:27017']\n [TLS handshake failed: certificate verify failed (64): IP address mismatch calling hello on 'b.example.com:27017']\n \n \n \n These errors typically manifest as a\n MongoDB\\Driver\\Exception\\ConnectionTimeoutException \nexception from the driver. The actual exception messages originate from\nlibmongoc, which is the underlying library used by the PHP driver. Since these\nmessages can take many forms, it\u2019s helpful to break down the structure of the\nmessage so you can better diagnose errors in your application. \n Messages will typically start with \u201cNo suitable servers found\u201d. The next part of\nthe message indicates  how  server selection failed. By default, the PHP driver\navoids a server selection loop and instead makes a single attempt (according to\nthe  serverSelectionTryOnce  connection string option). If the driver is\nconfigured to utilize a loop, a message like \u201cserverSelectionTimeoutMS expired\u201d\nwill tell us that we exhausted its time limit. \n The last component of the message tells us  why  server selection failed, and\nincludes one or more errors directly from the topology scanner, which is the\nservice responsible for connecting to and monitoring each host. Any host that\nlast experienced an error during monitoring will be included in this list. These\nmessages typically originate from low-level socket or TLS functions. \n The following is not meant to be exhaustive, but will hopefully point you in the\nright direction for analyzing the contributing factor(s) for a server selection\nfailure: \n \n \u201cconnection refused\u201d likely indicates that the remote host is not listening on\nthe expected port. \n \u201cconnection timeout\u201d could indicate a routing or firewall issue, or perhaps\na timeout due to latency. \n \u201csocket timeout\u201d suggests that a connection  was  established at some point\nbut was dropped or otherwise timed out due to latency. \n \u201cTLS handshake failed\u201d suggests something related to TLS or OCSP verification\nand is sometimes indicative of misconfigured TLS certificates. \n \n In the case of a connection failure, you can use the  connect  tool to try and\nreceive more information. This tool attempts to connect to each host in a\nconnection string using socket functions to see if it is able to establish a\nconnection, send, and receive data. The tool takes the connection string to a\nMongoDB deployment as its only argument. Assuming you\u2019ve installed the library\nthrough Composer, you would call the script from the vendor directory: \n \n \n \ncopy \n \n php vendor/mongodb/mongodb/tools/connect.php mongodb://127.0.0.1:27017\n \n \n \n In case the server does not accept connections, the output will look like this: \n \n \n \ncopy \n \n Looking up MongoDB at mongodb://127.0.0.1:27017\nFound 1 host(s) in the URI. Will attempt to connect to each.\n\nCould not connect to 127.0.0.1:27017: Connection refused\n \n \n \n \n Note \n The tool only supports the  mongodb://  URI schema. Using the\n mongodb+srv  scheme is not supported. \n \n \n",
            "preview": "This error indicates that PHP\u2019s build system cannot find the necessary headers. All PHP extensions require headers in order to compile. Additionally, those headers must correspond to the PHP runtime for which the extension will be used. Generally, the phpize command (invoked by pecl ) will ensure that the extension builds with the correct headers.",
            "tags": "",
            "links": [
                "http://php.net/php_ini_loaded_file",
                "http://php.net/php_ini_scanned_files",
                "http://php.net/phpinfo",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/server-selection/",
                "http://php.net/mongodb-driver-exception-connectiontimeoutexception",
                "https://brew.sh/"
            ]
        },
        {
            "slug": "reference/index.html",
            "title": "API Documentation \u2014 PHP Library Manual upcoming",
            "headings": [
                "API Documentation"
            ],
            "text": "\n API Documentation \n \n \n BSON \n MongoDB\\Client Class \n MongoDB\\Client::__construct() \n MongoDB\\Client::__get() \n MongoDB\\Client::createClientEncryption() \n MongoDB\\Client::dropDatabase() \n MongoDB\\Client::getManager() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Client::getReadPreference() \n MongoDB\\Client::getTypeMap() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Client::listDatabaseNames() \n MongoDB\\Client::listDatabases() \n MongoDB\\Client::selectCollection() \n MongoDB\\Client::selectDatabase() \n MongoDB\\Client::startSession() \n MongoDB\\Client::watch() \n \n \n MongoDB\\Database Class \n MongoDB\\Database::__construct() \n MongoDB\\Database::__get() \n MongoDB\\Database::aggregate() \n MongoDB\\Database::command() \n MongoDB\\Database::createCollection() \n MongoDB\\Database::createEncryptedCollection() \n MongoDB\\Database::drop() \n MongoDB\\Database::dropCollection() \n MongoDB\\Database::getDatabaseName() \n MongoDB\\Database::getManager() \n MongoDB\\Database::getReadConcern() \n MongoDB\\Database::getReadPreference() \n MongoDB\\Database::getTypeMap() \n MongoDB\\Database::getWriteConcern() \n MongoDB\\Database::listCollectionNames() \n MongoDB\\Database::listCollections() \n MongoDB\\Database::modifyCollection() \n MongoDB\\Database::renameCollection() \n MongoDB\\Database::selectCollection() \n MongoDB\\Database::selectGridFSBucket() \n MongoDB\\Database::watch() \n MongoDB\\Database::withOptions() \n \n \n MongoDB\\Collection Class \n MongoDB\\Collection::__construct() \n MongoDB\\Collection::aggregate() \n MongoDB\\Collection::bulkWrite() \n MongoDB\\Collection::count() \n MongoDB\\Collection::countDocuments() \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::createIndexes() \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::deleteMany() \n MongoDB\\Collection::deleteOne() \n MongoDB\\Collection::distinct() \n MongoDB\\Collection::drop() \n MongoDB\\Collection::dropIndex() \n MongoDB\\Collection::dropIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::estimatedDocumentCount() \n MongoDB\\Collection::explain() \n MongoDB\\Collection::find() \n MongoDB\\Collection::findOne() \n MongoDB\\Collection::findOneAndDelete() \n MongoDB\\Collection::findOneAndReplace() \n MongoDB\\Collection::findOneAndUpdate() \n MongoDB\\Collection::getCollectionName() \n MongoDB\\Collection::getDatabaseName() \n MongoDB\\Collection::getManager() \n MongoDB\\Collection::getNamespace() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\Collection::getReadPreference() \n MongoDB\\Collection::getTypeMap() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\Collection::insertMany() \n MongoDB\\Collection::insertOne() \n MongoDB\\Collection::listIndexes() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::mapReduce() \n MongoDB\\Collection::rename() \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::updateSearchIndex() \n MongoDB\\Collection::watch() \n MongoDB\\Collection::withOptions() \n \n \n MongoDB\\GridFS\\Bucket Class \n MongoDB\\GridFS\\Bucket::__construct() \n MongoDB\\GridFS\\Bucket::delete() \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::drop() \n MongoDB\\GridFS\\Bucket::find() \n MongoDB\\GridFS\\Bucket::findOne() \n MongoDB\\GridFS\\Bucket::getBucketName() \n MongoDB\\GridFS\\Bucket::getChunksCollection() \n MongoDB\\GridFS\\Bucket::getChunkSizeBytes() \n MongoDB\\GridFS\\Bucket::getDatabaseName() \n MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \n MongoDB\\GridFS\\Bucket::getFileIdForStream() \n MongoDB\\GridFS\\Bucket::getFilesCollection() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n MongoDB\\GridFSBucket::getWriteConcern() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n MongoDB\\GridFS\\Bucket::openUploadStream() \n MongoDB\\GridFS\\Bucket::rename() \n MongoDB\\GridFS\\Bucket::uploadFromStream() \n \n \n Write Result Classes \n MongoDB\\BulkWriteResult::getDeletedCount() \n MongoDB\\BulkWriteResult::getInsertedCount() \n MongoDB\\BulkWriteResult::getInsertedIds() \n MongoDB\\BulkWriteResult::getMatchedCount() \n MongoDB\\BulkWriteResult::getModifiedCount() \n MongoDB\\BulkWriteResult::getUpsertedCount() \n MongoDB\\BulkWriteResult::getUpsertedIds() \n MongoDB\\BulkWriteResult::isAcknowledged() \n MongoDB\\DeleteResult::getDeletedCount() \n MongoDB\\DeleteResult::isAcknowledged() \n MongoDB\\InsertManyResult::getInsertedCount() \n MongoDB\\InsertManyResult::getInsertedIds() \n MongoDB\\InsertManyResult::isAcknowledged() \n MongoDB\\InsertOneResult::getInsertedCount() \n MongoDB\\InsertOneResult::getInsertedId() \n MongoDB\\InsertOneResult::isAcknowledged() \n MongoDB\\UpdateResult::getMatchedCount() \n MongoDB\\UpdateResult::getModifiedCount() \n MongoDB\\UpdateResult::getUpsertedCount() \n MongoDB\\UpdateResult::getUpsertedId() \n MongoDB\\UpdateResult::isAcknowledged() \n \n \n Result Classes \n MongoDB\\ChangeStream::current() \n MongoDB\\ChangeStream::getCursorId() \n MongoDB\\ChangeStream::getResumeToken() \n MongoDB\\ChangeStream::key() \n MongoDB\\ChangeStream::next() \n MongoDB\\ChangeStream::rewind() \n MongoDB\\ChangeStream::valid() \n MongoDB\\MapReduceResult::getCounts() \n MongoDB\\MapReduceResult::getExecutionTimeMS() \n MongoDB\\MapReduceResult::getIterator() \n MongoDB\\MapReduceResult::getTiming() \n \n \n Enumeration Classes \n MongoDB\\Model\\CollectionInfo::getCappedMax() \n MongoDB\\Model\\CollectionInfo::getCappedSize() \n MongoDB\\Model\\CollectionInfo::getIdIndex() \n MongoDB\\Model\\CollectionInfo::getInfo() \n MongoDB\\Model\\CollectionInfo::getName() \n MongoDB\\Model\\CollectionInfo::getOptions() \n MongoDB\\Model\\CollectionInfo::getType() \n MongoDB\\Model\\CollectionInfo::isCapped() \n MongoDB\\Model\\DatabaseInfo::getName() \n MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() \n MongoDB\\Model\\DatabaseInfo::isEmpty() \n MongoDB\\Model\\IndexInfo::getKey() \n MongoDB\\Model\\IndexInfo::getName() \n MongoDB\\Model\\IndexInfo::getNamespace() \n MongoDB\\Model\\IndexInfo::getVersion() \n MongoDB\\Model\\IndexInfo::is2dSphere() \n MongoDB\\Model\\IndexInfo::isGeoHaystack() \n MongoDB\\Model\\IndexInfo::isSparse() \n MongoDB\\Model\\IndexInfo::isText() \n MongoDB\\Model\\IndexInfo::isTtl() \n MongoDB\\Model\\IndexInfo::isUnique() \n \n \n Functions \n MongoDB\\add_logger() \n MongoDB\\remove_logger() \n MongoDB\\with_transaction() \n \n \n Exception Classes \n \n \n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-key/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-modifyCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/add_logger/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isGeoHaystack/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isUnique/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getType/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getCounts/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-countDocuments/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-rename/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-dropCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openUploadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getIdIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isTtl/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunkSizeBytes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createEncryptedCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isText/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-startSession/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/remove_logger/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getVersion/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedSize/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-rewind/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getMatchedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/functions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getBucketName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-count/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getCursorId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-isEmpty/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-distinct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getInfo/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollectionNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileIdForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-current/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isSparse/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getResumeToken/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileDocumentForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getSizeOnDisk/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getExecutionTimeMS/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedMax/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFilesCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-uploadFromStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/with_transaction/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-rename/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getIterator/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunksCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-estimatedDocumentCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-dropDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-aggregate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabases/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-delete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getKey/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-explain/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-isCapped/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-next/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabaseNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-createClientEncryption/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-is2dSphere/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getMatchedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getTiming/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-renameCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "reference/bson/index.html",
            "title": "BSON \u2014 PHP Library Manual upcoming",
            "headings": [
                "BSON",
                "Overview",
                "Classes"
            ],
            "text": "\n BSON \n \n On this page \n \n Overview \n Classes \n \n \n \n Overview \n MongoDB stores data records as BSON documents. BSON is a binary representation\nof JSON documents, though it contains more data types than JSON. For the BSON\nspec, see  bsonspec.org . \n By default, the MongoDB PHP Library returns BSON documents as\n MongoDB\\Model\\BSONDocument  objects and BSON arrays as\n MongoDB\\Model\\BSONArray  objects, respectively. \n \n \n Classes \n \n \n MongoDB\\Model\\BSONArray \n This class extends PHP\u2019s  ArrayObject  class. It also\nimplements PHP\u2019s  JsonSerializable  interface and the\ndriver\u2019s  MongoDB\\BSON\\Serializable  and\n MongoDB\\BSON\\Unserializable \ninterfaces. \n By default, the library will deserialize BSON arrays as instances of this\nclass. During BSON and JSON serialization, instances of this class will\nserialize as an array type ( array_values()  is used\ninternally to numerically reindex the array). \n \n\n \n \n MongoDB\\Model\\BSONDocument \n This class extends PHP\u2019s  ArrayObject  class. It also\nimplements PHP\u2019s  JsonSerializable  interface and the\ndriver\u2019s  MongoDB\\BSON\\Serializable  and\n MongoDB\\BSON\\Unserializable \ninterfaces. \n By default, the library will deserialize BSON documents as instances of this\nclass. During BSON and JSON serialization, instances of this class will\nserialize as a document type ( object casting  is used internally). \n \n\n \n",
            "preview": "MongoDB stores data records as BSON documents. BSON is a binary representation of JSON documents, though it contains more data types than JSON. For the BSON spec, see bsonspec.org .",
            "tags": "",
            "links": [
                "http://php.net/types.type-juggling",
                "http://php.net/array_values",
                "https://bsonspec.org/",
                "http://php.net/arrayobject",
                "http://php.net/mongodb-bson-unserializable",
                "http://php.net/jsonserializable",
                "http://php.net/mongodb-bson-serializable"
            ]
        },
        {
            "slug": "reference/exception-classes/index.html",
            "title": "Exception Classes \u2014 PHP Library Manual upcoming",
            "headings": [
                "Exception Classes",
                "MongoDB\\Exception\\BadMethodCallException",
                "MongoDB\\Exception\\CreateEncryptedCollectionException",
                "MongoDB\\Exception\\InvalidArgumentException",
                "MongoDB\\Exception\\UnexpectedValueException",
                "MongoDB\\Exception\\UnsupportedException",
                "MongoDB\\GridFS\\Exception\\CorruptFileException",
                "MongoDB\\GridFS\\Exception\\FileNotFoundException",
                "MongoDB\\Exception\\Exception",
                "MongoDB\\Exception\\RuntimeException"
            ],
            "text": "\n Exception Classes \n \n On this page \n \n MongoDB\\Exception\\BadMethodCallException \n MongoDB\\Exception\\CreateEncryptedCollectionException \n MongoDB\\Exception\\InvalidArgumentException \n MongoDB\\Exception\\UnexpectedValueException \n MongoDB\\Exception\\UnsupportedException \n MongoDB\\GridFS\\Exception\\CorruptFileException \n MongoDB\\GridFS\\Exception\\FileNotFoundException \n MongoDB\\Exception\\Exception \n MongoDB\\Exception\\RuntimeException \n \n \n \n MongoDB\\Exception\\BadMethodCallException \n \n \n MongoDB\\Exception\\BadMethodCallException \n This exception is thrown when an unsupported method is invoked on an object. \n For example, using an unacknowledged write concern with\n MongoDB\\Collection::insertMany()  will return a\n MongoDB\\InsertManyResult  object. It is a logical error to call\n MongoDB\\InsertManyResult::getInsertedCount() , since the number\nof inserted documents can only be determined from the response of an\nacknowledged write operation. \n This class extends PHP\u2019s  BadMethodCallException  class and implements the library\u2019s\n Exception  interface. \n \n\n \n \n \n MongoDB\\Exception\\CreateEncryptedCollectionException \n \n \n MongoDB\\Exception\\CreateEncryptedCollectionException \n Thrown by  MongoDB\\Database::createEncryptedCollection()  if any\nerror is encountered while creating data keys or creating the collection. The\noriginal exception and modified  encryptedFields  option can be accessed\nvia the  getPrevious()  and  getEncryptedFields()  methods, respectively. \n This class extends the library\u2019s  RuntimeException  class. \n \n\n \n \n \n MongoDB\\Exception\\InvalidArgumentException \n \n \n MongoDB\\Exception\\InvalidArgumentException \n Thrown for errors related to the parsing of parameters or options within the\nlibrary. \n This class extends the driver\u2019s  InvalidArgumentException  class and implements the\nlibrary\u2019s  Exception  interface. \n \n\n \n \n \n MongoDB\\Exception\\UnexpectedValueException \n \n \n MongoDB\\Exception\\UnexpectedValueException \n This exception is thrown when a command response from the server is\nmalformed or not what the library expected. This exception means that an\nassertion in some operation, which abstracts a database command, has failed.\nIt may indicate a corrupted BSON response or bug in the server, driver, or\nlibrary. \n This class extends the driver\u2019s  UnexpectedValueException  class and implements the\nlibrary\u2019s  Exception  interface. \n \n\n \n \n \n MongoDB\\Exception\\UnsupportedException \n \n \n MongoDB\\Exception\\UnsupportedException \n This exception is thrown if an option is used and not supported by the\nselected server. It is used sparingly in cases where silently ignoring the\nunsupported option might otherwise lead to unexpected behavior. \n This class extends the library\u2019s  RuntimeException  class. \n \n Note \n Unlike  InvalidArgumentException , which may be thrown when\nan operation\u2019s parameters and options are parsed during construction, the\nselected server is not known until an operation is executed. \n \n \n\n \n \n \n MongoDB\\GridFS\\Exception\\CorruptFileException \n \n \n MongoDB\\GridFS\\Exception\\CorruptFileException \n This exception is thrown if a GridFS file\u2019s metadata or chunk documents\ncontain unexpected or invalid data. \n When selecting a GridFS file, this may be thrown if a metadata field has an\nincorrect type or its value is out of range (e.g. negative  length ). When\nreading a GridFS file, this may be thrown if a chunk\u2019s index is out of\nsequence or its binary data\u2019s length out of range. \n This class extends the library\u2019s  RuntimeException  class. \n \n\n \n \n \n MongoDB\\GridFS\\Exception\\FileNotFoundException \n \n \n MongoDB\\GridFS\\Exception\\FileNotFoundException \n This exception is thrown if no GridFS file was found for the selection\ncriteria (e.g.  id ,  filename ). \n This class extends the library\u2019s  RuntimeException  class. \n \n\n \n \n \n MongoDB\\Exception\\Exception \n \n \n MongoDB\\Exception\\Exception \n This interface extends the driver\u2019s  Exception  interface and is implemented by all\nexception classes within the library. \n \n\n \n \n \n MongoDB\\Exception\\RuntimeException \n \n \n MongoDB\\Exception\\RuntimeException \n This class extends the driver\u2019s  RuntimeException  class, which in turn extends\nPHP\u2019s  RuntimeException  class. \n \n\n \n",
            "preview": "This exception is thrown when an unsupported method is invoked on an object.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createEncryptedCollection/",
                "http://php.net/mongodb-driver-exception-exception",
                "http://php.net/mongodb-driver-exception-unexpectedvalueexception",
                "http://php.net/mongodb-driver-exception-invalidargumentexception",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "http://php.net/runtimeexception",
                "http://php.net/badmethodcallexception"
            ]
        },
        {
            "slug": "reference/function/add_logger/index.html",
            "title": "MongoDB\\add_logger() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\add_logger()",
                "Definition",
                "Behavior",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\add_logger() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Behavior \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\add_logger \n Registers a PSR logger to receive log messages from the driver. \n \n \n \ncopy \n \n function add_logger(Psr\\Log\\LoggerInterface $logger): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $logger \n Psr\\Log\\LoggerInterface \n A logger to register. \n If the logger is already registered, the method will have no effect. \n \n \n \n \n \n\n \n \n Behavior \n This function allows the application to register one or more\n Psr\\Log\\LoggerInterface \nobjects to receive log messages from libmongoc and the driver. Each registered\nlogger will receive messages for  all  clients. \n Messages originating from the extension will have their log level translated to\nan equivalent  PSR log level .\nFor performance reasons, trace-level messages from the extension are  not \nforwarded to PSR loggers. The extension\u2019s\n mongodb.debug  INI\nconfiguration must be used to collect trace-level logs. \n Log messages also include a domain string that identifies the driver component\nthat emitted the log message. This value is provided to the PSR logger via the\n{{domain}} key of the context array. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n See Also \n \n MongoDB\\remove_logger() \n PSR-3: Logger Interface \n libmongoc: Logging \n \n \n",
            "preview": "Registers a PSR logger to receive log messages from the driver.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/function/remove_logger/",
                "https://www.php-fig.org/psr/psr-3/",
                "http://php.net/manual/en/mongodb.configuration.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://mongoc.org/libmongoc/current/logging.html"
            ]
        },
        {
            "slug": "reference/function/remove_logger/index.html",
            "title": "MongoDB\\remove_logger() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\remove_logger()",
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\remove_logger() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\remove_logger \n Unregisters a PSR logger to no longer receive log messages from the driver. \n \n \n \ncopy \n \n function remove_logger(Psr\\Log\\LoggerInterface $logger): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $logger \n Psr\\Log\\LoggerInterface \n A logger to unregister. \n If the logger is not registered, the method will have no effect. \n \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n See Also \n \n MongoDB\\add_logger() \n PSR-3: Logger Interface \n libmongoc: Logging \n \n \n",
            "preview": "Unregisters a PSR logger to no longer receive log messages from the driver.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/add_logger/",
                "https://www.php-fig.org/psr/psr-3/",
                "https://mongoc.org/libmongoc/current/logging.html"
            ]
        },
        {
            "slug": "reference/function/with_transaction/index.html",
            "title": "MongoDB\\with_transaction() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\with_transaction()",
                "Definition",
                "Behavior",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\with_transaction() \n \n On this page \n \n Definition \n Behavior \n Errors/Exceptions \n See Also \n \n \n \n New in version 1.5. \n \n \n Definition \n \n \n MongoDB\\with_transaction \n Execute a callback within a transaction using the given client session \n \n \n \ncopy \n \n function with_transaction(MongoDB\\Driver\\Session $session, callable $callback, array $transactionOptions = []): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $session \n MongoDB\\Driver\\Session \n A client session used to execute the transaction. \n \n $callback \n callback \n A callback that will be run inside the transaction. The callback must accept a\n MongoDB\\Driver\\Session  object as first\nargument. \n \n $transactionOptions \n array \n Optional. Transaction options, which will be passed to\n MongoDB\\Driver\\Session::startTransaction .\nSee the extension documentation for a list of supported options. \n \n \n \n \n\n \n \n Behavior \n This function is responsible for starting a transaction, invoking a callback,\nand committing a transaction. It also applies logic to retry this process after\ncertain errors within a preset time limit. The callback is expected to execute\none or more operations within the transactionby passing the callback\u2019s\n MongoDB\\Driver\\Session  argument as an option to\nthose operations; however, that is not enforced. \n \n Note \n Applications are strongly encouraged to use an\n idempotent  callback, since it\nmay be invoked multiple times if retryable errors are encountered during\neither callback execution or committing. \n \n Any exception thrown during execution of the callback will be caught and\nevaluated. If an exception has a  TransientTransactionError  error label, the\ntransaction will be aborted, restarted, and the callback will be invoked again.\nFor any other exception, the transaction will be aborted and the exception\nre-thrown to propagate the error to the caller of  with_transaction() . \n Following successful execution of the callback, the transaction will be\ncommitted. If an exception with an UnknownTransactionCommitResult error label is\nencountered, the commit will be retried. If an exception with a\n TransientTransactionError  error label is encountered, the transaction will\nbe restarted and control will return to invoking the callback. Any other\nexception will be re-thrown to propagate the error to the caller of\n with_transaction() . \n When an error occurs during callback execution or committing, the process is\nonly retried if fewer than 120 seconds have elapsed since  with_transaction() \nwas first called. This time limit is not configurable. After this time, any\nexception that would normally result in a retry attempt will instead be\nre-thrown. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Driver\\Session::startTransaction \n MongoDB\\Driver\\Session::commitTransaction \n Transactions: Drivers API  documentation in the MongoDB manual \n Convenient API for Transactions  specification \n \n \n",
            "preview": "Execute a callback within a transaction using the given client session",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-session",
                "http://docs.mongodb.org/manual/core/transactions-in-applications",
                "https://github.com/mongodb/specifications/blob/master/source/transactions-convenient-api/transactions-convenient-api.rst",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://en.wikipedia.org/wiki/Idempotence",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/mongodb-driver-session.committransaction"
            ]
        },
        {
            "slug": "reference/class/MongoDBCollection/index.html",
            "title": "MongoDB\\Collection Class \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection Class",
                "Definition",
                "Type Map Limitations",
                "Methods"
            ],
            "text": "\n MongoDB\\Collection Class \n \n On this page \n \n Definition \n Type Map Limitations \n Methods \n \n \n \n Definition \n \n \n MongoDB\\Collection \n Provides methods for common operations on collections and documents,\nincluding CRUD operations and index management. \n You can construct collections directly using the driver\u2019s\n MongoDB\\Driver\\Manager  class or\nselect a collection from the library\u2019s  MongoDB\\Client  or\n MongoDB\\Database  classes. A collection may also be cloned from\nan existing  MongoDB\\Collection  object via the\n withOptions()  method. \n MongoDB\\Collection  supports the  readConcern ,  readPreference ,  typeMap ,\nand  writeConcern  options. If you omit an\noption, the collection inherits the value from the  Manager  constructor argument or the  Client  or  Database  object used to\nselect the collection. \n Operations within the  MongoDB\\Collection  class inherit the\ncollection\u2019s options. \n \n\n \n \n Type Map Limitations \n The  aggregate  (when not using a\ncursor),  distinct , and\n findAndModify  helpers do not\nsupport a  typeMap  option due to a driver limitation. The\n aggregate() ,\n distinct() ,\n findOneAndReplace() ,\n findOneAndUpdate() , and\n findOneAndDelete() \nmethods return BSON documents as  stdClass  objects and BSON arrays as arrays. \n \n \n Methods \n \n \n MongoDB\\Collection::__construct() \n MongoDB\\Collection::aggregate() \n MongoDB\\Collection::bulkWrite() \n MongoDB\\Collection::count() \n MongoDB\\Collection::countDocuments() \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::createIndexes() \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::deleteMany() \n MongoDB\\Collection::deleteOne() \n MongoDB\\Collection::distinct() \n MongoDB\\Collection::drop() \n MongoDB\\Collection::dropIndex() \n MongoDB\\Collection::dropIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::estimatedDocumentCount() \n MongoDB\\Collection::explain() \n MongoDB\\Collection::find() \n MongoDB\\Collection::findOne() \n MongoDB\\Collection::findOneAndDelete() \n MongoDB\\Collection::findOneAndReplace() \n MongoDB\\Collection::findOneAndUpdate() \n MongoDB\\Collection::getCollectionName() \n MongoDB\\Collection::getDatabaseName() \n MongoDB\\Collection::getManager() \n MongoDB\\Collection::getNamespace() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\Collection::getReadPreference() \n MongoDB\\Collection::getTypeMap() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\Collection::insertMany() \n MongoDB\\Collection::insertOne() \n MongoDB\\Collection::listIndexes() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::mapReduce() \n MongoDB\\Collection::rename() \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::updateSearchIndex() \n MongoDB\\Collection::watch() \n MongoDB\\Collection::withOptions() \n \n \n \n",
            "preview": "Provides methods for common operations on collections and documents, including CRUD operations and index management.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "http://docs.mongodb.org/manual/reference/command/findAndModify",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "http://php.net/mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-count/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-estimatedDocumentCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "http://docs.mongodb.org/manual/reference/command/aggregate",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "http://docs.mongodb.org/manual/reference/command/distinct",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-countDocuments/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-rename/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-explain/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-distinct/",
                "http://php.net/mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "http://php.net/mongodb-driver-manager",
                "http://php.net/mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/"
            ]
        },
        {
            "slug": "reference/class/MongoDBClient/index.html",
            "title": "MongoDB\\Client Class \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client Class",
                "Definition",
                "Methods"
            ],
            "text": "\n MongoDB\\Client Class \n \n On this page \n \n Definition \n Methods \n \n \n \n Definition \n \n \n MongoDB\\Client \n This class serves as an entry point for the MongoDB PHP Library. It is the\npreferred class for connecting to a MongoDB server or cluster of servers and\nacts as a gateway for accessing individual databases and collections.\n MongoDB\\Client  is analogous to the driver\u2019s\n MongoDB\\Driver\\Manager  class, which it\n composes . \n \n\n \n \n Methods \n \n \n MongoDB\\Client::__construct() \n MongoDB\\Client::__get() \n MongoDB\\Client::createClientEncryption() \n MongoDB\\Client::dropDatabase() \n MongoDB\\Client::getManager() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Client::getReadPreference() \n MongoDB\\Client::getTypeMap() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Client::listDatabaseNames() \n MongoDB\\Client::listDatabases() \n MongoDB\\Client::selectCollection() \n MongoDB\\Client::selectDatabase() \n MongoDB\\Client::startSession() \n MongoDB\\Client::watch() \n \n \n \n",
            "preview": "This class serves as an entry point for the MongoDB PHP Library. It is the preferred class for connecting to a MongoDB server or cluster of servers and acts as a gateway for accessing individual databases and collections. MongoDB\\Client is analogous to the driver\u2019s MongoDB\\Driver\\Manager class, which it composes .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-createClientEncryption/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__get/",
                "https://en.wikipedia.org/wiki/Object_composition",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabaseNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-startSession/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__construct/",
                "http://php.net/mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-dropDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabases/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getManager/"
            ]
        },
        {
            "slug": "reference/class/MongoDBGridFSBucket/index.html",
            "title": "MongoDB\\GridFS\\Bucket Class \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket Class",
                "Definition",
                "Methods"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket Class \n \n On this page \n \n Definition \n Methods \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket \n GridFS  is a specification for storing and retrieving\nfiles in MongoDB. GridFS uses two collections to store files. One collection\nstores the file chunks (e.g.  fs.chunks ), and the other stores file\nmetadata (e.g.  fs.files ). The  MongoDB\\GridFS\\Bucket  class\nprovides an interface around these collections for working with the files as\nPHP  Streams . \n You can construct a GridFS bucket using the driver\u2019s\n Manager  class, or select a bucket from\nthe library\u2019s  MongoDB\\Database  class via the\n selectGridFSBucket() \nmethod. \n \n\n \n \n Methods \n \n \n MongoDB\\GridFS\\Bucket::__construct() \n MongoDB\\GridFS\\Bucket::delete() \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::drop() \n MongoDB\\GridFS\\Bucket::find() \n MongoDB\\GridFS\\Bucket::findOne() \n MongoDB\\GridFS\\Bucket::getBucketName() \n MongoDB\\GridFS\\Bucket::getChunksCollection() \n MongoDB\\GridFS\\Bucket::getChunkSizeBytes() \n MongoDB\\GridFS\\Bucket::getDatabaseName() \n MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \n MongoDB\\GridFS\\Bucket::getFileIdForStream() \n MongoDB\\GridFS\\Bucket::getFilesCollection() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n MongoDB\\GridFSBucket::getWriteConcern() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n MongoDB\\GridFS\\Bucket::openUploadStream() \n MongoDB\\GridFS\\Bucket::rename() \n MongoDB\\GridFS\\Bucket::uploadFromStream() \n \n \n \n",
            "preview": "GridFS is a specification for storing and retrieving files in MongoDB. GridFS uses two collections to store files. One collection stores the file chunks (e.g. fs.chunks ), and the other stores file metadata (e.g. fs.files ). The MongoDB\\GridFS\\Bucket class provides an interface around these collections for working with the files as PHP Streams .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-delete/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getBucketName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-find/",
                "http://docs.mongodb.org/manual/core/gridfs",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-findOne/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileDocumentForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunksCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileIdForStream/",
                "http://php.net/stream",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFilesCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openUploadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-rename/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-uploadFromStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getChunkSizeBytes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-drop/"
            ]
        },
        {
            "slug": "reference/class/MongoDBDatabase/index.html",
            "title": "MongoDB\\Database Class \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database Class",
                "Definition",
                "Methods"
            ],
            "text": "\n MongoDB\\Database Class \n \n On this page \n \n Definition \n Methods \n \n \n \n Definition \n \n \n MongoDB\\Database \n Provides methods for common operations on a database, such as executing\ndatabase commands and managing collections. \n You can construct a database directly using the driver\u2019s\n MongoDB\\Driver\\Manager  class or\nselect a database from the library\u2019s  MongoDB\\Client  class. A\ndatabase may also be cloned from an existing  MongoDB\\Database \nobject via the  withOptions() \nmethod. \n MongoDB\\Database  supports the  readConcern ,  readPreference ,  typeMap ,\nand  writeConcern  options. If you omit an\noption, the database inherits the value from the  Manager  constructor argument or the  Client  object used to select the database. \n Operations within the  MongoDB\\Database  class inherit the\nDatabase\u2019s options. \n \n\n \n \n Methods \n \n \n MongoDB\\Database::__construct() \n MongoDB\\Database::__get() \n MongoDB\\Database::aggregate() \n MongoDB\\Database::command() \n MongoDB\\Database::createCollection() \n MongoDB\\Database::createEncryptedCollection() \n MongoDB\\Database::drop() \n MongoDB\\Database::dropCollection() \n MongoDB\\Database::getDatabaseName() \n MongoDB\\Database::getManager() \n MongoDB\\Database::getReadConcern() \n MongoDB\\Database::getReadPreference() \n MongoDB\\Database::getTypeMap() \n MongoDB\\Database::getWriteConcern() \n MongoDB\\Database::listCollectionNames() \n MongoDB\\Database::listCollections() \n MongoDB\\Database::modifyCollection() \n MongoDB\\Database::renameCollection() \n MongoDB\\Database::selectCollection() \n MongoDB\\Database::selectGridFSBucket() \n MongoDB\\Database::watch() \n MongoDB\\Database::withOptions() \n \n \n \n",
            "preview": "Provides methods for common operations on a database, such as executing database commands and managing collections.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollectionNames/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-renameCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-command/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/",
                "http://php.net/mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "http://php.net/mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-aggregate/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-drop/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-modifyCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createEncryptedCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-withOptions/",
                "http://php.net/mongodb-driver-writeconcern",
                "http://php.net/mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-dropCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/"
            ]
        },
        {
            "slug": "reference/write-result-classes/index.html",
            "title": "Write Result Classes \u2014 PHP Library Manual upcoming",
            "headings": [
                "Write Result Classes",
                "MongoDB\\BulkWriteResult",
                "Definition",
                "Methods",
                "MongoDB\\DeleteResult",
                "Definition",
                "Methods",
                "MongoDB\\InsertManyResult",
                "Definition",
                "Methods",
                "MongoDB\\InsertOneResult",
                "Definition",
                "Methods",
                "MongoDB\\UpdateResult",
                "Definition",
                "Methods"
            ],
            "text": "\n Write Result Classes \n \n On this page \n \n MongoDB\\BulkWriteResult \n MongoDB\\DeleteResult \n MongoDB\\InsertManyResult \n MongoDB\\InsertOneResult \n MongoDB\\UpdateResult \n \n \n \n MongoDB\\BulkWriteResult \n \n Definition \n \n \n MongoDB\\BulkWriteResult \n This class contains information about an executed bulk write operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::bulkWrite() . \n \n\n \n \n Methods \n \n \n MongoDB\\BulkWriteResult::getDeletedCount() \n MongoDB\\BulkWriteResult::getInsertedCount() \n MongoDB\\BulkWriteResult::getInsertedIds() \n MongoDB\\BulkWriteResult::getMatchedCount() \n MongoDB\\BulkWriteResult::getModifiedCount() \n MongoDB\\BulkWriteResult::getUpsertedCount() \n MongoDB\\BulkWriteResult::getUpsertedIds() \n MongoDB\\BulkWriteResult::isAcknowledged() \n \n \n \n \n \n \n MongoDB\\DeleteResult \n \n Definition \n \n \n MongoDB\\DeleteResult \n This class contains information about an executed delete operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::deleteMany()  or\n MongoDB\\Collection::deleteOne() . \n \n\n \n \n Methods \n \n \n MongoDB\\DeleteResult::getDeletedCount() \n MongoDB\\DeleteResult::isAcknowledged() \n \n \n \n \n \n \n MongoDB\\InsertManyResult \n \n Definition \n \n \n MongoDB\\InsertManyResult \n This class contains information about an executed bulk insert operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::insertMany() . \n \n\n \n \n Methods \n \n \n MongoDB\\InsertManyResult::getInsertedCount() \n MongoDB\\InsertManyResult::getInsertedIds() \n MongoDB\\InsertManyResult::isAcknowledged() \n \n \n \n \n \n \n MongoDB\\InsertOneResult \n \n Definition \n \n \n MongoDB\\InsertOneResult \n This class contains information about an executed insert operation. It\nencapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::insertOne() . \n \n\n \n \n Methods \n \n \n MongoDB\\InsertOneResult::getInsertedCount() \n MongoDB\\InsertOneResult::getInsertedId() \n MongoDB\\InsertOneResult::isAcknowledged() \n \n \n \n \n \n \n MongoDB\\UpdateResult \n \n Definition \n \n \n MongoDB\\UpdateResult \n This class contains information about an executed update or replace\noperation. It encapsulates a  MongoDB\\Driver\\WriteResult  object and is returned from\n MongoDB\\Collection::replaceOne() ,\n MongoDB\\Collection::updateMany() , or\n MongoDB\\Collection::updateOne() . \n \n\n \n \n Methods \n \n \n MongoDB\\UpdateResult::getMatchedCount() \n MongoDB\\UpdateResult::getModifiedCount() \n MongoDB\\UpdateResult::getUpsertedCount() \n MongoDB\\UpdateResult::getUpsertedId() \n MongoDB\\UpdateResult::isAcknowledged() \n \n \n \n \n",
            "preview": "This class contains information about an executed bulk write operation. It encapsulates a MongoDB\\Driver\\WriteResult object and is returned from MongoDB\\Collection::bulkWrite() .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getMatchedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getInsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedIds/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertOneResult-getInsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBInsertManyResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getMatchedCount/",
                "http://php.net/class.mongodb-driver-writeresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-getDeletedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getUpsertedId/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getUpsertedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDeleteResult-isAcknowledged/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/"
            ]
        },
        {
            "slug": "reference/functions/index.html",
            "title": "Functions \u2014 PHP Library Manual upcoming",
            "headings": [
                "Functions"
            ],
            "text": "\n Functions \n \n \n MongoDB\\add_logger() \n MongoDB\\remove_logger() \n MongoDB\\with_transaction() \n \n \n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/function/with_transaction/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/remove_logger/",
                "https://docs.mongodb.com/php-library/v1.17/reference/function/add_logger/"
            ]
        },
        {
            "slug": "reference/result-classes/index.html",
            "title": "Result Classes \u2014 PHP Library Manual upcoming",
            "headings": [
                "Result Classes",
                "MongoDB\\ChangeStream",
                "Definition",
                "Methods",
                "MongoDB\\MapReduceResult",
                "Definition",
                "Methods"
            ],
            "text": "\n Result Classes \n \n On this page \n \n MongoDB\\ChangeStream \n MongoDB\\MapReduceResult \n \n \n \n MongoDB\\ChangeStream \n \n New in version 1.3. \n \n \n Definition \n \n \n MongoDB\\ChangeStream \n This class extends PHP\u2019s  Iterator \ninterface. An instance of this class is returned by\n MongoDB\\Client::watch() ,\n MongoDB\\Database::watch() , and\n MongoDB\\Collection::watch() . \n This class allows for iteration of events in a change stream. It also allows\niteration to automatically resume after certain errors, such as a replica set\nfailover. \n \n\n \n \n Methods \n \n \n MongoDB\\ChangeStream::current() \n MongoDB\\ChangeStream::getCursorId() \n MongoDB\\ChangeStream::getResumeToken() \n MongoDB\\ChangeStream::key() \n MongoDB\\ChangeStream::next() \n MongoDB\\ChangeStream::rewind() \n MongoDB\\ChangeStream::valid() \n \n \n \n \n \n \n MongoDB\\MapReduceResult \n \n New in version 1.2. \n \n \n Definition \n \n \n MongoDB\\MapReduceResult \n This class extends PHP\u2019s  IteratorAggregate \ninterface. An instance of this class is returned by\n MongoDB\\Collection::mapReduce() . \n This class allows for iteration of map-reduce results irrespective of the\noutput method (e.g. inline, collection). It also provides access to command\nstatistics. \n \n\n \n \n Methods \n \n \n MongoDB\\MapReduceResult::getCounts() \n MongoDB\\MapReduceResult::getExecutionTimeMS() \n MongoDB\\MapReduceResult::getIterator() \n MongoDB\\MapReduceResult::getTiming() \n \n \n \n \n",
            "preview": "This class extends PHP\u2019s Iterator interface. An instance of this class is returned by MongoDB\\Client::watch() , MongoDB\\Database::watch() , and MongoDB\\Collection::watch() .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-next/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-key/",
                "http://php.net/iteratoraggregate",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getResumeToken/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getTiming/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getCounts/",
                "http://php.net/manual/en/class.iterator.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-current/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getIterator/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-rewind/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBMapReduceResult-getExecutionTimeMS/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-getCursorId/"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-rewind/index.html",
            "title": "MongoDB\\ChangeStream::rewind() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::rewind()",
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::rewind() \n \n On this page \n \n Definition \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::rewind \n Rewinds the change stream and attempts to load the first event. \n \n \n \ncopy \n \n function rewind(): void \n \n \n \n This method should be called at the start of change stream iteration. \n \n Note \n Rewinding the change stream does not guarantee that there will be a\ncurrent event to access. You should still call\n MongoDB\\ChangeStream::valid()  to check for a current event\nat each step of iteration. After initially rewinding the change stream,\n MongoDB\\ChangeStream::next()  should be used to iterate\nfurther. \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Driver\\Exception\\LogicException  if this method is called after a call\nto  MongoDB\\ChangeStream::next()  (i.e. the underlying\n MongoDB\\Driver\\Cursor  has already been\nadvanced). \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Iterator::rewind() \n Tailable Cursor Iteration \n Change Streams  documentation in the MongoDB manual \n \n \n",
            "preview": "Rewinds the change stream and attempts to load the first event.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "http://php.net/class.mongodb-driver-cursor",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "http://php.net/iterator.rewind",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "http://php.net/mongodb-driver-exception-logicexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-next/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-dropIndex/index.html",
            "title": "MongoDB\\Collection::dropIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::dropIndex()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::dropIndex() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::dropIndex \n Drop an index from the collection. \n \n \n \ncopy \n \n function dropIndex(string|MongoDB\\Model\\IndexInfo $indexName, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $indexName \n string|  MongoDB\\Model\\IndexInfo \n The name or model object of the index to drop. View the existing indexes on\nthe collection using the  listIndexes()  method. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n New in version 1.3. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  dropIndexes  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following drops an indexes with name  borough_1  from the  restaurants \ncollection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $result   =   $collection -> dropIndex ( 'borough_1' ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"nIndexesWas\"]=>\n    int(2)\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::dropIndexes() \n Indexes \n dropIndexes  command reference in\nthe MongoDB manual \n Index documentation  in the MongoDB manual \n \n \n",
            "preview": "Drop an index from the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndexes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/indexes",
                "http://docs.mongodb.org/manual/reference/command/dropIndexes"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getInsertedIds/index.html",
            "title": "MongoDB\\BulkWriteResult::getInsertedIds() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getInsertedIds()",
                "Definition",
                "Return Values"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getInsertedIds() \n \n On this page \n \n Definition \n Return Values \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getInsertedIds \n Return a map of IDs (i.e.  _id  field values) for documents that were\ninserted by all insert operations in the bulk write. \n \n \n \ncopy \n \n function getInsertedIds(): array \n \n \n \n Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. \n \n\n \n \n Return Values \n A map of IDs (i.e.  _id  field values) for documents that were inserted by all\ninsert operations in the bulk write. \n The index of each ID in the map corresponds to each document\u2019s position in the\nbulk operation. If a document had an ID prior to inserting (i.e. the driver did\nnot generate an ID), the index will contain its  _id  field value. Any\ndriver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance. \n \n",
            "preview": "Return a map of IDs (i.e. _id field values) for documents that were inserted by all insert operations in the bulk write.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-bson-objectid"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-getCursorId/index.html",
            "title": "MongoDB\\ChangeStream::getCursorId() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::getCursorId()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::getCursorId() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::getCursorId \n Returns the change stream cursor\u2019s ID. \n \n \n \ncopy \n \n function getCursorId(): MongoDB\\Driver\\CursorId \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\CursorId  object. \n \n \n Examples \n This example reports the cursor ID for a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $collection   =   ( new   MongoDB\\Client ( $uri )) -> test -> inventory ; \n\n $changeStream   =   $collection -> watch (); \n\n var_dump ( $changeStream -> getCursorId ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\CursorId)#5 (1) {\n  [\"id\"]=>\n  int(8462642181784669708)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n MongoDB\\Driver\\CursorId \n MongoDB\\Driver\\Cursor::getId() \n \n \n",
            "preview": "Returns the change stream cursor\u2019s ID.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-cursorid",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "http://php.net/manual/en/mongodb-driver-cursor.getid.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getWriteConcern/index.html",
            "title": "MongoDB\\Collection::getWriteConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getWriteConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getWriteConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getWriteConcern \n Returns the write concern for this collection. \n \n \n \ncopy \n \n function getWriteConcern(): MongoDB\\Driver\\WriteConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\WriteConcern \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'users' ,   [ \n    'writeConcern'   =>   new   MongoDB\\Driver\\WriteConcern ( 1 ,   0 ,   true ), \n ]); \n\n var_dump ( $collection -> getWriteConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\WriteConcern)#5 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}\n \n \n \n \n \n See Also \n \n Write Concern  in the MongoDB manual \n MongoDB\\Driver\\WriteConcern::isDefault() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Database::getWriteConcern() \n MongoDB\\GridFS\\Bucket::getWriteConcern() \n \n \n",
            "preview": "Returns the write concern for this collection.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-writeconcern.isdefault",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "http://php.net/class.mongodb-driver-writeconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase__construct/index.html",
            "title": "MongoDB\\Database::__construct() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::__construct()",
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::__construct() \n \n On this page \n \n Definition \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::__construct \n Constructs a new  Database  instance. \n \n \n \ncopy \n \n function __construct(MongoDB\\Driver\\Manager $manager, $databaseName, array $options = []) \n \n \n \n This constructor has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $manager \n MongoDB\\Driver\\Manager \n The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. \n \n $databaseName \n string \n The name of the database. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for database operations. Defaults to the\nmanager\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for database operations. Defaults to\nthe manager\u2019s read preference. \n \n typeMap \n array \n Optional. Default  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. The MongoDB PHP Library uses the following type map by default: \n \n \n \ncopy \n \n [ \n     'array' => 'MongoDB\\Model\\BSONArray', \n     'document' => 'MongoDB\\Model\\BSONDocument', \n     'root' => 'MongoDB\\Model\\BSONDocument', \n ] \n \n \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for database operations. Defaults\nto the manager\u2019s write concern. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n If you construct a Database explicitly, the Database inherits any options from\nthe  MongoDB\\Driver\\Manager  object. If\nyou select the Database from a  Client  object, the\nDatabase inherits its options from that object. \n \n \n See Also \n \n MongoDB\\Database::withOptions() \n MongoDB\\Client::selectDatabase() \n MongoDB\\Client::__get() \n \n \n",
            "preview": "Constructs a new Database instance.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__get/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-withOptions/",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "http://php.net/mongodb-driver-manager"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-isCapped/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::isCapped() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::isCapped()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::isCapped() \n \n Deprecated since version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::isCapped \n Return whether the collection is a  capped collection . \n \n \n \ncopy \n \n function isCapped(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the collection is a capped collection. \n This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n capped  key. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n     'name'   =>   'foo' , \n     'options'   =>   [ \n         'capped'   =>   true , \n         'size'   =>   1048576 , \n    ] \n ]); \n\n var_dump ( $info -> isCapped ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n bool(true)\n \n \n \n \n \n See Also \n \n MongoDB\\Model\\CollectionInfo::getCappedMax() \n MongoDB\\Model\\CollectionInfo::getCappedSize() \n Capped Collections  in the MongoDB manual \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Return whether the collection is a capped collection .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedMax/",
                "http://docs.mongodb.org/manual/core/capped-collections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedSize/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-isAcknowledged/index.html",
            "title": "MongoDB\\InsertOneResult::isAcknowledged() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertOneResult::isAcknowledged()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\InsertOneResult::isAcknowledged() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\InsertOneResult::isAcknowledged \n Return whether the write was acknowledged. \n \n \n \ncopy \n \n function isAcknowledged(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the write was acknowledged. \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::isAcknowledged() \n Write Concern  in the MongoDB manual \n \n \n",
            "preview": "Return whether the write was acknowledged.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.isacknowledged.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-listSearchIndexes/index.html",
            "title": "MongoDB\\Collection::listSearchIndexes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::listSearchIndexes()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::listSearchIndexes() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::listSearchIndexes \n Gets index information for one or more search indexes in the collection. \n \n \n \ncopy \n \n function listSearchIndexes(array $options = []): Countable&Iterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of documents to return in each response from the server. \n A batchSize of  0  is special in that and will only apply to the initial\n aggregate  command; subsequent  getMore  commands will use the server\u2019s\ndefault batch size. This may be useful for quickly returning a cursor or\nfailure from  aggregate  without doing significant server-side work. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n \n name \n string \n Optional. Name of the index to return information about. \n If name is not specified, information for all indexes on the collection will\nbe returned. \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n \n \n \n Note \n This command can only be run on a deployment hosted on\n MongoDB Atlas  and requires an Atlas cluster tier of at\nleast M10. A\n Local Atlas Deployment \ncan also be used for development. \n \n \n\n \n \n Return Values \n A list of documents, each of which describes a search index on the collection.\nFor details on the output fields, see\n $listSearchIndexes: Output \nin the MongoDB manual. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::updateSearchIndex() \n $listSearchIndexes \naggregation pipeline stage reference in the MongoDB manual \n Atlas Search  documentation in the MongoDB Manual \n \n \n",
            "preview": "Gets index information for one or more search indexes in the collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/listSearchIndexes",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/atlas",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "https://www.mongodb.com/docs/atlas/atlas-search/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getBucketName/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getBucketName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getBucketName()",
                "Definition",
                "Return Values",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getBucketName() \n \n On this page \n \n Definition \n Return Values \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getBucketName \n Returns the name of this bucket. \n \n \n \ncopy \n \n function getBucketName(): string \n \n \n \n \n\n \n \n Return Values \n The name of this bucket as a string. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n var_dump ( $bucket -> getBucketName ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(2) \"fs\"\n \n \n \n \n",
            "preview": "Returns the name of this bucket.",
            "tags": "",
            "links": []
        },
        {
            "slug": "reference/method/MongoDBCollection-withOptions/index.html",
            "title": "MongoDB\\Collection::withOptions() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::withOptions()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::withOptions() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::withOptions \n Returns a clone of the Collection object, but with different options. \n \n \n \ncopy \n \n function withOptions(array $options = []): MongoDB\\Collection \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for collection operations. Defaults to the\noriginal collection\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for collection operations. Defaults to\nthe original collection\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the original collection\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for collection operations. Defaults\nto the original collection\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Example \n The following example clones an existing Collection object with a new read\npreference: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'restaurants' ); \n\n $newCollection   =   $sourceCollection -> withOptions ([ \n     'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::__construct() \n \n \n",
            "preview": "Returns a clone of the Collection object, but with different options.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-dropDatabase/index.html",
            "title": "MongoDB\\Client::dropDatabase() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::dropDatabase()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::dropDatabase() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::dropDatabase \n Drop a database on the server. \n \n \n \ncopy \n \n function dropDatabase(string $databaseName, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $databaseName \n string \n The name of the database to drop. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the client\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  dropDatabase  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example drops the  test  database: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $result   =   $client -> dropDatabase ( 'test' ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"dropped\"]=>\n    string(4) \"test\"\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::drop() \n dropDatabase  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/dropDatabase",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-drop/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/database-profiler"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-listDatabaseNames/index.html",
            "title": "MongoDB\\Client::listDatabaseNames() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::listDatabaseNames()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::listDatabaseNames() \n \n New in version 1.7. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::listDatabaseNames \n Returns names for all databases on the server. \n \n \n \ncopy \n \n function listDatabaseNames(array $options = []): Iterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n authorizedDatabases \n boolean \n Optional. A flag that determines which databases are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listDatabases command documentation . \n For servers < 4.0.5, this option is ignored. \n \n New in version 1.7. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n filter \n array|object \n Optional. A query expression to filter the list of databases. \n You can specify a query expression for database fields (e.g.  name ,\n sizeOnDisk ,  empty ). \n \n New in version 1.3. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n \n \n \n\n \n \n Return Values \n An  Iterator , which provides the name of each\ndatabase on the server. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example lists all databases on the server: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n foreach   ( $client -> listDatabaseNames ()   as   $databaseName )   { \n     var_dump ( $databaseName ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(5) \"local\"\nstring(4) \"test\"\n \n \n \n \n \n See Also \n \n MongoDB\\Client::listDatabases() \n listDatabases  command reference\nin the MongoDB manual \n Enumerating Databases \nspecification \n \n \n",
            "preview": "Returns names for all databases on the server.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-databases.rst",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/class.iterator.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabases/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/command/listDatabases",
                "https://mongodb.com/docs/manual/reference/command/listDatabases/",
                "http://docs.mongodb.org/manual/reference/command/currentOp"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-getWriteConcern/index.html",
            "title": "MongoDB\\Database::getWriteConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getWriteConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::getWriteConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::getWriteConcern \n Returns the write concern for this database. \n \n \n \ncopy \n \n function getWriteConcern(): MongoDB\\Driver\\WriteConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\WriteConcern \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ,   [ \n    'writeConcern'   =>   new   MongoDB\\Driver\\WriteConcern ( 1 ,   0 ,   true ), \n ]); \n\n var_dump ( $database -> getWriteConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\WriteConcern)#5 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}\n \n \n \n \n \n See Also \n \n Write Concern  in the MongoDB manual \n MongoDB\\Driver\\WriteConcern::isDefault() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\GridFS\\Bucket::getWriteConcern() \n \n \n",
            "preview": "Returns the write concern for this database.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-writeconcern.isdefault",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "http://php.net/class.mongodb-driver-writeconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-createIndexes/index.html",
            "title": "MongoDB\\Collection::createIndexes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::createIndexes()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "$indexes  parameter",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::createIndexes() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n $indexes  parameter \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::createIndexes \n Create one or more indexes for the collection. \n \n \n \ncopy \n \n function createIndexes(array $indexes, array $options = []): string[] \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $indexes \n array \n The indexes to create on the collection. \n For example, the following specifies a unique index on the  username  field\nand a compound index on the  email  and  createdAt  fields: \n \n \n \ncopy \n \n [ \n     [ 'key' => [ 'username' => -1 ], 'unique' => true ], \n     [ 'key' => [ 'email' => 1, 'createdAt' => 1 ] ], \n ] \n \n \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n commitQuorum \n string|integer \n Optional. Specifies how many data-bearing members of a replica set, including the\nprimary, must complete the index builds successfully before the primary marks\nthe indexes as ready. \n This option accepts the same values for the  w  field in a write concern\nplus  \"votingMembers\" , which indicates all voting data-bearing nodes. \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.7. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n New in version 1.3. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n The names of the created indexes as an array of strings. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n $indexes  parameter \n The  $indexes  parameter is an array of index specification documents. Each\nelement in  $indexes  must itself be an array or object with a  key  field,\nwhich corresponds to the  $key  parameter of  createIndex() . The array or object may include other\nfields that correspond to index options accepted by  createIndex()  (excluding  writeConcern ). \n For example, the following  $indexes  parameter creates two indexes. The first\nis an ascending unique index on the  username  field and the second is a\n2dsphere index on the  loc  field with a custom name: \n \n \n \ncopy \n \n [\n    [ 'key' => [ 'username' => 1 ], 'unique' => true ],\n    [ 'key' => [ 'loc' => '2dsphere' ], 'name' => 'geo_index' ],\n]\n \n \n \n \n \n Example \n The following example creates two indexes on the  restaurants  collection in\nthe  test  database. One index is a compound index on the  borough  and\n cuisine  fields and the other is 2dsphere index on the  loc  field with a\ncustom name. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'restaurants' ); \n\n $indexNames   =   $collection -> createIndexes ([ \n     [   'key'   =>   [   'borough'   =>   1 ,   'cuisine'   =>   1 ]   ], \n     [   'key'   =>   [   'loc'   =>   '2dsphere' ],   'name'   =>   'geo_index'   ], \n ]); \n\n var_dump ( $indexNames ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(2) {\n  [0]=>\n  string(19) \"borough_1_cuisine_1\"\n  [1]=>\n  string(9) \"geo_index\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n Indexes \n createIndexes  command reference\nin the MongoDB manual \n Index  documentation in the MongoDB Manual \n \n \n",
            "preview": "Create one or more indexes for the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/indexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/createIndexes",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getOptions/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getOptions() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getOptions()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getOptions() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getOptions \n Return the collection options. This correlates with the options for\n MongoDB\\Database::createCollection() , but may include\nadditional fields set by the server. \n \n \n \ncopy \n \n function getOptions(): array \n \n \n \n \n\n \n \n Return Values \n The collection options. This corresponds to the  options  field returned in\nthe  listCollections  command reply. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n     'name'   =>   'foo' , \n     'options'   =>   [ \n         'capped'   =>   true , \n         'size'   =>   1048576 , \n     ] \n ]); \n\n var_dump ( $info -> getOptions ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(2) {\n  [\"capped\"]=>\n  bool(true)\n  [\"size\"]=>\n  int(1048576)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::createCollection() \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Return the collection options. This correlates with the options for MongoDB\\Database::createCollection() , but may include additional fields set by the server.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-getTypeMap/index.html",
            "title": "MongoDB\\Database::getTypeMap() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getTypeMap()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::getTypeMap() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::getTypeMap \n Returns the type map for this database. \n \n \n \ncopy \n \n function getTypeMap(): array \n \n \n \n \n\n \n \n Return Values \n A  type map  array. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ,   [ \n     'typeMap'   =>   [ \n         'root'   =>   'array' , \n         'document'   =>   'array' , \n         'array'   =>   'array' , \n     ], \n ]); \n\n var_dump ( $database -> getTypeMap ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}\n \n \n \n \n \n See Also \n \n BSON \n MongoDB\\Client::getTypeMap() \n MongoDB\\Collection::getTypeMap() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n \n \n",
            "preview": "Returns the type map for this database.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFileDocumentForStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getFileDocumentForStream()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getFileDocumentForStream \n Gets the file document of the GridFS file associated with a stream. \n \n \n \ncopy \n \n function getFileDocumentForStream(resource $stream): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $stream \n resource \n The GridFS stream resource. \n \n \n \n \n\n \n \n Return Values \n The metadata document associated with the GridFS stream. The return type will\ndepend on the bucket\u2019s  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openUploadStream ( 'filename' ); \n\n $fileDocument   =   $bucket -> getFileDocumentForStream ( $stream ); \n\n var_dump ( $fileDocument ); \n\n fclose ( $stream ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#4956 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#4955 (1) {\n      [\"oid\"]=>\n      string(24) \"5acfb05b7e21e83b5a29037c\"\n    }\n    [\"chunkSize\"]=>\n    int(261120)\n    [\"filename\"]=>\n    string(8) \"filename\"\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::getFileIdForStream() \n \n \n",
            "preview": "Gets the file document of the GridFS file associated with a stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileIdForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-getManager/index.html",
            "title": "MongoDB\\Database::getManager() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getManager()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::getManager() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::getManager \n Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Database . \n \n \n \ncopy \n \n function getManager(): MongoDB\\Manager \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Manager  object. \n \n \n See Also \n \n MongoDB\\Client::getManager() \n MongoDB\\Collection::getManager() \n \n \n",
            "preview": "Accessor for the MongoDB\\Driver\\Manager used by this Database .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getManager/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-createIndex/index.html",
            "title": "MongoDB\\Collection::createIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::createIndex()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "Create a Compound Index",
                "Create a Partial Index",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::createIndex() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::createIndex \n Create an index for the collection. \n \n \n \ncopy \n \n function createIndex(array|object $key, array $options = []): string \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $key \n array|object \n Specifies the field or fields to index and the index order. \n For example, the following specifies a descending index on the  username \nfield: \n \n \n \ncopy \n \n [ 'username' => -1 ] \n \n \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter accepts all index options that your MongoDB\nversion supports. MongoDB includes the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n commitQuorum \n string|integer \n Optional. Specifies how many data-bearing members of a replica set, including the\nprimary, must complete the index builds successfully before the primary marks\nthe indexes as ready. \n This option accepts the same values for the  w  field in a write concern\nplus  \"votingMembers\" , which indicates all voting data-bearing nodes. \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.7. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n unique \n boolean \n Optional. Creates a  unique  index. \n \n collation \n array|object \n Optional. Specifies the  collation  for the index. \n Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n partialFilterExpression \n array|object \n Optional. Creates a  partial  index. \n \n sparse \n boolean \n Optional. Creates a  sparse  index. \n \n expireAfterSeconds \n integer \n Optional. Creates a  TTL  index. \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n New in version 1.3. \n \n \n \n name \n string \n Optional. A name that uniquely identifies the index. By default, MongoDB creates index\nnames based on the key. \n \n background \n string \n Optional. Instructs MongoDB to build the index  as a background  process. \n \n 2dsphereIndexVersion \n integer \n Optional. Overrides the server\u2019s default version for a  2dsphere  index. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n For a full list of the supported index creation options, refer to the\n createIndexes  command reference\nin the MongoDB manual. \n \n\n \n \n Return Values \n The name of the created index as a string. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n Create a Compound Index \n The following example creates a  compound index \non the  borough  and  cuisine  fields in the  restaurants  collection in\nthe  test  database. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'restaurants' ); \n\n $indexName   =   $collection -> createIndex ([ 'borough'   =>   1 ,   'cuisine'   =>   1 ]); \n\n var_dump ( $indexName ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(19) \"borough_1_cuisine_1\"\n \n \n \n \n \n Create a Partial Index \n The following example adds a  partial index  on\nthe  borough  field in the  restaurants  collection in the  test \ndatabase. The partial index indexes only documents where the  borough  field\nexists. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'restaurants' ); \n\n $indexName   =   $collection -> createIndex ( \n    [ 'borough'   =>   1 ], \n    [ \n        'partialFilterExpression'   =>   [ \n            'borough'   =>   [ '$exists'   =>   true ], \n        ], \n    ] \n ); \n\n var_dump ( $indexName ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(9) \"borough_1\"\n \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndexes() \n Indexes \n createIndexes  command reference\nin the MongoDB manual \n Index  documentation in the MongoDB Manual \n \n \n",
            "preview": "Create an index for the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/core/index-partial",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/core/2dsphere",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "http://docs.mongodb.org/manual/core/index-creation",
                "http://docs.mongodb.org/manual/reference/command/createIndexes",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/core/index-sparse",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndexes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/core/index-ttl",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/core/index-compound",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/core/index-unique",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/indexes"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase__get/index.html",
            "title": "MongoDB\\Database::__get() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::__get()",
                "Definition",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::__get() \n \n On this page \n \n Definition \n Return Values \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::__get \n Select a collection within the database. \n \n \n \ncopy \n \n function __get(string $collectionName): MongoDB\\Collection \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the collection to select. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object. \n \n \n Behavior \n The selected collection inherits options such as read preference and type\nmapping from the  Database  object. If you wish to\noverride any options, use the  MongoDB\\Database::selectCollection() \nmethod. \n \n Note \n To select collections whose names contain special characters, such as\n . , use complex syntax, as in  $database->{'that.database'} . \n Alternatively,  MongoDB\\Database::selectCollection()  supports\nselecting collections whose names contain special characters. \n \n \n \n Examples \n The following example selects the  users  and  system.profile \ncollections from the  test  database: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $users   =   $db -> users ; \n $systemProfile   =   $db -> { 'system.profile' }; \n \n \n \n \n \n See Also \n \n MongoDB\\Database::selectCollection() \n MongoDB\\Client::selectCollection() \n Property Overloading  in the PHP Manual \n \n \n",
            "preview": "Select a collection within the database.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "http://php.net/oop5.overloading",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-updateMany/index.html",
            "title": "MongoDB\\Collection::updateMany() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::updateMany()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::updateMany() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::updateMany \n Update all documents that match the filter criteria. \n \n \n \ncopy \n \n function updateMany(array|object $filter, array|object $update, array $options = []): MongoDB\\UpdateResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to update. \n \n $update \n array|object \n Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB\u2019s  update   operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n upsert \n boolean \n Optional. If set to  true , creates a new document when no document matches the query\ncriteria. The default value is  false , which does not insert a new\ndocument when no match is found. \n \n arrayFilters \n array \n Optional. An array of filter documents that determines which array elements to modify\nfor an update operation on an array field. \n \n New in version 1.3. \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.2+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.6. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Examples \n The following example updates all of the documents with the  borough  of\n \"Queens\"  by setting the  active  field to  true : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $updateResult   =   $collection -> updateMany ( \n     [   'borough'   =>   'Queens'   ], \n     [   '$set'   =>   [   'active'   =>   true   ]] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Matched 5656 document(s)\nModified 5656 document(s)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n update  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Update all documents that match the filter criteria.",
            "tags": "",
            "links": [
                "https://mongodb.com/docs/master/reference/command/update/",
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/class.mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "http://docs.mongodb.org/manual/reference/command/update",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-downloadToStreamByName/index.html",
            "title": "MongoDB\\GridFS\\Bucket::downloadToStreamByName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::downloadToStreamByName()",
                "Definition",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n \n On this page \n \n Definition \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::downloadToStreamByName \n Selects a GridFS file by its  filename  and copies its contents to a\nwritable stream. \n \n \n \ncopy \n \n function downloadToStreamByName(string $filename, resource $destination, array $options = []): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filename \n string \n The  filename  of the file. \n \n $destination \n resource \n Writable stream, to which the GridFS file\u2019s contents will be written. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n revision \n integer \n Optional. The revision of the file to retrieve. Files with the name  filename  will be\ndifferentiated by their  uploadDate  field. \n Revision numbers are defined as follows: \n \n 0 = the original stored file \n 1 = the first revision \n 2 = the second revision \n etc\u2026 \n -2 = the second most recent revision \n -1 = the most recent revision \n \n \n Defaults to -1 (i.e. the most recent revision). \n \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n $destination   =   fopen ( 'php://temp' ,   'w+b' ); \n\n $bucket -> downloadToStreamByName ( 'filename' ,   $destination ); \n\n var_dump ( stream_get_contents ( $destination ,   - 1 ,   0 )); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n \n \n",
            "preview": "Selects a GridFS file by its filename and copies its contents to a writable stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getNamespace/index.html",
            "title": "MongoDB\\Model\\IndexInfo::getNamespace() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::getNamespace()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::getNamespace() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::getNamespace \n Return the index namespace, which is the namespace of the collection\ncontaining the index. \n \n \n \ncopy \n \n function getNamespace(): string \n \n \n \n \n\n \n \n Return Values \n The index namespace. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'ns'   =>   'foo.bar' , \n ]); \n\n echo   $info -> getNamespace (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n foo.bar\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::getNamespace() \n listIndexes  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "Return the index namespace, which is the namespace of the collection containing the index.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getChunksCollection/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getChunksCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getChunksCollection()",
                "Definition",
                "Return Values",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getChunksCollection() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getChunksCollection \n Returns the chunks collection used by the bucket. \n \n \n \ncopy \n \n function getChunksCollection(): MongoDB\\Collection \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object for the chunks collection. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n var_dump (( string )   $bucket -> getChunksCollection ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(14) \"test.fs.chunks\"\n \n \n \n \n",
            "preview": "Returns the chunks collection used by the bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-estimatedDocumentCount/index.html",
            "title": "MongoDB\\Collection::estimatedDocumentCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::estimatedDocumentCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::estimatedDocumentCount() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::estimatedDocumentCount \n Gets an estimated number of documents in the collection using collection metadata. \n \n \n \ncopy \n \n function countDocuments(array $options = []): integer \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n \n \n \n\n \n \n Return Values \n An estimated number of documents in the collection. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n This method returns an estimate of the count of documents in the collection\nusing collection metadata, rather than counting the documents or consulting an\nindex. This method does not take a  session  option and cannot be executed\nwithin a transaction. See\n Count: Behavior \nin the MongoDB manual for more information. \n This method is implemented using the  count \ncommand. Due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the  count \ncommand was not included in version \u201c1\u201d of the Stable API. Applications using\nthis method with the Stable API are recommended to upgrade their server version\nto 5.0.9+ or disable strict mode to avoid encountering errors. \n \n \n See Also \n \n count  command reference in the MongoDB\nmanual \n MongoDB\\Collection::countDocuments() \n \n \n",
            "preview": "Gets an estimated number of documents in the collection using collection metadata.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-countDocuments/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://www.mongodb.com/docs/manual/reference/command/count/",
                "http://docs.mongodb.org/manual/reference/command/count",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-command/index.html",
            "title": "MongoDB\\Database::command() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::command()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::command() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::command \n Execute a  command  on the database. This is\ngenerally used to execute commands that do not have a corresponding helper\nmethod within the library. \n \n \n \ncopy \n \n function command(array|object $command, array $options = []): MongoDB\\Driver\\Cursor \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $command \n array|object \n The  database command  document. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the database\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Cursor  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n Most database commands return a single result document, which can be obtained by\nconverting the returned cursor to an array and accessing its first element. The\nfollowing example executes a  ping  command\nand prints its result document: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $cursor   =   $database -> command ([ 'ping'   =>   1 ]); \n\n var_dump ( $cursor -> toArray ()[ 0 ]); \n \n \n \n The output would resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n Some database commands return a cursor with multiple results. The following\nexample executes  listCollections ,\nwhich returns a cursor containing a result document for each collection in the\n test  database. Note that this example is illustrative; applications would\ngenerally use  MongoDB\\Database::listCollections()  in practice. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $cursor   =   $database -> command ([ 'listCollections'   =>   1 ]); \n\n var_dump ( $cursor -> toArray ()); \n \n \n \n The output would resemble: \n \n \n \ncopy \n \n array(3) {\n  [0]=>\n  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(11) \"restaurants\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#3 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n  [1]=>\n  object(MongoDB\\Model\\BSONDocument)#13 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(5) \"users\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#12 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n  [2]=>\n  object(MongoDB\\Model\\BSONDocument)#15 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"name\"]=>\n      string(6) \"restos\"\n      [\"options\"]=>\n      object(MongoDB\\Model\\BSONDocument)#14 (1) {\n        [\"storage\":\"ArrayObject\":private]=>\n        array(0) {\n        }\n      }\n    }\n  }\n}\n \n \n \n \n \n See Also \n \n Execute Database Commands \n Database Commands  in the MongoDB manual \n MongoDB\\Driver\\Cursor \n MongoDB\\Driver\\Manager::executeCommand() \n \n \n",
            "preview": "Execute a command on the database. This is generally used to execute commands that do not have a corresponding helper method within the library.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/commands/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/ping",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/manual/en/mongodb-driver-manager.executecommand.php",
                "http://php.net/class.mongodb-driver-cursor",
                "http://php.net/class.mongodb-driver-readpreference"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-countDocuments/index.html",
            "title": "MongoDB\\Collection::countDocuments() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::countDocuments()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::countDocuments() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::countDocuments \n Count the number of documents that match the filter criteria. \n \n \n \ncopy \n \n function countDocuments(array|object $filter = [], array $options = []): integer \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to count. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n limit \n integer \n Optional. The maximum number of matching documents to return. \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n skip \n integer \n Optional. The number of matching documents to skip before returning results. \n \n \n \n \n\n \n \n Return Values \n The number of documents matching the filter criteria. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n Internally, this method uses the  $group  aggregation pipeline operator to\nobtain the result. If a  filter  parameter is given, this is converted into\na  $match  pipeline operator. Optional  $skip  and  $limit  stages are\nadded between  $match  and  group  if present in the options. \n \n Note \n This method counts documents on the server side. To obtain an approximate\ntotal number of documents without filters, the\n MongoDB\\Collection::estimatedDocumentCount()  method can be\nused. This method estimates the number of documents based on collection\nmetadata, thus sacrificing accuracy for performance. \n \n Since this method uses an aggregation pipeline, some query operators accepted\nwithin a  MongoDB\\Collection::count()   filter  cannot be used.\nConsider the following alternatives to these restricted operators: \n \n \n \n \n \n \n Restricted \n Alternative Syntax \n \n \n \n $near \n $geoWithin  with  $center \n \n $nearSphere \n $geoWithin  with  $centerSphere \n \n $where \n $expr \n \n \n \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n See Also \n \n MongoDB\\Collection::estimatedDocumentCount() \n \n \n",
            "preview": "Count the number of documents that match the filter criteria.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-bson-objectid",
                "https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/types.comparisons.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-estimatedDocumentCount/",
                "https://www.mongodb.com/docs/manual/reference/operator/query/expr/",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://www.mongodb.com/docs/manual/reference/operator/query/center/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-count/",
                "https://www.mongodb.com/docs/manual/reference/operator/query/where/",
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/",
                "https://www.mongodb.com/docs/manual/reference/operator/query/near/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/read-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getDeletedCount/index.html",
            "title": "MongoDB\\BulkWriteResult::getDeletedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getDeletedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getDeletedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getDeletedCount \n Return the total number of documents that were deleted by all delete\noperations in the bulk write. \n \n \n \ncopy \n \n function getDeletedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The total number of documents that were deleted by all delete operations in the\nbulk write. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getDeletedCount() \n \n \n",
            "preview": "Return the total number of documents that were deleted by all delete operations in the bulk write.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getdeletedcount.php",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-insertMany/index.html",
            "title": "MongoDB\\Collection::insertMany() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::insertMany()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::insertMany() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::insertMany \n Insert multiple documents. \n \n \n \ncopy \n \n function insertMany(array $documents, array $options = []): MongoDB\\InsertManyResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $documents \n array \n The documents to insert into the collection. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n ordered \n boolean \n Optional. If  true : when a single write fails, the operation will stop without\nperforming the remaining writes and throw an exception. \n If  false : when a single write fails, the operation will continue with the\nremaining writes, if any, and throw an exception. \n The default is  true . \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\InsertManyResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n In the case of a bulk write, the result may indicate multiple successful write\noperations and/or errors. If the  ordered  option is  true , some\noperations may have succeeded before the first error was encountered and the\nexception thrown. If the  ordered  option is  false , multiple errors may\nhave been encountered. \n \n \n Example \n The following operation inserts two documents into the  users  collection\nin the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n\n $insertManyResult   =   $collection -> insertMany ([ \n     [ \n         'username'   =>   'admin' , \n         'email'   =>   'admin@example.com' , \n         'name'   =>   'Admin User' , \n     ], \n     [ \n         'username'   =>   'test' , \n         'email'   =>   'test@example.com' , \n         'name'   =>   'Test User' , \n     ], \n ]); \n\n printf ( \"Inserted %d document(s) \\n \" ,   $insertManyResult -> getInsertedCount ()); \n\n var_dump ( $insertManyResult -> getInsertedIds ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 2 document(s)\narray(2) {\n  [0]=>\n  object(MongoDB\\BSON\\ObjectId)#11 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518141\"\n  }\n  [1]=>\n  object(MongoDB\\BSON\\ObjectId)#12 (1) {\n    [\"oid\"]=>\n    string(24) \"579a25921f417dd1e5518142\"\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::insertOne() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n insert  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/insert",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-writeresult",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-getName/index.html",
            "title": "MongoDB\\Model\\DatabaseInfo::getName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\DatabaseInfo::getName()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\DatabaseInfo::getName() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\DatabaseInfo::getName \n Return the database name. \n \n \n \ncopy \n \n function getName(): string \n \n \n \n \n\n \n \n Return Values \n The database name. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   DatabaseInfo ([ 'name'   =>   'foo' ]); \n\n echo   $info -> getName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n foo\n \n \n \n \n \n See Also \n \n MongoDB\\Database::getDatabaseName() \n listDatabases  command reference\nin the MongoDB manual \n \n \n",
            "preview": "The output would then resemble:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listDatabases",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getDatabaseName/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-find/index.html",
            "title": "MongoDB\\GridFS\\Bucket::find() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::find()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::find() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::find \n Finds documents from the GridFS bucket\u2019s files collection matching the query. \n \n \n \ncopy \n \n function find(array|object $filter = [], array $options = []): MongoDB\\Driver\\Cursor \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to query. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n skip \n integer \n Optional. Number of documents to skip. Defaults to  0 . \n \n limit \n integer \n Optional. The maximum number of documents to return. If unspecified, then defaults to no\nlimit. A limit of  0  is equivalent to setting no limit. \n A negative limit is similar to a positive limit but closes the cursor after\nreturning a single batch of results. As such, with a negative limit, if the\nlimited result set does not fit into a single batch, the number of documents\nreceived will be less than the specified limit. By passing a negative limit, the\nclient indicates to the server that it will not ask for a subsequent batch via\ngetMore. \n \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , queries can write\ndata to the  _tmp  sub-directory in the  dbPath  directory. \n \n batchSize \n integer \n Optional. The number of documents to return in the first batch. Defaults to  101 . A\nbatchSize of  0  means that the cursor will be established, but no documents\nwill be returned in the first batch. \n Unlike the previous wire protocol version, a batchSize of  1  for the\n find  command does not close the cursor. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n cursorType \n integer \n Optional. Indicates the type of cursor to use.  cursorType  supports the following\nvalues: \n \n \n MongoDB\\Operation\\Find::NON_TAILABLE  ( default ) \n MongoDB\\Operation\\Find::TAILABLE \n \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the bucket\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the bucket\u2019s read preference. \n \n oplogReplay \n boolean \n Optional. Internal use for replica sets. To use  oplogReplay , you must include the\nfollowing condition in the filter: \n \n \n \ncopy \n \n {   ts :   {   $gte :   < timestamp >   }   } \n \n \n \n The  MongoDB\\BSON\\Timestamp  class\nreference describes how to represent MongoDB\u2019s BSON timestamp type with PHP. \n \n Deprecated since version 1.7. \n \n \n \n noCursorTimeout \n boolean \n Optional. Prevents the server from timing out idle cursors after an inactivity period\n(10 minutes). \n \n allowPartialResults \n boolean \n Optional. For queries against a sharded collection, returns partial results from the\n mongos  if some shards are unavailable instead of throwing an error. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the bucket\u2019s type map. \n \n modifiers \n array|object \n Optional.  Meta operators  that modify the\noutput or behavior of a query. Use of these operators is deprecated in favor\nof named options. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Cursor  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $bucket -> uploadFromStream ( 'b' ,   $stream ); \n\n $cursor   =   $bucket -> find ( \n     [ 'length'   =>   [ '$lte'   =>   6 ]], \n     [ \n         'projection'   =>   [ \n             'filename'   =>   1 , \n             'length'   =>   1 , \n             '_id'   =>   0 , \n          ], \n          'sort'   =>   [ 'length'   =>   - 1 ], \n      ] \n ); \n\n var_dump ( $cursor -> toArray ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(1) {\n  [0]=>\n  object(MongoDB\\Model\\BSONDocument)#3015 (1) {\n    [\"storage\":\"ArrayObject\":private]=>\n    array(2) {\n      [\"filename\"]=>\n      string(1) \"b\"\n      [\"length\"]=>\n      int(6)\n    }\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::find() \n MongoDB\\GridFS\\Bucket::findOne() \n \n \n",
            "preview": "Finds documents from the GridFS bucket\u2019s files collection matching the query.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-findOne/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/class.mongodb-bson-objectid",
                "https://www.mongodb.com/docs/manual/reference/command/find/",
                "http://php.net/class.mongodb-driver-cursor",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://php.net/class.mongodb-bson-timestamp",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/operator/query-modifier",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/log-messages"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getReadConcern/index.html",
            "title": "MongoDB\\Collection::getReadConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getReadConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getReadConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getReadConcern \n Returns the read concern for this collection. \n \n \n \ncopy \n \n function getReadConcern(): MongoDB\\Driver\\ReadConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadConcern  object. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'users' ,   [ \n    'readConcern'   =>   new   MongoDB\\Driver\\ReadConcern ( 'majority' ), \n ]); \n\n var_dump ( $collection -> getReadConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}\n \n \n \n \n \n See Also \n \n Read Concern  in the MongoDB manual \n MongoDB\\Driver\\ReadConcern::isDefault() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Database::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n \n \n",
            "preview": "Returns the read concern for this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/mongodb-driver-readconcern.isdefault",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-getInsertedCount/index.html",
            "title": "MongoDB\\InsertOneResult::getInsertedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertOneResult::getInsertedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\InsertOneResult::getInsertedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\InsertOneResult::getInsertedCount \n Return the number of documents that were inserted. \n \n \n \ncopy \n \n function getInsertedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The number of documents that were inserted. This should be  1  for an\nacknowledged insert operation. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getInsertedCount() \n \n \n",
            "preview": "Return the number of documents that were inserted.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getinsertedcount.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection__construct/index.html",
            "title": "MongoDB\\Collection::__construct() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::__construct()",
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::__construct() \n \n On this page \n \n Definition \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::__construct \n Constructs a new  Collection  instance. \n \n \n \ncopy \n \n function __construct(MongoDB\\Driver\\Manager $manager, string $databaseName, string $collectionName, array $options = []) \n \n \n \n This constructor has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $manager \n MongoDB\\Driver\\Manager \n The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. \n \n $databaseName \n string \n The name of the database. \n \n $collectionName \n string \n The name of the collection. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for collection operations. Defaults to the\nmanager\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for collection operations. Defaults to\nthe manager\u2019s read preference. \n \n typeMap \n array \n Optional. Default  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. The MongoDB PHP Library uses the following type map by default: \n \n \n \ncopy \n \n [ \n     'array' => 'MongoDB\\Model\\BSONArray', \n     'document' => 'MongoDB\\Model\\BSONDocument', \n     'root' => 'MongoDB\\Model\\BSONDocument', \n ] \n \n \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for collection operations. Defaults\nto the manager\u2019s write concern. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n If you construct a Collection explicitly, the Collection inherits any options\nfrom the  MongoDB\\Driver\\Manager  object.\nIf you select the Collection from a  Client  or\n Database  object, the Collection inherits its\noptions from that object. \n \n \n See Also \n \n MongoDB\\Collection::withOptions() \n MongoDB\\Client::selectCollection() \n MongoDB\\Database::selectCollection() \n MongoDB\\Database::__get() \n \n \n",
            "preview": "Constructs a new Collection instance.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-withOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "http://php.net/mongodb-driver-manager",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-getReadConcern/index.html",
            "title": "MongoDB\\Database::getReadConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getReadConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::getReadConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::getReadConcern \n Returns the read concern for this database. \n \n \n \ncopy \n \n function getReadConcern(): MongoDB\\Driver\\ReadConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadConcern  object. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ,   [ \n    'readConcern'   =>   new   MongoDB\\Driver\\ReadConcern ( 'majority' ), \n ]); \n\n var_dump ( $database -> getReadConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}\n \n \n \n \n \n See Also \n \n Read Concern  in the MongoDB manual \n MongoDB\\Driver\\ReadConcern::isDefault() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n \n \n",
            "preview": "Returns the read concern for this database.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/mongodb-driver-readconcern.isdefault",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-createSearchIndex/index.html",
            "title": "MongoDB\\Collection::createSearchIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::createSearchIndex()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "Create an Index with Dynamic Mappings",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::createSearchIndex() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::createSearchIndex \n Create an Atlas Search index for the collection. \n \n \n \ncopy \n \n function createSearchIndex(array|object $definition, array $options = []): string \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $definition \n array|object \n Document describing the index to create. For details on definition syntax, see\n Search Index Definition Syntax . \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n name \n string \n Optional. Name of the search index to create. \n You cannot create multiple indexes with the same name on a single collection. \n If you do not specify a name, the index is named \u201cdefault\u201d. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n \n \n \n \n Note \n This command can only be run on a deployment hosted on\n MongoDB Atlas  and requires an Atlas cluster tier of at\nleast M10. A\n Local Atlas Deployment \ncan also be used for development. \n \n \n Note \n Atlas Search indexes are managed asynchronously. After creating or\nupdating an index, you can periodically execute\n MongoDB\\Collection::listSearchIndexes()  and check the\n queryable   output field \nto determine whether it is ready to be used. \n \n \n\n \n \n Return Values \n The name of the created Atlas Search index as a string. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n Create an Index with Dynamic Mappings \n The following example creates an Atlas Search index using\n dynamic mappings \nto index all document fields containing\n supported data types . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'articles' ); \n\n $indexName   =   $collection -> createSearchIndex ( \n    [ 'mappings'   =>   [ 'dynamic'   =>   true ]], \n    [ 'name'   =>   'test-search-index' ] \n ); \n\n var_dump ( $indexName ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(17) \"test-search-index\"\n \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::updateSearchIndex() \n createSearchIndexes  command\nreference in the MongoDB manual \n Atlas Search  documentation in the MongoDB Manual \n \n \n",
            "preview": "Create an Atlas Search index for the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/atlas",
                "https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/command/createSearchIndexes",
                "https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/listSearchIndexes/",
                "https://www.mongodb.com/docs/atlas/atlas-search/",
                "http://docs.mongodb.org/manual/reference/command/createSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-isEmpty/index.html",
            "title": "MongoDB\\Model\\DatabaseInfo::isEmpty() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\DatabaseInfo::isEmpty()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\DatabaseInfo::isEmpty() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\DatabaseInfo::isEmpty \n Return whether the database has any data. \n \n \n \ncopy \n \n function isEmpty(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the database has any data. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   DatabaseInfo ([ 'empty'   =>   true ]); \n\n var_dump ( $info -> isEmpty ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n bool(true)\n \n \n \n \n \n See Also \n \n listDatabases  command reference\nin the MongoDB manual \n \n \n",
            "preview": "Return whether the database has any data.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listDatabases"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndDelete/index.html",
            "title": "MongoDB\\Collection::findOneAndDelete() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::findOneAndDelete()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::findOneAndDelete() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::findOneAndDelete \n Finds a single document matching the query and deletes it. \n \n \n \ncopy \n \n function findOneAndDelete(array|object $filter = [], array $options = []): object|null \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to delete. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.4+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.7. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array or object for the document that was deleted, or  null  if no document\nmatched the query. The return type will depend on the  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n The following example finds and deletes the document with  restaurant_id  of\n \"40375376\"  from the  restaurants  collection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $deletedRestaurant   =   $collection -> findOneAndDelete ( \n     [   'restaurant_id'   =>   '40375376'   ], \n     [ \n         'projection'   =>   [ \n             'name'   =>   1 , \n             'borough'   =>   1 , \n             'restaurant_id'   =>   1 , \n         ], \n     ] \n ); \n\n var_dump ( $deletedRestaurant ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#17 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#11 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef280a846852a4b3f70\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"name\"]=>\n    string(15) \"Agra Restaurant\"\n    [\"restaurant_id\"]=>\n    string(8) \"40375376\"\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::findOneAndReplace() \n MongoDB\\Collection::findOneAndUpdate() \n findAndModify  command reference\nin the MongoDB manual \n \n \n",
            "preview": "Finds a single document matching the query and deletes it.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/manual/en/types.comparisons.php",
                "http://docs.mongodb.org/manual/reference/command/findAndModify",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/manual/en/book.bson.php",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-bson-objectid",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-bulkWrite/index.html",
            "title": "MongoDB\\Collection::bulkWrite() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::bulkWrite()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::bulkWrite() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::bulkWrite \n Executes multiple write operations. \n \n \n \ncopy \n \n function bulkWrite(array $operations, array $options = []): MongoDB\\BulkWriteResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $operations \n array \n Optional. An array containing the write operations to perform.\n MongoDB\\Collection::bulkWrite()  supports\n deleteMany() ,\n deleteOne() ,\n insertOne() ,\n replaceOne() ,\n updateMany() , and\n updateOne()  operations in the\nfollowing array structure: \n \n \n \ncopy \n \n [ \n     [ 'deleteMany' => [ $filter ] ], \n     [ 'deleteOne'  => [ $filter ] ], \n     [ 'insertOne'  => [ $document ] ], \n     [ 'replaceOne' => [ $filter, $replacement, $options ] ], \n     [ 'updateMany' => [ $filter, $update, $options ] ], \n     [ 'updateOne'  => [ $filter, $update, $options ] ], \n ] \n \n \n \n Arguments correspond to the respective operation methods. However, the\n writeConcern  option is specified as a top-level option to\n MongoDB\\Collection::bulkWrite()  instead of each individual\noperation. \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n ordered \n boolean \n Optional. If  true : when a single write fails, the operation will stop without\nperforming the remaining writes and throw an exception. \n If  false : when a single write fails, the operation will continue with the\nremaining writes, if any, and throw an exception. \n The default is  true . \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\BulkWriteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n In the case of a bulk write, the result may indicate multiple successful write\noperations and/or errors. If the  ordered  option is  true , some\noperations may have succeeded before the first error was encountered and the\nexception thrown. If the  ordered  option is  false , multiple errors may\nhave been encountered. \n \n \n See Also \n \n MongoDB\\Collection::deleteMany() \n MongoDB\\Collection::deleteOne() \n MongoDB\\Collection::insertMany() \n MongoDB\\Collection::insertOne() \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::updateOne() \n CRUD Operations \n \n \n",
            "preview": "Executes multiple write operations.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertOne/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-writeresult",
                "http://php.net/class.mongodb-driver-writeresult",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-current/index.html",
            "title": "MongoDB\\ChangeStream::current() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::current()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::current() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::current \n Returns the current event in the change stream. \n \n \n \ncopy \n \n function current(): array|object|null \n \n \n \n The structure of each event document will vary based on the operation type.\nSee  Change Events  in the MongoDB manual\nfor more information. \n \n\n \n \n Return Values \n An array or object for the current event in the change stream, or  null  if\nthere is no current event (i.e.  MongoDB\\ChangeStream::valid() \nreturns  false ). The return type will depend on the  typeMap  option for\n MongoDB\\Collection::watch() . \n \n \n Examples \n This example reports events while iterating a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $collection   =   ( new   MongoDB\\Client ( $uri )) -> test -> inventory ; \n\n $changeStream   =   $collection -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     $ns   =   sprintf ( '%s.%s' ,   $event [ 'ns' ][ 'db' ],   $event [ 'ns' ][ 'coll' ]); \n     $id   =   json_encode ( $event [ 'documentKey' ][ '_id' ]); \n\n     switch   ( $event [ 'operationType' ])   { \n         case   'delete' : \n             printf ( \"Deleted document in %s with _id: %s \\n\\n \" ,   $ns ,   $id ); \n             break ; \n\n         case   'insert' : \n             printf ( \"Inserted new document in %s \\n \" ,   $ns ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'replace' : \n             printf ( \"Replaced new document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'update' : \n             printf ( \"Updated document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'updateDescription' ]),   \" \\n\\n \" ; \n             break ; \n     } \n } \n \n \n \n Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: \n \n \n \ncopy \n \n Inserted new document in test.inventory\n{\"_id\":{\"$oid\":\"5a81fc0d6118fd1af1790d32\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n{\"updatedFields\":{\"quantity\":4},\"removedFields\":[]}\n\nDeleted document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n \n \n \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Iterator::current() \n Tailable Cursor Iteration \n Change Streams  documentation in the MongoDB manual \n Change Events  documentation in the\nMongoDB manual \n \n \n",
            "preview": "Returns the current event in the change stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "http://docs.mongodb.org/manual/reference/change-events/",
                "http://docs.mongodb.org/manual/changeStreams",
                "http://php.net/iterator.current",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndUpdate/index.html",
            "title": "MongoDB\\Collection::findOneAndUpdate() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::findOneAndUpdate()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::findOneAndUpdate() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::findOneAndUpdate \n Finds a single document matching the query and updates it. \n \n \n \ncopy \n \n function findOneAndUpdate(array|object $filter, array|object $update, array $options = []): object|null \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to update. \n \n $update \n array|object \n Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB\u2019s  update   operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n arrayFilters \n array \n Optional. An array of filter documents that determines which array elements to modify\nfor an update operation on an array field. \n \n New in version 1.3. \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.4+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.7. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n returnDocument \n integer \n Optional. Specifies whether to return the document before the update is applied, or\nafter.  returnDocument  supports the following values: \n \n MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE  ( default ) \n MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned result document. \n \n \n upsert \n boolean \n Optional. If set to  true , creates a new document when no document matches the query\ncriteria. The default value is  false , which does not insert a new\ndocument when no match is found. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array or object for either the original or the updated document, depending on\nthe specified value of the  returnDocument  option. By default, the original\ndocument is returned. If no document matched the query,  null  is returned.\nThe return type will depend on the  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n The following operation updates the restaurant with  restaurant_id  of\n \"40361708\"  in the  restaurants  collection in the  test  database by\nsetting its building number to  \"761\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $updatedRestaurant   =   $collection -> findOneAndUpdate ( \n     [   'restaurant_id'   =>   '40361708'   ], \n     [   '$set'   =>   [   'address.building'   =>   '761'   ]], \n     [ \n         'projection'   =>   [   'address'   =>   1   ], \n         'returnDocument'   =>   MongoDB\\Operation\\FindOneAndUpdate :: RETURN_DOCUMENT_AFTER , \n     ] \n ); \n\n var_dump ( $updatedRestaurant ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#20 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef280a846852a4b3dee\"\n    }\n    [\"address\"]=>\n    object(MongoDB\\Model\\BSONDocument)#19 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(4) {\n        [\"building\"]=>\n        string(3) \"761\"\n        [\"coord\"]=>\n        object(MongoDB\\Model\\BSONArray)#18 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(2) {\n            [0]=>\n            float(-73.9925306)\n            [1]=>\n            float(40.7309346)\n          }\n        }\n        [\"street\"]=>\n        string(8) \"Broadway\"\n        [\"zipcode\"]=>\n        string(5) \"10003\"\n      }\n    }\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::findOneAndDelete() \n MongoDB\\Collection::findOneAndReplace() \n findAndModify  command reference\nin the MongoDB manual \n \n \n",
            "preview": "Finds a single document matching the query and updates it.",
            "tags": "",
            "links": [
                "https://mongodb.com/docs/master/reference/command/update/",
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/command/findAndModify",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndReplace/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "https://www.mongodb.com/docs/manual/reference/glossary/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-replaceOne/index.html",
            "title": "MongoDB\\Collection::replaceOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::replaceOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::replaceOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::replaceOne \n Replace at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be replaced. \n \n \n \ncopy \n \n function replaceOne(array|object $filter, array|object $replacement, array $options = []): MongoDB\\UpdateResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to replace. \n \n $replacement \n array|object \n The replacement document. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n upsert \n boolean \n Optional. If set to  true , creates a new document when no document matches the query\ncriteria. The default value is  false , which does not insert a new\ndocument when no match is found. \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.2+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.6. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Example \n The following example replaces the document with  restaurant_id  of\n \"40356068\"  in the  restaurants  collection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $updateResult   =   $collection -> replaceOne ( \n     [   'restaurant_id'   =>   '40356068'   ], \n     [ \n         'name'   =>   'New Restaurant' , \n         'restaurant_id'   =>   '99988877' , \n         'borough'   =>   'Queens' , \n         'cuisine'   =>   'Cafe' , \n         'grades'   =>   [], \n     ] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Matched 1 document(s)\nModified 1 document(s)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::updateOne() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n update  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Replace at most one document that matches the filter criteria. If multiple documents match the filter criteria, only the first matching document will be replaced.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateOne/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://docs.mongodb.org/manual/reference/command/update",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "http://php.net/class.mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://php.net/class.mongodb-bson-objectid",
                "http://php.net/manual/en/types.comparisons.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getManager/index.html",
            "title": "MongoDB\\Collection::getManager() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getManager()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getManager() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getManager \n Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Collection . \n \n \n \ncopy \n \n function getManager(): MongoDB\\Manager \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Manager  object. \n \n \n See Also \n \n MongoDB\\Client::getManager() \n MongoDB\\Database::getManager() \n \n \n",
            "preview": "Accessor for the MongoDB\\Driver\\Manager used by this Collection .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getManager/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getManager/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getChunkSizeBytes/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getChunkSizeBytes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getChunkSizeBytes()",
                "Definition",
                "Return Values",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getChunkSizeBytes() \n \n Changed in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getChunkSizeBytes \n Returns the chunk size of this bucket in bytes. \n \n \n \ncopy \n \n function getChunkSizeBytes(): integer \n \n \n \n \n\n \n \n Return Values \n The chunk size of this bucket in bytes. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n var_dump ( $bucket -> getChunkSizeBytes ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(261120)\n \n \n \n \n",
            "preview": "Returns the chunk size of this bucket in bytes.",
            "tags": "",
            "links": []
        },
        {
            "slug": "reference/method/MongoDBCollection-getTypeMap/index.html",
            "title": "MongoDB\\Collection::getTypeMap() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getTypeMap()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getTypeMap() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getTypeMap \n Returns the type map for this collection. \n \n \n \ncopy \n \n function getTypeMap(): array \n \n \n \n \n\n \n \n Return Values \n A  type map  array. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'users' ,   [ \n     'typeMap'   =>   [ \n         'root'   =>   'array' , \n         'document'   =>   'array' , \n         'array'   =>   'array' , \n     ], \n ]); \n\n var_dump ( $collection -> getTypeMap ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}\n \n \n \n \n \n See Also \n \n BSON \n MongoDB\\Client::getTypeMap() \n MongoDB\\Database::getTypeMap() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n \n \n",
            "preview": "Returns the type map for this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-withOptions/index.html",
            "title": "MongoDB\\Database::withOptions() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::withOptions()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::withOptions() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::withOptions \n Returns a clone of the Database object, but with different options. \n \n \n \ncopy \n \n function withOptions(array $options = []): MongoDB\\Database \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for database operations. Defaults to the\noriginal database\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for database operations. Defaults to\nthe original database\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the original database\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for database operations. Defaults\nto the original database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Database  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Example \n The following example clones an existing Database object with a new read\npreference: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $newDb   =   $db -> withOptions ([ \n     'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n \n \n \n \n \n See Also \n \n MongoDB\\Database::__construct() \n \n \n",
            "preview": "Returns a clone of the Database object, but with different options.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "http://php.net/class.mongodb-driver-readconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-is2dSphere/index.html",
            "title": "MongoDB\\Model\\IndexInfo::is2dSphere() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::is2dSphere()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::is2dSphere() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::is2dSphere \n Return whether the index is a  2dsphere \nindex. \n \n \n \ncopy \n \n function is2dSphere(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a 2dsphere index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'places' ); \n\n $collection -> createIndex ([ 'pos'   =>   '2dsphere' ]); \n\n foreach   ( $collection -> listIndexes ()   as   $index )   { \n     if   ( $index -> is2dSphere ())   { \n         printf ( \"%s has 2dsphereIndexVersion: %d \\n \" ,   $index -> getName (),   $index [ '2dsphereIndexVersion' ]); \n     } \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n pos_2dsphere has 2dsphereIndexVersion: 3\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::listIndexes() \n 2dsphere Indexes  reference in the MongoDB\nmanual \n \n \n",
            "preview": "Return whether the index is a 2dsphere index.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "http://docs.mongodb.org/manual/core/2dsphere",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getReadPreference/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getReadPreference() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getReadPreference()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getReadPreference() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getReadPreference \n Returns the read preference for this GridFS bucket. \n \n \n \ncopy \n \n function getReadPreference(): MongoDB\\Driver\\ReadPreference \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadPreference \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ); \n $bucket   =   $database -> selectGridFSBucket ([ \n    'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n\n var_dump ( $bucket -> getReadPreference ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadPreference)#3 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}\n \n \n \n \n \n See Also \n \n Read Preference  in the MongoDB manual \n MongoDB\\Client::getReadPreference() \n MongoDB\\Collection::getReadPreference() \n MongoDB\\Database::getReadPreference() \n \n \n",
            "preview": "Returns the read preference for this GridFS bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-drop/index.html",
            "title": "MongoDB\\Database::drop() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::drop()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::drop() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::drop \n Drop the database. \n \n \n \ncopy \n \n function drop(array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  dropDatabase  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example drops the  test  database: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $result   =   $db -> drop (); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"dropped\"]=>\n    string(4) \"test\"\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Client::dropDatabase() \n dropDatabase  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/dropDatabase",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-dropDatabase/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-dropCollection/index.html",
            "title": "MongoDB\\Database::dropCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::dropCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::dropCollection() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::dropCollection \n Drop a collection within the current database. \n \n \n \ncopy \n \n function dropCollection(string $collectionName, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the collection to drop. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n encryptedFields \n array|object \n Optional. A document describing encrypted fields for queryable encryption. If omitted,\nthe  encryptedFieldsMap  option within the  autoEncryption  driver option\nwill be consulted. If  encryptedFieldsMap  was defined but does not specify\nthis collection, the library will make a final attempt to consult the\nserver-side value for  encryptedFields . See\n Field Encryption and Queryability \nin the MongoDB manual for more information. \n \n Note \n This option is not passed to the  drop \ncommand. The library uses it to determine related metadata collections that\nshould be dropped in addition to an encrypted collection. \n \n \n New in version 1.13. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  drop  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example drops the  users  collection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $result   =   $db -> dropCollection ( 'users' ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"ns\"]=>\n    string(10) \"test.users\"\n    [\"nIndexesWas\"]=>\n    int(1)\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::drop() \n drop  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Drop a collection within the current database.",
            "tags": "",
            "links": [
                "https://www.mongodb.com/docs/manual/core/queryable-encryption/fundamentals/encrypt-and-query/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-drop/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/drop"
            ]
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getUpsertedId/index.html",
            "title": "MongoDB\\UpdateResult::getUpsertedId() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\UpdateResult::getUpsertedId()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\UpdateResult::getUpsertedId() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\UpdateResult::getUpsertedId \n Return the ID (i.e.  _id  field value) of the upserted document. \n \n \n \ncopy \n \n function getUpsertedId(): mixed|null \n \n \n \n \n\n \n \n Return Values \n The ID (i.e.  _id  field value) of the upserted document. If no document was\nupserted,  null  will be returned. \n If the document had an ID prior to upserting (i.e. the server did not need to\ngenerate an ID), this will contain its  _id  field value. Any server-generated\nID will be a  MongoDB\\BSON\\ObjectId \ninstance. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getUpsertedIds() \n \n \n",
            "preview": "Return the ID (i.e. _id field value) of the upserted document.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getupsertedids.php",
                "http://php.net/class.mongodb-bson-objectid",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-createEncryptedCollection/index.html",
            "title": "MongoDB\\Database::createEncryptedCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::createEncryptedCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::createEncryptedCollection() \n \n New in version 1.16. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::createEncryptedCollection \n Explicitly creates an encrypted collection. \n \n \n \ncopy \n \n function createEncryptedCollection(string $collectionName, MongoDB\\Driver\\ClientEncryption $clientEncryption, string $kmsProvider, ?array $masterKey, array $options): array \n \n \n \n This method will automatically create data keys for any encrypted fields\nwhere  keyId  is  null . Data keys will be created using\n MongoDB\\Driver\\ClientEncryption::createDataKey() \nand the provided  $kmsProvider  and  $masterKey  parameters. A copy of\nthe modified  encryptedFields  option will be returned in addition to the\nresult from creating the collection. \n This method does not affect any auto encryption settings on existing\n MongoDB\\Client  objects. Users must configure auto encryption\nafter creating the encrypted collection with  createEncryptedCollection() . \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the encrypted collection to create. \n \n $clientEncryption \n MongoDB\\Driver\\ClientEncryption \n The ClientEncryption object used to create data keys. \n \n $kmsProvider \n string \n KMS provider (e.g. \u201clocal\u201d, \u201caws\u201d) that will be used to encrypt new data keys.\nThis corresponds to the  $kmsProvider  parameter for\n MongoDB\\Driver\\ClientEncryption::createDataKey() . \n \n $masterKey \n array|null \n KMS-specific key options that will be used to encrypt new data keys. This\ncorresponds to the  masterKey  option for\n MongoDB\\Driver\\ClientEncryption::createDataKey() . \n If  $kmsProvider  is \u201clocal\u201d, this should be  null . \n \n \n $options \n array \n An array specifying the desired options. \n The  encryptedFields  option is required. \n \n \n \n \n The  $options  parameter supports the same options as\n MongoDB\\Database::createCollection() . The  encryptedFields \noption is required. \n \n\n \n \n Return Values \n A tuple (i.e. two-element array) containing the result document from the\n create  command (an array or object\naccording to the  typeMap  option) and the modified  encryptedFields \noption. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\CreateEncryptedCollectionException  if any error\nis encountered creating data keys or the collection. The original exception and\nmodified  encryptedFields  option can be accessed via the  getPrevious() \nand  getEncryptedFields()  methods, respectively. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Example \n The following example creates an encrypted  users  collection in the  test \ndatabase. The  ssn  field within the  users  collection will be defined as\nan encrypted string field. \n \n \n \ncopy \n \n <?php \n\n // 96-byte master key used to encrypt/decrypt data keys \n define ( 'LOCAL_MASTERKEY' ,   '...' ); \n\n $client   =   new   MongoDB\\Client ; \n\n $clientEncryption   =   $client -> createClientEncryption ([ \n     'keyVaultNamespace'   =>   'keyvault.datakeys' , \n     'kmsProviders'   =>   [ \n         'local'   =>   [ 'key'   =>   new   MongoDB\\BSON\\Binary ( base64_decode ( LOCAL_MASTERKEY ),   0 )], \n      ], \n ); \n\n [ $result ,   $encryptedFields ]   =   $client -> test -> createEncryptedCollection ( \n     'users' , \n     $clientEncryption , \n     'local' , \n     null , \n     [ \n         'encryptedFields'   =>   [ \n             'fields'   =>   [ \n                 [ 'path'   =>   'ssn' ,   'bsonType'   =>   'string' ,   'keyId'   =>   null ], \n             ], \n         ], \n     ] \n ); \n \n \n \n If the encrypted collection was successfully created,  $result  will contain\nthe response document from the  create  command and\n $encryptedFields['fields'][0]['keyId']  will contain a\n MongoDB\\BSON\\Binary  object with subtype 4\n(i.e. UUID). \n The modified  encryptedFields  option can then be used to construct a new\n MongoDB\\Client  with auto encryption enabled. \n \n \n \ncopy \n \n <?php \n\n $encryptedClient   =   new   MongoDB\\Client ( \n     null ,   // Connection string \n     [],   // Additional connection string options \n     [ \n         'autoEncryption'   =>   [ \n             'keyVaultNamespace'   =>   'keyvault.datakeys' , \n             'kmsProviders'   =>   [ \n                 'local'   =>   [ 'key'   =>   new   MongoDB\\BSON\\Binary ( base64_decode ( LOCAL_MASTERKEY ),   0 )], \n              ], \n              'encryptedFieldsMap'   =>   [ \n                  'test.users'   =>   $encryptedFields , \n              ], \n         ], \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Database::createCollection() \n MongoDB\\Client::createClientEncryption() \n MongoDB\\Driver\\ClientEncryption::createDataKey() \n create  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Explicitly creates an encrypted collection.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-clientencryption",
                "http://php.net/mongodb-driver-clientencryption.createdatakey",
                "http://docs.mongodb.org/manual/reference/command/create",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-createClientEncryption/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "http://php.net/class.mongodb-bson-binary",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isText/index.html",
            "title": "MongoDB\\Model\\IndexInfo::isText() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::isText()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::isText() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::isText \n Return whether the index is a  text  index. \n \n \n \ncopy \n \n function isText(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a text index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'restaurants' ); \n\n $collection -> createIndex ([ 'name'   =>   'text' ]); \n\n foreach   ( $collection -> listIndexes ()   as   $index )   { \n     if   ( $index -> isText ())   { \n         printf ( \"%s has default language: %d \\n \" ,   $index -> getName (),   $index [ 'default_language' ]); \n     } \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n name_text has default language: english\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::listIndexes() \n Text Indexes  reference in the MongoDB\nmanual \n \n \n",
            "preview": "Return whether the index is a text index.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "http://docs.mongodb.org/manual/core/index-text",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-getWriteConcern/index.html",
            "title": "MongoDB\\Client::getWriteConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::getWriteConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::getWriteConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::getWriteConcern \n Returns the write concern for this client. \n \n \n \ncopy \n \n function getWriteConcern(): MongoDB\\Driver\\WriteConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\WriteConcern \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://127.0.0.1/' ,   [ \n     'journal'   =>   true , \n ]); \n\n var_dump ( $client -> getWriteConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\WriteConcern)#4 (1) {\n  [\"j\"]=>\n  bool(true)\n}\n \n \n \n \n \n See Also \n \n Write Concern  in the MongoDB manual \n MongoDB\\Driver\\WriteConcern::isDefault() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\Database::getWriteConcern() \n MongoDB\\GridFS\\Bucket::getWriteConcern() \n \n \n",
            "preview": "Returns the write concern for this client.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-writeconcern.isdefault",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getWriteConcern/",
                "http://php.net/class.mongodb-driver-writeconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getCollectionName/index.html",
            "title": "MongoDB\\Collection::getCollectionName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getCollectionName()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getCollectionName() \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getCollectionName \n Returns the name of this collection. \n \n \n \ncopy \n \n function getCollectionName(): string \n \n \n \n \n\n \n \n Return Values \n The name of this collection as a string. \n \n \n Example \n The following returns the collection name for the  zips  collection in the\n test  database. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n echo   $collection -> getCollectionName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n zips\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::getDatabaseName() \n MongoDB\\Collection::getNamespace() \n \n \n",
            "preview": "Returns the name of this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-selectDatabase/index.html",
            "title": "MongoDB\\Client::selectDatabase() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::selectDatabase()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::selectDatabase() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::selectDatabase \n Selects a database on the server. \n \n \n \ncopy \n \n function selectDatabase(string $databaseName, array $options = []): MongoDB\\Database \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $databaseName \n string \n The name of the database to select. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for database operations. Defaults to the\nclient\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for database operations. Defaults to\nthe client\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for database operations. Defaults\nto the client\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Database  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n The selected database inherits options such as read preference and type mapping\nfrom the  Client  object. Options may be overridden\nvia the  $options  parameter. \n \n \n Example \n The following example selects the  test  database: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $db   =   $client -> selectDatabase ( 'test' ); \n \n \n \n The following examples selects the  test  database with a custom read\npreference: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $db   =   $client -> selectDatabase ( \n     'test' , \n     [ \n         'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Client::__get() \n MongoDB\\Database::__construct() \n \n \n",
            "preview": "Selects a database on the server.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient__get/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "http://php.net/class.mongodb-driver-readconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getDatabaseName/index.html",
            "title": "MongoDB\\Collection::getDatabaseName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getDatabaseName()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getDatabaseName() \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getDatabaseName \n Returns the name of the database containing this collection. \n \n \n \ncopy \n \n function getDatabaseName(): string \n \n \n \n \n\n \n \n Return Values \n The name of the database containing this collection as a string. \n \n \n Example \n The following returns the database name for the  zips  collection in the\n test  database. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n echo   $collection -> getDatabaseName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n test\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::getCollectionName() \n MongoDB\\Collection::getNamespace() \n \n \n",
            "preview": "Returns the name of the database containing this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getNamespace/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-count/index.html",
            "title": "MongoDB\\Collection::count() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::count()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::count() \n \n Deprecated since version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::count \n Count the number of documents that match the filter criteria. \n \n \n \ncopy \n \n function count(array|object $filter = [], array $options = []): integer \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to count. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n Changed in version 1.2:  If a document is provided, it is passed to the command as-is. Previously,\nthe library would convert the key pattern to an index name. \n \n \n \n limit \n integer \n Optional. The maximum number of matching documents to return. \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n skip \n integer \n Optional. The number of matching documents to skip before returning results. \n \n \n \n \n\n \n \n Return Values \n The number of documents matching the filter criteria. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n This method is deprecated and cannot be executed within a transaction. It has\nalways been implemented using the  count \ncommand. The behavior of the  count  command differs depending on the options\npassed to it and may or may not provide an accurate count. When no query filter\nis provided, the  count  command provides an estimate using collection\nmetadata. Even when provided with a query filter the  count  command can\nreturn inaccurate results with a sharded cluster if orphaned documents exist or\nif a chunk migration is in progress. The\n MongoDB\\Collection::countDocuments()  method avoids these sharded\ncluster problems entirely. \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n See Also \n \n count  command reference in the MongoDB\nmanual \n MongoDB\\Collection::countDocuments() \n MongoDB\\Collection::estimatedDocumentCount() \n \n \n",
            "preview": "Count the number of documents that match the filter criteria.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/reference/command/count",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-estimatedDocumentCount/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-bson-objectid",
                "http://php.net/manual/en/types.comparisons.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-countDocuments/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-deleteOne/index.html",
            "title": "MongoDB\\Collection::deleteOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::deleteOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::deleteOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::deleteOne \n Deletes at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be deleted. \n \n \n \ncopy \n \n function deleteOne(array|object $filter, array $options = []): MongoDB\\DeleteResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to delete. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.4+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.7. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\DeleteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Example \n The following example deletes one document in the  users  collection that has\nhas  \"ny\"  as the value for the  state  field: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $deleteResult   =   $collection -> deleteOne ([ 'state'   =>   'ny' ]); \n\n printf ( \"Deleted %d document(s) \\n \" ,   $deleteResult -> getDeletedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Deleted 1 document(s)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::deleteMany() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n delete  command reference  in the MongoDB\nmanual \n \n \n",
            "preview": "Deletes at most one document that matches the filter criteria. If multiple documents match the filter criteria, only the first matching document will be deleted.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-writeresult",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "http://php.net/class.mongodb-bson-objectid",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://php.net/manual/en/types.comparisons.php",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/book.bson.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteMany/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/command/delete",
                "http://php.net/mongodb-driver-writeresult"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isTtl/index.html",
            "title": "MongoDB\\Model\\IndexInfo::isTtl() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::isTtl()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::isTtl() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::isTtl \n Return whether the index is a  TTL index . This\ncorrelates with the  expireAfterSeconds  option for\n MongoDB\\Collection::createIndex() . \n \n \n \ncopy \n \n function isTtl(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a TTL index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'expireAfterSeconds'   =>   100 , \n ]); \n\n var_dump ( $info -> isTtl ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n bool(true)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n TTL Indexes  in the MongoDB manual \n \n \n",
            "preview": "Return whether the index is a TTL index . This correlates with the expireAfterSeconds option for MongoDB\\Collection::createIndex() .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "http://docs.mongodb.org/manual/core/index-ttl"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-drop/index.html",
            "title": "MongoDB\\GridFS\\Bucket::drop() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::drop()",
                "Definition",
                "Errors/Exceptions",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::drop() \n \n On this page \n \n Definition \n Errors/Exceptions \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::drop \n Drops the files and chunks collections associated with this GridFS bucket. \n \n \n \ncopy \n \n function drop(): void \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $bucket   =   $database -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n $bucket -> drop (); \n \n \n \n \n",
            "preview": "Drops the files and chunks collections associated with this GridFS bucket.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-updateOne/index.html",
            "title": "MongoDB\\Collection::updateOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::updateOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::updateOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::updateOne \n Update at most one document that matches the filter criteria. If multiple\ndocuments match the filter criteria, only the  first \nmatching document will be updated. \n \n \n \ncopy \n \n function updateOne(array|object $filter, array|object $update, array $options = []): MongoDB\\UpdateResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to update. \n \n $update \n array|object \n Specifies the field and value combinations to update and any relevant update\noperators.  $update  uses MongoDB\u2019s  update   operators . Starting with MongoDB 4.2, an  aggregation\npipeline \ncan be passed as this parameter. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n upsert \n boolean \n Optional. If set to  true , creates a new document when no document matches the query\ncriteria. The default value is  false , which does not insert a new\ndocument when no match is found. \n \n arrayFilters \n array \n Optional. An array of filter documents that determines which array elements to modify\nfor an update operation on an array field. \n \n New in version 1.3. \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.2+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.6. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\UpdateResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Examples \n The following example updates one document with the  restaurant_id  of\n \"40356151\"  by setting the  name  field to  \"Brunos   on   Astoria\" : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $updateResult   =   $collection -> updateOne ( \n     [   'restaurant_id'   =>   '40356151'   ], \n     [   '$set'   =>   [   'name'   =>   'Brunos on Astoria'   ]] \n ); \n\n printf ( \"Matched %d document(s) \\n \" ,   $updateResult -> getMatchedCount ()); \n printf ( \"Modified %d document(s) \\n \" ,   $updateResult -> getModifiedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Matched 1 document(s)\nModified 1 document(s)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::replaceOne() \n MongoDB\\Collection::updateMany() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n update  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Update at most one document that matches the filter criteria. If multiple documents match the filter criteria, only the first matching document will be updated.",
            "tags": "",
            "links": [
                "https://mongodb.com/docs/master/reference/command/update/",
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateMany/",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/class.mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-replaceOne/",
                "http://docs.mongodb.org/manual/reference/command/update",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "https://www.mongodb.com/docs/manual/reference/glossary/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-findOneAndReplace/index.html",
            "title": "MongoDB\\Collection::findOneAndReplace() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::findOneAndReplace()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::findOneAndReplace() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::findOneAndReplace \n Finds a single document matching the query and replaces it. \n \n \n \ncopy \n \n function findOneAndReplace(array|object $filter, array|object $replacement, array $options = []): object|null \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to replace. \n \n $replacement \n array|object \n The replacement document. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.4+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.7. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n returnDocument \n integer \n Optional. Specifies whether to return the document before the replacement is applied, or\nafter.  returnDocument  supports the following values: \n \n MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE  ( default ) \n MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned result document. \n \n \n upsert \n boolean \n Optional. If set to  true , creates a new document when no document matches the query\ncriteria. The default value is  false , which does not insert a new\ndocument when no match is found. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array object for either the original or the replaced document, depending on\nthe specified value of the  returnDocument  option. By default, the original\ndocument is returned. If no document matched the query,  null  is returned.\nThe return type will depend on the  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n Consider the following document in the  restaurants  collection in the\n test  database: \n \n \n \ncopy \n \n { \n   \"_id\"   :   ObjectId ( \"576023c7b02fa9281da4139e\" ), \n   \"address\"   :   { \n     \"building\"   :   \"977\" , \n     \"coord\"   :   [ \n       - 74.06940569999999 , \n       40.6188443 \n     ], \n     \"street\"   :   \"Bay Street\" , \n     \"zipcode\"   :   \"10305\" \n   }, \n   \"borough\"   :   \"Staten Island\" , \n   \"cuisine\"   :   \"French\" , \n   \"grades\"   :   [ \n     { \n       \"date\"   :   ISODate ( \"2014-08-15T00:00:00Z\" ), \n       \"grade\"   :   \"A\" , \n       \"score\"   :   7 \n     }, \n     { \n       \"date\"   :   ISODate ( \"2014-02-13T00:00:00Z\" ), \n       \"grade\"   :   \"A\" , \n       \"score\"   :   5 \n     }, \n     { \n       \"date\"   :   ISODate ( \"2013-06-07T00:00:00Z\" ), \n       \"grade\"   :   \"A\" , \n       \"score\"   :   11 \n     } \n   ], \n   \"name\"   :   \"Zest\" , \n   \"restaurant_id\"   :   \"41220906\" \n } \n \n \n \n The following operation replaces the document with  restaurant_id  of\n \"41220906\"  with a new document: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> teset -> restaurants ; \n\n $replacedRestaurant   =   $collection -> findOneAndReplace ( \n     [   'restaurant_id'   =>   '41220906'   ], \n     [ \n         'Borough'   =>   'Staten Island' , \n         'cuisine'   =>   'Italian' , \n         'grades'   =>   [], \n         'name'   =>   'Staten Island Pastaria' , \n         'restaurant_id'   =>   '999999999' , \n     ], \n     [   'returnDocument'   =>   MongoDB\\Operation\\FindOneAndReplace :: RETURN_DOCUMENT_AFTER   ] \n ); \n\n var_dump ( $replacedRestaurant ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#18 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(6) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#11 (1) {\n      [\"oid\"]=>\n      string(24) \"594d5ef380a846852a4b5837\"\n    }\n    [\"Borough\"]=>\n    string(13) \"Staten Island\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"grades\"]=>\n    object(MongoDB\\Model\\BSONArray)#17 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(0) {\n      }\n    }\n    [\"name\"]=>\n    string(22) \"Staten Island Pastaria\"\n    [\"restaurant_id\"]=>\n    string(9) \"999999999\"\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::findOneAndDelete() \n MongoDB\\Collection::findOneAndUpdate() \n findAndModify  command reference\nin the MongoDB manual \n \n \n",
            "preview": "Finds a single document matching the query and replaces it.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndDelete/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/manual/en/book.bson.php",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/collation",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOneAndUpdate/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/findAndModify",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/log-messages"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-listCollectionNames/index.html",
            "title": "MongoDB\\Database::listCollectionNames() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::listCollectionNames()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::listCollectionNames() \n \n New in version 1.7. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::listCollectionNames \n Returns names for all collections in this database. \n \n \n \ncopy \n \n function listCollectionNames(array $options = []): Iterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n authorizedCollections \n boolean \n Optional. A flag that determines which collections are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listCollections command documentation . \n For servers < 4.0, this option is ignored. \n \n New in version 1.12. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n filter \n array|object \n Optional. A query expression to filter the list of collections. \n You can specify a query expression for collection fields (e.g.  name ,\n options ). \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n \n \n \n\n \n \n Return Values \n An  Iterator , which provides the name of each\ncollection in the database. \n \n \n Example \n The following example lists all of the collections in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n foreach   ( $database -> listCollectionNames ()   as   $collectionName )   { \n     var_dump ( $collectionName ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(11) \"restaurants\"\nstring(5) \"users\"\nstring(6) \"restos\"\n \n \n \n The following example lists all collections whose name starts with  \"rest\" \nin the  test  database: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $collections   =   $database -> listCollectionNames ([ \n     'filter'   =>   [ \n         'name'   =>   new   MongoDB\\BSON\\Regex ( '^rest.*' ), \n     ], \n ]); \n\n foreach   ( $collections   as   $collectionName )   { \n     var_dump ( $collectionName ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(11) \"restaurants\"\nstring(6) \"restos\"\n \n \n \n \n Note \n When enumerating collection names, a filter expression can only filter based\non a collection\u2019s name and type. No other fields are available. \n \n \n \n See Also \n \n MongoDB\\Database::listCollections() \n listCollections  command\nreference in the MongoDB manual \n Enumerating Collections \nspecification \n \n \n",
            "preview": "Returns names for all collections in this database.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-driver-session",
                "https://mongodb.com/docs/manual/reference/command/listCollections/",
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "http://php.net/class.iterator.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-aggregate/index.html",
            "title": "MongoDB\\Database::aggregate() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::aggregate()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::aggregate() \n \n New in version 1.5. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::aggregate \n Runs a specified  admin/diagnostic pipeline  which does\nnot require an underlying collection. For aggregations on collection data,\nsee  MongoDB\\Collection::aggregate() . \n \n \n \ncopy \n \n function aggregate(array $pipeline, array $options = []): Traversable \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $pipeline \n array \n Specifies an  aggregation pipeline \noperation. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , aggregation stages\ncan write data to the  _tmp  sub-directory in the  dbPath  directory. \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of documents to return in each response from the server. \n A batchSize of  0  is special in that and will only apply to the initial\n aggregate  command; subsequent  getMore  commands will use the server\u2019s\ndefault batch size. This may be useful for quickly returning a cursor or\nfailure from  aggregate  without doing significant server-side work. \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n This only applies when using the  $out  and\n $out  stages. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n explain \n boolean \n Optional. Specifies whether or not to return the information on the processing of the\npipeline. \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.9. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the database\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the database\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n This only applies when a  $out  or  $merge \nstage is specified. \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Cursor  or\n ArrayIterator  object. In both cases, the return value\nwill be  Traversable . \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n The following aggregation example lists all running commands using the\n $currentOp  aggregation pipeline stage, then filters this list to only show\nrunning command operations. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> admin ; \n\n $cursor   =   $database -> aggregate ( \n     [ \n         [ '$currentOp'   =>   []], \n         [ '$match'   =>   [ 'op'   =>   'command' ], \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::aggregate() \n aggregate  command reference in the\nMongoDB manual \n Aggregation Pipeline  documentation in\nthe MongoDB Manual \n \n \n",
            "preview": "Runs a specified admin/diagnostic pipeline which does not require an underlying collection. For aggregations on collection data, see MongoDB\\Collection::aggregate() .",
            "tags": "",
            "links": [
                "http://php.net/arrayiterator",
                "http://docs.mongodb.org/manual/reference/collation",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-aggregate/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://docs.mongodb.org/manual/reference/command/aggregate",
                "http://php.net/class.mongodb-driver-cursor",
                "https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/",
                "http://php.net/traversable",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/operator/aggregation-pipeline/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/class.mongodb-driver-readconcern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-mapReduce/index.html",
            "title": "MongoDB\\Collection::mapReduce() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::mapReduce()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::mapReduce() \n \n Deprecated since version 1.12. \n \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::mapReduce \n The  mapReduce  command allows you to\nrun map-reduce aggregation operations over a collection. \n \n \n \ncopy \n \n function mapReduce(MongoDB\\BSON\\JavascriptInterface $map, MongoDB\\BSON\\JavascriptInterface $reduce, string|array|object $out, array $options = []): MongoDB\\MapReduceResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $map \n MongoDB\\BSON\\Javascript \n A JavaScript function that associates or \u201cmaps\u201d a value with a key and emits\nthe key and value pair. \n \n Note \n Passing a Javascript instance with a scope is deprecated. Put all scope\nvariables in the  scope  option of the MapReduce operation. \n \n \n \n $reduce \n MongoDB\\BSON\\Javascript \n A JavaScript function that \u201creduces\u201d to a single object all the values\nassociated with a particular key. \n \n Note \n Passing a Javascript instance with a scope is deprecated. Put all scope\nvariables in the  scope  option of the MapReduce operation. \n \n \n \n $out \n string|array|object \n Specifies where to output the result of the map-reduce operation. You can\neither output to a collection or return the result inline. On a primary member\nof a replica set you can output either to a collection or inline, but on a\nsecondary, only inline output is possible. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n This only applies when results are output to a collection. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n finalize \n MongoDB\\BSON\\Javascript \n Optional. Follows the reduce method and modifies the output. \n \n Note \n Passing a Javascript instance with a scope is deprecated. Put all scope\nvariables in the  scope  option of the MapReduce operation. \n \n \n \n jsMode \n boolean \n Optional. Specifies whether to convert intermediate data into BSON format between the\nexecution of the map and reduce functions. \n \n limit \n integer \n Optional. Specifies a maximum number of documents for the input into the map function. \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n query \n array|object \n Optional. Specifies the selection criteria using query operators for determining the\ndocuments input to the map function. \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n This option will be ignored when results are output to a collection. \n \n \n scope \n array|object \n Optional. Specifies global variables that are accessible in the map, reduce, and finalize\nfunctions. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n verbose \n boolean \n Optional. Specifies whether to include the timing information in the result information. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\MapReduceResult  object, which allows for iteration of\nmap-reduce results irrespective of the output method (e.g. inline, collection)\nvia the  IteratorAggregate  interface. It also\nprovides access to command statistics. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n In MongoDB, the map-reduce operation can write results to a collection\nor return the results inline. If you write map-reduce output to a\ncollection, you can perform subsequent map-reduce operations on the\nsame input collection that merge replace, merge, or reduce new results\nwith previous results. See  Map-Reduce  and\n Perform Incremental Map-Reduce \nfor details and examples. \n When returning the results of a map-reduce operation  inline , the\nresult documents must be within the  BSON   Document   Size  limit,\nwhich is currently 16 megabytes. \n MongoDB supports map-reduce operations on  sharded collections . Map-reduce operations can also output\nthe results to a sharded collection. See\n Map-Reduce and Sharded Collections . \n \n \n Example \n This example will use city populations to calculate the overall population of\neach state. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $map   =   new   MongoDB\\BSON\\Javascript ( 'function() { emit(this.state, this.pop); }' ); \n $reduce   =   new   MongoDB\\BSON\\Javascript ( 'function(key, values) { return Array.sum(values) }' ); \n $out   =   [ 'inline'   =>   1 ]; \n\n $populations   =   $collection -> mapReduce ( $map ,   $reduce ,   $out ); \n\n foreach   ( $populations   as   $pop )   { \n    var_dump ( $pop ); \n }; \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AK\"\n   [\"value\"]=>\n   float(544698)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AL\"\n   [\"value\"]=>\n   float(4040587)\n}\nobject(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AR\"\n   [\"value\"]=>\n   float(2350725)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AZ\"\n   [\"value\"]=>\n   float(3665228)\n}\n \n \n \n \n \n See Also \n \n mapReduce  command reference in the MongoDB\nmanual \n Map-Reduce  documentation in the MongoDB manual \n \n \n",
            "preview": "The mapReduce command allows you to run map-reduce aggregation operations over a collection.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/class.mongodb-bson-javascript",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://www.mongodb.com/docs/manual/reference/limits/",
                "http://docs.mongodb.org/manual/sharding",
                "http://docs.mongodb.org/manual/tutorial/perform-incremental-map-reduce",
                "http://php.net/mongodb-bson-javascript",
                "http://docs.mongodb.org/manual/core/map-reduce",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/iteratoraggregate",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/reference/command/mapReduce",
                "http://docs.mongodb.org/manual/core/map-reduce-sharded-collections",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isSparse/index.html",
            "title": "MongoDB\\Model\\IndexInfo::isSparse() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::isSparse()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::isSparse() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::isSparse \n Return whether the index is a  sparse index .\nThis correlates with the  sparse  option for\n MongoDB\\Collection::createIndex() . \n \n \n \ncopy \n \n function isSparse(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a sparse index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'sparse'   =>   true , \n ]); \n\n var_dump ( $info -> isSparse ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n bool(true)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n Sparse Indexes  in the MongoDB manual \n \n \n",
            "preview": "Return whether the index is a sparse index . This correlates with the sparse option for MongoDB\\Collection::createIndex() .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/index-sparse",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "http://docs.mongodb.org/manual/reference/command/listIndexes"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-getInsertedIds/index.html",
            "title": "MongoDB\\InsertManyResult::getInsertedIds() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertManyResult::getInsertedIds()",
                "Definition",
                "Return Values"
            ],
            "text": "\n MongoDB\\InsertManyResult::getInsertedIds() \n \n On this page \n \n Definition \n Return Values \n \n \n \n Definition \n \n \n MongoDB\\InsertManyResult::getInsertedIds \n Return a map of IDs (i.e.  _id  field values) for the inserted documents. \n \n \n \ncopy \n \n function getInsertedIds(): array \n \n \n \n Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. \n \n\n \n \n Return Values \n A map of IDs (i.e.  _id  field values) for the inserted documents. \n The index of each ID in the map corresponds to each document\u2019s position in the\nbulk operation. If a document had an ID prior to inserting (i.e. the driver did\nnot generate an ID), the index will contain its  _id  field value. Any\ndriver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance. \n \n",
            "preview": "Return a map of IDs (i.e. _id field values) for the inserted documents.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-bson-objectid"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-updateSearchIndex/index.html",
            "title": "MongoDB\\Collection::updateSearchIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::updateSearchIndex()",
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::updateSearchIndex() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::updateSearchIndex \n Update an Atlas Search index for the collection. \n \n \n \ncopy \n \n function updateSearchIndex(string $name, array|object $definition, array $options = []): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $name \n string \n Name of the index to update. \n \n $definition \n array|object \n Document describing the updated search index definition. The specified\ndefinition replaces the prior definition in the search index. For details on\ndefinition syntax, see\n Search Index Definition Syntax . \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n \n \n \n \n Note \n This command can only be run on a deployment hosted on\n MongoDB Atlas  and requires an Atlas cluster tier of at\nleast M10. A\n Local Atlas Deployment \ncan also be used for development. \n \n \n Note \n Atlas Search indexes are managed asynchronously. After creating or\nupdating an index, you can periodically execute\n MongoDB\\Collection::listSearchIndexes()  and check the\n queryable   output field \nto determine whether it is ready to be used. \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::listSearchIndexes() \n updateSearchIndex  command\nreference in the MongoDB manual \n Atlas Search  documentation in the MongoDB Manual \n \n \n",
            "preview": "Update an Atlas Search index for the collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/",
                "https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/listSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/updateSearchIndex",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "https://www.mongodb.com/docs/atlas/atlas-search/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/command/createSearchIndexes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "http://docs.mongodb.org/manual/atlas"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-delete/index.html",
            "title": "MongoDB\\GridFS\\Bucket::delete() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::delete()",
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::delete() \n \n On this page \n \n Definition \n Errors/Exceptions \n Behavior \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::delete \n Delete a file and its chunks from the GridFS bucket. \n \n \n \ncopy \n \n function delete($id): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $id \n mixed \n The  _id  of the file. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n If the files collection document is not found, this method will still attempt to\ndelete orphaned chunks. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $id   =   $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n $bucket -> delete ( $id ); \n \n \n \n \n",
            "preview": "Delete a file and its chunks from the GridFS bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-getDatabaseName/index.html",
            "title": "MongoDB\\Database::getDatabaseName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getDatabaseName()",
                "Definition",
                "Return Values",
                "Example"
            ],
            "text": "\n MongoDB\\Database::getDatabaseName() \n \n On this page \n \n Definition \n Return Values \n Example \n \n \n \n Definition \n \n \n MongoDB\\Database::getDatabaseName \n Returns the name of this database. \n \n \n \ncopy \n \n function getDatabaseName(): string \n \n \n \n \n\n \n \n Return Values \n The name of this database as a string. \n \n \n Example \n The following example prints the name of a database object: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n echo   $db -> getDatabaseName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n test\n \n \n \n \n",
            "preview": "Returns the name of this database.",
            "tags": "",
            "links": []
        },
        {
            "slug": "reference/method/MongoDBDatabase-getReadPreference/index.html",
            "title": "MongoDB\\Database::getReadPreference() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::getReadPreference()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::getReadPreference() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::getReadPreference \n Returns the read preference for this database. \n \n \n \ncopy \n \n function getReadPreference(): MongoDB\\Driver\\ReadPreference \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadPreference \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ,   [ \n     'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n\n var_dump ( $database -> getReadPreference ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}\n \n \n \n \n \n See Also \n \n Read Preference  in the MongoDB manual \n MongoDB\\Client::getReadPreference() \n MongoDB\\Collection::getReadPreference() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n \n \n",
            "preview": "Returns the read preference for this database.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/",
                "http://php.net/class.mongodb-driver-readpreference"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-getReadConcern/index.html",
            "title": "MongoDB\\Client::getReadConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::getReadConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::getReadConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::getReadConcern \n Returns the read concern for this client. \n \n \n \ncopy \n \n function getReadConcern(): MongoDB\\Driver\\ReadConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadConcern  object. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://127.0.0.1/' ,   [ \n     'readConcernLevel'   =>   'majority' , \n ]); \n\n var_dump ( $client -> getReadConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadConcern)#5 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}\n \n \n \n \n \n See Also \n \n Read Concern  in the MongoDB manual \n MongoDB\\Driver\\ReadConcern::isDefault() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\Database::getReadConcern() \n MongoDB\\GridFS\\Bucket::getReadConcern() \n \n \n",
            "preview": "Returns the read concern for this client.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/mongodb-driver-readconcern.isdefault",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "http://docs.mongodb.org/manual/reference/read-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-watch/index.html",
            "title": "MongoDB\\Collection::watch() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::watch()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::watch() \n \n New in version 1.3. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::watch \n Executes a  change stream  operation on the\ncollection. The change stream can be watched for collection-level changes. \n \n \n \ncopy \n \n function watch(array $pipeline = [], array $options = []): MongoDB\\ChangeStream \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $pipeline \n array|object \n Optional. The pipeline of stages to append to an initial  $changeStream  stage. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. \n \n Note \n Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n New in version 1.13. \n \n \n \n fullDocument \n string \n Optional. Determines how the \u201cfullDocument\u201d response field will be populated for update\noperations. \n By default, change streams only return the delta of fields (via an\n\u201cupdateDescription\u201d field) for update operations and \u201cfullDocument\u201d is\nomitted. Insert and replace operations always include the \u201cfullDocument\u201d\nfield. Delete operations omit the field as the document no longer exists. \n Specify \u201cupdateLookup\u201d to return the current majority-committed version of the\nupdated document. \n MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the post-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the post-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n fullDocumentBeforeChange \n string \n Optional. Determines how the \u201cfullDocumentBeforeChange\u201d response field will be\npopulated. By default, the field is omitted. \n MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the pre-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the pre-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n maxAwaitTimeMS \n integer \n Optional. Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. \n \n \n resumeAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. \n Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n showExpandedEvents \n boolean \n Optional. If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: \n \n createIndexes \n dropIndexes \n modify \n create \n shardCollection \n reshardCollection  (server 6.1+) \n refineCollectionShardKey  (server 6.1+) \n \n This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n New in version 1.13. \n \n \n \n startAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\u201cinvalidate\u201d event. \n Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n startAtOperationTime \n MongoDB\\BSON\\TimestampInterface \n Optional. If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. \n Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. \n This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n New in version 1.4. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n This example reports events while iterating a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $collection   =   ( new   MongoDB\\Client ( $uri )) -> test -> inventory ; \n\n $changeStream   =   $collection -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     if   ( $event [ 'operationType' ]   ===   'invalidate' )   { \n         break ; \n     } \n\n     $ns   =   sprintf ( '%s.%s' ,   $event [ 'ns' ][ 'db' ],   $event [ 'ns' ][ 'coll' ]); \n     $id   =   json_encode ( $event [ 'documentKey' ][ '_id' ]); \n\n     switch   ( $event [ 'operationType' ])   { \n         case   'delete' : \n             printf ( \"Deleted document in %s with _id: %s \\n\\n \" ,   $ns ,   $id ); \n             break ; \n\n         case   'insert' : \n             printf ( \"Inserted new document in %s \\n \" ,   $ns ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'replace' : \n             printf ( \"Replaced new document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'update' : \n             printf ( \"Updated document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'updateDescription' ]),   \" \\n\\n \" ; \n             break ; \n     } \n } \n \n \n \n Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: \n \n \n \ncopy \n \n Inserted new document in test.user\n{\"_id\":{\"$oid\":\"5b329c4874083047cc05e60a\"},\"username\":\"bob\"}\n\nInserted new document in test.products\n{\"_id\":{\"$oid\":\"5b329c4d74083047cc05e60b\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.user with _id: {\"$oid\":\"5b329a4f74083047cc05e603\"}\n{\"updatedFields\":{\"username\":\"robert\"},\"removedFields\":[]}\n \n \n \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Database::watch() \n Aggregation Pipeline  documentation in\nthe MongoDB Manual \n Change Streams  documentation in the MongoDB manual \n Change Events  documentation in the\nMongoDB manual \n \n \n",
            "preview": "Executes a change stream operation on the collection. The change stream can be watched for collection-level changes.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.iterator",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/class.mongodb-bson-timestampinterface",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/change-events/",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/changeStreams",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/read-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getTiming/index.html",
            "title": "MongoDB\\MapReduceResult::getTiming() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\MapReduceResult::getTiming()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\MapReduceResult::getTiming() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\MapReduceResult::getTiming \n Returns timing statistics for the map-reduce operation. \n \n \n \ncopy \n \n function getTiming(): array \n \n \n \n Timing statistics will only be available if the  verbose  option was\nspecified for  MongoDB\\Collection::mapReduce() . \n \n\n \n \n Return Values \n An array of timing statistics for the map-reduce operation. If no timing\nstatistics are available, the array will be empty. \n \n \n Examples \n This example specifies the  verbose  option for\n MongoDB\\Collection::mapReduce()  and reports the timing statistics\nfor a map-reduce operation. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $map   =   new   MongoDB\\BSON\\Javascript ( 'function() { emit(this.state, this.pop); }' ); \n $reduce   =   new   MongoDB\\BSON\\Javascript ( 'function(key, values) { return Array.sum(values) }' ); \n $out   =   [ 'inline'   =>   1 ]; \n\n $result   =   $collection -> mapReduce ( $map ,   $reduce ,   $out ,   [ 'verbose'   =>   true ]); \n\n var_dump ( $result -> getTiming ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(5) {\n  [\"mapTime\"]=>\n  int(163)\n  [\"emitLoop\"]=>\n  int(233)\n  [\"reduceTime\"]=>\n  int(9)\n  [\"mode\"]=>\n  string(5) \"mixed\"\n  [\"total\"]=>\n  int(233)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::mapReduce() \n mapReduce  command reference in the\nMongoDB manual \n \n \n",
            "preview": "Returns timing statistics for the map-reduce operation.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/mapReduce",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getMatchedCount/index.html",
            "title": "MongoDB\\BulkWriteResult::getMatchedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getMatchedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getMatchedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getMatchedCount \n Return the total number of documents that were matched by all update and\nreplace operations in the bulk write. \n \n \n \ncopy \n \n function getMatchedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n Note \n If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the matched\ncount may be greater than the value returned by\n getModifiedCount() . \n \n \n\n \n \n Return Values \n The total number of documents that were matched by all update and replace\noperations in the bulk write. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\BulkWriteResult::getModifiedCount() \n MongoDB\\Driver\\WriteResult::getMatchedCount() \n \n \n",
            "preview": "Return the total number of documents that were matched by all update and replace operations in the bulk write.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getModifiedCount/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.getmatchedcount.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openUploadStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::openUploadStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::openUploadStream()",
                "Definition",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::openUploadStream() \n \n On this page \n \n Definition \n Return Values \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::openUploadStream \n Opens a writable stream for a new GridFS file. \n \n \n \ncopy \n \n function openUploadStream(string $filename, array $options = []): resource \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filename \n string \n The  filename  of the file. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n _id \n mixed \n Optional. Value to use as the file document identifier. Defaults to a new\n MongoDB\\BSON\\ObjectId  object. \n \n chunkSizeBytes \n integer \n Optional. The chunk size in bytes. Defaults to the bucket\u2019s  chunkSizeBytes  option. \n \n disableMD5 \n boolean \n Optional. Whether to disable automatic MD5 generation when storing files. \n Defaults to  false . \n \n \n metadata \n array|object \n Optional. User data for the  metadata  field of the file document. If not specified,\nthe  metadata  field will not be set on the file document. \n \n \n \n \n\n \n \n Return Values \n A writable stream resource. \n \n \n Behavior \n Chunk documents will be created as data is written to the writable stream. The\nmetadata document will be created when the writable stream is closed. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $uploadStream   =   $bucket -> openUploadStream ( 'filename' ); \n fwrite ( $uploadStream ,   'foobar' ); \n fclose ( $uploadStream ); \n\n $downloadStream   =   $bucket -> openDownloadStreamByName ( 'filename' ); \n var_dump ( stream_get_contents ( $downloadStream )); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::uploadFromStream() \n \n \n",
            "preview": "Opens a writable stream for a new GridFS file.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-uploadFromStream/",
                "http://php.net/class.mongodb-bson-objectid"
            ]
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getMatchedCount/index.html",
            "title": "MongoDB\\UpdateResult::getMatchedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\UpdateResult::getMatchedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\UpdateResult::getMatchedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\UpdateResult::getMatchedCount \n Return the number of documents that were matched. \n \n \n \ncopy \n \n function getMatchedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n Note \n If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the matched\ncount may be greater than the value returned by\n getModifiedCount() . \n \n \n\n \n \n Return Values \n The number of documents that were matched. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\UpdateResult::getModifiedCount() \n MongoDB\\Driver\\WriteResult::getMatchedCount() \n \n \n",
            "preview": "Return the number of documents that were matched.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb-driver-writeresult.getmatchedcount.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getModifiedCount/"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getUpsertedIds/index.html",
            "title": "MongoDB\\BulkWriteResult::getUpsertedIds() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getUpsertedIds()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getUpsertedIds() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getUpsertedIds \n Return a map of IDs (i.e.  _id  field values) for documents that were\nupserted by all update and replace operations in the bulk write. \n \n \n \ncopy \n \n function getUpsertedIds(): array \n \n \n \n \n\n \n \n Return Values \n A map of IDs (i.e.  _id  field values) for documents that were upserted by all\nupdate and replace operations in the bulk write. \n The index of each ID in the map corresponds to each document\u2019s position in the\nbulk operation. If a document had an ID prior to upserting (i.e. the server did\nnot generate an ID), the index will contain its  _id  field value. Any\nserver-generated ID will be a  MongoDB\\BSON\\ObjectId  instance. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getUpsertedIds() \n \n \n",
            "preview": "Return a map of IDs (i.e. _id field values) for documents that were upserted by all update and replace operations in the bulk write.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getupsertedids.php",
                "http://php.net/class.mongodb-bson-objectid",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getIdIndex/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getIdIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getIdIndex()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getIdIndex() \n \n New in version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getIdIndex \n Returns information about the  _id  field index. \n \n \n \ncopy \n \n function getIdIndex(): array \n \n \n \n \n\n \n \n Return Values \n An array containing information on the  _id  index. This corresponds to the\n idIndex  field returned in the  listCollections  command reply. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n   'type'   =>   'view' , \n   'name'   =>   'foo' , \n   'idIndex'   =>   [ \n      'v'   =>   2 , \n      'key'   =>   [ '_id'   =>   1 ], \n      'name'   =>   '_id' , \n      'ns'   =>   'test.foo' , \n   ], \n ]); \n\n var_dump ( $info -> getIdIndex ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(4) {\n  [\"v\"]=>\n  int(2)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(3) \"_id\"\n  [\"ns\"]=>\n  string(8) \"test.foo\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::createCollection() \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Returns information about the _id field index.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getWriteConcern/index.html",
            "title": "MongoDB\\GridFSBucket::getWriteConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFSBucket::getWriteConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFSBucket::getWriteConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getWriteConcern \n Returns the write concern for this GridFS bucket. \n \n \n \ncopy \n \n function getWriteConcern(): MongoDB\\Driver\\WriteConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\WriteConcern \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ); \n $bucket   =   $database -> selectGridFSBucket ([ \n    'writeConcern'   =>   new   MongoDB\\Driver\\WriteConcern ( 1 ,   0 ,   true ), \n ]); \n\n var_dump ( $bucket -> getWriteConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\WriteConcern)#3 (2) {\n  [\"w\"]=>\n  int(1)\n  [\"j\"]=>\n  bool(true)\n}\n \n \n \n \n \n See Also \n \n Write Concern  in the MongoDB manual \n MongoDB\\Driver\\WriteConcern::isDefault() \n MongoDB\\Client::getWriteConcern() \n MongoDB\\Collection::getWriteConcern() \n MongoDB\\Database::getWriteConcern() \n \n \n",
            "preview": "Returns the write concern for this GridFS bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getWriteConcern/",
                "http://php.net/mongodb-driver-writeconcern.isdefault",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getWriteConcern/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getWriteConcern/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-deleteMany/index.html",
            "title": "MongoDB\\Collection::deleteMany() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::deleteMany()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::deleteMany() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::deleteMany \n Deletes all documents that match the filter criteria. \n \n \n \ncopy \n \n function deleteMany(array|object $filter, array $options = []): MongoDB\\DeleteResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n The filter criteria that specifies the documents to delete. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n This option is available in MongoDB 4.4+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.7. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\DeleteResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Example \n The following example deletes all of the documents in the  users  collection\nthat have  \"ny\"  as the value for the  state  field: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n $collection -> drop (); \n\n $collection -> insertOne ([ 'name'   =>   'Bob' ,   'state'   =>   'ny' ]); \n $collection -> insertOne ([ 'name'   =>   'Alice' ,   'state'   =>   'ny' ]); \n $deleteResult   =   $collection -> deleteMany ([ 'state'   =>   'ny' ]); \n\n printf ( \"Deleted %d document(s) \\n \" ,   $deleteResult -> getDeletedCount ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Deleted 2 document(s)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::deleteOne() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n delete  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Deletes all documents that match the filter criteria.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-writeresult",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "http://php.net/class.mongodb-bson-objectid",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://php.net/manual/en/types.comparisons.php",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/book.bson.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-deleteOne/",
                "http://docs.mongodb.org/manual/reference/command/delete",
                "http://php.net/mongodb-driver-writeresult"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient__construct/index.html",
            "title": "MongoDB\\Client::__construct() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::__construct()",
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Connecting to a Standalone server",
                "Connecting to a Replica Set",
                "Connecting with SSL and Authentication",
                "Specifying a Custom Type Map",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::__construct() \n \n On this page \n \n Definition \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::__construct \n Constructs a new  Client  instance. \n \n \n \ncopy \n \n function __construct(?string $uri = null, array $uriOptions = [], array $driverOptions = []) \n \n \n \n This constructor has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $uri \n string \n Optional. The URI of the standalone, replica set, or sharded cluster to which to\nconnect. Refer to  Connection String URI Format  in the MongoDB manual for more information. \n Defaults to  \"mongodb://127.0.0.1:27017\"  if unspecified. \n Any special characters in the URI components need to be encoded according to\n RFC 3986 . This is particularly\nrelevant to the username and password, which can often include special\ncharacters such as  @ ,  : , or  % . When connecting via a Unix domain\nsocket, the socket path may contain special characters such as slashes and\nmust be encoded. The  rawurlencode()  function may be used\nto encode constituent parts of the URI. \n \n \n $uriOptions \n array \n Optional. Specifies additional URI options, such as authentication credentials or query\nstring parameters. The options specified in  $uriOptions  take precedence\nover any analogous options present in the  $uri  string and do not need to\nbe encoded according to  RFC 3986 . \n Refer to the  MongoDB\\Driver\\Manager::__construct()  extension reference and  MongoDB\nconnection string  documentation for accepted\noptions. \n \n \n $driverOptions \n array \n Optional. Specify driver-specific options, such as SSL options. In addition to any\noptions supported by the  extension , the\nMongoDB PHP Library allows you to specify a default  type map \nto apply to the cursors it creates. \n \n \n \n The  $driverOptions  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n autoEncryption \n array \n Optional. Options to configure client-side field-level encryption in the driver. The\nencryption options are documented in the  extension documentation .\nFor the  keyVaultClient  option, you may pass a  MongoDB\\Client \ninstance, which will be unwrapped to provide a  MongoDB\\Driver\\Manager \nto the extension. \n \n New in version 1.6. \n \n \n \n driver \n array \n Optional. Additional driver metadata to be passed on to the server handshake. This is an\narray containing  name ,  version , and  platform  fields: \n \n \n \ncopy \n \n [ \n     'name' => 'my-driver', \n     'version' => '1.2.3-dev', \n     'platform' => 'some-platform', \n ] \n \n \n \n \n Note \n This feature is primarily designed for custom drivers and ODMs, which may\nwant to identify themselves to the server for diagnostic purposes.\nApplications should use the  appName  URI option instead of driver\nmetadata. \n \n \n New in version 1.7. \n \n \n \n serverApi \n MongoDB\\Driver\\ServerApi \n Optional. Used to declare an API version on the client. See the\n Stable API tutorial  for usage. \n \n New in version 1.9. \n \n \n \n typeMap \n array \n Optional. Default  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. The MongoDB PHP Library uses the following type map by default: \n \n \n \ncopy \n \n [ \n     'array' => 'MongoDB\\Model\\BSONArray', \n     'document' => 'MongoDB\\Model\\BSONDocument', \n     'root' => 'MongoDB\\Model\\BSONDocument', \n ] \n \n \n \n \n \n allow_invalid_hostname \n boolean \n Optional. Disables hostname validation if  true . Defaults to  false . \n Allowing invalid hostnames may expose the driver to a  man-in-the-middle\nattack . \n \n Deprecated since version 1.6:  This option has been deprecated. Use the  tlsAllowInvalidHostnames  URI\noption instead. \n \n \n \n ca_dir \n string \n Optional. Path to a correctly hashed certificate directory. The system certificate store\nwill be used by default. \n Falls back to the deprecated  capath  SSL context option if not specified. \n \n \n ca_file \n string \n Optional. Path to a certificate authority file. The system certificate store will be\nused by default. \n Falls back to the deprecated  cafile  SSL context option if not specified. \n \n Deprecated since version 1.6:  This option has been deprecated. Use the  tlsCAFile  URI option instead. \n \n \n \n crl_file \n string \n Optional. Path to a certificate revocation list file. \n \n pem_file \n string \n Optional. Path to a PEM encoded certificate to use for client authentication. \n Falls back to the deprecated  local_cert  SSL context option if not\nspecified. \n \n Deprecated since version 1.6:  This option has been deprecated. Use the  tlsCertificateKeyFile  URI\noption instead. \n \n \n \n pem_pwd \n string \n Optional. Passphrase for the PEM encoded certificate (if applicable). \n Falls back to the deprecated  passphrase  SSL context option if not\nspecified. \n \n Deprecated since version 1.6:  This option has been deprecated. Use the  tlsCertificateKeyFilePassword \nURI option instead. \n \n \n \n weak_cert_validation \n boolean \n Optional. Disables certificate validation  true . Defaults to  false . \n Falls back to the deprecated  allow_self_signed  SSL context option if not\nspecified. \n \n Deprecated since version 1.6:  This option has been deprecated. Use the  tlsAllowInvalidCertificates \nURI option instead. \n \n \n \n context \n resource \n Optional.  SSL context options  to be used as fallbacks\nfor other driver options (as specified). Note that the driver does not consult\nthe default stream context. \n This option is supported for backwards compatibility, but should be considered\ndeprecated. \n \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n A  MongoDB\\Driver\\Manager  is constructed\ninternally. Per the  Server Discovery and Monitoring \nspecification,  MongoDB\\Driver\\Manager::__construct()  performs no I/O. Connections will be\ninitialized on demand, when the first operation is executed. \n \n \n Examples \n \n Connecting to a Standalone server \n If you do not specify a  $uri  value, the driver connects to a standalone\n mongod  on  127.0.0.1  via port  27017 . To connect to a different\nserver, pass the corresponding connection string as the first parameter when\ncreating the  Client  instance: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://mongodb-deployment:27017' ); \n \n \n \n \n \n Connecting to a Replica Set \n The following example demonstrates how to connect to a replica set with a custom\nread preference: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' , \n     [ \n         'readPreference'   =>   'secondaryPreferred' , \n     ] \n ); \n \n \n \n \n \n Connecting with SSL and Authentication \n The following example demonstrates how to connect to a MongoDB replica set with\nSSL and authentication, as is used for  MongoDB Atlas : \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://myUsername:myPassword@rs1.example.com,rs2.example.com/?ssl=true&replicaSet=myReplicaSet&authSource=admin' \n ); \n \n \n \n Alternatively, the authentication credentials and URI parameters may be\nspecified in the constructor\u2019s  $uriOptions  parameter: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     'mongodb://rs1.example.com,rs2.example.com/' \n     [ \n         'username'   =>   'myUsername' , \n         'password'   =>   'myPassword' , \n         'ssl'   =>   true , \n         'replicaSet'   =>   'myReplicaSet' , \n         'authSource'   =>   'admin' , \n     ], \n ); \n \n \n \n The driver supports additional  SSL options ,\nwhich may be specified in the constructor\u2019s  $driverOptions  parameter. Those\noptions are covered in the  MongoDB\\Driver\\Manager::__construct()  documentation. \n \n \n Specifying a Custom Type Map \n By default, the MongoDB PHP Library deserializes BSON documents and arrays\nas  MongoDB\\Model\\BSONDocument  and\n MongoDB\\Model\\BSONArray  objects, respectively. The following\nexample demonstrates how to have the library unserialize everything as a PHP\narray, as was done in the legacy  mongo  extension. \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( \n     null , \n     [], \n     [ \n         'typeMap'   =>   [ \n             'root'   =>   'array' , \n             'document'   =>   'array' , \n             'array'   =>   'array' , \n         ], \n     ] \n ); \n \n \n \n \n \n \n See Also \n \n MongoDB\\Driver\\Manager::__construct() \n Connection String URI Format  in the\nMongoDB manual \n Server Discovery and Monitoring \nspecification \n \n \n",
            "preview": "Constructs a new Client instance.",
            "tags": "",
            "links": [
                "https://www.rfc-editor.org/info/rfc3986",
                "http://php.net/class.mongodb-driver-manager",
                "http://php.net/class.mongodb-driver-serverapi",
                "http://php.net/manual/en/mongodb-driver-manager.construct.php",
                "http://php.net/mongodb-driver-manager",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst",
                "http://php.net/rawurlencode",
                "http://php.net/mongodb-driver-manager.construct",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://cloud.mongodb.com/?jmp=docs",
                "https://en.wikipedia.org/wiki/Man-in-the-middle_attack",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-invalidargumentexception",
                "http://php.net/manual/en/context.ssl.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "http://docs.mongodb.org/manual/tutorial/stable-api"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-rename/index.html",
            "title": "MongoDB\\GridFS\\Bucket::rename() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::rename()",
                "Definition",
                "Errors/Exceptions",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::rename() \n \n On this page \n \n Definition \n Errors/Exceptions \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::rename \n Selects a GridFS file by its  _id  and alters its  filename . \n \n \n \ncopy \n \n function rename($id, string $newFilename): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $id \n mixed \n The  _id  of the file. \n \n $newFilename \n string \n The new  filename  value. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $id   =   $bucket -> uploadFromStream ( 'a' ,   $stream ); \n\n $bucket -> rename ( $id ,   'b' ); \n\n var_dump ( stream_get_contents ( $bucket -> openDownloadStreamByName ( 'b' ))); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n",
            "preview": "Selects a GridFS file by its _id and alters its filename .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getTypeMap/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getTypeMap() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getTypeMap()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getTypeMap() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getTypeMap \n Returns the type map for this GridFS bucket. \n \n \n \ncopy \n \n function getTypeMap(): array \n \n \n \n \n\n \n \n Return Values \n A  type map  array. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ); \n $bucket   =   $database -> selectGridFSBucket ([ \n     'typeMap'   =>   [ \n         'root'   =>   'array' , \n         'document'   =>   'array' , \n         'array'   =>   'array' , \n     ], \n ]); \n\n var_dump ( $bucket -> getTypeMap ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}\n \n \n \n \n \n See Also \n \n BSON \n MongoDB\\Client::getTypeMap() \n MongoDB\\Collection::getTypeMap() \n MongoDB\\Database::getTypeMap() \n \n \n",
            "preview": "Returns the type map for this GridFS bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getTypeMap/"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-isAcknowledged/index.html",
            "title": "MongoDB\\BulkWriteResult::isAcknowledged() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::isAcknowledged()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::isAcknowledged() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::isAcknowledged \n Return whether the write was acknowledged. \n \n \n \ncopy \n \n function isAcknowledged(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the write was acknowledged. \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::isAcknowledged() \n Write Concern  in the MongoDB manual \n \n \n",
            "preview": "Return whether the write was acknowledged.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.isacknowledged.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-selectCollection/index.html",
            "title": "MongoDB\\Client::selectCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::selectCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::selectCollection() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::selectCollection \n Selects a collection on the server. \n \n \n \ncopy \n \n function selectCollection(string $databaseName, string $collectionName, array $options = []): MongoDB\\Collection \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $databaseName \n string \n The name of the database containing the collection to select. \n \n $collectionName \n string \n The name of the collection to select. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for collection operations. Defaults to the\nclient\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for collection operations. Defaults to\nthe client\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for collection operations. Defaults\nto the client\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n The selected collection inherits options such as read preference and type\nmapping from the  Client  object. Options may be\noverridden via the  $options  parameter. \n \n \n Example \n The following example selects the  users  collection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $collection   =   $client -> selectCollection ( 'test' ,   'users' ); \n \n \n \n The following example selects the  users  collection in the  test  database\nwith a custom read preference: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $collection   =   $client -> selectCollection ( \n     'test' , \n     'users' , \n     [ \n         'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::__construct() \n MongoDB\\Database::selectCollection() \n \n \n",
            "preview": "Selects a collection on the server.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openDownloadStreamByName/index.html",
            "title": "MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::openDownloadStreamByName()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName \n Selects a GridFS file by its  filename  and opens it as a readable stream. \n \n \n \ncopy \n \n function openDownloadStreamByName(string $filename, array $options = []): resource \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filename \n string \n The  filename  of the file. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n revision \n integer \n Optional. The revision of the file to retrieve. Files with the name  filename  will be\ndifferentiated by their  uploadDate  field. \n Revision numbers are defined as follows: \n \n 0 = the original stored file \n 1 = the first revision \n 2 = the second revision \n etc\u2026 \n -2 = the second most recent revision \n -1 = the most recent revision \n \n \n Defaults to -1 (i.e. the most recent revision). \n \n \n \n \n \n\n \n \n Return Values \n A readable stream resource. \n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n var_dump ( stream_get_contents ( $bucket -> openDownloadStreamByName ( 'filename' ))); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n \n \n",
            "preview": "Selects a GridFS file by its filename and opens it as a readable stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-getResumeToken/index.html",
            "title": "MongoDB\\ChangeStream::getResumeToken() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::getResumeToken()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::getResumeToken() \n \n New in version 1.5. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::getResumeToken \n Returns the cached resume token that will be used to resume the change\nstream. \n \n \n \ncopy \n \n function getResumeToken(): array|object|null \n \n \n \n \n\n \n \n Return Values \n An array or object, or  null  if there is no cached resume token. The return\ntype will depend on the  typeMap  option for the  watch()  method used to\ncreate the change stream. \n \n \n Examples \n This example captures the resume token for a change stream after encountering\nan  invalidate  event and uses it to construct a second change stream using\nthe  startAfter  option. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $collection   =   ( new   MongoDB\\Client ( $uri )) -> test -> inventory ; \n\n $changeStream   =   $collection -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     if   ( $event [ 'operationType' ]   ===   'invalidate' )   { \n         $startAfter   =   $changeStream -> getResumeToken (); \n         break ; \n     } \n\n     printf ( \"%d: %s \\n \" ,   $changeStream -> key (),   $event [ 'operationType' ]); \n } \n\n $changeStream   =   $collection -> watch ([],   [ 'startAfter'   =>   $startAfter ]); \n \n \n \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Resume a Change Stream \ndocumentation in the MongoDB manual \n \n \n",
            "preview": "Returns the cached resume token that will be used to resume the change stream.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-valid/index.html",
            "title": "MongoDB\\ChangeStream::valid() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::valid()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::valid() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::valid \n Returns whether there is a current event in the change stream. \n \n \n \ncopy \n \n function valid(): boolean \n \n \n \n When manually iterating the change stream using\n Iterator  methods, this method should\nbe used to determine if  MongoDB\\ChangeStream::current()  and\n MongoDB\\ChangeStream::key()  can be called. \n \n\n \n \n Return Values \n A boolean indicating whether there is a current event in the change stream. \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Iterator::valid() \n Tailable Cursor Iteration \n Change Streams  documentation in the MongoDB manual \n \n \n",
            "preview": "Returns whether there is a current event in the change stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "http://php.net/iterator.valid",
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-key/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-current/",
                "http://php.net//manual/en/class.iterator.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getIterator/index.html",
            "title": "MongoDB\\MapReduceResult::getIterator() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\MapReduceResult::getIterator()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\MapReduceResult::getIterator() \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\MapReduceResult::getIterator \n Returns a  Traversable , which may be used to iterate\nthrough the results of the map-reduce operation. \n \n \n \ncopy \n \n function getIterator(): Traversable \n \n \n \n \n\n \n \n Return Values \n A  Traversable , which may be used to iterate through the\nresults of the map-reduce operation. \n \n \n Example \n This example iterates through the results of a map-reduce operation. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $map   =   new   MongoDB\\BSON\\Javascript ( 'function() { emit(this.state, this.pop); }' ); \n $reduce   =   new   MongoDB\\BSON\\Javascript ( 'function(key, values) { return Array.sum(values) }' ); \n $out   =   [ 'inline'   =>   1 ]; \n\n $result   =   $collection -> mapReduce ( $map ,   $reduce ,   $out ); \n\n foreach   ( $result   as   $population )   { \n    var_dump ( $population ); \n }; \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AK\"\n   [\"value\"]=>\n   float(544698)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AL\"\n   [\"value\"]=>\n   float(4040587)\n}\nobject(stdClass)#2293 (2) {\n   [\"_id\"]=>\n   string(2) \"AR\"\n   [\"value\"]=>\n   float(2350725)\n}\nobject(stdClass)#2300 (2) {\n   [\"_id\"]=>\n   string(2) \"AZ\"\n   [\"value\"]=>\n   float(3665228)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::mapReduce() \n IteratorAggregate::getIterator() \n \n \n",
            "preview": "Returns a Traversable , which may be used to iterate through the results of the map-reduce operation.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/iteratoraggregate.getiterator.php",
                "http://php.net/traversable",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-findOne/index.html",
            "title": "MongoDB\\GridFS\\Bucket::findOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::findOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::findOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::findOne \n Finds a single document from the GridFS bucket\u2019s files collection matching\nthe query. \n \n \n \ncopy \n \n function findOne(array|object $filter = [], array $options = []): array|object|null \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to query. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n skip \n integer \n Optional. Number of documents to skip. Defaults to  0 . \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , queries can write\ndata to the  _tmp  sub-directory in the  dbPath  directory. \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the bucket\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the bucket\u2019s type map. \n This will be used for the returned result document. \n \n \n modifiers \n array|object \n Optional.  Meta operators  that modify the\noutput or behavior of a query. Use of these operators is deprecated in favor\nof named options. \n \n \n \n \n\n \n \n Return Values \n An array or object for the  first document  that matched\nthe query, or  null  if no document matched the query. The return type will\ndepend on the  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $bucket -> uploadFromStream ( 'b' ,   $stream ); \n\n $fileDocument   =   $bucket -> findOne ( \n     [ 'length'   =>   [ '$lte'   =>   6 ]], \n     [ \n         'projection'   =>   [ \n             'filename'   =>   1 , \n             'length'   =>   1 , \n             '_id'   =>   0 , \n         ], \n         'sort'   =>   [ 'length'   =>   - 1 ], \n     ] \n ); \n\n var_dump ( $fileDocument ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#3004 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(2) {\n    [\"filename\"]=>\n    string(1) \"b\"\n    [\"length\"]=>\n    int(6)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::findOne() \n MongoDB\\GridFS\\Bucket::find() \n \n \n",
            "preview": "Finds a single document from the GridFS bucket\u2019s files collection matching the query.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/class.mongodb-bson-objectid",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "http://php.net/manual/en/types.comparisons.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/manual/en/book.bson.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "http://docs.mongodb.org/manual/reference/operator/query-modifier",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-find/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-getReadPreference/index.html",
            "title": "MongoDB\\Client::getReadPreference() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::getReadPreference()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::getReadPreference() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::getReadPreference \n Returns the read preference for this client. \n \n \n \ncopy \n \n function getReadPreference(): MongoDB\\Driver\\ReadPreference \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadPreference \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://127.0.0.1/' ,   [ \n     'readPreference'   =>   'primaryPreferred' , \n ]); \n\n var_dump ( $client -> getReadPreference ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}\n \n \n \n \n \n See Also \n \n Read Preference  in the MongoDB manual \n MongoDB\\Collection::getReadPreference() \n MongoDB\\Database::getReadPreference() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n \n \n",
            "preview": "Returns the read preference for this client.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadPreference/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getName/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getName()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getName() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getName \n Return the collection name. \n \n \n \ncopy \n \n function getName(): string \n \n \n \n \n\n \n \n Return Values \n The collection name. This corresponds to the  name  field returned in the\n listCollections  command reply. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ 'name'   =>   'foo' ]); \n\n echo   $info -> getName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n foo\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::getCollectionName() \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "The collection name. This corresponds to the name field returned in the listCollections command reply.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-createSearchIndexes/index.html",
            "title": "MongoDB\\Collection::createSearchIndexes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::createSearchIndexes()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "Create Indexes with Static and Dynamic Mappings",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::createSearchIndexes() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::createSearchIndexes \n Create one or more Atlas Search indexes for the collection. \n \n \n \ncopy \n \n function createSearchIndexes(array $indexes, array $options = []): string \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $indexes \n array \n Array of documents describing the indexes to create. \n A required  definition  document field describes the index to create. For\ndetails on definition syntax, see\n Search Index Definition Syntax . \n An optional  name  string field specifies the name of the search index to\ncreate. You cannot create multiple indexes with the same name on a single\ncollection. If you do not specify a name, the index is named \u201cdefault\u201d. \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n \n \n \n \n Note \n This command can only be run on a deployment hosted on\n MongoDB Atlas  and requires an Atlas cluster tier of at\nleast M10. A\n Local Atlas Deployment \ncan also be used for development. \n \n \n Note \n Atlas Search indexes are managed asynchronously. After creating or\nupdating an index, you can periodically execute\n MongoDB\\Collection::listSearchIndexes()  and check the\n queryable   output field \nto determine whether it is ready to be used. \n \n \n\n \n \n Return Values \n The names of the created Atlas Search indexes as an array of strings. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n Create Indexes with Static and Dynamic Mappings \n The following example creates an Atlas Search index using\n dynamic mappings \nto index all document fields containing\n supported data types . \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'articles' ); \n\n $indexName   =   $collection -> createSearchIndex ( \n    [ 'mappings'   =>   [ 'dynamic'   =>   true ]], \n    [ 'name'   =>   'test-search-index' ] \n ); \n\n var_dump ( $indexName ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(17) \"test-search-index\"\n \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::dropSearchIndex() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::updateSearchIndex() \n createSearchIndexes  command\nreference in the MongoDB manual \n Atlas Search  documentation in the MongoDB Manual \n \n \n",
            "preview": "Create one or more Atlas Search indexes for the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/createSearchIndexes",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/command/createSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropSearchIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/",
                "https://www.mongodb.com/docs/atlas/atlas-search/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/atlas",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/listSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/database-profiler"
            ]
        },
        {
            "slug": "reference/method/MongoDBDeleteResult-getDeletedCount/index.html",
            "title": "MongoDB\\DeleteResult::getDeletedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\DeleteResult::getDeletedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\DeleteResult::getDeletedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\DeleteResult::getDeletedCount \n Return the number of documents that were deleted. \n \n \n \ncopy \n \n function getDeletedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The number of documents that were deleted. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getDeletedCount() \n \n \n",
            "preview": "Return the number of documents that were deleted.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.getdeletedcount.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-getManager/index.html",
            "title": "MongoDB\\Client::getManager() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::getManager()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::getManager() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::getManager \n Accessor for the\n MongoDB\\Driver\\Manager  used by this\n Client . \n \n \n \ncopy \n \n function getManager(): MongoDB\\Manager \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Manager  object. \n \n \n See Also \n \n MongoDB\\Collection::getManager() \n MongoDB\\Database::getManager() \n \n \n",
            "preview": "Accessor for the MongoDB\\Driver\\Manager used by this Client .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getManager/",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getManager/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-getTypeMap/index.html",
            "title": "MongoDB\\Client::getTypeMap() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::getTypeMap()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::getTypeMap() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::getTypeMap \n Returns the type map for this client. \n \n \n \ncopy \n \n function getTypeMap(): array \n \n \n \n \n\n \n \n Return Values \n A  type map  array. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ( 'mongodb://127.0.0.1/' ,   [],   [ \n     'typeMap'   =>   [ \n         'root'   =>   'array' , \n         'document'   =>   'array' , \n         'array'   =>   'array' , \n     ], \n ]); \n\n var_dump ( $client -> getTypeMap ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(3) {\n  [\"root\"]=>\n  string(5) \"array\"\n  [\"document\"]=>\n  string(5) \"array\"\n  [\"array\"]=>\n  string(5) \"array\"\n}\n \n \n \n \n \n See Also \n \n BSON \n MongoDB\\Collection::getTypeMap() \n MongoDB\\Database::getTypeMap() \n MongoDB\\GridFS\\Bucket::getTypeMap() \n \n \n",
            "preview": "Returns the type map for this client.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/reference/bson/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getTypeMap/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/modeling-bson-data/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getTypeMap/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket__construct/index.html",
            "title": "MongoDB\\GridFS\\Bucket::__construct() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::__construct()",
                "Definition",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::__construct() \n \n On this page \n \n Definition \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::__construct \n Constructs a new  Bucket  instance. \n \n \n \ncopy \n \n function __construct(MongoDB\\Driver\\Manager $manager, string $databaseName, array $options = []) \n \n \n \n This constructor has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $manager \n MongoDB\\Driver\\Manager \n The  Manager  instance from the driver. The\nmanager maintains connections between the driver and your MongoDB instances. \n \n $databaseName \n string \n The name of the database. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bucketName \n string \n Optional. The bucket name, which will be used as a prefix for the files and chunks\ncollections. Defaults to  \"fs\" . \n \n chunkSizeBytes \n integer \n Optional. The chunk size in bytes. Defaults to  261120  (i.e. 255 KiB). \n \n disableMD5 \n boolean \n Optional. Whether to disable automatic MD5 generation when storing files. \n Defaults to  false . \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for bucket operations. Defaults to the\ndatabase\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for bucket operations. Defaults to\nthe database\u2019s read preference. \n \n typeMap \n array \n Optional. Default  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. The MongoDB PHP Library uses the following type map by default: \n \n \n \ncopy \n \n [ \n     'array' => 'MongoDB\\Model\\BSONArray', \n     'document' => 'MongoDB\\Model\\BSONDocument', \n     'root' => 'MongoDB\\Model\\BSONDocument', \n ] \n \n \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for bucket operations. Defaults\nto the database\u2019s write concern. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n If you construct a Bucket explicitly, the Bucket inherits any options\nfrom the  MongoDB\\Driver\\Manager  object.\nIf you select the Bucket from a  Database  object,\nthe Bucket inherits its options from that object. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n var_dump ( $bucket ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\GridFS\\Bucket)#3053 (2) {\n  [\"bucketName\"]=>\n  string(4) \"test\"\n  [\"databaseName\"]=>\n  string(11) \"phplib_test\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::selectGridFSBucket() \n \n \n",
            "preview": "Constructs a new Bucket instance.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBGridFSBucket/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-selectGridFSBucket/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/class.mongodb-driver-readpreference"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-next/index.html",
            "title": "MongoDB\\ChangeStream::next() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::next()",
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::next() \n \n On this page \n \n Definition \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::next \n Advances the change stream and attempts to load the next event. \n \n \n \ncopy \n \n function next(): void \n \n \n \n \n Note \n Advancing the change stream does not guarantee that there will be a\ncurrent event to access. You should still call\n MongoDB\\ChangeStream::valid()  to check for a current event\nat each step of iteration. \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Iterator::next() \n Tailable Cursor Iteration \n Change Streams  documentation in the MongoDB manual \n \n \n",
            "preview": "Advances the change stream and attempts to load the next event.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/iterator.next"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getUpsertedCount/index.html",
            "title": "MongoDB\\BulkWriteResult::getUpsertedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getUpsertedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getUpsertedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getUpsertedCount \n Return the total number of documents that were upserted by all update and\nreplace operations in the bulk write. \n \n \n \ncopy \n \n function getUpsertedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The total number of documents that were upserted by all update and replace\noperations in the bulk write. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getUpsertedCount() \n \n \n",
            "preview": "Return the total number of documents that were upserted by all update and replace operations in the bulk write.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb-driver-writeresult.getupsertedcount.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isGeoHaystack/index.html",
            "title": "MongoDB\\Model\\IndexInfo::isGeoHaystack() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::isGeoHaystack()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::isGeoHaystack() \n \n New in version 1.4. \n \n \n Deprecated since version 1.16:  MongoDB 5.0 and later no longer supports geoHaystack indexes. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::isGeoHaystack \n Return whether the index is a  geoHaystack \nindex. \n \n \n \ncopy \n \n function isGeoHaystack(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a geoHaystack index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'places' ); \n\n $collection -> createIndex ([ 'pos'   =>   'geoHaystack' ,   'x'   =>   1 ],   [ 'bucketSize'   =>   5 ]); \n\n foreach   ( $collection -> listIndexes ()   as   $index )   { \n     if   ( $index -> isGeoHaystack ())   { \n         printf ( \"%s has bucketSize: %d \\n \" ,   $index -> getName (),   $index [ 'bucketSize' ]); \n     } \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n pos_geoHaystack_x_1 has bucketSize: 5\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n MongoDB\\Collection::listIndexes() \n geoHaystack Indexes  reference in the MongoDB\nmanual \n \n \n",
            "preview": "Deprecated since version 1.16: MongoDB 5.0 and later no longer supports geoHaystack indexes.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "http://docs.mongodb.org/manual/core/geohaystack",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getUpsertedCount/index.html",
            "title": "MongoDB\\UpdateResult::getUpsertedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\UpdateResult::getUpsertedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\UpdateResult::getUpsertedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\UpdateResult::getUpsertedCount \n Return the number of documents that were upserted. \n \n \n \ncopy \n \n function getUpsertedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The total number of documents that were upserted. This should be either  0  or\n 1  for an acknowledged update or replace operation, depending on whether an\nupsert occurred. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getUpsertedCount() \n \n \n",
            "preview": "Return the number of documents that were upserted.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getupsertedcount.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getExecutionTimeMS/index.html",
            "title": "MongoDB\\MapReduceResult::getExecutionTimeMS() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\MapReduceResult::getExecutionTimeMS()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\MapReduceResult::getExecutionTimeMS() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\MapReduceResult::getExecutionTimeMS \n Returns the execution time in milliseconds of the map-reduce operation. \n \n \n \ncopy \n \n function getExecutionTimeMS(): integer \n \n \n \n \n\n \n \n Return Values \n An integer denoting the execution time in milliseconds for the map-reduce\noperation. \n \n \n Examples \n This example reports the execution time for a map-reduce operation. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $map   =   new   MongoDB\\BSON\\Javascript ( 'function() { emit(this.state, this.pop); }' ); \n $reduce   =   new   MongoDB\\BSON\\Javascript ( 'function(key, values) { return Array.sum(values) }' ); \n $out   =   [ 'inline'   =>   1 ]; \n\n $result   =   $collection -> mapReduce ( $map ,   $reduce ,   $out ); \n\n var_dump ( $result -> getExecutionTimeMS ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(244)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::mapReduce() \n mapReduce  command reference in the\nMongoDB manual \n \n \n",
            "preview": "Returns the execution time in milliseconds of the map-reduce operation.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "http://docs.mongodb.org/manual/reference/command/mapReduce"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getKey/index.html",
            "title": "MongoDB\\Model\\IndexInfo::getKey() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::getKey()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::getKey() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::getKey \n Return the index specification (i.e. indexed field(s) and order). This\ncorrelates with the  $key  parameter for\n MongoDB\\Collection::createIndex() . \n \n \n \ncopy \n \n function getKey(): array \n \n \n \n \n\n \n \n Return Values \n The index specification as an associative array. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'key'   =>   [ 'x'   =>   1 ], \n ]); \n\n var_dump ( $info -> getKey ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(1) {\n  [\"x\"]=>\n  int(1)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "Return the index specification (i.e. indexed field(s) and order). This correlates with the $key parameter for MongoDB\\Collection::createIndex() .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-isUnique/index.html",
            "title": "MongoDB\\Model\\IndexInfo::isUnique() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::isUnique()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::isUnique() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::isUnique \n Return whether the index is a  unique index .\nThis correlates with the  unique  option for\n MongoDB\\Collection::createIndex() . \n \n \n \ncopy \n \n function isUnique(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the index is a unique index. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'unique'   =>   true , \n ]); \n\n var_dump ( $info -> isUnique ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n bool(true)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n Unique Indexes  in the MongoDB manual \n \n \n",
            "preview": "Return whether the index is a unique index . This correlates with the unique option for MongoDB\\Collection::createIndex() .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/",
                "http://docs.mongodb.org/manual/core/index-unique"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getReadPreference/index.html",
            "title": "MongoDB\\Collection::getReadPreference() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getReadPreference()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getReadPreference() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getReadPreference \n Returns the read preference for this collection. \n \n \n \ncopy \n \n function getReadPreference(): MongoDB\\Driver\\ReadPreference \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadPreference \nobject. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> selectCollection ( 'test' ,   'users' ,   [ \n     'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n\n var_dump ( $collection -> getReadPreference ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadPreference)#5 (1) {\n  [\"mode\"]=>\n  string(16) \"primaryPreferred\"\n}\n \n \n \n \n \n See Also \n \n Read Preference  in the MongoDB manual \n MongoDB\\Client::getReadPreference() \n MongoDB\\Database::getReadPreference() \n MongoDB\\GridFS\\Bucket::getReadPreference() \n \n \n",
            "preview": "Returns the read preference for this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getReadPreference/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadPreference/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadPreference/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-createCollection/index.html",
            "title": "MongoDB\\Database::createCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::createCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::createCollection() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::createCollection \n Explicitly creates a collection. \n \n \n \ncopy \n \n function createCollection(string $collectionName, array $options = []): array|object \n \n \n \n MongoDB creates collections implicitly when you first reference the\ncollection in a command, such as when inserting a document into a new\ncollection. You may also explicitly create a collection with specific options\nusing the  MongoDB\\Database::createCollection()  method, or using\n db.createCollection()  in\nthe MongoDB shell. \n Explicitly creating collections enables you to create\n capped collections , specify\n document validation criteria ,\nor configure your storage engine or indexing options. \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the collection to create. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n autoIndexId \n boolean \n Optional. Specify  false  to disable the automatic creation of an index on the  _id \nfield. \n \n Important \n For replica sets, do not set  autoIndexId  to  false . \n \n \n Deprecated since version 1.4:  This option has been deprecated since MongoDB 3.2. As of MongoDB 4.0, this\noption cannot be  false  when creating a replicated collection (i.e. a\ncollection outside of the  local  database in any mongod mode). \n \n \n \n capped \n boolean \n Optional. To create a capped collection, specify  true . If you specify  true , you\nmust also set a maximum size in the  size  option. \n \n changeStreamPreAndPostImages \n document \n Optional. Used to configure support for pre- and post-images in change streams. See the\n create  command documentation for more\ninformation. \n This option is available in MongoDB 6.0+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.13. \n \n \n \n clusteredIndex \n document \n Optional. A clustered index specification. See\n Clustered Collections  or the\n create  command documentation for more\ninformation. \n This option is available in MongoDB 5.3+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.13. \n \n \n \n collation \n array|object \n Optional. Specifies the  collation  for the collection. \n Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n encryptedFields \n document \n Optional. A document describing encrypted fields for queryable encryption. If omitted,\nthe  encryptedFieldsMap  option within the  autoEncryption  driver option\nwill be consulted. See\n Field Encryption and Queryability \nin the MongoDB manual for more information. \n This option is available in MongoDB 7.0+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.13. \n \n \n \n expireAfterSeconds \n integer \n Optional. Used to automatically delete documents in time series collections. See the\n create  command documentation for more\ninformation. \n This option is available in MongoDB 5.0+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.9. \n \n \n \n flags \n integer \n Optional. Available for the MMAPv1 storage engine only to set the  usePowerOf2Sizes \nand  noPadding  flags. \n The MongoDB PHP Library provides constants that you can combine with a  bitwise\nOR operator  to set the flag values: \n \n MongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES :  1 \n MongoDB\\Operation\\CreateCollection::NO_PADDING :  2 \n \n Defaults to  1 . \n \n Note \n MongoDB 3.0 and later ignores the  usePowerOf2Sizes  flag. See\n collMod  and\n db.createCollection()  for more information. \n \n \n \n indexOptionDefaults \n array|object \n Optional. Allows users to specify a default configuration for indexes when creating a\ncollection. \n The  indexOptionDefaults  option accepts a  storageEngine  document,\nwhich should take the following form: \n \n \n \ncopy \n \n { <storage-engine-name>: <options> }\n \n \n \n Storage engine configurations specified when creating indexes are validated\nand logged to the  oplog  during replication to support replica sets\nwith members that use different storage engines. \n \n \n max \n integer \n Optional. The maximum number of documents allowed in the capped collection. The  size \noption takes precedence over this limit. If a capped collection reaches the\n size  limit before it reaches the maximum number of documents, MongoDB\nremoves old documents. If you prefer to use the  max  limit, ensure that the\n size  limit, which is required for a capped collection, is sufficient to\ncontain the maximum number of documents. \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n pipeline \n array \n Optional. An array that consists of the aggregation pipeline stage(s), which will be\napplied to the collection or view specified by  viewOn . See the\n create  command documentation for more\ninformation. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n size \n integer \n Optional. Specify a maximum size in bytes for a capped collection. Once a capped\ncollection reaches its maximum size, MongoDB removes the older documents to\nmake space for the new documents. The  size  option is required for capped\ncollections and ignored for other collections. \n \n storageEngine \n array|object \n Optional. Available for the WiredTiger storage engine only. \n Allows users to specify configuration to the storage engine on a\nper-collection basis when creating a collection. The value of the\n storageEngine  option should take the following form: \n \n \n \ncopy \n \n { <storage-engine-name>: <options> }\n \n \n \n Storage engine configurations specified when creating collections are\nvalidated and logged to the  oplog  during replication to support\nreplica sets with members that use different storage engines. \n \n \n timeseries \n array|object \n Optional. An object containing options for creating time series collections. See the\n create  command documentation for\nsupported options. \n This option is available in MongoDB 5.0+ and will result in an exception at\nexecution time if specified for an older server version. \n \n New in version 1.9. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n This will be used for the returned command result document. \n \n \n validator \n array|object \n Optional. Allows users to specify  validation rules or expressions  for the collection. For more information, see\n Document Validation  in the MongoDB\nmanual. \n The  validator  option takes an array that specifies the validation rules or\nexpressions. You can specify the expressions using the same operators as\nMongoDB\u2019s  query operators  with the\nexception of  $geoNear ,  $near ,  $nearSphere ,\n $text , and  $where . \n \n Note \n \n Validation occurs during updates and inserts. Existing documents do not\nundergo validation checks until modification. \n You cannot specify a validator for collections in the  admin ,\n local , and  config  databases. \n You cannot specify a validator for  system.*  collections. \n \n \n \n \n validationAction \n string \n Optional. Determines whether to  error  on invalid documents or just  warn  about\nthe violations but allow invalid documents to be inserted. \n \n Important \n Validation of documents only applies to those documents as determined by\nthe  validationLevel . \n \n \n \n \n \n \n \n validationAction \n Description \n \n \n \n \"error\" \n Default . Documents must pass validation before the write occurs.\nOtherwise, the write operation fails. \n \n \"warn\" \n Documents do not have to pass validation. If the document fails\nvalidation, the write operation logs the validation failure. \n \n \n \n \n \n validationLevel \n string \n Optional. Determines how strictly MongoDB applies the validation rules to existing\ndocuments during an update. \n \n \n \n \n \n \n validationLevel \n Description \n \n \n \n \"off\" \n No validation for inserts or updates. \n \n \"strict\" \n Default . Apply validation rules to all inserts and all updates. \n \n \"moderate\" \n Apply validation rules to inserts and to updates on existing  valid \ndocuments. Do not apply rules to updates on existing  invalid \ndocuments. \n \n \n \n \n \n viewOn \n string \n Optional. The name of the source collection or view from which to create the view. \n \n Note \n The name is not the full namespace of the collection or view (i.e. it does\nnot include the database name). Views must be created in the same databases\nas the source collection or view. \n \n New in version 1.13. \n \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n \n \n \n Note that not all options are available on all versions of MongoDB. Refer to\nthe  create  command reference in the\nMongoDB manual for compatibility considerations. \n \n\n \n \n Return Values \n An array or object with the result document of the  create  command. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example creates a  users  collection in the  test \ndatabase with document validation criteria: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $result   =   $db -> createCollection ( 'users' ,   [ \n     'validator'   =>   [ \n         'username'   =>   [ '$type'   =>   'string' ], \n         'email'   =>   [ '$regex'   =>   '@mongodb\\.com$' ], \n     ], \n ]); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n create  command reference in the MongoDB\nmanual \n db.createCollection() \n Time Series Collections \n \n \n",
            "preview": "Explicitly creates a collection.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation/",
                "https://www.mongodb.com/docs/manual/core/queryable-encryption/fundamentals/encrypt-and-query/",
                "http://docs.mongodb.org/manual/reference/command/collMod",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/core/capped-collections",
                "http://docs.mongodb.org/manual/reference/operator/query",
                "http://docs.mongodb.org/manual/core/clustered-collections",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/language.operators.bitwise",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://www.mongodb.com/docs/manual/reference/operator/query/text/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/core/document-validation",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/",
                "http://docs.mongodb.org/manual/core/timeseries-collections",
                "http://docs.mongodb.org/manual/reference/command/create",
                "http://docs.mongodb.org/manual/reference/method/db.createCollection",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "https://www.mongodb.com/docs/manual/reference/operator/query/where/",
                "https://www.mongodb.com/docs/manual/reference/operator/query/near/"
            ]
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-isAcknowledged/index.html",
            "title": "MongoDB\\UpdateResult::isAcknowledged() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\UpdateResult::isAcknowledged()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\UpdateResult::isAcknowledged() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\UpdateResult::isAcknowledged \n Return whether the write was acknowledged. \n \n \n \ncopy \n \n function isAcknowledged(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the write was acknowledged. \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::isAcknowledged() \n Write Concern  in the MongoDB manual \n \n \n",
            "preview": "Return whether the write was acknowledged.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.isacknowledged.php",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFilesCollection/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getFilesCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getFilesCollection()",
                "Definition",
                "Return Values",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getFilesCollection() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getFilesCollection \n Returns the files collection used by the bucket. \n \n \n \ncopy \n \n function getFilesCollection(): MongoDB\\Collection \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object for the files collection. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $filesCollection   =   $bucket -> getFilesCollection (); \n\n var_dump ( $filesCollection -> getCollectionName ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(8) \"fs.files\"\n \n \n \n \n",
            "preview": "Returns the files collection used by the bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-drop/index.html",
            "title": "MongoDB\\Collection::drop() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::drop()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::drop() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::drop \n Drop the collection. \n \n \n \ncopy \n \n function drop(array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n encryptedFields \n array|object \n Optional. A document describing encrypted fields for queryable encryption. If omitted,\nthe  encryptedFieldsMap  option within the  autoEncryption  driver option\nwill be consulted. If  encryptedFieldsMap  was defined but does not specify\nthis collection, the library will make a final attempt to consult the\nserver-side value for  encryptedFields . See\n Field Encryption and Queryability \nin the MongoDB manual for more information. \n \n Note \n This option is not passed to the  drop \ncommand. The library uses it to determine related metadata collections that\nshould be dropped in addition to an encrypted collection. \n \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  drop  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following operation drops the  restaurants  collection in the  test \ndatabase: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $result   =   $collection -> drop (); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"ns\"]=>\n    string(16) \"test.restaurants\"\n    [\"nIndexesWas\"]=>\n    int(3)\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::dropCollection() \n drop  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://www.mongodb.com/docs/manual/core/queryable-encryption/fundamentals/encrypt-and-query/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-dropCollection/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/command/drop"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-selectGridFSBucket/index.html",
            "title": "MongoDB\\Database::selectGridFSBucket() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::selectGridFSBucket()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::selectGridFSBucket() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::selectGridFSBucket \n Selects a GridFS bucket within the database. \n \n \n \ncopy \n \n function selectGridFSBucket(array $options = []): MongoDB\\GridFS\\Bucket \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bucketName \n string \n Optional. The bucket name, which will be used as a prefix for the files and chunks\ncollections. Defaults to  \"fs\" . \n \n chunkSizeBytes \n integer \n Optional. The chunk size in bytes. Defaults to  261120  (i.e. 255 KiB). \n \n disableMD5 \n boolean \n Optional. Whether to disable automatic MD5 generation when storing files. \n Defaults to  false . \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for bucket operations. Defaults to the\ndatabase\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for bucket operations. Defaults to\nthe database\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for bucket operations. Defaults\nto the database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\GridFS\\Bucket  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n The selected bucket inherits options such as read preference and type\nmapping from the  Database  object. Options may be\noverridden via the  $options  parameter. \n \n \n Example \n The following example selects the default  fs.files  bucket in the  test \ndatabase: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $bucket   =   $db -> selectGridFSBucket (); \n \n \n \n The following example selects the custom  images.files  bucket in the  test \ndatabase with a custom read preference: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $imagesBucket   =   $db -> selectGridFSBucket ([ \n     'bucketName'   =>   'images' , \n     'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n ]); \n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::__construct() \n \n \n",
            "preview": "Selects a GridFS bucket within the database.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket__construct/",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBGridFSBucket/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getCappedMax/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getCappedMax() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getCappedMax()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getCappedMax() \n \n Deprecated since version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getCappedMax \n Return the document limit for the capped collection. This correlates with the\n max  option for  MongoDB\\Database::createCollection() . \n \n \n \ncopy \n \n function getCappedMax(): integer|null \n \n \n \n \n\n \n \n Return Values \n The document limit for the capped collection. If the collection is not capped,\n null  will be returned. \n This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n max  key. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n     'name'   =>   'foo' , \n     'options'   =>   [ \n         'capped'   =>   true , \n         'size'   =>   1048576 , \n         'max'   =>   100 , \n     ] \n ]); \n\n var_dump ( $info -> getCappedMax ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(100)\n \n \n \n \n \n See Also \n \n MongoDB\\Model\\CollectionInfo::getCappedSize() \n MongoDB\\Model\\CollectionInfo::isCapped() \n MongoDB\\Database::createCollection() \n Capped Collections  in the MongoDB manual \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Return the document limit for the capped collection. This correlates with the max option for MongoDB\\Database::createCollection() .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedSize/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-isCapped/",
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/",
                "http://docs.mongodb.org/manual/core/capped-collections"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-dropIndexes/index.html",
            "title": "MongoDB\\Collection::dropIndexes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::dropIndexes()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::dropIndexes() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::dropIndexes \n Drop all indexes in the collection, except for the required index on the\n _id  field. \n \n \n \ncopy \n \n function dropIndexes(array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $indexName \n string|  MongoDB\\Model\\IndexInfo \n The name or model object of the index to drop. View the existing indexes on\nthe collection using the  listIndexes()  method. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n New in version 1.3. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  dropIndexes  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following drops all indexes from the  restaurants  collection in the\n test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $result   =   $collection -> dropIndexes (); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(3) {\n    [\"nIndexesWas\"]=>\n    int(3)\n    [\"msg\"]=>\n    string(38) \"non-_id indexes dropped for collection\"\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::dropIndex() \n Indexes \n dropIndexes  command reference in\nthe MongoDB manual \n Index documentation  in the MongoDB manual \n \n \n",
            "preview": "Drop all indexes in the collection, except for the required index on the _id field.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-dropIndex/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://docs.mongodb.org/manual/indexes",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/dropIndexes",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-modifyCollection/index.html",
            "title": "MongoDB\\Database::modifyCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::modifyCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::modifyCollection() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::modifyCollection \n Modifies a collection or view according to the specified\n $collectionOptions . \n \n \n \ncopy \n \n function modifyCollection(string $collectionName, array $collectionOptions, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the collection or view to modify. \n \n $collectionOptions \n array \n Collection or view options to assign. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  collMod  command. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example changes the expiration time of a TTL collection in the\n test  database: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $result   =   $db -> modifyCollection ( 'users' ,   [ \n     'keyPattern'   =>   [ 'lastAccess'   =>   1 ], \n     'expireAfterSeconds'   =>   1000 \n ]); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(stdClass)#2779 {\n  [\"expireAfterSeconds_old\"]=>\n  int(3)\n  [\"expireAfterSeconds_new\"]=>\n  int(1000)\n  [\"ok\"]=>\n  float(1)\n}\n \n \n \n \n \n See Also \n \n collMod  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Modifies a collection or view according to the specified $collectionOptions .",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/collMod",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/class.mongodb-driver-session"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-findOne/index.html",
            "title": "MongoDB\\Collection::findOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::findOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Matching BSON Types in Query Criteria",
                "Projecting Fields",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::findOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::findOne \n Finds a single document matching the query. \n \n \n \ncopy \n \n function findOne(array|object $filter = [], array $options = []): array|object|null \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to query. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n skip \n integer \n Optional. Number of documents to skip. Defaults to  0 . \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , queries can write\ndata to the  _tmp  sub-directory in the  dbPath  directory. \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n New in version 1.2. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned result document. \n \n \n max \n array|object \n Optional. The exclusive upper bound for a specific index. \n \n New in version 1.2. \n \n \n \n maxScan \n integer \n Optional. Maximum number of documents or index keys to scan when executing the query. \n \n Deprecated since version 1.4. \n \n \n New in version 1.2. \n \n \n \n min \n array|object \n Optional. The inclusive lower bound for a specific index. \n \n New in version 1.2. \n \n \n \n returnKey \n boolean \n Optional. If true, returns only the index keys in the resulting documents. \n \n New in version 1.2. \n \n \n \n showRecordId \n boolean \n Optional. Determines whether to return the record identifier for each document. If true,\nadds a field $recordId to the returned documents. \n \n New in version 1.2. \n \n \n \n modifiers \n array|object \n Optional.  Meta operators  that modify the\noutput or behavior of a query. Use of these operators is deprecated in favor\nof named options. \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n \n \n \n\n \n \n Return Values \n An array or object for the  first document  that matched\nthe query, or  null  if no document matched the query. The return type will\ndepend on the  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n \n Matching BSON Types in Query Criteria \n In the following example, documents in the  restaurants  collection use an\n ObjectId  for their identifier (the default)\nand documents in the  zips  collection use a string. Since ObjectId is a\nspecial BSON type, the query criteria for selecting a restaurant must use the\n MongoDB\\BSON\\ObjectId  class. \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $zip   =   $database -> zips -> findOne ([ '_id'   =>   '10036' ]); \n\n $restaurant   =   $database -> restaurants -> findOne ([ \n     '_id'   =>   new   MongoDB\\BSON\\ObjectId ( '594d5ef280a846852a4b3f70' ), \n ]); \n \n \n \n \n \n Projecting Fields \n The following example finds a restaurant based on the  cuisine  and\n borough  fields and uses a  projection  to limit the fields that are\nreturned. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $restaurant   =   $collection -> findOne ( \n     [ \n         'cuisine'   =>   'Italian' , \n         'borough'   =>   'Manhattan' , \n     ], \n     [ \n         'projection'   =>   [ \n             'name'   =>   1 , \n             'borough'   =>   1 , \n             'cuisine'   =>   1 , \n         ], \n     ] \n ); \n\n var_dump ( $restaurant ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}\n \n \n \n \n \n \n See Also \n \n MongoDB\\Collection::find() \n find  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Finds a single document matching the query.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://php.net/manual/en/book.bson.php",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-find/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/manual/en/types.comparisons.php",
                "http://docs.mongodb.org/manual/reference/operator/query-modifier",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/find",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getReadConcern/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getReadConcern() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getReadConcern()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getReadConcern() \n \n New in version 1.2. \n \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getReadConcern \n Returns the read concern for this GridFS bucket. \n \n \n \ncopy \n \n function getReadConcern(): MongoDB\\Driver\\ReadConcern \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ReadConcern  object. \n \n \n Example \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> selectDatabase ( 'test' ); \n $bucket   =   $database -> selectGridFSBucket ([ \n    'readConcern'   =>   new   MongoDB\\Driver\\ReadConcern ( 'majority' ), \n ]); \n\n var_dump ( $bucket -> getReadConcern ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\ReadConcern)#3 (1) {\n  [\"level\"]=>\n  string(8) \"majority\"\n}\n \n \n \n \n \n See Also \n \n Read Concern  in the MongoDB manual \n MongoDB\\Driver\\ReadConcern::isDefault() \n MongoDB\\Client::getReadConcern() \n MongoDB\\Collection::getReadConcern() \n MongoDB\\Database::getReadConcern() \n \n \n",
            "preview": "Returns the read concern for this GridFS bucket.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-getReadConcern/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-getReadConcern/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getReadConcern/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/mongodb-driver-readconcern.isdefault"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-rename/index.html",
            "title": "MongoDB\\Collection::rename() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::rename()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::rename() \n \n New in version 1.10. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::rename \n Rename the collection. \n \n \n \ncopy \n \n function rename(string $toCollectionName, ?string $toDatabaseName = null, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $toCollectionName \n string \n The new name of the collection. \n \n $toDatabaseName \n string \n Optional. The new database name of the collection. If a new database name is not\nspecified, the database of the original collection will be used. If the new\nname specifies a different database, the command copies the collection\nto the new database and drops the source collection. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned command result document. \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n dropTarget \n boolean \n Optional. If  true , MongoDB will drop the target before renaming the collection. The\ndefault value is  false . \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  renameCollection  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following operation renames the  restaurants  collection in the  test \ndatabase to  places : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $result   =   $collection -> rename ( 'places' ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#9 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::renameCollection() \n renameCollection  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-renameCollection/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://docs.mongodb.org/manual/reference/command/renameCollection",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/database-profiler"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-startSession/index.html",
            "title": "MongoDB\\Client::startSession() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::startSession()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::startSession() \n \n New in version 1.3. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::startSession \n Start a new client session for use with this client. \n \n \n \ncopy \n \n function startSession(array $options = []): MongoDB\\Driver\\Session \n \n \n \n Refer to the  MongoDB\\Driver\\Manager::startSession()  extension reference for accepted\noptions. \n \n\n \n \n Return Values \n A  MongoDBDriverSession  object. \n \n \n Errors/Exceptions \n MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example starts a new session: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $session   =   $client -> startSession (); \n\n var_dump ( $session ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Driver\\Session)#2043 (4) {\n  [\"logicalSessionId\"]=>\n  array(1) {\n    [\"id\"]=>\n    object(MongoDB\\BSON\\Binary)#225 (2) {\n      [\"data\"]=>\n      string(16) \"................\"\n      [\"type\"]=>\n      int(4)\n    }\n  }\n  [\"clusterTime\"]=>\n  NULL\n  [\"causalConsistency\"]=>\n  bool(true)\n  [\"operationTime\"]=>\n  NULL\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Driver\\Manager::startSession() \n Causal Consistency  in the MongoDB manual \n \n \n",
            "preview": "Start a new client session for use with this client.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-session",
                "https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/mongodb-driver-exception-invalidargumentexception",
                "http://php.net/mongodb-driver-manager.startsession",
                "http://php.net/manual/en/mongodb-driver-manager.startsession.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBDeleteResult-isAcknowledged/index.html",
            "title": "MongoDB\\DeleteResult::isAcknowledged() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\DeleteResult::isAcknowledged()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\DeleteResult::isAcknowledged() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\DeleteResult::isAcknowledged \n Return whether the write was acknowledged. \n \n \n \ncopy \n \n function isAcknowledged(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the write was acknowledged. \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::isAcknowledged() \n Write Concern  in the MongoDB manual \n \n \n",
            "preview": "Return whether the write was acknowledged.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.isacknowledged.php",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getCappedSize/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getCappedSize() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getCappedSize()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getCappedSize() \n \n Deprecated since version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getCappedSize \n Return the size limit for the capped collection in bytes. This correlates\nwith the  size  option for\n MongoDB\\Database::createCollection() . \n \n \n \ncopy \n \n function getCappedSize(): integer|null \n \n \n \n \n\n \n \n Return Values \n The size limit for the capped collection in bytes. If the collection is not\ncapped,  null  will be returned. \n This method is deprecated in favor of using\n MongoDB\\Model\\CollectionInfo::getOptions()  and accessing the\n size  key. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n     'name'   =>   'foo' , \n     'options'   =>   [ \n         'capped'   =>   true , \n         'size'   =>   1048576 , \n     ] \n ]); \n\n var_dump ( $info -> getCappedSize ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(1048576)\n \n \n \n \n \n See Also \n \n MongoDB\\Model\\CollectionInfo::getCappedMax() \n MongoDB\\Model\\CollectionInfo::isCapped() \n MongoDB\\Database::createCollection() \n Capped Collections  in the MongoDB manual \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Return the size limit for the capped collection in bytes. This correlates with the size option for MongoDB\\Database::createCollection() .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-isCapped/",
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedMax/",
                "http://docs.mongodb.org/manual/core/capped-collections"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelDatabaseInfo-getSizeOnDisk/index.html",
            "title": "MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\DatabaseInfo::getSizeOnDisk()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\DatabaseInfo::getSizeOnDisk \n Return the total size of the database file on disk in bytes. \n \n \n \ncopy \n \n function getSizeOnDisk(): integer \n \n \n \n \n\n \n \n Return Values \n The total size of the database file on disk in bytes. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   DatabaseInfo ([ 'sizeOnDisk'   =>   1048576 ]); \n\n var_dump ( $info -> getSizeOnDisk ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(1048576)\n \n \n \n \n \n See Also \n \n listDatabases  command reference\nin the MongoDB manual \n \n \n",
            "preview": "Return the total size of the database file on disk in bytes.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listDatabases"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-insertOne/index.html",
            "title": "MongoDB\\Collection::insertOne() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::insertOne()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::insertOne() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::insertOne \n Insert one document. \n \n \n \ncopy \n \n function insertOne(array|object $document, array $options = []): MongoDB\\InsertOneResult \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $document \n array|object \n The document to insert into the collection. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\InsertOneResult  object, which encapsulates a\n MongoDB\\Driver\\WriteResult  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\BulkWriteException  for errors related to the write\noperation. Users should inspect the value returned by  getWriteResult()  to determine the nature of the\nerror. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n If a  MongoDB\\Driver\\Exception\\BulkWriteException  is thrown, users should call\n getWriteResult()  and\ninspect the returned  MongoDB\\Driver\\WriteResult  object to determine the nature of the error. \n For example, a write operation may have been successfully applied to the\nprimary server but failed to satisfy the write concern (e.g. replication took\ntoo long). Alternatively, a write operation may have failed outright (e.g.\nunique key violation). \n \n \n Example \n The following operation inserts a document into the  users  collection in the\n test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> users ; \n\n $insertOneResult   =   $collection -> insertOne ([ \n     'username'   =>   'admin' , \n     'email'   =>   'admin@example.com' , \n     'name'   =>   'Admin User' , \n ]); \n\n printf ( \"Inserted %d document(s) \\n \" ,   $insertOneResult -> getInsertedCount ()); \n\n var_dump ( $insertOneResult -> getInsertedId ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n Inserted 1 document(s)\nobject(MongoDB\\BSON\\ObjectId)#11 (1) {\n  [\"oid\"]=>\n  string(24) \"579a25921f417dd1e5518141\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::insertMany() \n MongoDB\\Collection::bulkWrite() \n CRUD Operations \n insert  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/mongodb-driver-exception-bulkwriteexception",
                "http://php.net/mongodb-driver-writeexception.getwriteresult",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/crud/",
                "http://docs.mongodb.org/manual/reference/command/insert",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-bulkWrite/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/reference/write-result-classes/",
                "http://php.net/class.mongodb-driver-writeresult",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-insertMany/",
                "http://php.net/mongodb-driver-writeresult",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/mongodb-driver-session.starttransaction"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-getInsertedCount/index.html",
            "title": "MongoDB\\InsertManyResult::getInsertedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertManyResult::getInsertedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\InsertManyResult::getInsertedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\InsertManyResult::getInsertedCount \n Return the number of documents that were inserted. \n \n \n \ncopy \n \n function getInsertedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The number of documents that were inserted. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getInsertedCount() \n \n \n",
            "preview": "Return the number of documents that were inserted.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.getinsertedcount.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBUpdateResult-getModifiedCount/index.html",
            "title": "MongoDB\\UpdateResult::getModifiedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\UpdateResult::getModifiedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\UpdateResult::getModifiedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\UpdateResult::getModifiedCount \n Return the number of documents that were modified. \n \n \n \ncopy \n \n function getModifiedCount(): integer|null \n \n \n \n This method should only be called if the write was acknowledged. \n \n Note \n If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the modified\ncount may be less than the value returned by  getMatchedCount() . \n \n \n\n \n \n Return Values \n The number of documents that were modified. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\UpdateResult::getMatchedCount() \n MongoDB\\Driver\\WriteResult::getModifiedCount() \n \n \n",
            "preview": "Return the number of documents that were modified.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.getmodifiedcount.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBUpdateResult-getMatchedCount/"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertOneResult-getInsertedId/index.html",
            "title": "MongoDB\\InsertOneResult::getInsertedId() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertOneResult::getInsertedId()",
                "Definition",
                "Return Values"
            ],
            "text": "\n MongoDB\\InsertOneResult::getInsertedId() \n \n On this page \n \n Definition \n Return Values \n \n \n \n Definition \n \n \n MongoDB\\InsertOneResult::getInsertedId \n Return the ID (i.e.  _id  field value) for the inserted document. \n \n \n \ncopy \n \n function getInsertedId(): mixed \n \n \n \n Since IDs are created by the driver, this method may be called irrespective\nof whether the write was acknowledged. \n \n\n \n \n Return Values \n The ID (i.e.  _id  field value) of the inserted document. \n If the document had an ID prior to inserting (i.e. the driver did not need to\ngenerate an ID), this will contain its  _id  field value. Any driver-generated\nID will be a  MongoDB\\BSON\\ObjectId \ninstance. \n \n",
            "preview": "Return the ID (i.e. _id field value) for the inserted document.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-bson-objectid"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getInfo/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getInfo() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getInfo()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getInfo() \n \n New in version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getInfo \n Returns additional information about the collection. \n \n \n \ncopy \n \n function getInfo(): array \n \n \n \n \n\n \n \n Return Values \n An array containing extra information about the collection. This corresponds to\nthe  info  field returned in the  listCollections  command reply. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ \n   'type'   =>   'view' , \n   'name'   =>   'foo' , \n   'info'   =>   [ 'readOnly'   =>   true ] \n ]); \n\n var_dump ( $info -> getInfo ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(1) {\n  [\"readOnly\"]=>\n  bool(true)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::createCollection() \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "Returns additional information about the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-dropSearchIndex/index.html",
            "title": "MongoDB\\Collection::dropSearchIndex() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::dropSearchIndex()",
                "Definition",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::dropSearchIndex() \n \n New in version 1.17. \n \n \n On this page \n \n Definition \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::dropSearchIndex \n Drop an Atlas Search index for the collection. \n \n \n \ncopy \n \n function dropSearchIndex(string $name, array $options = []): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $name \n string \n Name of the index to drop. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n \n \n \n \n Note \n This command can only be run on a deployment hosted on\n MongoDB Atlas  and requires an Atlas cluster tier of at\nleast M10. A\n Local Atlas Deployment \ncan also be used for development. \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n See Also \n \n MongoDB\\Collection::createSearchIndex() \n MongoDB\\Collection::createSearchIndexes() \n MongoDB\\Collection::listSearchIndexes() \n MongoDB\\Collection::updateSearchIndex() \n dropSearchIndex  command\nreference in the MongoDB manual \n Atlas Search  documentation in the MongoDB Manual \n \n \n",
            "preview": "Drop an Atlas Search index for the collection.",
            "tags": "",
            "links": [
                "https://www.mongodb.com/docs/atlas/cli/stable/atlas-cli-deploy-local/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/dropSearchIndex",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listSearchIndexes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-updateSearchIndex/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://www.mongodb.com/docs/atlas/atlas-search/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndex/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/atlas",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createSearchIndexes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelCollectionInfo-getType/index.html",
            "title": "MongoDB\\Model\\CollectionInfo::getType() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\CollectionInfo::getType()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\CollectionInfo::getType() \n \n New in version 1.9. \n \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo::getType \n Return the collection type. \n \n \n \ncopy \n \n function getType(): string \n \n \n \n \n\n \n \n Return Values \n The collection type. This corresponds to the  type  field returned in the\n listCollections  command reply. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   CollectionInfo ([ 'type'   =>   'collection' ,   'name'   =>   'foo' ]); \n\n echo   $info -> getType (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n collection\n \n \n \n \n \n See Also \n \n MongoDB\\Database::createCollection() \n listCollections  command\nreference in the MongoDB manual \n \n \n",
            "preview": "The collection type. This corresponds to the type field returned in the listCollections command reply.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-createCollection/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-explain/index.html",
            "title": "MongoDB\\Collection::explain() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::explain()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Explainable Commands",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::explain() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Explainable Commands \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::explain \n Explain the given command. \n \n \n \ncopy \n \n function explain(MongoDB\\Operation\\Explainable $explainable, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $explainable \n MongoDB\\Operation\\Explainable \n The command to explain. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n Defaults to the  comment  of the explained operation (if any). \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n This will be used for the returned command result document. \n \n \n verbosity \n string \n Optional. The verbosity level at which to run the command. See the  explain  command for more information. \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  explain  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Explainable Commands \n Explainable commands include, but are not limited to: \n \n MongoDB\\Operation\\Aggregate \n MongoDB\\Operation\\Count \n MongoDB\\Operation\\DeleteMany \n MongoDB\\Operation\\DeleteOne \n MongoDB\\Operation\\Distinct \n MongoDB\\Operation\\Find \n MongoDB\\Operation\\FindOne \n MongoDB\\Operation\\FindOneAndDelete \n MongoDB\\Operation\\FindOneAndReplace \n MongoDB\\Operation\\FindOneAndUpdate \n MongoDB\\Operation\\UpdateMany \n MongoDB\\Operation\\UpdateOne \n \n \n \n Examples \n This example explains a count command. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $count   =   new   MongoDB\\Operation\\Count ( \n     $collection -> getDatabaseName (), \n     $collection -> getCollectionName (), \n     [ 'cuisine'   =>   'Italian' ] \n ); \n\n $result   =   $collection -> explain ( $count ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#29 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"queryPlanner\"]=>\n    object(MongoDB\\Model\\BSONDocument)#21 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(6) {\n        [\"plannerVersion\"]=>\n        int(1)\n        [\"namespace\"]=>\n        string(16) \"test.restaurants\"\n        [\"indexFilterSet\"]=>\n        bool(false)\n        [\"parsedQuery\"]=>\n        object(MongoDB\\Model\\BSONDocument)#15 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(1) {\n            [\"cuisine\"]=>\n            object(MongoDB\\Model\\BSONDocument)#14 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(1) {\n                [\"$eq\"]=>\n                string(7) \"Italian\"\n              }\n            }\n          }\n        }\n        [\"winningPlan\"]=>\n        object(MongoDB\\Model\\BSONDocument)#19 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(2) {\n            [\"stage\"]=>\n            string(5) \"COUNT\"\n            [\"inputStage\"]=>\n            object(MongoDB\\Model\\BSONDocument)#18 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(3) {\n                [\"stage\"]=>\n                string(8) \"COLLSCAN\"\n                [\"filter\"]=>\n                object(MongoDB\\Model\\BSONDocument)#17 (1) {\n                  [\"storage\":\"ArrayObject\":private]=>\n                  array(1) {\n                    [\"cuisine\"]=>\n                    object(MongoDB\\Model\\BSONDocument)#16 (1) {\n                      [\"storage\":\"ArrayObject\":private]=>\n                      array(1) {\n                        [\"$eq\"]=>\n                        string(7) \"Italian\"\n                      }\n                    }\n                  }\n                }\n                [\"direction\"]=>\n                string(7) \"forward\"\n              }\n            }\n          }\n        }\n        [\"rejectedPlans\"]=>\n        object(MongoDB\\Model\\BSONArray)#20 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(0) {\n          }\n        }\n      }\n    }\n    [\"executionStats\"]=>\n    object(MongoDB\\Model\\BSONDocument)#27 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(7) {\n        [\"executionSuccess\"]=>\n        bool(true)\n        [\"nReturned\"]=>\n        int(0)\n        [\"executionTimeMillis\"]=>\n        int(24)\n        [\"totalKeysExamined\"]=>\n        int(0)\n        [\"totalDocsExamined\"]=>\n        int(25359)\n        [\"executionStages\"]=>\n        object(MongoDB\\Model\\BSONDocument)#25 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(14) {\n            [\"stage\"]=>\n            string(5) \"COUNT\"\n            [\"nReturned\"]=>\n            int(0)\n            [\"executionTimeMillisEstimate\"]=>\n            int(20)\n            [\"works\"]=>\n            int(25361)\n            [\"advanced\"]=>\n            int(0)\n            [\"needTime\"]=>\n            int(25360)\n            [\"needYield\"]=>\n            int(0)\n            [\"saveState\"]=>\n            int(198)\n            [\"restoreState\"]=>\n            int(198)\n            [\"isEOF\"]=>\n            int(1)\n            [\"invalidates\"]=>\n            int(0)\n            [\"nCounted\"]=>\n            int(1069)\n            [\"nSkipped\"]=>\n            int(0)\n            [\"inputStage\"]=>\n            object(MongoDB\\Model\\BSONDocument)#24 (1) {\n              [\"storage\":\"ArrayObject\":private]=>\n              array(14) {\n                [\"stage\"]=>\n                string(8) \"COLLSCAN\"\n                [\"filter\"]=>\n                object(MongoDB\\Model\\BSONDocument)#23 (1) {\n                  [\"storage\":\"ArrayObject\":private]=>\n                  array(1) {\n                    [\"cuisine\"]=>\n                    object(MongoDB\\Model\\BSONDocument)#22 (1) {\n                      [\"storage\":\"ArrayObject\":private]=>\n                      array(1) {\n                        [\"$eq\"]=>\n                        string(7) \"Italian\"\n                      }\n                    }\n                  }\n                }\n                [\"nReturned\"]=>\n                int(1069)\n                [\"executionTimeMillisEstimate\"]=>\n                int(20)\n                [\"works\"]=>\n                int(25361)\n                [\"advanced\"]=>\n                int(1069)\n                [\"needTime\"]=>\n                int(24291)\n                [\"needYield\"]=>\n                int(0)\n                [\"saveState\"]=>\n                int(198)\n                [\"restoreState\"]=>\n                int(198)\n                [\"isEOF\"]=>\n                int(1)\n                [\"invalidates\"]=>\n                int(0)\n                [\"direction\"]=>\n                string(7) \"forward\"\n                [\"docsExamined\"]=>\n                int(25359)\n              }\n            }\n          }\n        }\n        [\"allPlansExecution\"]=>\n        object(MongoDB\\Model\\BSONArray)#26 (1) {\n          [\"storage\":\"ArrayObject\":private]=>\n          array(0) {\n          }\n        }\n      }\n    }\n    [\"serverInfo\"]=>\n    object(MongoDB\\Model\\BSONDocument)#28 (1) {\n      [\"storage\":\"ArrayObject\":private]=>\n      array(4) {\n        [\"host\"]=>\n        string(9) \"localhost\"\n        [\"port\"]=>\n        int(27017)\n        [\"version\"]=>\n        string(5) \"3.6.1\"\n        [\"gitVersion\"]=>\n        string(40) \"025d4f4fe61efd1fb6f0005be20cb45a004093d1\"\n      }\n    }\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n explain  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "This method has the following parameters:",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/explain",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-downloadToStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::downloadToStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::downloadToStream()",
                "Definition",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::downloadToStream() \n \n On this page \n \n Definition \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::downloadToStream \n Selects a GridFS file by its  _id  and copies its contents to a writable\nstream. \n \n \n \ncopy \n \n function downloadToStream($id, $destination): void \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $id \n mixed \n The  _id  of the file. \n \n $destination \n resource \n Writable stream, to which the GridFS file\u2019s contents will be written. \n \n \n \n \n\n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $id   =   $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n $destination   =   fopen ( 'php://temp' ,   'w+b' ); \n\n $bucket -> downloadToStream ( $id ,   $destination ); \n\n var_dump ( stream_get_contents ( $destination ,   - 1 ,   0 )); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::openDownloadStream() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n \n \n",
            "preview": "Selects a GridFS file by its _id and copies its contents to a writable stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStream/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getFileIdForStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getFileIdForStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getFileIdForStream()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getFileIdForStream() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getFileIdForStream \n Gets the file document\u2019s ID of the GridFS file associated with a stream. \n \n \n \ncopy \n \n function getFileIdForStream(resource $stream): mixed \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $stream \n resource \n The GridFS stream resource. \n \n \n \n \n\n \n \n Return Values \n The  _id  field of the metadata document associated with the GridFS stream.\nThe return type will depend on the bucket\u2019s  typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\CorruptFileException  if the file\u2019s\nmetadata or chunk documents contain unexpected or invalid data. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   $bucket -> openUploadStream ( 'filename' ); \n\n $id   =   $bucket -> getFileIdForStream ( $stream ); \n\n var_dump ( $id ); \n\n fclose ( $stream ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\BSON\\ObjectId)#3005 (1) {\n  [\"oid\"]=>\n  string(24) \"5acfb37d7e21e83cdb3e1583\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::getFileDocumentForStream() \n \n \n",
            "preview": "Gets the file document\u2019s ID of the GridFS file associated with a stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-getFileDocumentForStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-distinct/index.html",
            "title": "MongoDB\\Collection::distinct() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::distinct()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "Return Distinct Values for a Field",
                "Return Distinct Values Using a Filter",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::distinct() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::distinct \n Finds the distinct values for a specified field across the collection. \n \n \n \ncopy \n \n function distinct(string $fieldName, array|object $filter = [], array $options = []): mixed[] \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $fieldName \n string \n The field for which to return distinct values. \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents from which to retrieve the distinct values. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n New in version 1.5. \n \n \n \n \n \n \n\n \n \n Return Values \n An array of the distinct values. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n \n Return Distinct Values for a Field \n The following example identifies the distinct values for the  borough  field\nin the  restaurants  collection in the  test  database. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $distinct   =   $collection -> distinct ( 'borough' ); \n\n var_dump ( $distinct ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(6) {\n  [0]=>\n  string(5) \"Bronx\"\n  [1]=>\n  string(8) \"Brooklyn\"\n  [2]=>\n  string(9) \"Manhattan\"\n  [3]=>\n  string(7) \"Missing\"\n  [4]=>\n  string(6) \"Queens\"\n  [5]=>\n  string(13) \"Staten Island\"\n}\n \n \n \n \n \n Return Distinct Values Using a Filter \n The following example identifies the distinct values for the  cuisine  field\nin the  restaurants  collection in the  test  database for documents where\nthe  borough  is  Queens : \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $distinct   =   $collection -> distinct ( 'cuisine' ,   [ 'borough'   =>   'Queens' ]); \n\n var_dump ( $distinct ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(75) {\n  [0]=>\n  string(6) \"Afghan\"\n  [1]=>\n  string(7) \"African\"\n  [2]=>\n  string(9) \"American \"\n  [3]=>\n  string(8) \"Armenian\"\n  [4]=>\n  string(5) \"Asian\"\n  [5]=>\n  string(10) \"Australian\"\n  [6]=>\n  string(15) \"Bagels/Pretzels\"\n  [7]=>\n  string(6) \"Bakery\"\n  [8]=>\n  string(11) \"Bangladeshi\"\n  [9]=>\n  string(8) \"Barbecue\"\n  [10]=>\n  string(55) \"Bottled beverages, including water, sodas, juices, etc.\"\n  [11]=>\n  string(9) \"Brazilian\"\n  [12]=>\n  string(4) \"Cafe\"\n  [13]=>\n  string(16) \"Caf\u00e9/Coffee/Tea\"\n  [14]=>\n  string(5) \"Cajun\"\n  [15]=>\n  string(9) \"Caribbean\"\n  [16]=>\n  string(7) \"Chicken\"\n  [17]=>\n  string(7) \"Chinese\"\n  [18]=>\n  string(13) \"Chinese/Cuban\"\n  [19]=>\n  string(16) \"Chinese/Japanese\"\n  [20]=>\n  string(11) \"Continental\"\n  [21]=>\n  string(6) \"Creole\"\n  [22]=>\n  string(5) \"Czech\"\n  [23]=>\n  string(12) \"Delicatessen\"\n  [24]=>\n  string(6) \"Donuts\"\n  [25]=>\n  string(16) \"Eastern European\"\n  [26]=>\n  string(8) \"Egyptian\"\n  [27]=>\n  string(7) \"English\"\n  [28]=>\n  string(8) \"Filipino\"\n  [29]=>\n  string(6) \"French\"\n  [30]=>\n  string(17) \"Fruits/Vegetables\"\n  [31]=>\n  string(6) \"German\"\n  [32]=>\n  string(5) \"Greek\"\n  [33]=>\n  string(10) \"Hamburgers\"\n  [34]=>\n  string(16) \"Hotdogs/Pretzels\"\n  [35]=>\n  string(31) \"Ice Cream, Gelato, Yogurt, Ices\"\n  [36]=>\n  string(6) \"Indian\"\n  [37]=>\n  string(10) \"Indonesian\"\n  [38]=>\n  string(5) \"Irish\"\n  [39]=>\n  string(7) \"Italian\"\n  [40]=>\n  string(8) \"Japanese\"\n  [41]=>\n  string(13) \"Jewish/Kosher\"\n  [42]=>\n  string(30) \"Juice, Smoothies, Fruit Salads\"\n  [43]=>\n  string(6) \"Korean\"\n  [44]=>\n  string(64) \"Latin (Cuban, Dominican, Puerto Rican, South & Central American)\"\n  [45]=>\n  string(13) \"Mediterranean\"\n  [46]=>\n  string(7) \"Mexican\"\n  [47]=>\n  string(14) \"Middle Eastern\"\n  [48]=>\n  string(8) \"Moroccan\"\n  [49]=>\n  string(25) \"Not Listed/Not Applicable\"\n  [50]=>\n  string(18) \"Nuts/Confectionary\"\n  [51]=>\n  string(5) \"Other\"\n  [52]=>\n  string(9) \"Pakistani\"\n  [53]=>\n  string(16) \"Pancakes/Waffles\"\n  [54]=>\n  string(8) \"Peruvian\"\n  [55]=>\n  string(5) \"Pizza\"\n  [56]=>\n  string(13) \"Pizza/Italian\"\n  [57]=>\n  string(6) \"Polish\"\n  [58]=>\n  string(10) \"Portuguese\"\n  [59]=>\n  string(7) \"Russian\"\n  [60]=>\n  string(6) \"Salads\"\n  [61]=>\n  string(10) \"Sandwiches\"\n  [62]=>\n  string(30) \"Sandwiches/Salads/Mixed Buffet\"\n  [63]=>\n  string(7) \"Seafood\"\n  [64]=>\n  string(9) \"Soul Food\"\n  [65]=>\n  string(18) \"Soups & Sandwiches\"\n  [66]=>\n  string(12) \"Southwestern\"\n  [67]=>\n  string(7) \"Spanish\"\n  [68]=>\n  string(5) \"Steak\"\n  [69]=>\n  string(5) \"Tapas\"\n  [70]=>\n  string(7) \"Tex-Mex\"\n  [71]=>\n  string(4) \"Thai\"\n  [72]=>\n  string(7) \"Turkish\"\n  [73]=>\n  string(10) \"Vegetarian\"\n  [74]=>\n  string(29) \"Vietnamese/Cambodian/Malaysia\"\n}\n \n \n \n \n \n \n See Also \n \n distinct  command reference in the\nMongoDB manual \n \n \n",
            "preview": "Finds the distinct values for a specified field across the collection.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/book.bson.php",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/manual/en/types.comparisons.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/command/distinct"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-listIndexes/index.html",
            "title": "MongoDB\\Collection::listIndexes() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::listIndexes()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::listIndexes() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::listIndexes \n Returns information for all indexes for this collection. \n \n \n \ncopy \n \n function listIndexes(array $options = []): MongoDB\\Model\\IndexInfoIterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n \n \n \n\n \n \n Return Values \n A traversable  MongoDB\\Model\\IndexInfoIterator , which contains a\n MongoDB\\Model\\IndexInfo  object for each index for the collection. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example lists all of the indexes for the  restaurants \ncollection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n foreach   ( $collection -> listIndexes ()   as   $index )   { \n    var_dump ( $index ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\IndexInfo)#8 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"_id\"]=>\n    int(1)\n  }\n  [\"name\"]=>\n  string(4) \"_id_\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}\nobject(MongoDB\\Model\\IndexInfo)#12 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"cuisine\"]=>\n    float(-1)\n  }\n  [\"name\"]=>\n  string(10) \"cuisine_-1\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}\nobject(MongoDB\\Model\\IndexInfo)#8 (4) {\n  [\"v\"]=>\n  int(1)\n  [\"key\"]=>\n  array(1) {\n    [\"borough\"]=>\n    float(1)\n  }\n  [\"name\"]=>\n  string(9) \"borough_1\"\n  [\"ns\"]=>\n  string(16) \"test.restaurants\"\n}\n \n \n \n \n \n See Also \n \n Indexes \n listIndexes  command reference in\nthe MongoDB manual \n Index documentation  in the MongoDB manual \n Enumerating Collections \nspecification \n \n \n",
            "preview": "Returns information for all indexes for this collection.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/core/indexes",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-indexes.rst",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/indexes/",
                "http://docs.mongodb.org/manual/reference/command/listIndexes"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-openDownloadStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::openDownloadStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::openDownloadStream()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::openDownloadStream() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::openDownloadStream \n Selects a GridFS file by its  _id  and opens it as a readable stream. \n \n \n \ncopy \n \n function openDownloadStream($id): resource \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $id \n mixed \n The  _id  of the file. \n \n \n \n \n\n \n \n Return Values \n A readable stream resource. \n \n \n Errors/Exceptions \n MongoDB\\GridFS\\Exception\\FileNotFoundException  if no file was\nfound for the selection criteria. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $uploadStream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $uploadStream ,   \"foobar\" ); \n rewind ( $uploadStream ); \n\n $id   =   $bucket -> uploadFromStream ( 'filename' ,   $uploadStream ); \n\n $downloadStream   =   $bucket -> openDownloadStream ( $id ); \n\n var_dump ( stream_get_contents ( $downloadStream )); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(6) \"foobar\"\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::downloadToStream() \n MongoDB\\GridFS\\Bucket::downloadToStreamByName() \n MongoDB\\GridFS\\Bucket::openDownloadStreamByName() \n \n \n",
            "preview": "Selects a GridFS file by its _id and opens it as a readable stream.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openDownloadStreamByName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStream/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-downloadToStreamByName/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-createClientEncryption/index.html",
            "title": "MongoDB\\Client::createClientEncryption() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::createClientEncryption()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::createClientEncryption() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::createClientEncryption \n Returns a  MongoDB\\Driver\\ClientEncryption \nobject for manual encryption and decryption of values. \n \n \n \ncopy \n \n function createClientEncryption(array $options): MongoDB\\Driver\\ClientEncryption \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports all options documented in the\n extension manual .\nFor the  keyVaultClient  option, an instance of  MongoDB\\Client \nis automatically unwrapped and the  MongoDB\\Driver\\Manager \ninstance is passed to the extension. \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\ClientEncryption \ninstance which can be used to encrypt and decrypt values. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\InvalidArgumentException  for errors related to the\nparsing of parameters or options at the driver level. \n \n \n See Also \n \n MongoDB\\Driver\\Manager::createClientEncryption() \n \n \n",
            "preview": "Returns a MongoDB\\Driver\\ClientEncryption object for manual encryption and decryption of values.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-manager.createclientencryption.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-clientencryption",
                "http://php.net/mongodb-driver-exception-invalidargumentexception",
                "http://php.net/class.mongodb-driver-manager",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-selectCollection/index.html",
            "title": "MongoDB\\Database::selectCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::selectCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::selectCollection() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::selectCollection \n Selects a collection within the database. \n \n \n \ncopy \n \n function selectCollection(string $collectionName, array $options = []): MongoDB\\Collection \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $collectionName \n string \n The name of the collection to select. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional. The default read concern to use for collection operations. Defaults to the\ndatabase\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional. The default read preference to use for collection operations. Defaults to\nthe database\u2019s read preference. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional. The default write concern to use for collection operations. Defaults\nto the database\u2019s write concern. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Collection  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n \n \n Behavior \n The selected collection inherits options such as read preference and type\nmapping from the  Database  object. Options may be\noverridden via the  $options  parameter. \n \n \n Example \n The following example selects the  users  collection in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $collection   =   $db -> selectCollection ( 'users' ); \n \n \n \n The following example selects the  users  collection in the  test \ndatabase with a custom read preference: \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $users   =   $db -> selectCollection ( \n     'users' , \n     [ \n         'readPreference'   =>   new   MongoDB\\Driver\\ReadPreference ( 'primaryPreferred' ), \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Database::__get() \n MongoDB\\Client::selectCollection() \n MongoDB\\Collection::__construct() \n \n \n",
            "preview": "Selects a collection within the database.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/class.mongodb-driver-writeconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__get/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBCollection/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-renameCollection/index.html",
            "title": "MongoDB\\Database::renameCollection() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::renameCollection()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::renameCollection() \n \n New in version 1.10. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::renameCollection \n Rename a collection within the current database. \n \n \n \ncopy \n \n function renameCollection(string $fromCollectionName, string $toCollectionName, ?string $toDatabaseName = null, array $options = []): array|object \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $fromCollectionName \n string \n The name of the collection to rename. \n \n $toCollectionName \n string \n The new name of the collection. \n \n $toDatabaseName \n string \n Optional. The new database name of the collection. If a new database name is not\nspecified, the current database will be used. If the new name specifies a\ndifferent database, the command copies the collection to the new database\nand drops the source collection. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n This will be used for the returned command result document. \n \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the database\u2019s write concern. \n \n dropTarget \n boolean \n Optional. If  true , MongoDB will drop the target before renaming the collection. The\ndefault value is  false . \n \n \n \n \n\n \n \n Return Values \n An array or object with the result document of the  renameCollection  command. The return type will depend on the\n typeMap  option. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example renames the  restaurants  collection in the  test \ndatabase to  places : \n \n \n \ncopy \n \n <?php \n\n $db   =   ( new   MongoDB\\Client ) -> test ; \n\n $result   =   $db -> renameCollection ( 'restaurants' ,   'places' ); \n\n var_dump ( $result ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(1) {\n    [\"ok\"]=>\n    float(1)\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::rename() \n renameCollection  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Rename a collection within the current database.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-rename/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/renameCollection",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-watch/index.html",
            "title": "MongoDB\\Database::watch() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::watch()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::watch() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::watch \n Executes a  change stream  operation on the\ndatabase. The change stream can be watched for database-level changes. \n \n \n \ncopy \n \n function watch(array $pipeline = [], array $options = []): MongoDB\\ChangeStream \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $pipeline \n array|object \n Optional. The pipeline of stages to append to an initial  $changeStream  stage. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. \n \n Note \n Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n New in version 1.13. \n \n \n \n fullDocument \n string \n Optional. Determines how the \u201cfullDocument\u201d response field will be populated for update\noperations. \n By default, change streams only return the delta of fields (via an\n\u201cupdateDescription\u201d field) for update operations and \u201cfullDocument\u201d is\nomitted. Insert and replace operations always include the \u201cfullDocument\u201d\nfield. Delete operations omit the field as the document no longer exists. \n Specify \u201cupdateLookup\u201d to return the current majority-committed version of the\nupdated document. \n MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the post-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the post-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n fullDocumentBeforeChange \n string \n Optional. Determines how the \u201cfullDocumentBeforeChange\u201d response field will be\npopulated. By default, the field is omitted. \n MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the pre-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the pre-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n maxAwaitTimeMS \n integer \n Optional. Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the database\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the database\u2019s read preference. \n This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. \n \n \n resumeAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. \n Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n showExpandedEvents \n boolean \n Optional. If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: \n \n createIndexes \n dropIndexes \n modify \n create \n shardCollection \n reshardCollection  (server 6.1+) \n refineCollectionShardKey  (server 6.1+) \n \n This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n New in version 1.13. \n \n \n \n startAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\u201cinvalidate\u201d event. \n Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n startAtOperationTime \n MongoDB\\BSON\\TimestampInterface \n Optional. If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. \n Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. \n This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the database\u2019s type map. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n This example reports events while iterating a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $database   =   ( new   MongoDB\\Client ( $uri )) -> test ; \n\n $changeStream   =   $database -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     if   ( $event [ 'operationType' ]   ===   'invalidate' )   { \n         break ; \n     } \n\n     $ns   =   sprintf ( '%s.%s' ,   $event [ 'ns' ][ 'db' ],   $event [ 'ns' ][ 'coll' ]); \n     $id   =   json_encode ( $event [ 'documentKey' ][ '_id' ]); \n\n     switch   ( $event [ 'operationType' ])   { \n         case   'delete' : \n             printf ( \"Deleted document in %s with _id: %s \\n\\n \" ,   $ns ,   $id ); \n             break ; \n\n         case   'insert' : \n             printf ( \"Inserted new document in %s \\n \" ,   $ns ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'replace' : \n             printf ( \"Replaced new document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'update' : \n             printf ( \"Updated document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'updateDescription' ]),   \" \\n\\n \" ; \n             break ; \n     } \n } \n \n \n \n Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: \n \n \n \ncopy \n \n Inserted new document in test.inventory\n{\"_id\":{\"$oid\":\"5a81fc0d6118fd1af1790d32\"},\"name\":\"Widget\",\"quantity\":5}\n\nUpdated document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n{\"updatedFields\":{\"quantity\":4},\"removedFields\":[]}\n\nDeleted document in test.inventory with _id: {\"$oid\":\"5a81fc0d6118fd1af1790d32\"}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::watch() \n MongoDB\\Client::watch() \n Aggregation Pipeline  documentation in\nthe MongoDB Manual \n Change Streams  documentation in the MongoDB manual \n Change Events  documentation in the\nMongoDB manual \n \n \n",
            "preview": "Executes a change stream operation on the database. The change stream can be watched for database-level changes.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/class.mongodb-driver-session",
                "http://php.net/class.iterator",
                "http://docs.mongodb.org/manual/reference/change-events/",
                "http://php.net/class.mongodb-bson-timestampinterface",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/changeStreams"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-watch/index.html",
            "title": "MongoDB\\Client::watch() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::watch()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::watch() \n \n New in version 1.4. \n \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::watch \n Executes a  change stream  operation on the client.\nThe change stream can be watched for cluster-level changes. \n \n \n \ncopy \n \n function watch(array $pipeline = [], array $options = []): MongoDB\\ChangeStream \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $pipeline \n array|object \n Optional. The pipeline of stages to append to an initial  $changeStream  stage. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of change events to return in each response from the\nserver. \n \n Note \n Irrespective of the  batchSize  option, the initial  aggregate  command\nresponse for a change stream generally does not include any documents\nunless another option is used to configure its starting point (e.g.\n startAfter ). \n \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n New in version 1.13. \n \n \n \n fullDocument \n string \n Optional. Determines how the \u201cfullDocument\u201d response field will be populated for update\noperations. \n By default, change streams only return the delta of fields (via an\n\u201cupdateDescription\u201d field) for update operations and \u201cfullDocument\u201d is\nomitted. Insert and replace operations always include the \u201cfullDocument\u201d\nfield. Delete operations omit the field as the document no longer exists. \n Specify \u201cupdateLookup\u201d to return the current majority-committed version of the\nupdated document. \n MongoDB 6.0+ allows returning the post-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the post-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the post-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_UPDATE_LOOKUP \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n fullDocumentBeforeChange \n string \n Optional. Determines how the \u201cfullDocumentBeforeChange\u201d response field will be\npopulated. By default, the field is omitted. \n MongoDB 6.0+ allows returning the pre-image of the modified document if the\ncollection has  changeStreamPreAndPostImages  enabled. Specify\n\u201cwhenAvailable\u201d to return the pre-image if available or a null value if not.\nSpecify \u201crequired\u201d to return the pre-image if available or raise an error if\nnot. \n The following values are supported: \n \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_WHEN_AVAILABLE \n MongoDB\\Operation\\Watch::FULL_DOCUMENT_BEFORE_CHANGE_REQUIRED \n \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n maxAwaitTimeMS \n integer \n Optional. Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the client\u2019s read concern. \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the client\u2019s read preference. \n This is used for both the initial change stream aggregation and for\nserver selection during an automatic resume. \n \n \n resumeAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. \n Using this option in conjunction with  startAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n showExpandedEvents \n boolean \n Optional. If true, instructs the server to include additional DDL events in the change\nstream. The additional events that may be included are: \n \n createIndexes \n dropIndexes \n modify \n create \n shardCollection \n reshardCollection  (server 6.1+) \n refineCollectionShardKey  (server 6.1+) \n \n This is not supported for server versions prior to 6.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n New in version 1.13. \n \n \n \n startAfter \n array|object \n Optional. Specifies the logical starting point for the new change stream. The  _id \nfield in documents returned by the change stream may be used here. Unlike\n resumeAfter , this option can be used with a resume token from an\n\u201cinvalidate\u201d event. \n Using this option in conjunction with  resumeAfter  and/or\n startAtOperationTime  will result in a server error. The options are\nmutually exclusive. \n This is not supported for server versions prior to 4.2 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n startAtOperationTime \n MongoDB\\BSON\\TimestampInterface \n Optional. If specified, the change stream will only provide changes that occurred at or\nafter the specified timestamp. Command responses from a MongoDB 4.0+ server\ninclude an  operationTime  that can be used here. By default, the\n operationTime  returned by the initial  aggregate  command will be used\nif available. \n Using this option in conjunction with  resumeAfter  and/or  startAfter \nwill result in a server error. The options are mutually exclusive. \n This is not supported for server versions prior to 4.0 and will result in an\nexception at execution time if used. \n \n Note \n This is an option of the  $changeStream  pipeline stage. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the client\u2019s type map. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\ChangeStream  object, which allows for iteration of\nevents in the change stream via the  Iterator  interface. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n This example reports events while iterating a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $client   =   new   MongoDB\\Client ( $uri ); \n\n $changeStream   =   $client -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     if   ( $event [ 'operationType' ]   ===   'invalidate' )   { \n         break ; \n     } \n\n     $ns   =   sprintf ( '%s.%s' ,   $event [ 'ns' ][ 'db' ],   $event [ 'ns' ][ 'coll' ]); \n     $id   =   json_encode ( $event [ 'documentKey' ][ '_id' ]); \n\n     switch   ( $event [ 'operationType' ])   { \n         case   'delete' : \n             printf ( \"Deleted document in %s with _id: %s \\n\\n \" ,   $ns ,   $id ); \n             break ; \n\n         case   'insert' : \n             printf ( \"Inserted new document in %s \\n \" ,   $ns ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'replace' : \n             printf ( \"Replaced new document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'fullDocument' ]),   \" \\n\\n \" ; \n             break ; \n\n         case   'update' : \n             printf ( \"Updated document in %s with _id: %s \\n \" ,   $ns ,   $id ); \n             echo   json_encode ( $event [ 'updateDescription' ]),   \" \\n\\n \" ; \n             break ; \n     } \n } \n \n \n \n Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: \n \n \n \ncopy \n \n Inserted new document in app.user\n{\"_id\":{\"$oid\":\"5b329b6674083047cc05e607\"},\"username\":\"bob\"}\n\nInserted new document in app.products\n{\"_id\":{\"$oid\":\"5b329b6a74083047cc05e608\"},\"name\":\"Widget\",\"quantity\":5}\n\nInserted new document in logs.messages\n{\"_id\":{\"$oid\":\"5b329b7374083047cc05e609\"},\"msg\":\"bob purchased a widget\"}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Aggregation Pipeline  documentation in\nthe MongoDB Manual \n Change Streams  documentation in the MongoDB manual \n Change Events  documentation in the\nMongoDB manual \n \n \n",
            "preview": "Executes a change stream operation on the client. The change stream can be watched for cluster-level changes.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-readpreference",
                "http://docs.mongodb.org/manual/reference/change-events/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://php.net/class.iterator",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-bson-timestampinterface",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/result-classes/"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-aggregate/index.html",
            "title": "MongoDB\\Collection::aggregate() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::aggregate()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::aggregate() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::aggregate \n Executes an  aggregation framework pipeline  operation on the collection. \n \n \n \ncopy \n \n function aggregate(array $pipeline, array $options = []): Traversable \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $pipeline \n array \n Specifies an  aggregation pipeline \noperation. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , aggregation stages\ncan write data to the  _tmp  sub-directory in the  dbPath  directory. \n \n batchSize \n integer \n Optional. Specifies the batch size for the cursor, which will apply to both the initial\n aggregate  command and any subsequent  getMore  commands. This determines\nthe maximum number of documents to return in each response from the server. \n A batchSize of  0  is special in that and will only apply to the initial\n aggregate  command; subsequent  getMore  commands will use the server\u2019s\ndefault batch size. This may be useful for quickly returning a cursor or\nfailure from  aggregate  without doing significant server-side work. \n \n \n bypassDocumentValidation \n boolean \n Optional. If  true , allows the write operation to circumvent document level\nvalidation. Defaults to  false . \n This only applies when using the  $out  and\n $out  stages. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n New in version 1.3. \n \n \n \n explain \n boolean \n Optional. Specifies whether or not to return the information on the processing of the\npipeline. \n \n New in version 1.4. \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n New in version 1.3. \n \n \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.9. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n writeConcern \n MongoDB\\Driver\\WriteConcern \n Optional.  Write concern  to use for the operation.\nDefaults to the collection\u2019s write concern. \n It is not possible to specify a  write concern  for individual operations as part of a\ntransaction. Instead, set the  writeConcern  option when starting the\ntransaction with  startTransaction . \n This only applies when a  $out  or  $merge \nstage is specified. \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Cursor  or\n ArrayIterator  object. In both cases, the return value\nwill be  Traversable . \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n MongoDB\\Collection::aggregate() \u2019s returns a\n MongoDB\\Driver\\Cursor  object. \n \n \n Examples \n The following aggregation example uses a collection called  names  and groups\nthe  first_name  field together, counts the total number of results in each\ngroup, and sorts the results by name. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> names ; \n\n $cursor   =   $collection -> aggregate ( \n     [ \n         [ '$group'   =>   [ '_id'   =>   '$first_name' ,   'name_count'   =>   [ '$sum'   =>   1 ]]], \n         [ '$sort'   =>   [ '_id'   =>   1 ]], \n     ] \n ); \n \n \n \n \n \n See Also \n \n MongoDB\\Database::aggregate() \n aggregate  command reference in the\nMongoDB manual \n Aggregation Pipeline  documentation in\nthe MongoDB Manual \n \n \n",
            "preview": "Executes an aggregation framework pipeline operation on the collection.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/collation/",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://php.net/arrayiterator",
                "http://docs.mongodb.org/manual/core/aggregation-pipeline",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/traversable",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-driver-writeconcern",
                "http://php.net/mongodb-driver-session.starttransaction",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://php.net/class.mongodb-driver-readconcern",
                "http://docs.mongodb.org/manual/reference/command/aggregate",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/",
                "http://php.net/class.mongodb-driver-cursor",
                "http://php.net/class.mongodb-driver-readpreference",
                "https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-aggregate/",
                "http://docs.mongodb.org/manual/reference/read-preference",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient__get/index.html",
            "title": "MongoDB\\Client::__get() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::__get()",
                "Definition",
                "Return Values",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::__get() \n \n On this page \n \n Definition \n Return Values \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::__get \n Selects a database on the server. This  magic method  is\nan alias for the  selectDatabase()  method. \n \n \n \ncopy \n \n function __get(string $databaseName): MongoDB\\Database \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $databaseName \n string \n The name of the database to select. \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Database  object. \n \n \n Behavior \n The selected database inherits options such as read preference and type mapping\nfrom the  Client  object. If you wish to override\nany options, use the  MongoDB\\Client::selectDatabase()  method. \n \n Note \n To select databases whose names contain special characters, such as\n - , use complex syntax, as in  $client->{'that-database'} . \n Alternatively,  MongoDB\\Client::selectDatabase()  supports\nselecting databases whose names contain special characters. \n \n \n \n Examples \n The following example selects the  test  and  another-app  databases: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n $test   =   $client -> test ; \n $anotherApp   =   $client -> { 'another-app' }; \n \n \n \n \n \n See Also \n \n MongoDB\\Client::selectDatabase() \n MongoDB\\Database::__construct() \n Property Overloading  in the PHP Manual \n \n \n",
            "preview": "Selects a database on the server. This magic method is an alias for the selectDatabase() method.",
            "tags": "",
            "links": [
                "http://php.net/oop5.magic",
                "http://php.net/oop5.overloading",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-selectDatabase/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBClient/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase__construct/",
                "https://docs.mongodb.com/php-library/v1.17/reference/class/MongoDBDatabase/"
            ]
        },
        {
            "slug": "reference/method/MongoDBChangeStream-key/index.html",
            "title": "MongoDB\\ChangeStream::key() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\ChangeStream::key()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\ChangeStream::key() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\ChangeStream::key \n Returns the index of the current event in the change stream. \n \n \n \ncopy \n \n function key(): integer|null \n \n \n \n The index of the first event in a change stream starts at zero and will\nincrement by one for each subsequent event. \n \n\n \n \n Return Values \n The index of the current event in the change stream, or  null  if there is no\ncurrent event (i.e.  MongoDB\\ChangeStream::valid()  returns\n false ). \n \n \n Examples \n This example reports the index of events while iterating a change stream. \n \n \n \ncopy \n \n <?php \n\n $uri   =   'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet' ; \n\n $collection   =   ( new   MongoDB\\Client ( $uri )) -> test -> inventory ; \n\n $changeStream   =   $collection -> watch (); \n\n for   ( $changeStream -> rewind ();   true ;   $changeStream -> next ())   { \n     if   (   !   $changeStream -> valid ())   { \n         continue ; \n     } \n\n     $event   =   $changeStream -> current (); \n\n     printf ( \"%d: %s \\n \" ,   $changeStream -> key (),   $event [ 'operationType' ]); \n } \n \n \n \n Assuming that a document was inserted, updated, and deleted while the above\nscript was iterating the change stream, the output would then resemble: \n \n \n \ncopy \n \n 0: insert\n1: update\n2: delete\n \n \n \n \n \n See Also \n \n MongoDB\\Client::watch() \n MongoDB\\Collection::watch() \n MongoDB\\Database::watch() \n Iterator::key() \n Tailable Cursor Iteration \n Change Streams  documentation in the MongoDB manual \n \n \n",
            "preview": "Returns the index of the current event in the change stream.",
            "tags": "",
            "links": [
                "http://php.net/iterator.key",
                "https://docs.mongodb.com/php-library/v1.17/tutorial/tailable-cursor/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-watch/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-watch/",
                "http://docs.mongodb.org/manual/changeStreams",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBChangeStream-valid/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-watch/"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getInsertedCount/index.html",
            "title": "MongoDB\\BulkWriteResult::getInsertedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getInsertedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getInsertedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getInsertedCount \n Return the total number of documents that were inserted by all insert\noperations in the bulk write. \n \n \n \ncopy \n \n function getInsertedCount(): integer \n \n \n \n This method should only be called if the write was acknowledged. \n \n\n \n \n Return Values \n The total number of documents that were inserted by all insert operations in the\nbulk write. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::getInsertedCount() \n \n \n",
            "preview": "Return the total number of documents that were inserted by all insert operations in the bulk write.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "http://php.net/manual/en/mongodb-driver-writeresult.getinsertedcount.php"
            ]
        },
        {
            "slug": "reference/method/MongoDBCollection-getNamespace/index.html",
            "title": "MongoDB\\Collection::getNamespace() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::getNamespace()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::getNamespace() \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::getNamespace \n Returns the  namespace  of the collection. A namespace is the canonical\nname of an index or collection in MongoDB. \n \n \n \ncopy \n \n function getNamespace(): string \n \n \n \n \n\n \n \n Return Values \n The namespace of this collection as a string. \n \n \n Example \n The following returns the namespace of the  zips  collection in the  test \ndatabase. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n echo   $collection -> getNamespace (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n test.zips\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::getCollectionName() \n MongoDB\\Collection::getDatabaseName() \n \n \n",
            "preview": "Returns the namespace of the collection. A namespace is the canonical name of an index or collection in MongoDB.",
            "tags": "",
            "links": [
                "https://docs.python.org/2/glossary.html",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getDatabaseName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-getCollectionName/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-uploadFromStream/index.html",
            "title": "MongoDB\\GridFS\\Bucket::uploadFromStream() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::uploadFromStream()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::uploadFromStream() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::uploadFromStream \n Creates a new GridFS file and copies the contents of a readable stream to it. \n \n \n \ncopy \n \n function uploadFromStream(string $filename, resource $source, array $options = []): mixed \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filename \n string \n The  filename  of the file. \n \n $source \n resource \n Readable stream, from which the new GridFS file\u2019s contents will be read. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n _id \n mixed \n Optional. Value to use as the file document identifier. Defaults to a new\n MongoDB\\BSON\\ObjectId  object. \n \n chunkSizeBytes \n integer \n Optional. The chunk size in bytes. Defaults to the bucket\u2019s  chunkSizeBytes  option. \n \n disableMD5 \n boolean \n Optional. Whether to disable automatic MD5 generation when storing files. \n Defaults to  false . \n \n \n metadata \n array|object \n Optional. User data for the  metadata  field of the file document. If not specified,\nthe  metadata  field will not be set on the file document. \n \n \n \n \n\n \n \n Return Values \n The  _id  field of the metadata document associated with the newly created\nGridFS file. If the  _id  option is not specified, a new\n MongoDB\\BSON\\ObjectId  object will be used\nby default. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n $stream   =   fopen ( 'php://temp' ,   'w+b' ); \n fwrite ( $stream ,   \"foobar\" ); \n rewind ( $stream ); \n\n $id   =   $bucket -> uploadFromStream ( 'filename' ,   $stream ); \n\n var_dump ( $id ); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\BSON\\ObjectId)#3009 (1) {\n  [\"oid\"]=>\n  string(24) \"5acf81017e21e816e538d883\"\n}\n \n \n \n \n \n See Also \n \n MongoDB\\GridFS\\Bucket::openUploadStream() \n \n \n",
            "preview": "Creates a new GridFS file and copies the contents of a readable stream to it.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-bson-objectid",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBGridFSBucket-openUploadStream/",
                "http://php.net/mongodb-driver-exception-runtimeexception"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getName/index.html",
            "title": "MongoDB\\Model\\IndexInfo::getName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::getName()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::getName() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::getName \n Return the index name. This correlates with the return value of\n MongoDB\\Collection::createIndex() . An index name may be derived\nfrom the  $key  parameter or explicitly specified via the  name  option. \n \n \n \ncopy \n \n function getName(): string \n \n \n \n \n\n \n \n Return Values \n The index name. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'name'   =>   'x_1' , \n ]); \n\n echo   $info -> getName (); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n x_1\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "Return the index name. This correlates with the return value of MongoDB\\Collection::createIndex() . An index name may be derived from the $key parameter or explicitly specified via the name option.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBGridFSBucket-getDatabaseName/index.html",
            "title": "MongoDB\\GridFS\\Bucket::getDatabaseName() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\GridFS\\Bucket::getDatabaseName()",
                "Definition",
                "Return Values",
                "Examples"
            ],
            "text": "\n MongoDB\\GridFS\\Bucket::getDatabaseName() \n \n On this page \n \n Definition \n Return Values \n Examples \n \n \n \n Definition \n \n \n MongoDB\\GridFS\\Bucket::getDatabaseName \n Returns the name of the database containing this bucket. \n \n \n \ncopy \n \n function getDatabaseName(): string \n \n \n \n \n\n \n \n Return Values \n The name of the database containing this bucket as a string. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $bucket   =   ( new   MongoDB\\Client ) -> test -> selectGridFSBucket (); \n\n var_dump ( $bucket -> getDatabaseName ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n string(4) \"test\"\n \n \n \n \n",
            "preview": "Returns the name of the database containing this bucket.",
            "tags": "",
            "links": []
        },
        {
            "slug": "reference/method/MongoDBCollection-find/index.html",
            "title": "MongoDB\\Collection::find() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Collection::find()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Behavior",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Collection::find() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Behavior \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Collection::find \n Finds documents matching the query. \n \n \n \ncopy \n \n function find(array|object $filter = [], array $options = []): MongoDB\\Driver\\Cursor \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $filter \n array|object \n Optional. The filter criteria that specifies the documents to query. \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n projection \n array|object \n Optional. The  projection specification  to determine which fields to\ninclude in the returned documents. See  Project Fields to Return from\nQuery  and\n Projection Operators  in the MongoDB\nmanual. \n \n sort \n array|object \n Optional. The sort specification for the ordering of the results. \n \n skip \n integer \n Optional. Number of documents to skip. Defaults to  0 . \n \n limit \n integer \n Optional. The maximum number of documents to return. If unspecified, then defaults to no\nlimit. A limit of  0  is equivalent to setting no limit. \n A negative limit is similar to a positive limit but closes the cursor after\nreturning a single batch of results. As such, with a negative limit, if the\nlimited result set does not fit into a single batch, the number of documents\nreceived will be less than the specified limit. By passing a negative limit, the\nclient indicates to the server that it will not ask for a subsequent batch via\ngetMore. \n \n \n allowDiskUse \n boolean \n Optional. Enables writing to temporary files. When set to  true , queries can write\ndata to the  _tmp  sub-directory in the  dbPath  directory. \n \n batchSize \n integer \n Optional. The number of documents to return in the first batch. Defaults to  101 . A\nbatchSize of  0  means that the cursor will be established, but no documents\nwill be returned in the first batch. \n Unlike the previous wire protocol version, a batchSize of  1  for the\n find  command does not close the cursor. \n \n \n collation \n array|object \n Optional.  Collation  allows users to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. When specifying collation, the  locale  field is\nmandatory; all other collation fields are optional. For descriptions of the\nfields, see  Collation Document . \n If the collation is unspecified but the collection has a default collation,\nthe operation uses the collation specified for the collection. If no\ncollation is specified for the collection or for the operation, MongoDB uses\nthe simple binary comparison used in prior versions for string comparisons. \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n The comment can be any valid BSON type for server versions 4.4 and above.\nEarlier server versions only support string values. \n \n \n cursorType \n integer \n Optional. Indicates the type of cursor to use.  cursorType  supports the following\nvalues: \n \n \n MongoDB\\Operation\\Find::NON_TAILABLE  ( default ) \n MongoDB\\Operation\\Find::TAILABLE \n \n \n \n \n hint \n string|array|object \n Optional. The index to use. Specify either the index name as a string or the index key\npattern as a document. If specified, then the query system will only consider\nplans using the hinted index. \n \n New in version 1.2. \n \n \n \n maxAwaitTimeMS \n integer \n Optional. Positive integer denoting the time limit in milliseconds for the server to\nblock a getMore operation if no data is available. This option should only be\nused if cursorType is TAILABLE_AWAIT. \n \n New in version 1.2. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n readConcern \n MongoDB\\Driver\\ReadConcern \n Optional.  Read concern  to use for the operation.\nDefaults to the collection\u2019s read concern. \n It is not possible to specify a  read concern  for individual operations as part of a\ntransaction. Instead, set the  readConcern  option when starting the\ntransaction with  startTransaction . \n \n \n readPreference \n MongoDB\\Driver\\ReadPreference \n Optional.  Read preference  to use for the\noperation. Defaults to the collection\u2019s read preference. \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n max \n array|object \n Optional. The exclusive upper bound for a specific index. \n \n New in version 1.2. \n \n \n \n maxScan \n integer \n Optional. Maximum number of documents or index keys to scan when executing the query. \n \n Deprecated since version 1.4. \n \n \n New in version 1.2. \n \n \n \n min \n array|object \n Optional. The inclusive lower bound for a specific index. \n \n New in version 1.2. \n \n \n \n oplogReplay \n boolean \n Optional. Internal use for replica sets. To use  oplogReplay , you must include the\nfollowing condition in the filter: \n \n \n \ncopy \n \n {   ts :   {   $gte :   < timestamp >   }   } \n \n \n \n The  MongoDB\\BSON\\Timestamp  class\nreference describes how to represent MongoDB\u2019s BSON timestamp type with PHP. \n \n Deprecated since version 1.7. \n \n \n \n noCursorTimeout \n boolean \n Optional. Prevents the server from timing out idle cursors after an inactivity period\n(10 minutes). \n \n returnKey \n boolean \n Optional. If true, returns only the index keys in the resulting documents. \n \n New in version 1.2. \n \n \n \n showRecordId \n boolean \n Optional. Determines whether to return the record identifier for each document. If true,\nadds a field $recordId to the returned documents. \n \n New in version 1.2. \n \n \n \n snapshot \n boolean \n Optional. Prevents the cursor from returning a document more than once because of an\nintervening write operation. \n \n Deprecated since version 1.4. \n \n \n New in version 1.2. \n \n \n \n allowPartialResults \n boolean \n Optional. For queries against a sharded collection, returns partial results from the\n mongos  if some shards are unavailable instead of throwing an error. \n \n typeMap \n array \n Optional. The  type map \nto apply to cursors, which determines how BSON documents are converted to PHP\nvalues. Defaults to the collection\u2019s type map. \n \n modifiers \n array|object \n Optional.  Meta operators  that modify the\noutput or behavior of a query. Use of these operators is deprecated in favor\nof named options. \n \n let \n array|object \n Optional. Map of parameter names and values. Values must be constant or closed\nexpressions that do not reference document fields. Parameters can then be\naccessed as variables in an aggregate expression context (e.g.  $$var ). \n This is not supported for server versions prior to 5.0 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n \n \n \n\n \n \n Return Values \n A  MongoDB\\Driver\\Cursor  object. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnsupportedException  if options are used and\nnot supported by the selected server (e.g.  collation ,  readConcern ,\n writeConcern ). \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Behavior \n When evaluating query criteria, MongoDB compares types and values according to\nits own  comparison rules for BSON types , which differs from PHP\u2019s\n comparison  and  type juggling  rules. When matching a special\nBSON type the query criteria should use the respective  BSON class  in the driver (e.g. use\n MongoDB\\BSON\\ObjectId  to match an\n ObjectId ). \n \n \n Examples \n The following example finds restaurants based on the  cuisine  and  borough \nfields and uses a  projection  to limit the fields that are\nreturned. It also limits the results to 5 documents. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> restaurants ; \n\n $cursor   =   $collection -> find ( \n     [ \n         'cuisine'   =>   'Italian' , \n         'borough'   =>   'Manhattan' , \n     ], \n     [ \n         'limit'   =>   5 , \n         'projection'   =>   [ \n             'name'   =>   1 , \n             'borough'   =>   1 , \n             'cuisine'   =>   1 , \n         ], \n     ] \n ); \n\n foreach   ( $cursor   as   $restaurant )   { \n    var_dump ( $restaurant ); \n }; \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f983\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(23) \"Isle Of Capri Resturant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#12 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f98d\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(18) \"Marchis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#10 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f99b\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(19) \"Forlinis Restaurant\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#12 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#13 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9a8\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(22) \"Angelo Of Mulberry St.\"\n  }\n}\nobject(MongoDB\\Model\\BSONDocument)#10 (1) {\n  [\"storage\":\"ArrayObject\":private]=>\n  array(4) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectId)#8 (1) {\n      [\"oid\"]=>\n      string(24) \"576023c6b02fa9281da3f9b4\"\n    }\n    [\"borough\"]=>\n    string(9) \"Manhattan\"\n    [\"cuisine\"]=>\n    string(7) \"Italian\"\n    [\"name\"]=>\n    string(16) \"V & T Restaurant\"\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::findOne() \n find  command reference in the MongoDB\nmanual \n \n \n",
            "preview": "Finds documents matching the query.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/types.comparisons.php",
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "http://php.net/class.mongodb-bson-objectid",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://php.net/class.mongodb-driver-cursor",
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/collation/",
                "https://www.mongodb.com/docs/manual/reference/command/find/",
                "http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results",
                "http://php.net/manual/en/mongodb.persistence.deserialization.php",
                "http://docs.mongodb.org/manual/reference/operator/query-modifier",
                "http://php.net/class.mongodb-driver-readpreference",
                "http://php.net/mongodb-driver-session.starttransaction",
                "http://php.net/manual/en/book.bson.php",
                "http://docs.mongodb.org/manual/reference/read-concern",
                "http://docs.mongodb.org/manual/reference/bson-type-comparison-order",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-findOne/",
                "http://php.net/manual/en/language.types.type-juggling.php",
                "http://docs.mongodb.org/manual/reference/collation",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "http://php.net/class.mongodb-bson-timestamp",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://docs.mongodb.org/manual/reference/command/find",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/object-id/",
                "http://docs.mongodb.org/manual/reference/operator/projection",
                "http://php.net/class.mongodb-driver-readconcern",
                "https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/read-preference"
            ]
        },
        {
            "slug": "reference/method/MongoDBMapReduceResult-getCounts/index.html",
            "title": "MongoDB\\MapReduceResult::getCounts() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\MapReduceResult::getCounts()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\MapReduceResult::getCounts() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\MapReduceResult::getCounts \n Returns count statistics for the map-reduce operation. \n \n \n \ncopy \n \n function getCounts(): array \n \n \n \n \n\n \n \n Return Values \n An array of count statistics for the map-reduce operation. \n \n \n Examples \n This example reports the count statistics for a map-reduce operation. \n \n \n \ncopy \n \n <?php \n\n $collection   =   ( new   MongoDB\\Client ) -> test -> zips ; \n\n $map   =   new   MongoDB\\BSON\\Javascript ( 'function() { emit(this.state, this.pop); }' ); \n $reduce   =   new   MongoDB\\BSON\\Javascript ( 'function(key, values) { return Array.sum(values) }' ); \n $out   =   [ 'inline'   =>   1 ]; \n\n $result   =   $collection -> mapReduce ( $map ,   $reduce ,   $out ); \n\n var_dump ( $result -> getCounts ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n array(4) {\n  [\"input\"]=>\n  int(29353)\n  [\"emit\"]=>\n  int(29353)\n  [\"reduce\"]=>\n  int(180)\n  [\"output\"]=>\n  int(51)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::mapReduce() \n mapReduce  command reference in the\nMongoDB manual \n \n \n",
            "preview": "Returns count statistics for the map-reduce operation.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-mapReduce/",
                "http://docs.mongodb.org/manual/reference/command/mapReduce"
            ]
        },
        {
            "slug": "reference/method/MongoDBBulkWriteResult-getModifiedCount/index.html",
            "title": "MongoDB\\BulkWriteResult::getModifiedCount() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\BulkWriteResult::getModifiedCount()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "See Also"
            ],
            "text": "\n MongoDB\\BulkWriteResult::getModifiedCount() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n See Also \n \n \n \n Definition \n \n \n MongoDB\\BulkWriteResult::getModifiedCount \n Return the total number of documents that were modified by all update and\nreplace operations in the bulk write. \n \n \n \ncopy \n \n function getModifiedCount(): integer|null \n \n \n \n This method should only be called if the write was acknowledged. \n \n Note \n If an update/replace operation results in no change to the document\n(e.g. setting the value of a field to its current value), the modified\ncount may be less than the value returned by  getMatchedCount() . \n \n \n\n \n \n Return Values \n The total number of documents that were modified by all update and replace\noperations in the bulk write. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\BadMethodCallException  if this method is\ncalled and the write operation used an unacknowledged  write concern . \n \n \n See Also \n \n MongoDB\\BulkWriteResult::getMatchedCount() \n MongoDB\\Driver\\WriteResult::getModifiedCount() \n \n \n",
            "preview": "Return the total number of documents that were modified by all update and replace operations in the bulk write.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "http://php.net/manual/en/mongodb-driver-writeresult.getmodifiedcount.php",
                "http://docs.mongodb.org/manual/reference/write-concern",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBBulkWriteResult-getMatchedCount/"
            ]
        },
        {
            "slug": "reference/method/MongoDBDatabase-listCollections/index.html",
            "title": "MongoDB\\Database::listCollections() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Database::listCollections()",
                "Definition",
                "Return Values",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Database::listCollections() \n \n On this page \n \n Definition \n Return Values \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Database::listCollections \n Returns information for all collections in this database. \n \n \n \ncopy \n \n function listCollections(array $options = []): MongoDB\\Model\\CollectionInfoIterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n authorizedCollections \n boolean \n Optional. A flag that determines which collections are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listCollections command documentation . \n For servers < 4.0, this option is ignored. \n \n New in version 1.12. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n filter \n array|object \n Optional. A query expression to filter the list of collections. \n You can specify a query expression for collection fields (e.g.  name ,\n options ). \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n \n \n \n\n \n \n Return Values \n A traversable  MongoDB\\Model\\CollectionInfoIterator , which contains\na  MongoDB\\Model\\CollectionInfo  object for each collection in the\ndatabase. \n \n \n Example \n The following example lists all of the collections in the  test  database: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n foreach   ( $database -> listCollections ()   as   $collectionInfo )   { \n     var_dump ( $collectionInfo ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(11) \"restaurants\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(5) \"users\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(6) \"restos\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\n \n \n \n The following example lists all collections whose name starts with  \"rest\" \nin the  test  database: \n \n \n \ncopy \n \n <?php \n\n $database   =   ( new   MongoDB\\Client ) -> test ; \n\n $collections   =   $database -> listCollections ([ \n     'filter'   =>   [ \n         'name'   =>   new   MongoDB\\BSON\\Regex ( '^rest.*' ), \n     ], \n ]); \n\n foreach   ( $collections   as   $collectionInfo )   { \n     var_dump ( $collectionInfo ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(11) \"restaurants\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#3 (2) {\n  [\"name\"]=>\n  string(6) \"restos\"\n  [\"options\"]=>\n  array(0) {\n  }\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Database::listCollectionNames() \n listCollections  command\nreference in the MongoDB manual \n Enumerating Collections \nspecification \n \n \n",
            "preview": "Returns information for all collections in this database.",
            "tags": "",
            "links": [
                "http://php.net/class.mongodb-driver-session",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "http://docs.mongodb.org/manual/reference/command/listCollections",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "https://mongodb.com/docs/manual/reference/command/listCollections/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollectionNames/",
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst",
                "http://docs.mongodb.org/manual/reference/database-profiler"
            ]
        },
        {
            "slug": "reference/method/MongoDBInsertManyResult-isAcknowledged/index.html",
            "title": "MongoDB\\InsertManyResult::isAcknowledged() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\InsertManyResult::isAcknowledged()",
                "Definition",
                "Return Values",
                "See Also"
            ],
            "text": "\n MongoDB\\InsertManyResult::isAcknowledged() \n \n On this page \n \n Definition \n Return Values \n See Also \n \n \n \n Definition \n \n \n MongoDB\\InsertManyResult::isAcknowledged \n Return whether the write was acknowledged. \n \n \n \ncopy \n \n function isAcknowledged(): boolean \n \n \n \n \n\n \n \n Return Values \n A boolean indicating whether the write was acknowledged. \n \n \n See Also \n \n MongoDB\\Driver\\WriteResult::isAcknowledged() \n Write Concern  in the MongoDB manual \n \n \n",
            "preview": "Return whether the write was acknowledged.",
            "tags": "",
            "links": [
                "http://php.net/manual/en/mongodb-driver-writeresult.isacknowledged.php",
                "http://docs.mongodb.org/manual/reference/write-concern"
            ]
        },
        {
            "slug": "reference/method/MongoDBModelIndexInfo-getVersion/index.html",
            "title": "MongoDB\\Model\\IndexInfo::getVersion() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Model\\IndexInfo::getVersion()",
                "Definition",
                "Return Values",
                "Examples",
                "See Also"
            ],
            "text": "\n MongoDB\\Model\\IndexInfo::getVersion() \n \n On this page \n \n Definition \n Return Values \n Examples \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Model\\IndexInfo::getVersion \n Return the index version. \n \n \n \ncopy \n \n function getVersion(): integer \n \n \n \n \n\n \n \n Return Values \n The index version. \n \n \n Examples \n \n \n \ncopy \n \n <?php \n\n $info   =   new   IndexInfo ([ \n     'v'   =>   1 , \n ]); \n\n var_dump ( $info -> getVersion ()); \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n int(1)\n \n \n \n \n \n See Also \n \n MongoDB\\Collection::createIndex() \n listIndexes  command reference in\nthe MongoDB manual \n \n \n",
            "preview": "The output would then resemble:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/command/listIndexes",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-createIndex/"
            ]
        },
        {
            "slug": "reference/method/MongoDBClient-listDatabases/index.html",
            "title": "MongoDB\\Client::listDatabases() \u2014 PHP Library Manual upcoming",
            "headings": [
                "MongoDB\\Client::listDatabases()",
                "Definition",
                "Return Values",
                "Errors/Exceptions",
                "Example",
                "See Also"
            ],
            "text": "\n MongoDB\\Client::listDatabases() \n \n On this page \n \n Definition \n Return Values \n Errors/Exceptions \n Example \n See Also \n \n \n \n Definition \n \n \n MongoDB\\Client::listDatabases \n Returns information for all databases on the server. \n \n \n \ncopy \n \n function listDatabases(array $options = []): MongoDB\\Model\\DatabaseInfoIterator \n \n \n \n This method has the following parameters: \n \n \n \n \n \n \n \n Parameter \n Type \n Description \n \n \n \n $options \n array \n Optional. An array specifying the desired options. \n \n \n \n The  $options  parameter supports the following options: \n \n \n \n \n \n \n \n Option \n Type \n Description \n \n \n \n authorizedDatabases \n boolean \n Optional. A flag that determines which databases are returned based on the user\nprivileges when access control is enabled. For more information, see the\n listDatabases command documentation . \n For servers < 4.0.5, this option is ignored. \n \n New in version 1.7. \n \n \n \n comment \n mixed \n Optional. Enables users to specify an arbitrary comment to help trace the operation\nthrough the  database profiler ,\n currentOp  output, and\n logs . \n This is not supported for server versions prior to 4.4 and will result in an\nexception at execution time if used. \n \n New in version 1.13. \n \n \n \n filter \n array|object \n Optional. A query expression to filter the list of databases. \n You can specify a query expression for database fields (e.g.  name ,\n sizeOnDisk ,  empty ). \n \n New in version 1.3. \n \n \n \n maxTimeMS \n integer \n Optional. The cumulative time limit in milliseconds for processing operations on the\ncursor. MongoDB aborts the operation at the earliest following\n interrupt point . \n \n session \n MongoDB\\Driver\\Session \n Optional. Client session to associate with the operation. \n \n New in version 1.3. \n \n \n \n \n \n \n\n \n \n Return Values \n A traversable  MongoDB\\Model\\DatabaseInfoIterator , which contains\na  MongoDB\\Model\\DatabaseInfo  object for each database on the\nserver. \n \n \n Errors/Exceptions \n MongoDB\\Exception\\UnexpectedValueException  if the command\nresponse from the server was malformed. \n MongoDB\\Exception\\InvalidArgumentException  for errors related to\nthe parsing of parameters or options. \n MongoDB\\Driver\\Exception\\RuntimeException  for other errors at the driver\nlevel (e.g. connection errors). \n \n \n Example \n The following example lists all databases on the server: \n \n \n \ncopy \n \n <?php \n\n $client   =   new   MongoDB\\Client ; \n\n foreach   ( $client -> listDatabases ()   as   $databaseInfo )   { \n     var_dump ( $databaseInfo ); \n } \n \n \n \n The output would then resemble: \n \n \n \ncopy \n \n object(MongoDB\\Model\\DatabaseInfo)#4 (3) {\n  [\"name\"]=>\n  string(5) \"local\"\n  [\"sizeOnDisk\"]=>\n  float(65536)\n  [\"empty\"]=>\n  bool(false)\n}\nobject(MongoDB\\Model\\DatabaseInfo)#7 (3) {\n  [\"name\"]=>\n  string(4) \"test\"\n  [\"sizeOnDisk\"]=>\n  float(32768)\n  [\"empty\"]=>\n  bool(false)\n}\n \n \n \n \n \n See Also \n \n MongoDB\\Client::listDatabaseNames() \n listDatabases  command reference\nin the MongoDB manual \n Enumerating Databases \nspecification \n \n \n",
            "preview": "Returns information for all databases on the server.",
            "tags": "",
            "links": [
                "http://php.net/mongodb-driver-exception-runtimeexception",
                "https://mongodb.com/docs/manual/reference/command/listDatabases/",
                "https://www.mongodb.com/docs/manual/reference/glossary/",
                "http://docs.mongodb.org/manual/reference/command/currentOp",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabaseNames/",
                "http://php.net/class.mongodb-driver-session",
                "https://docs.mongodb.com/php-library/v1.17/reference/enumeration-classes/",
                "http://docs.mongodb.org/manual/reference/command/listDatabases",
                "http://docs.mongodb.org/manual/reference/database-profiler",
                "http://docs.mongodb.org/manual/reference/log-messages",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://github.com/mongodb/specifications/blob/master/source/enumerate-databases.rst"
            ]
        },
        {
            "slug": "reference/enumeration-classes/index.html",
            "title": "Enumeration Classes \u2014 PHP Library Manual upcoming",
            "headings": [
                "Enumeration Classes",
                "MongoDB\\Model\\CollectionInfo",
                "Definition",
                "Methods",
                "MongoDB\\Model\\CollectionInfoIterator",
                "Definition",
                "Methods",
                "MongoDB\\Model\\DatabaseInfo",
                "Definition",
                "Methods",
                "MongoDB\\Model\\DatabaseInfoIterator",
                "Definition",
                "Methods",
                "MongoDB\\Model\\IndexInfo",
                "Methods",
                "MongoDB\\Model\\IndexInfoIterator",
                "Definition",
                "Methods"
            ],
            "text": "\n Enumeration Classes \n \n On this page \n \n MongoDB\\Model\\CollectionInfo \n MongoDB\\Model\\CollectionInfoIterator \n MongoDB\\Model\\DatabaseInfo \n MongoDB\\Model\\DatabaseInfoIterator \n MongoDB\\Model\\IndexInfo \n MongoDB\\Model\\IndexInfoIterator \n \n \n \n MongoDB\\Model\\CollectionInfo \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfo \n This class models information about a collection. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\CollectionInfoIterator ,\nwhich is returned by  MongoDB\\Database::listCollections() . \n \n\n \n Changed in version 1.4:  This class implements PHP\u2019s  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . \n \n Note \n The  MongoDB\\Model\\CollectionInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . \n \n \n \n \n Methods \n \n \n MongoDB\\Model\\CollectionInfo::getCappedMax() \n MongoDB\\Model\\CollectionInfo::getCappedSize() \n MongoDB\\Model\\CollectionInfo::getIdIndex() \n MongoDB\\Model\\CollectionInfo::getInfo() \n MongoDB\\Model\\CollectionInfo::getName() \n MongoDB\\Model\\CollectionInfo::getOptions() \n MongoDB\\Model\\CollectionInfo::getType() \n MongoDB\\Model\\CollectionInfo::isCapped() \n \n \n \n \n \n \n MongoDB\\Model\\CollectionInfoIterator \n \n Definition \n \n \n MongoDB\\Model\\CollectionInfoIterator \n This interface extends PHP\u2019s  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Database::listCollections() . \n \n\n \n \n Methods \n This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\CollectionInfo . \n \n \n \n \n MongoDB\\Model\\DatabaseInfo \n \n Definition \n \n \n MongoDB\\Model\\DatabaseInfo \n This class models information about a database. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\DatabaseInfoIterator ,\nwhich is returned by  MongoDB\\Client::listDatabases() . \n \n\n \n Changed in version 1.4:  This class implements PHP\u2019s  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . \n \n Note \n The  MongoDB\\Model\\DatabaseInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . \n \n \n \n \n Methods \n \n \n MongoDB\\Model\\DatabaseInfo::getName() \n MongoDB\\Model\\DatabaseInfo::getSizeOnDisk() \n MongoDB\\Model\\DatabaseInfo::isEmpty() \n \n \n \n \n \n \n MongoDB\\Model\\DatabaseInfoIterator \n \n Definition \n \n \n MongoDB\\Model\\DatabaseInfoIterator \n This interface extends PHP\u2019s  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Client::listDatabases() . \n \n\n \n \n Methods \n This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\DatabaseInfo . \n \n \n \n \n MongoDB\\Model\\IndexInfo \n \n \n MongoDB\\Model\\IndexInfo \n This class models information about an index. Instances of this class are\nreturned by traversing a  MongoDB\\Model\\IndexInfoIterator ,\nwhich is returned by  MongoDB\\Collection::listIndexes() . \n This class implements PHP\u2019s  ArrayAccess  interface. This\nprovides a mechanism for accessing index fields for which there exists no\nhelper method.  isset()  may be used to check for the existence\nof a field before accessing it with  [] . \n \n Note \n The  MongoDB\\Model\\IndexInfo  class is immutable. Attempting\nto modify it via the  ArrayAccess  interface will\nresult in a  MongoDB\\Exception\\BadMethodCallException . \n \n \n\n \n Methods \n \n \n MongoDB\\Model\\IndexInfo::getKey() \n MongoDB\\Model\\IndexInfo::getName() \n MongoDB\\Model\\IndexInfo::getNamespace() \n MongoDB\\Model\\IndexInfo::getVersion() \n MongoDB\\Model\\IndexInfo::is2dSphere() \n MongoDB\\Model\\IndexInfo::isGeoHaystack() \n MongoDB\\Model\\IndexInfo::isSparse() \n MongoDB\\Model\\IndexInfo::isText() \n MongoDB\\Model\\IndexInfo::isTtl() \n MongoDB\\Model\\IndexInfo::isUnique() \n \n \n \n \n \n \n MongoDB\\Model\\IndexInfoIterator \n \n Definition \n \n \n MongoDB\\Model\\IndexInfoIterator \n This interface extends PHP\u2019s  Iterator \ninterface. An instance of this interface is returned by\n MongoDB\\Collection::listIndexes() . \n \n\n \n \n Methods \n This interface adds no new methods to  Iterator , but specifies that  current()  will return an instance of\n MongoDB\\Model\\IndexInfo . \n \n \n",
            "preview": "This class models information about a collection. Instances of this class are returned by traversing a MongoDB\\Model\\CollectionInfoIterator , which is returned by MongoDB\\Database::listCollections() .",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-isCapped/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getIdIndex/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getKey/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBCollection-listIndexes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-isEmpty/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getVersion/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isTtl/",
                "http://php.net/arrayaccess",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isGeoHaystack/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getType/",
                "http://php.net/manual/en/iterator.current.php",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isText/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getInfo/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isUnique/",
                "https://docs.mongodb.com/php-library/v1.17/reference/exception-classes/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedSize/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-getNamespace/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getCappedMax/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBDatabase-listCollections/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelDatabaseInfo-getSizeOnDisk/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBClient-listDatabases/",
                "http://php.net/manual/en/class.iterator.php",
                "http://php.net/isset",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-isSparse/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getName/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelCollectionInfo-getOptions/",
                "https://docs.mongodb.com/php-library/v1.17/reference/method/MongoDBModelIndexInfo-is2dSphere/"
            ]
        }
    ]
}