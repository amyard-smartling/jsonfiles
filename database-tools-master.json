{
    "url": "http://mongodb.com/docs/database-tools",
    "includeInGlobalSearch": true,
    "documents": [
        {
            "slug": "bsondump",
            "title": "bsondump",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Options",
                "Examples"
            ],
            "paragraphs": "The  bsondump  converts  BSON  files into human-readable\nformats, including  JSON . For example,  bsondump  is useful\nfor reading the output files generated by  mongodump . bsondump  uses  Extended JSON v2.0\n(Canonical mode) \nto format its data. bsondump  is a diagnostic tool for inspecting\nBSON files, not a tool for data ingestion or other application use. Run  bsondump  from the system command line, not the  mongo  shell. This documentation is for version  100.9.0  of  bsondump . Starting with MongoDB 4.4,  bsondump  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  bsondump  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n bsondump , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 bsondump MongoDB 4.0 bsondump bsondump  version  100.9.0  supports the following versions\nof the MongoDB Server: While  bsondump  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 bsondump  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  bsondump  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  bsondump . Returns information on the options and use of  bsondump . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  bsondump  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: output from  database commands replication activity connection accepted events connection closed events Returns the  bsondump  release number. Validates each  BSON  object before outputting it in  JSON \nformat. By default,  bsondump  enables  --objcheck .\nFor objects with a high degree of sub-document nesting,\n --objcheck  can have a small impact on performance. Changes the operation of  bsondump  from outputting\n\" JSON \" (the default) to a debugging format. Outputs documents in a pretty-printed format JSON. Specifies the path to a  BSON  file to dump to JSON.  --bsonFile  is\nan alternative to the positional  <bsonFilename>  option. By default,  bsondump  reads from standard input. The final argument to  bsondump  is a document containing\n BSON . This data is typically generated by\n bsondump  or by MongoDB in a  rollback  operation. Specifies the path of the file to which  bsondump  should write\nits output JSON data. By default,  bsondump  writes to standard output. By default,  bsondump  outputs data to standard output. To\ncreate corresponding  JSON  files, you can use the\n --outFile  option: Use the following command (at the system shell) to produce debugging\noutput for a  BSON  file: Run  bsondump  from the system command line, not the  mongo  shell.",
            "code": [
                {
                    "lang": "sh",
                    "value": "bsondump --outFile=collection.json collection.bson"
                },
                {
                    "lang": "sh",
                    "value": "bsondump --type=debug collection.bson"
                }
            ],
            "preview": "Returns information on the options and use of bsondump.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongotop",
            "title": "mongotop",
            "headings": [
                "Description",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Syntax",
                "Command Line Options",
                "Required Access",
                "Behavior",
                "Polling",
                "FIPS",
                "Options",
                "Fields",
                "Examples",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials",
                "Additional Information"
            ],
            "paragraphs": "mongotop  provides a method to track the amount of time a\nMongoDB instance  mongod  spends reading and writing data.\n mongotop  provides statistics on a per-collection level.\nBy default,  mongotop  returns values every second. Run  mongotop  from the system command line, not the  mongo  shell. This documentation is for version  100.9.0  of  mongotop . Starting with MongoDB 4.4,  mongotop  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongotop  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongotop , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongotop MongoDB 4.0 mongotop mongotop  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongotop  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongotop  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  mongotop  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongotop . The  mongotop  command has the following form: Running  mongotop  without any command-line options will\nconnect to the  mongod  instance running on localhost over\nport  27017 , and will return values every second by default. To have  mongotop  report every 30 seconds, specify the\npolling interval: When connected to a  mongod  instance, the program reports\nfirst on the connection and then reports on the statistics at the\nconfigured frequency. Run  mongotop  from the system command line, not the  mongo  shell. You can run  mongotop  with various  command-line\noptions . For example, to connect  mongotop  to a\n mongod  instance running on a remote host\n mongodb0.example.com  and report every 30 seconds: For more information on the options available, see\n Options . When connected to a  mongod  instance, the program reports\nfirst on the connection and then reports on the statistics at the\nconfigured frequency. You can include the desired frequency of reporting (in this\nexample, 30 seconds) and the  --uri \noption to specify the host and port: If the  mongod  instance requires authentication, you\ncan specify the user, password, and authentication database as part\nof the URI connection string: The user running  mongotop  must have the\n serverStatus  and  top  privileges. For more information on the URI connection string, see\n --uri . Alternatively, you can use the  --host \nand  --port  options to specify the host\nand port: If the  mongod  instance requires authentication, you\ncan specify the user  -u , and the\nauthentication database  --authenticationDatabase . Omit the  --password  option to have  mongoexport  prompt for the\npassword. The user running  mongotop  must have the\n serverStatus  and  top  privileges. In order to connect to a  mongod  that enforces\nauthorization, the connecting user must have the\n serverStatus  and  top  privileges. The built-in role  clusterMonitor  provides these privileges. The  mongotop  program uses the  top \ncommand to collect data. However, while  top  returns cumulative\nusage statistics,  mongotop  resets the usage statistics for\neach polling interval. mongotop  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . Returns information on the options and use of  mongotop . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongotop  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: output from  database commands replication activity connection accepted events connection closed events Returns the  mongotop  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongotop : This is the recommended way to specify a password to  mongotop ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongotop , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongotop , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongotop  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongotop  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: When specifying the replica set list format,  mongotop  always connects to\nthe  primary . You can also connect to any single member of the replica set by specifying\nthe host and port of only that member: If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). If connected to a replica set where the  primary  is not\nreachable,  mongotop  returns an error message. Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongotop  will\nredact the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongotop  will prompt for a passphrase. See\n TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongotop  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password \"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified\n --username  has been created.\n --authenticationDatabase  is required for\n mongod  and  mongos  instances that use\n Authentication . See  Authentication Database . If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongotop  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongotop  adds support for\nthe  MONGODB-AWS  authentication mechanism when connecting to a\n MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Toggles the mode of  mongotop  to report on use of per-database\n locks . This data is only available when connected to a\nMongoDB 2.6 or older instance. --locks  returns an error when called against a  mongod  3.0 or\nnewer instance that does not report per-database lock usage. Number of lines of data that  mongotop  should print. \"0 for indefinite\" Returns output for  mongotop  in  JSON  format. In\naddition to timing data, the  --json  option also returns a count\nof the number of operations which took place during the polling\ninterval. The final argument is the length of time, in seconds, that\n mongotop  waits in between calls. By default  mongotop  returns\ndata every second. When connected to a  mongod  instance, the program reports\nfirst on the connection and then reports on the statistics at the\nconfigured frequency.  mongotop  returns time values\nspecified in milliseconds (ms.) mongotop  only reports active namespaces or databases,\ndepending on the  --locks  option. If you don't see a database\nor collection, it has received no recent activity. You can issue a\nsimple operation in the  mongo  shell to generate activity to\naffect the output of  mongotop . Contains the database namespace, which combines the database name\nand collection. If you use the  mongotop --locks , the  ns \nfield does not appear in the  mongotop  output. Contains the name of the database. The database named  .  refers\nto the global lock, rather than a specific database. This field does not appear unless you have invoked\n mongotop  with the  --locks  option. Provides the total amount of time that this  mongod  spent\noperating on this namespace. Provides the amount of time that this  mongod  spent\nperforming read operations on this namespace. Provides the amount of time that this  mongod  spent\nperforming write operations on this namespace. Provides a time stamp for the returned data. By default  mongotop  connects to the MongoDB instance\nrunning on the localhost port  27017 . However,  mongotop  can optionally\nconnect to remote  mongod \ninstances. See the  mongotop options  for more\ninformation. To force  mongotop  to return less frequently specify a number, in\nseconds at the end of the command. In this example,  mongotop  will\nreturn every 15 seconds. This command produces the following output: To return a  mongotop  report every 5 minutes, use the\nfollowing command: Run  mongotop  from the system command line, not the  mongo  shell. To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongotop  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongotop  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Syntax for setting environment variables in other shells will be\ndifferent. Consult the documentation for your platform for more\ninformation. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead. For more information about monitoring MongoDB, see\n Monitoring for MongoDB . For additional background on various other MongoDB status outputs see: For an additional utility that provides MongoDB metrics\nsee  mongostat . serverStatus replSetGetStatus dbStats collStats",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongotop <options> <connection-string> <polling interval in seconds>"
                },
                {
                    "lang": "sh",
                    "value": "mongotop"
                },
                {
                    "lang": "sh",
                    "value": "mongotop 30"
                },
                {
                    "lang": "sh",
                    "value": "2019-04-29T15:35:27.785-0400 connected to: 127.0.0.1\n\n             ns    total      read      write    <timestamp>\n<db.collection>    81802ms     0ms    81802ms\n..."
                },
                {
                    "lang": "sh",
                    "value": "mongotop [options] [frequency]"
                },
                {
                    "lang": "sh",
                    "value": "2019-04-29T15:35:27.785-0400 connected to: 127.0.0.1\n\n             ns    total      read      write    <timestamp>\n<db.collection>    81802ms     0ms    81802ms\n..."
                },
                {
                    "lang": "sh",
                    "value": "mongotop 30 --uri='mongodb://mongodb0.example.com:27017' [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongotop 30 --uri='mongodb://user:password@mongodb0.example.com:27017/?authSource=admin' [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongotop 30 --host=mongodb0.example.com --port=27017 [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongotop 30 --host=mongodb0.example.com --port=27017 -u=user --authenticationDatabase=admin [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongotop mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongotop --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>"
                },
                {
                    "lang": "sh",
                    "value": "2019-04-29T15:35:27.785-0400 connected to: 127.0.0.1\n\n             ns    total      read      write    <timestamp>\n<db.collection>    81802ms     0ms    81802ms\n...\n\n             ns    total      read      write    <timestamp>\n<db.collection>    0ms         0ms        0ms\n..."
                },
                {
                    "lang": "sh",
                    "value": "mongotop 15"
                },
                {
                    "lang": "sh",
                    "value": "2019-04-29T15:35:27.785-0400 connected to: 127.0.0.1\n\n\n                    ns    total    read    write    2019-04-29T15:35:57-04:00\n    admin.system.roles      0ms     0ms      0ms\n    admin.system.users      0ms     0ms      0ms\n  admin.system.version      0ms     0ms      0ms\nconfig.system.sessions      0ms     0ms      0ms\n     local.startup_log      0ms     0ms      0ms\n  local.system.replset      0ms     0ms      0ms"
                },
                {
                    "lang": "sh",
                    "value": "mongotop 300"
                },
                {
                    "lang": "none",
                    "value": "mongotop 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongotop 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongotop 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongotop 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongotop.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongofiles",
            "title": "mongofiles",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Syntax",
                "Required Access",
                "Behavior",
                "FIPS",
                "Read Preference",
                "Write Concern",
                "Options",
                "Commands",
                "Examples",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials"
            ],
            "paragraphs": "The  mongofiles  utility makes it possible to manipulate files\nstored in your MongoDB instance in  GridFS  objects from the\ncommand line. It is particularly useful as it provides an interface\nbetween objects stored in your file system and GridFS. Run  mongofiles  from the system command line, not the  mongo  shell. This documentation is for version  100.9.0  of  mongofiles . Starting with MongoDB 4.4,  mongofiles  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongofiles  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongofiles , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongofiles MongoDB 4.0 mongofiles mongofiles  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongofiles  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongofiles  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  mongofiles  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongofiles . The  mongofiles  command has the following form: The components of the  mongofiles  command are: Run  mongofiles  from the system command line, not the  mongo  shell. Options . You may use one or more of\nthese options to control the behavior of  mongofiles . Connection String . The connection string\nof the  mongod  /  mongos  to connect to\nwith  mongofiles . Command . Use one of these commands to\ndetermine the action of  mongofiles . An identifier which is either: the name of a file on your local file\nsystem, or a GridFS object. For  replica sets ,\n mongofiles  can only read from the set's\n primary . In order to connect to a  mongod  that enforces authorization\nwith the  --auth  option, you must use the\n --username  and  --password  options. The connecting user must possess, at a\nminimum: the  read  role for the accessed database when using the\n list ,  search  or  get  commands, the  readWrite  role for the accessed database when using\nthe  put  or  delete  commands. mongofiles  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . By default,  mongofiles  uses read preference\n primary . To override the default, you can specify the\n read preference  in the\n --readPreference  command line\noption or in the  --uri connection string . If you specify read preference in the URI\nstring and the  --readPreference ,\nthe  --readPreference  value\noverrides the read preference specified in the URI string. You can specify both the\n --writeConcern  and the\n --uri connection string  option. If write\nconcern is specified using both options, the\n --writeConcern  value overrides\nthe write concern specified in the URI string. Returns information on the options and use of  mongofiles . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongofiles  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: output from  database commands replication activity connection accepted events connection closed events Returns the  mongofiles  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongofiles : This is the recommended way to specify a password to  mongofiles ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongofiles , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongofiles , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongofiles  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Specifies a resolvable hostname for the  mongod  that holds\nyour GridFS system. By default  mongofiles  attempts to connect\nto a MongoDB process running on the localhost port number  27017 . Optionally, specify a port number to connect a MongoDB instance running\non a port other than 27017. Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongofiles  will\nredact the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongofiles  will prompt for a passphrase. See\n TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongofiles  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password \"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified  --username  has been created.\nSee  Authentication Database . If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongofiles  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongofiles  adds support\nfor the  MONGODB-AWS  authentication mechanism when connecting\nto a  MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Specifies the name of the database on which to run the  mongofiles . Alternatively, you can also specify the database directly in the\n URI connection string . Providing a connection\nstring while also using  --db  and specifying conflicting\ninformation will result in an error. Specifies the local filesystem name of a file for get and put\noperations. In the  mongofiles put  and  mongofiles get  commands,\nthe required  <filename>  modifier refers to the name the object will\nhave in GridFS.  mongofiles  assumes that this reflects the\nfile's name on the local file system. This setting overrides this\ndefault. Provides the ability to specify a  MIME  type to describe the file\ninserted into GridFS storage.  mongofiles  omits this option in\nthe default operation. Use only with  mongofiles put  operations. Alters the behavior of  mongofiles put  to replace existing\nGridFS objects with the specified local file, rather than adding an\nadditional object with the same name. In the default operation, files will not be overwritten by a\n mongofiles put  option. Default : fs GridFS prefix to use. Default : majority Specifies the  write concern  for each write operation that  mongofiles \nperforms. Specify the write concern as a document with  w options : If the write concern is also included in the  --uri\nconnection string , the command-line\n --writeConcern  overrides the write concern specified in\nthe URI string. Default :  primary Specifies the  read preference  for\n mongofiles . The  --readPreference  option can take: mongofiles  defaults to  primary \n read preference . If the read preference is also included in the\n --uri connection string , the command-line\n --readPreference  overrides the read preference specified in\nthe URI string. A string if specifying only the read preference mode: A quote-enclosed document to specify the mode, the optional\n read preference tag sets , and the\noptional  maxStalenessSeconds : If specifying the  maxStalenessSeconds , the value must be greater than or equal to 90. Lists the files in the GridFS store. The characters specified after\n list  (e.g.  <prefix> ) optionally limit the list of\nreturned items to files that begin with that string of characters. Lists the files in the GridFS store with names that match any\nportion of  <string> . Copy the specified file or files from the local file system into\nGridFS storage. Multiple files can be specified as a space-separated\nlist. Each specified filename refers to the name the object will have in\nGridFS, and  mongofiles  assumes that this reflects the\nname the file has on the local file system. If the local filename is\ndifferent, use the  mongofiles --local  option. Copy the specified file or files from GridFS storage to the local\nfile system. Each specified filename refers to the name the object has in\nGridFS, and  mongofiles  will use this filename when\nwriting to the local file system. If specifying  only one   filename  to the  get  command, you can\nuse the  --local  option to specify a\ndifferent local filename to write to, if desired. The\n --local  option  cannot  be used if\nspecifying  more than one   filename  to the  get  command. To copy files from GridFS storage that match a regular expression,\nuse the  get_regex  command instead. Copy the file, specified by its  <_id> , from GridFS storage to the\nlocal file system.  <_id>  refers to the extended JSON  _id  of\nthe object in GridFS.  get_id  can accept either ObjectId values or\nnon-ObjectId values for  <_id> . mongofiles  writes the file to the local\nfile system using the file's filename in GridFS. To choose a\ndifferent location for the file on the local file system, use the\n --local  option. Copy the file or files, matched by the specified  <regex> \nexpression, from GridFS storage to the local file system. The\n get_regex  command uses Perl compatible regular expressions\n(\"PCRE\") version 8.42 with UTF-8 support. You may optionally specify one or more  <regex-options>  using the\n --regexOptions  flag. These can be any of the\n options supported by the $regex operator , which include settings such as\ncase-insensitivity. Multiple options should be provided together\nwithout separators, e.g.  --regexOptions si mongofiles  writes the file or files to the local\nfile system using each file's matched filename in GridFS. You\n cannot  use the  --local  option with\nthe  get_regex  command. Delete the specified file from GridFS storage. Delete the file, specified by its  <_id> , from GridFS storage.\n delete_id  can accept either ObjectId values or non-ObjectId\nvalues for  <_id> . To return a list of all files in a  GridFS  collection in the\n records  database, use the following invocation at the system shell: This  mongofiles  instance will connect to the\n mongod  instance running on the  27017  localhost\ninterface to specify the same operation on a different port or\nhostname, and issue a command that resembles one of the following: Modify any of the following commands as needed if you're connecting\nthe  mongod  instances on different ports or hosts. To upload a file named  32-corinth.lp  to the GridFS collection in\nthe  records  database, you can use the following command: To delete the  32-corinth.lp  file from this GridFS collection in\nthe  records  database, you can use the following command: To search for files in the GridFS collection in the  records \ndatabase that have the string  corinth  in their names, you can use\nfollowing command: To list all files in the GridFS collection in the  records  database\nwith names that begin with the string  32 , you can use the following\ncommand: To fetch the file from the GridFS collection in the  records \ndatabase named  32-corinth.lp , you can use the following command: To fetch all files from the GridFS collection in the  records \ndatabase with names beginning with the string  32  and ending with the\nstring  .lp , you can use the following command: To fetch the file from the GridFS collection in the  records  database\nwith  _id: ObjectId(\"56feac751f417d0357e7140f\") , you can use the\nfollowing command: You must include quotation marks around the  _id . Run  mongofiles  from the system command line, not the  mongo  shell. To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongofiles  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongofiles  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Syntax for setting environment variables in other shells will be\ndifferent. Consult the documentation for your platform for more\ninformation. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongofiles <options> <connection-string> <command> <filename or _id>"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongofiles mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongofiles --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "sh",
                    "value": "--writeConcern=\"{w:'majority'}\""
                },
                {
                    "lang": "sh",
                    "value": "--readPreference=secondary"
                },
                {
                    "lang": "sh",
                    "value": "--readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ], maxStalenessSeconds: 120}'"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records list"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles --port=37017 -d=records list\nmongofiles --host=db1.example.net -d=records list\nmongofiles --host=db1.example.net --port=37017 -d=records list"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records put 32-corinth.lp"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records delete 32-corinth.lp"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records search corinth"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records list 32"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records get 32-corinth.lp"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records get_regex 32*.lp"
                },
                {
                    "lang": "sh",
                    "value": "mongofiles -d=records get_id '{\"$oid\": \"56feac751f417d0357e7140f\"}'"
                },
                {
                    "lang": "none",
                    "value": "mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongofiles.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "",
            "title": "The MongoDB Database Tools Documentation",
            "headings": [
                "Versioning",
                "Installation",
                "Additional Resources",
                "Issues",
                "Community",
                "Licensing",
                "Further Reading"
            ],
            "paragraphs": "The MongoDB Database Tools are a collection of command-line utilities for working\nwith a MongoDB deployment. The Database Tools include the following\nbinaries: Binary Import / Export \u00a0   \u00a0   mongodump Creates a binary export of the contents of a\n mongod  database. \u00a0   \u00a0   mongorestore Restores data from a  mongodump  database dump\ninto a  mongod  or  mongos \u00a0   \u00a0   bsondump Converts  BSON  dump files into  JSON . Data Import / Export \u00a0   \u00a0   mongoimport Imports content from an\n Extended JSON ,\nCSV, or TSV export file. \u00a0   \u00a0   mongoexport Produces a  JSON  or  CSV  export of data stored in\na  mongod  instance. Diagnostic Tools \u00a0   \u00a0   mongostat Provides a quick overview of the status of a currently running\n mongod  or  mongos  instance. \u00a0   \u00a0   mongotop Provides an overview of the time a  mongod  instance\nspends reading and writing data. GridFS Tools \u00a0   \u00a0   mongofiles Supports manipulating files stored in your MongoDB instance in\n GridFS  objects. You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . Starting with MongoDB 4.4, the MongoDB Database Tools are now released separately\nfrom the MongoDB Server and use their own versioning, with an initial\nversion of  100.0.0 . Previously, these tools were released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of these\ntools, reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 Tools MongoDB 4.0 Tools The MongoDB Database Tools can be downloaded from the  MongoDB Download Center . Please see the  installation guide for your platform  for specific installation instructions. For instructions on how to file a JIRA ticket for the MongoDB server or\none of the related projects, see\n https://github.com/mongodb/mongo/wiki/Submit-Bug-Reports . Getting involved in the MongoDB community is a great way to build\nrelationships with other talented and like minded engineers, increase\nawareness for the interesting work that you are doing, and sharpen your\nskills. To learn about the MongoDB community, see\n Get Involved with MongoDB . The MongoDB Database Tools documentation is licensed under a  Creative Commons\nAttribution-NonCommercial-ShareAlike 3.0 United States License . For information on MongoDB licensing, see  MongoDB Licensing . The company behind MongoDB. The MongoDB server documentation. Database as a service. The documentation available for the drivers, frameworks,\nand services for use with MongoDB.",
            "code": [],
            "preview": "The MongoDB Database Tools are a collection of command-line utilities for working\nwith a MongoDB deployment. The Database Tools include the following\nbinaries:",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "logs",
            "title": "Database Tools Logs",
            "headings": [
                "Stderr Examples",
                "Successful mongoexport Operation",
                "Failed mongoexport Operation",
                "Pipe Database Tools Logs to a File",
                "Example"
            ],
            "paragraphs": "The MongoDB Database Tools print logs to stderr. The following examples show the results of  mongoexport \noperations and the information logged to stderr. Consider the following  mongoexport  operation that\nproduces a file called  cakeSales.json  from the contents\nof the  test.cakeSales  collection: mongoexport  logs the following information to stderr: Consider the following  mongoexport  operation that fails\nbecause it cannot connect to the target deployment: mongoexport  logs the following information to stderr: You may want to output the contents of the stderr logs to a file\nfor easier viewing, or to save the results of Database Tools\noperations. To pipe the stderr output to a file, append  2> {fileName} \nto your command. The following command writes the output of a  mongoexport \noperation to a file called  mongoexport.log . In this example, the\n mongoexport.log  file is created in the same directory where the\ncommand is run. To view the contents of  mongoexport.log , open the file in a text\neditor.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongoexport --db=test --collection=cakeSales --out=cakeSales.json"
                },
                {
                    "lang": "none",
                    "value": "2021-09-21T14:05:07.197-0400 connected to: mongodb://localhost/\n2021-09-21T14:05:07.203-0400 exported 6 records"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=notRealHost.example.net --port=27017 --username=someUser --authenticationDatabase=admin --collection=contacts --db=marketing --out=mdb1-examplenet.json"
                },
                {
                    "lang": "none",
                    "value": "2021-09-21T14:35:30.125-0400 could not connect to server: server selection error: server selection timeout, current topology: { Type: Single, Servers: [{ Addr: notrealhost.example.net:27017, Type: Unknown, Last error: connection() error occured during connection handshake: dial tcp: lookup notrealhost.example.net: no such host }, ] }"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=test --collection=cakeSales --out=cakeSales.json 2> mongoexport.log"
                }
            ],
            "preview": "The MongoDB Database Tools print logs to stderr.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongodump",
            "title": "mongodump",
            "headings": [
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Additional Considerations for Ubuntu 18.04",
                "Installation",
                "Syntax",
                "Connect to a MongoDB Instance",
                "Connect to a Replica Set",
                "Connect to a Sharded Cluster",
                "Behavior",
                "Using mongodump Without an authSource",
                "Restore to Matching Server Version",
                "Read Preference",
                "Data Exclusion",
                "Metadata Output",
                "Metadata Format",
                "Overwrite Files",
                "mongodump During Resharding",
                "Data Compression Handling",
                "Working Set",
                "FIPS",
                "Using mongodump on Atlas Free and Shared Tier Clusters",
                "Required Access",
                "Usage in Backup Strategy",
                "Standalone Deployments and Replica Sets",
                "Sharded Clusters",
                "Options",
                "Examples",
                "Use mongodump with a Collection",
                "Use mongodump with a Database and Exclude Specified Collections",
                "Use mongodump with Access Control",
                "Output to an Archive File",
                "Output an Archive to Standard Output",
                "Compress the Output",
                "Copy and Clone Databases",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials",
                "Authenticating with a Specific Database"
            ],
            "paragraphs": "mongodump  is a utility that creates a binary export of\na database's contents.  mongodump  can export data from: mongodump  can connect to  mongod  and\n mongos  instances. Standalone deployments Replica sets Sharded clusters Serverless instances You can use  mongodump  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . Run  mongodump  from the system command line, not the  mongo  shell. mongorestore , which allows you to import data that was\nexported from  mongodump . If you are archiving stale data to save on storage costs, consider\n Online Archive  in\n MongoDB Atlas . Online\nArchive automatically archives infrequently accessed data to\nfully-managed S3 buckets for cost-effective data tiering. This documentation is for version  100.9.0  of  mongodump . Starting with MongoDB 4.4,  mongodump  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongodump  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongodump , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongodump MongoDB 4.0 mongodump mongodump  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongodump  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongodump  version  100.9.0  is supported on these platforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 Ubuntu 18.04 may use a non-standard DNS resolver. When you use a\nnon-standard DNS resolver,  mongodump  returns an error message like: To resolve the problem, edit  /etc/resolv.conf  to point to a\ndifferent DNS resolver. The  mongodump  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongodump . mongodump  syntax: Run  mongodump  from the system command line, not the  mongo  shell. To connect to a local MongoDB instance running on port 27017 and use\nthe default settings to export the content, run\n mongodump  without any command-line options: To specify a host and/or port of the MongoDB instance, you can either: For more information on the options available, see  Options . Specify the hostname and port in the  --uri connection string : Specify the hostname and port in the  --host : Specify the hostname and port in the  --host  and  --port : To connect to a replica set to export its data, you can either: By default,  mongodump  reads from the primary of the\nreplica set. To override the default, you can specify the  read\npreference : For more information on the options available, see  Options . Specify the replica set name and members in the  --uri connection string : Specify the replica set name and members in the  --host : You can specify the read preference in the\n --uri connection string If specifying the read preference tags, include the\n readPreferenceTags  option: You can specify the read preference using the\n --readPreference  command-line\noption. The command-line option takes a string if specifying only the read preference mode: Or, the command-line option can takes a quote-enclosed document\n '{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}' \nto specify the mode, the optional  read preference tag\nsets , and the optional\n maxStalenessSeconds : To connect to a sharded cluster to export its data, you can either: By default,  mongodump  reads from the primary of the\nshard replica set. To override the default, you can specify the  read\npreference : For more information on the options available, see  Options . Specify the hostname of the  mongos  instance in the\n --uri connection string Specify the hostname and port of the  mongos  instance in the  --host You can specify the read preference in the\n --uri connection string If specifying the read preference tags, include the\n readPreferenceTags  option: You can specify the read preference using the\n --readPreference  command-line\noption.  The command-line option takes a string if specifying only the read preference mode: Or, the command-line option can takes a quote-enclosed document\n '{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds: <num>}' \nto specify the mode, the optional  read preference tag\nsets , and the optional\n maxStalenessSeconds : Examples When dumping to a case-insensitive file system such as Windows\nor macOS, collections with names that differ only by capitalization\nwill be overwritten. For case-insensitive file systems, always use\nthe  --archive \noption. When  authSource  is not specified in the MongoDB URI, the\ndatabase name specified in  --db  is used both to authenticate\nyour  mongodump  session and to indicate the database being dumped. For\nan example of using a different database for authentication when using\n mongodump , see  Authenticating with a Specific Database . When using  mongorestore  to load data files created by\n mongodump , the MongoDB versions of your source and\ndestination deployments must be either: For example, if your dump was created from a MongoDB deployment running\nversion  4.4 , the MongoDB deployment you restore to must also run\nversion  4.4  or have its FCV set to  4.4 . To change your feature compatibility version, see\n setFeatureCompatibilityVersion . In addition, ensure that you are using the same version of\n mongorestore  to load the data files as the version of\n mongodump  that you used to create them. For example, if\nyou used  mongodump  version  100.9.0  to create the\ndump, use  mongorestore  version  100.9.0  to restore\nit. The same major version. The same feature compatibility version. You can restore the BSON files generated from  mongodump \ninto MongoDB deployments running the same or newer version\nas the source deployment. This guarantee does not apply to metadata, archive, or oplog replay\nfiles. If you try to restore these files using different\nsource and destination deployment versions, the  mongorestore \nprocess could result in failure, silent failure, or corrupted\nmetadata. By default,  mongodump  uses read preference\n primary . To override the default, you can specify the\n read preference  in the\n --readPreference  command-line\noption or in the  --uri connection string . If read preference is specified in both the URI string and the\n --readPreference \noption, the  --readPreference \nvalue overrides the read preference specified in the URI string. If you specify both the  --db  and the\n --collection  options,  mongodump \ndumps the specified collection. If you only specify the  --db  option,\n mongodump  dumps that database with the following exclusions: If you omit the  --db  option, the following exclusions apply: mongodump  output: mongorestore  or  mongod  must rebuild the\nindexes after restoring data. If you're using  views : If the value of  --db  is  admin : If you aren't connected to an Atlas Proxy,  mongodump  dumps the\ndatabase but excludes the  system.keys  collection. If you're connected to an Atlas Proxy,  mongodump  attempts to\ndump the database but errors out. If the value of  --db  is  config ,  mongodump  dumps all\ncollections in that database. If the value of  --db  is  local ,  mongodump  dumps all\ncollections in that database. For all other databases,  mongodump  excludes all collections that\nstart with  system. , except for  system.js . mongodump  excludes the  local  database. mongodump  only includes the following collections in the output\nfor the  config  database: chunks collections databases settings shards tags version If you're connected to an Atlas Proxy,  mongodump  excludes the\n admin  database. Contains the documents in the database and the index definitions. Does not contain the index data. By default,  mongodump  only exports a view's metadata.\n mongodump  doesn't create a binary export of the\ndocuments included in the view. To export the documents in a view, use\n --viewsAsCollections . If  mongodump  outputs to a directory, the output contains\ncollection metadata which includes the following properties: If  mongodump  outputs to standard output ( stdout ), the\noutput does not include metadata. For more information, see the\n --out  option. Collection names Collection types Collection configuration options UUIDs Indexes mongodump  uses  Extended\nJSON v2.0 (Canonical)  format\nfor the metadata files. To parse these files for restore, use\n mongorestore , which supports  Extended\nJSON v2.0 (Canonical or Relaxed mode)  format. mongodump  overwrites output files if they exist in the\nbackup data folder. Before running the  mongodump  command\nmultiple times, either ensure that you no longer need the files in the\noutput folder (the default is the  dump/  folder) or rename the\nfolders or files. mongodump  fails if: mongodump  is initiated when a\n resharding operation  is in progress. The  reshardCollection  command is run during a\n mongodump  operation. When run against a  mongod  instance that uses the\n WiredTiger  storage engine,\n mongodump  outputs uncompressed data. mongodump  can adversely affect performance of the\n mongod . If your data is larger than system memory, the\n mongodump  will push the working set out of memory. mongodump  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . On free ( M0 ) and shared ( M2  and  M5 ) tier Atlas clusters, the\nfollowing limitations apply: You can't run  mongodump  on the  admin  database. By default,\n mongodump  skips this database. If you use the  --db  option to set the destination database to  admin ,\nthe program returns an error. You can't use the following options with the  mongodump  program: --dumpDbUsersAndRoles --oplog To run  mongodump  against a MongoDB deployment that has\n access control  enabled, you must have\nprivileges that grant  find  action for each database to\nback up. The built-in  backup  role provides the required\nprivileges to perform backup of any and all databases. For standalone or a replica set,  mongodump  can be a part\nof a  backup strategy  with\n mongorestore  for partial backups based on a query,\nsyncing from production to staging or development environments, or\nchanging the storage engine of a standalone. For details on using  mongodump  with\n mongorestore  as part of a backup and recovery strategy,\nsee: Back Up and Restore with MongoDB Tools MongoDB Backup Methods mongodump  and  mongorestore \n cannot  be part of a backup strategy for 4.2+ sharded clusters\nthat have sharded transactions in progress, as backups created with\n mongodump   do not maintain  the atomicity guarantees\nof transactions across shards. For 4.2+ sharded clusters with in-progress sharded transactions, use\none of the following coordinated backup and restore processes which\n do maintain  the atomicity guarantees of transactions across shards: MongoDB Atlas , MongoDB Cloud Manager , or MongoDB Ops Manager . Returns information on the options and use of  mongodump . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongodump  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: Output from  database commands Replication activity Connection accepted and closed events All logs, including error messages, except for those that occur when\nparsing options Returns the  mongodump  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongodump : This is the recommended way to specify a password to  mongodump ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongodump , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongodump , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongodump  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongodump  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: When specifying the replica set list format,  mongodump  always connects to\nthe  primary . You can also connect to any single member of the replica set by specifying\nthe host and port of only that member: If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongodump  will\nredact the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongodump  will prompt for a passphrase. See\n TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongodump  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the\n --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password \"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified  --username  has been created.\nSee  Authentication Database . If you do not specify an authentication database,  mongodump \nassumes that the database specified to export holds the user's credentials. If you do not specify an authentication database or a database to\nexport,  mongodump  assumes the  admin  database holds the user's\ncredentials. If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongodump  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongodump  adds support for\nthe  MONGODB-AWS  authentication mechanism when connecting\nto a  MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Alternatively, you can also specify the service name directly in the\n URI connection string . Providing a connection\nstring while also using  --gssapiServiceName  and specifying conflicting\ninformation will result in an error. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Specifies a database to backup. If you do not specify a database,\n mongodump  copies all databases in this instance into the dump\nfiles. Alternatively, you can also specify the database directly in the\n URI connection string . Providing a connection\nstring while also using  --db  and specifying conflicting\ninformation will result in an error. Specifies a collection to backup. If you do not specify a collection,\nthis option copies all collections in the specified database or instance\nto the dump files. Provides a  JSON document  as a query that optionally limits\nthe documents included in the output of  mongodump . To\nuse the  --query  option, you must also specify the\n --collection  option. The query  must  be in  Extended JSON v2 format\n(either relaxed or canonical/strict mode) , including enclosing the field\nnames and operators in quotes.  For example: To use  $regex  with  mongodump , use the following syntax: You must enclose the query document in single quotes ( '{ ... }' ) to ensure that it does\nnot interact with your shell environment. When you use the  --query  option on a  time series\ncollection , you can only query the\nfield specified as the  metaField . Specifies the path to a file containing a JSON document as a query\nfilter that limits the documents included in the output of\n mongodump .  --queryFile  enables you to create\nquery filters that are too large to fit in your terminal's buffer. When you use the  --queryFile  option on a  time series\ncollection , you can only query the\nfield specified as the  metaField . Default :  primary Specifies the  read preference  for\n mongodump . The  --readPreference  option can take: mongodump  defaults to  primary \n read preference . If the read preference is also included in the\n --uri connection string , the command-line\n --readPreference  overrides the read preference specified in\nthe URI string. A string if specifying only the read preference mode: A quote-enclosed document to specify the mode, the optional\n read preference tag sets , and the\noptional  maxStalenessSeconds : If specifying the  maxStalenessSeconds , the value must be greater than or equal to 90. Compresses the output. If  mongodump  outputs to the dump\ndirectory, the new feature compresses the individual files. The files\nhave the suffix  .gz . If  mongodump  outputs to an archive file or the standard\nout stream, the new feature compresses the archive file or the data\noutput to the stream. Specifies the directory where  mongodump  will write\n BSON  files for the dumped databases. By default,\n mongodump  saves output files in a directory named\n dump  in the current working directory. To send the database dump to standard output, specify \" - \" instead of\na path. Write to standard output if you want process the output before\nsaving it, such as to use  gzip  to compress the dump. When writing\nstandard output,  mongodump  does not write the metadata that\nwrites in a  <dbname>.metadata.json  file when writing to files\ndirectly. You cannot use the  --archive  option with the\n --out  option. Writes the output to a specified archive file or, if the archive\nfile is unspecified, writes to the standard output ( stdout ). An\narchive file is a single-file alternative to multiple BSON files. You cannot use the  --archive  option\nwith the  --out  option. To output the dump to an archive file, run\n mongodump  with the  --archive  option and the archive filename. To output the dump to the standard output stream in order to pipe\nto another process, run  mongodump  with the\n --archive  option but  omit  the\nfilename. If  mongodump  writes to an archive file,\n mongodump  performance can improve. For more information on\n mongodump  performance impacts, see  Output Format\nConsiderations . Creates a file named  oplog.bson  as part of the\n mongodump  output. The  oplog.bson  file, located in\nthe top level of the output directory, contains oplog entries that\noccur during the  mongodump  operation. This file provides\nan effective point-in-time snapshot of the state of a\n mongod  instance. To restore to a specific point-in-time\nbackup, use the output created with this option in conjunction with\n mongorestore --oplogReplay . Without  --oplog , if there are write operations during the dump\noperation, the dump will not reflect a single moment in time. Changes\nmade to the database during the update process can affect the output of\nthe backup. --oplog  has no effect when running  mongodump \nagainst a  mongos  instance to dump the entire contents of a\nsharded cluster. However, you can use  --oplog  to dump\nindividual shards. --oplog  only works against nodes that maintain an\n oplog . This includes all members of a replica set. --oplog  does not dump the oplog collection. A  mongodump  running with  --oplog  fails if\na client issues any of the listed operations during the dump\nprocess. renameCollection db.collection.renameCollection() db.collection.aggregate()  with  $out To use  mongodump  with  --oplog , you must create a full dump of\na  replica set  member.  mongodump  with   --oplog  fails\nif you use any of the following options to limit the data to be dumped: --db --collection --dumpDbUsersAndRoles mongorestore --oplogReplay Includes user and role definitions in the database's dump directory\nwhen performing  mongodump  on a specific database. This\noption applies only when you specify a database in the\n --db  option. MongoDB always includes user and role\ndefinitions when  mongodump  applies to an entire instance\nand not just a specific database. Excludes the specified collection from the  mongodump  output.\nTo exclude multiple collections, specify the  --excludeCollection  multiple times. Excludes all collections with a specified prefix from the  mongodump \noutputs. To specify multiple prefixes, specify the  --excludeCollectionsWithPrefix  multiple\ntimes. Default : 4 Number of collections  mongodump  should export\nin parallel. When specified,  mongodump  exports  views  as collections. For each view,  mongodump  creates a BSON file containing\nthe documents in the view. If you use  mongorestore \nwith a BSON file created by  mongodump , the view is\nrestored as a  collection . If you do  not  include  --viewsAsCollections ,\n mongodump  captures each view's metadata. If you include a\nview's metadata file in a  mongorestore  operation, the view\nis recreated. Only views are exported. By default,  mongodump  only\nexports a view's metadata. To export the documents in a view, use\nthe  --viewsAsCollections  option. Run  mongodump  from the system command line, not the  mongo  shell. The following operation creates a dump file that contains only the\ncollection named  records  in the database named  test . In\nthis case the database is running on the local interface on port\n 27017 : The following operation dumps all collections in the  test  database\nexcept for  users  and  salaries : In the next example,  mongodump  creates a database dump\nlocated at  /opt/backup/mongodump-2011-10-24 , from a database\nrunning on port  37017  on the host  mongodb1.example.net  and\nauthenticating using the username  user  as follows: If you do not include the  --password ,\n mongodump  prompts the user for the password. To output the dump to an archive file, run  mongodump  with the\n --archive  option and the archive filename. For example, the following\noperation creates a file  test.20150715.archive  that contains the dump\nof the  test  database. To output the archive to the standard output stream in order to pipe to\nanother process, run  mongodump  with the  archive \noption but  omit  the filename: You cannot use the  --archive  option with the\n --out  option. To compress the files in the output dump directory, run\n mongodump  with the new  --gzip  option. For example,\nthe following operation outputs compressed files into the default\n dump  directory. To compress the archive file output by  mongodump , use the\n --gzip  option in conjunction with the  --archive \noption, specifying the name of the compressed file. Starting in version 4.2, MongoDB removes the deprecated  copydb \ncommand and  clone  command. As an alternative, users can use  mongodump  and\n mongorestore  (with the  mongorestore  options\n --nsFrom  and  --nsTo ). For example, to copy the  test  database from a local instance\nrunning on the default port 27017 to the  examples  database on the\nsame instance, you can: Alternatively, instead of using an archive file, you can\n mongodump  the  test  database to the standard\noutput stream and pipe into  mongorestore : Use  mongodump  to  dump the  test  database to\nan archive  mongodump-test-db : Use  mongorestore  with  --nsFrom  and  --nsTo  to restore (with database name change) from the\narchive: Include additional options as necessary, such as to specify\nthe uri or host, username, password and authentication\ndatabase. To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongodump  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,\n --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongodump  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets environment variables in the  bash  shell: The syntax for setting environment variables in other shells is\ndifferent. For more information, see the documentation for your shell. To verify the environment variables are set, use this command: After you set the environment variables, run the following example to\nconnect to a MongoDB Atlas cluster: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead. To authenticate with a different database than the one being dumped, you\nmust specify  authSource  in the MongoDB URI. In this example: The username  myuser  and password  mypassword  is used. This user\nhas read access to  testdb . The  admin  database is used to authenticate the user. The  testdb  database is being dumped.",
            "code": [
                {
                    "lang": "shell",
                    "value": "error parsing uri: lookup <HOSTNAME> on 127.0.0.53:53: cannot unmarshal DNS message"
                },
                {
                    "lang": "sh",
                    "value": "mongodump <options> <connection-string>"
                },
                {
                    "lang": "sh",
                    "value": "mongodump"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongodb0.example.com:27017\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"mongodb0.example.com:27017\"  [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"mongodb0.example.com\" --port=27017 [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName&readPreference=secondary\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName&readPreference=secondary&readPreferenceTags=region:east\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017\" --readPreference=secondary [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017\" --readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ]}' [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongos0.example.com:27017\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"mongos0.example.com:27017\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongos0.example.com:27017/?readPreference=secondary\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --uri=\"mongodb://mongos0.example.com:27017/?readPreference=secondary&readPreferenceTags=region:east\" [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"mongos0.example.com:27017\" --readPreference=secondary [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=\"mongos0.example.com:27017\" --readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ]}' [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongodump mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongodump --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>"
                },
                {
                    "lang": "sh",
                    "value": "mongodump -d=test -c=records -q='{ \"a\": { \"$gte\": 3 }, \"date\": { \"$lt\": { \"$date\": \"2016-01-01T00:00:00.000Z\" } } }'"
                },
                {
                    "lang": "sh",
                    "value": "mongodump -d=sample_mflix -c=movies -q='{ \"year\": { \"$regex\": \"20\" } }'"
                },
                {
                    "lang": "sh",
                    "value": "--readPreference=secondary"
                },
                {
                    "lang": "sh",
                    "value": "--readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ], maxStalenessSeconds: 120}'"
                },
                {
                    "lang": "javascript",
                    "value": "mongodump --archive=<file>"
                },
                {
                    "lang": "javascript",
                    "value": "mongodump --archive"
                },
                {
                    "lang": "sh",
                    "value": "mongodump  --db=test --collection=records"
                },
                {
                    "lang": "sh",
                    "value": "mongodump  --db=test --excludeCollection=users --excludeCollection=salaries"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --host=mongodb1.example.net --port=37017 --username=user --authenticationDatabase=admin --out=/opt/backup/mongodump-2011-10-24"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive=test.20150715.archive --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive --db=test --port=27017 | mongorestore --archive --port=27018"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --gzip --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive=test.20150715.gz --gzip --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive --db=test | mongorestore --archive  --nsFrom=\"test.*\" --nsTo=\"examples.*\""
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive=\"mongodump-test-db\" --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --archive=\"mongodump-test-db\" --nsFrom=\"test.*\" --nsTo=\"examples.*\""
                },
                {
                    "lang": "none",
                    "value": "mongodump 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongodump 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongodump 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongodump 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                },
                {
                    "lang": "none",
                    "value": "mongodump 'mongodb+srv://myuser:mypassword@cluster0.example.com/?authSource=admin' --db testdb"
                }
            ],
            "preview": "Returns information on the options and use of mongodump.",
            "tags": null,
            "facets": {
                "programming_language": [
                    "shell"
                ],
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongorestore",
            "title": "mongorestore",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Additional Considerations for Ubuntu 18.04",
                "Installation",
                "Syntax",
                "Behavior",
                "Restore to Matching Server Version",
                "Insert Only",
                "Rebuild Indexes",
                "Exclude system.profile Collection",
                "FIPS",
                "Write Concern",
                "Time Series Collections",
                "Using mongorestore on Atlas Free and Shared Tier Clusters",
                "Required Access",
                "Usage in Backup Strategy",
                "Standalones/Replica Sets",
                "Sharded Clusters",
                "Options",
                "Examples",
                "Restore with Access Control",
                "Restore a Collection",
                "Restore a Queryable Encryption Enabled Collection",
                "Restore Collections Using Wild Cards",
                "Change Collection Namespaces during Restore",
                "Copy/Clone a Database",
                "Restore from an Archive File",
                "Restore a Database from an Archive File",
                "Restore from Compressed Data",
                "Restore a Database from Standard Input",
                "Restore a Time Series Collection",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials"
            ],
            "paragraphs": "The  mongorestore  program loads data from either a binary\ndatabase dump created by  mongodump  or the standard input\ninto a  mongod  or  mongos  instance. MongoDB doesn't support running multiple  mongorestore  programs concurrently\nfor the same collection. Run  mongorestore  from the system command line, not the  mongo  shell. mongodump , which provides the corresponding\nbinary data export capability. You can use  mongorestore  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . This documentation is for version  100.9.0  of  mongorestore . mongorestore  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongorestore  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongorestore  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 Ubuntu 18.04 may use a non-standard DNS resolver. When you use a\nnon-standard DNS resolver,  mongorestore  returns an error message like: To resolve the problem, edit  /etc/resolv.conf  to point to a\ndifferent DNS resolver. The  mongorestore  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongorestore . The  mongorestore  command has the following syntax: For example, to restore from a  dump  directory to a local\n mongod  instance running on port  27017 : As  mongorestore  restores from the  dump/  directory,\nit creates the database and collections as needed and logs its progress: You can also restore a specific collection or collections from the\n dump/  directory. For example, the following operation restores a\nsingle collection from corresponding data files in the  dump/ \ndirectory: If the  dump/  directory does not contain the corresponding data file\nfor the specified namespace, no data will be restored. For example, the\nfollowing specifies a collection namespace that does not have a\ncorresponding data in the  dump/  directory: The  mongorestore  outputs the following messages: For more examples, see  Examples . For more information on the options and arguments, see\n Options . Run  mongorestore  from the system command line, not the  mongo  shell. When using  mongorestore  to load data files created by\n mongodump , the MongoDB versions of your source and\ndestination deployments must be either: For example, if your dump was created from a MongoDB deployment running\nversion  4.4 , the MongoDB deployment you restore to must also run\nversion  4.4  or have its FCV set to  4.4 . To change your feature compatibility version, see\n setFeatureCompatibilityVersion . In addition, ensure that you are using the same version of\n mongorestore  to load the data files as the version of\n mongodump  that you used to create them. For example, if\nyou used  mongodump  version  100.9.0  to create the\ndump, use  mongorestore  version  100.9.0  to restore\nit. The same major version. The same feature compatibility version. You can restore the BSON files generated from  mongodump \ninto MongoDB deployments running the same or newer version\nas the source deployment. This guarantee does not apply to metadata, archive, or oplog replay\nfiles. If you try to restore these files using different\nsource and destination deployment versions, the  mongorestore \nprocess could result in failure, silent failure, or corrupted\nmetadata. mongorestore  can create a new database or add data to an\nexisting database. However,  mongorestore  performs inserts\nonly and does not perform updates. That is, if restoring documents to\nan existing database and collection and existing documents have the\nsame value  _id  field as the to-be-restored documents,\n mongorestore  will  not  overwrite those documents. mongorestore  recreates indexes recorded by\n mongodump  after restoring data. For MongoDB installations with  featureCompatibilityVersion  (fCV)\nset to  \"4.0\"  or earlier, creating indexes will\n error if an index key in an existing document exceeds the\nlimit . To avoid this issue, consider using hashed indexes or indexing a\ncomputed value instead. If you want to resolve the index issue after\nrestoring the data, you can disable the default index key length\nvalidation on the target database by setting the  mongod \ninstance's  failIndexKeyTooLong  parameter to false. mongorestore  does not restore the  system.profile  collection data. mongorestore  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . If you specify write concern in both the\n --writeConcern  option and the\n --uri  connection string option, the\n --writeConcern  value overrides\nthe write concern specified in the URI string. Starting in MongoDB 5.0, you can use  mongorestore  to restore\n timeseries collections .\nFor details, see  Restore a Time Series Collection . On free ( M0 ) and shared ( M2  and  M5 ) tier Atlas clusters, the\nfollowing limitations apply: You can't run  mongorestore  on the  admin  database. By default,\n mongorestore  skips this database. If you use the  --db  option to set the destination database to\n admin , the program returns an error. You can't use the following options with the  mongorestore  program: --restoreDbUsersAndRoles --oplogReplay --preserveUUID To restore data to a MongoDB deployment that has  access control  enabled, the  restore  role provides\nthe necessary privileges to restore data from backups  if  the data does\nnot include  system.profile \ncollection data and you run  mongorestore  without the\n --oplogReplay  option. If the backup data includes  system.profile  collection data or you run\n mongorestore  with the\n --oplogReplay  option, you need\nadditional privileges: system.profile If the backup data includes  system.profile  collection data and the target\ndatabase does not contain the  system.profile  collection,\n mongorestore  attempts to create the collection\neven though the program does not actually restore\n system.profile  documents. As such, the user requires\nadditional privileges to perform\n createCollection  and\n convertToCapped  actions on the\n system.profile \ncollection for a database. Both the built-in roles  dbAdmin  and\n dbAdminAnyDatabase  provide the additional\nprivileges. --oplogReplay To run with  --oplogReplay , create a  user-defined role  that has  anyAction \non  anyResource . Grant only to users who must run  mongorestore \nwith  --oplogReplay . For an overview of  mongorestore  usage as part of a\nbackup and recovery strategy, see\n Back Up and Restore with MongoDB Tools . mongodump  and  mongorestore \n cannot  be part of a backup strategy for 4.2+ sharded clusters\nthat have sharded transactions in progress, as backups created with\n mongodump   do not maintain  the atomicity guarantees\nof transactions across shards. For 4.2+ sharded clusters with in-progress sharded transactions, use\none of the following coordinated backup and restore processes which\n do maintain  the atomicity guarantees of transactions across shards: MongoDB Atlas , MongoDB Cloud Manager , or MongoDB Ops Manager . Returns information on the options and use of  mongorestore . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongorestore  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: output from  database commands replication activity connection accepted events connection closed events Returns the  mongorestore  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongorestore : This is the recommended way to specify a password to  mongorestore ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongorestore , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongorestore , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongorestore  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongorestore  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: When specifying the replica set list format,  mongorestore  always connects to\nthe  primary . You can also connect to any single member of the replica set by specifying\nthe host and port of only that member: If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongorestore  will\nredact the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongorestore  will prompt for a passphrase. See\n TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongorestore  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password=\"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified  --username  has been created.\nSee  Authentication Database . If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongorestore  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongorestore  adds support\nfor the  MONGODB-AWS  authentication mechanism when connecting\nto a  MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Specifies the destination database for  mongorestore  to restore data\n into  when restoring from a BSON file. If the database does not\nexist,  mongorestore  creates the database. For example, the following\nexample restores the  salaries  collection into the  reporting  database. If you do not specify  --db ,  mongorestore  reads the database name\nfrom the data files. The use of  --db  and  --collection  options are\ndeprecated when restoring from a directory or an archive file.\nInstead, to restore from an archive or a directory, see\n --nsInclude  instead. Alternatively, you can also specify the database directly in the\n URI connection string . Providing a connection\nstring while also using  --db  and specifying conflicting\ninformation will result in an error. Specifies the name of the destination collection for  mongorestore  to\nrestore data  into  when restoring from a BSON file. If\nyou do not specify  --collection ,  mongorestore  takes\nthe collection name from the input filename. If the input file has an\nextension, MongoDB omits the extension of the file from the collection\nname. The use of  --db  and  --collection  options are\ndeprecated when restoring from a directory or an archive file.\nInstead, to restore from an archive or a directory, see\n --nsInclude  instead. Specifies a  namespace  pattern (e.g.  \"test.myCollection\" ,\n \"reporting.*\" ,  \"dept*.bar\" ) to  exclude  the matching\nnamespaces from the restore. In the pattern, you can use asterisks\n *  as  wild cards . For an example of the wildcard pattern, see\n Restore Collections Using Wild Cards . You can specify  --nsExclude  multiple times to exclude multiple namespace\npatterns. Specifies a  namespace  pattern (e.g.  \"test.myCollection\" ,\n \"reporting.*\" ,  \"dept*.bar\" ) to restore only the namespaces\nthat match the pattern. In the pattern, you can use asterisks  * \nas  wild cards . For an example of the wildcard pattern, see\n Restore Collections Using Wild Cards . You can specify  --nsInclude  multiple times to include multiple namespace\npatterns. If source directory or file (i.e. the directory/file from which you\nare restoring the data) does not contain data files that match the\nnamespace pattern, no data will be restored. For collection names that contain non-ascii characters,\n mongodump  outputs the corresponding filenames with\npercent-encoded names. However, to restore these collections, do not\nuse the encoded names. Instead, use the namespace with the non-ascii\ncharacters. For example, if the dump directory contains\n dump/test/caf%C3%A9s.bson , specify  --nsInclude \"test.caf\u00e9s\" . Use with  --nsTo  to rename a  namespace  during the\nrestore operation.  --nsFrom  specifies the collection in the\ndump file, while  --nsTo  specifies the name that should be\nused in the restored database. --nsFrom  accepts a  namespace pattern  as its argument. The namespace\npattern permits  --nsFrom  to refer to any namespace that matches the\nspecified pattern.  mongorestore  matches the smallest valid occurence\nof the namespace pattern. For simple replacements, use asterisks ( * ) as wild cards.\nEscape all literal asterisks and backslashes with a backslash.\nReplacements correspond linearly to matches: each asterisk in\n --nsFrom  must correspond to an asterisk in  --nsTo , and the\nfirst asterisk in  --nsFrom  matches the first asterisk in  nsTo . For more complex replacements, use dollar signs to delimit a \"wild\ncard\" variable to use in the replacement.\n Change Collection Namespaces during Restore  provides an example of complex\nreplacements with dollar sign-delimited wild cards. Unlike replacements with asterisks, replacements with dollar\nsign-delimited wild cards do  not  need to be linear. Use with  --nsFrom  to rename a  namespace  during the\nrestore operation.  --nsTo  specifies the new collection\nname to use in the restored database, while\n --nsFrom  specifies the name in the dump file. --nsTo  accepts a  namespace pattern  as its argument. The namespace\npattern permits  --nsTo  to refer to any namespace that matches the\nspecified pattern.  mongorestore  matches the smallest valid occurence\nof the namespace pattern. For simple replacements, use asterisks ( * ) as wild cards.\nEscape all literal asterisks and backslashes with a backslash.\nReplacements correspond linearly to matches: each asterisk in\n --nsFrom  must correspond to an asterisk in  --nsTo , and the\nfirst asterisk in  --nsFrom  matches the first asterisk in  nsTo . For more complex replacements, use dollar signs to delimit a \"wild\ncard\" variable to use in the replacement.\n Change Collection Namespaces during Restore  provides an example of complex\nreplacements with dollar sign-delimited wild cards. Unlike replacements with asterisks, replacements with dollar\nsign-delimited wild cards do  not  need to be linear. Forces  mongorestore  to validate all requests from clients\nupon receipt to ensure that clients never insert invalid documents into\nthe database. For objects with a high degree of sub-document nesting,\n --objcheck  can have a small impact on performance. Before restoring the collections from the dumped backup, drops the\ncollections from the target database.  --drop  does not drop\ncollections that are not in the backup. When the restore includes the  admin  database,  mongorestore  with\n --drop  removes all user credentials and replaces them with the\nusers defined in the dump file. Therefore, in systems with\n authorization  enabled,  mongorestore  must be able\nto authenticate to an existing user  and  to a user defined in the\ndump file. If  mongorestore  can't authenticate to a user defined in the\ndump file, the restoration process will fail, leaving an empty\ndatabase. If a collection is dropped and recreated as part of the restore, the\nnewly created collection has a different UUID unless\n --drop  is used with\n --preserveUUID . Restored collections use the UUID from the restore data instead of\ncreating a new UUID for collections that are dropped and recreated\nas part of the restore. To use  --preserveUUID , you\nmust also include the  --drop  option. Runs  mongorestore  without actually importing any data, returning the\n mongorestore  summary information. Use with  --verbose  to produce\nmore detailed summary information. After restoring the database dump, replays the  oplog  entries\nfrom a bson file.\nWhen used in conjunction with  mongodump --oplog ,\n mongorestore --oplogReplay \nrestores the database to the point-in-time backup captured with the\n mongodump --oplog  command. mongorestore  searches for any valid source  for the bson file\nin the following locations: If there is an  oplog.bson  file at the top level of the dump\ndirectory  and  a path specified by  --oplogFile ,\n mongorestore  returns an error. If there is an  oplog.bson  file at the top level of the dump directory,\n mongorestore  restores that file as the oplog. If there are also bson\nfiles in the  dump/local  directory,  mongorestore  restores them like\nnormal collections. If you specify an oplog file using  --oplogFile ,\n mongorestore  restores that file as the oplog. If there are also bson\nfiles in the  dump/local  directory,  mongorestore  restores them like\nnormal collections. The following message in the oplog replay output shows the number of\ninserts before the oplog replay. It does not include inserts\nperformed during the replay. For an example of  --oplogReplay , see  Restore Point in Time Oplog Backup . The top level of the dump directory, as in the case of a dump created\nwith  mongodump --oplog . The path specified by  --oplogFile . <dump-directory>/local/oplog.rs.bson , as in the case of a dump\nof the  oplog.rs  collection in the  local  database\non a  mongod  that is a member of a replica set. When using  mongorestore  with  --oplogReplay  to restore\na replica set, you must\nrestore a full dump of a  replica set  member created\nusing  mongodump --oplog .\n mongorestore  with  --oplogReplay  fails if you use any of\nthe following options to limit the data to be restored: --db --collection --nsInclude --nsExclude mongorestore Required Access mongodump --oplog Prevents  mongorestore  from applying  oplog  entries\nwith timestamp newer than or equal to  <timestamp> . Specify\n <timestamp>  values in the form of  <time_t>:<ordinal> , where\n <time_t>  is the seconds since the UNIX epoch, and  <ordinal> \nrepresents a counter of operations in the oplog that occurred in the\nspecified second. You must use  --oplogLimit  in conjunction with the\n --oplogReplay  option. Specifies the path to the oplog file containing oplog data for the\nrestore. Use with  --oplogReplay . If you specify  --oplogFile  and there is an  oplog.bson \nfile at the top level of the dump directory,  mongorestore  returns an\nerror. Removes any invalid index options specified in the corresponding\n mongodump  output, and rewrites any legacy index key\nvalues to use valid values. Without the  --convertLegacyIndexes  option specified, the presence\nof invalid index options or legacy index key values could cause the\nindex build to fail. If the  --noIndexRestore \noption is specified to  mongorestore , the\n --convertLegacyIndexes  option is ignored. Invalid index options  are any options specified to an index that\nare not listed as a  valid field  for\nthe  createIndexes  command. For example,  name  and\n collation  are valid, but an arbitrary  custom_field  is not.\nWith  --convertLegacyIndexes  specified, any invalid index\noptions found are dropped. Legacy index key values  are any values for\n index type  that are\n no longer supported . For example,\n 1  and  -1  are valid index key values, but  0  or an empty\nstring are legacy values. With  --convertLegacyIndexes \nspecified, any legacy index key values found are rewritten as\n 1 . Non-empty string values are not replaced. Prevents  mongorestore  from upgrading the index to the latest\nversion during the restoration process. Prevents  mongorestore  from restoring and building indexes as\nspecified in the corresponding  mongodump  output. Creates all  hashed indexes  on dotted fields as\nsingle field ascending indexes on the destination database. Prevents  mongorestore  from setting the collection options,\nsuch as those specified by the  collMod   database command , on restored collections. Restore user and role definitions for the given database. See\n system.roles Collection \nand\n system.users Collection \nfor more information. The  --restoreDbUsersAndRoles  option cannot be used if\nspecifying the  admin  database to the  --db  option, and attempting to do so will result\nin an error. Restoring the  admin  database by specifying\n --db admin  to\n mongorestore  already restores all users and roles. Default : majority Specifies the  write concern  for each write operation that  mongorestore \nperforms. Specify the write concern as a document with  w options : If the write concern is also included in the  --uri\nconnection string , the command-line\n --writeConcern  overrides the write concern specified in\nthe URI string. Default : false If specified,  mongorestore  inserts the documents in the\norder of their appearance in the input source. That is, both the\nbulk write batch order and document order within the batches are\nmaintained. Specifying  --maintainInsertionOrder  also enables\n --stopOnError  and sets\n numInsertionWorkersPerCollection  to 1. If unspecified,  mongorestore  may perform the insertions in\nan arbitrary order. Default : 4 Number of collections  mongorestore  should restore\nin parallel. If you specify  -j  when restoring a  single  collection,  -j \nmaps to the  --numInsertionWorkersPerCollection  option rather than\n --numParallelCollections . Default : 1 Specifies the number of insertion workers to run concurrently per collection. For large imports, increasing the number of insertion workers\nmay increase the speed of the import. Forces  mongorestore  to halt the restore when it encounters an\nerror. By default,  mongorestore  continues when it encounters\nduplicate key and document validation errors. To ensure that the\nprogram stops on these errors, specify\n --stopOnError . Enables  mongorestore  to bypass  document validation \nduring the operation. This lets you insert documents that do not\nmeet the validation requirements. This option is required if you are\nrestoring a Queryable Encryption enabled collection. Restores from compressed files or data stream created by\n mongodump --gzip To restore from a dump directory that contains compressed files, run\n mongorestore  with the  --gzip  option. To restore from a compressed archive file, run  mongorestore  with\nboth the  --gzip  and the  --archive  options. You can use the  --nsFrom  and\n --nsTo  options with the  --gzip  option to\nchange the namespace of the collection that you are restoring. Restores from the specified archive file or, if the file is\nunspecified, from the standard input ( stdin ): To restore from an archive file, run  mongorestore  with\nthe  --archive  option and the archive filename To restore from the standard input, run  mongorestore \nwith the  --archive  option but  omit  the filename. You cannot use the  --archive  option with the  --dir \noption. If you use the  --archive  option with the  <path> \nparameter,  mongorestore  ignores  <path>  parameter. mongorestore  still supports the positional  -  parameter to\nrestore a  single  collection from the standard input. The directory path or BSON file name from which to restore data. You cannot specify both the  <path>  argument and the  --dir \noption, which also specifies the dump directory, to  mongorestore . Specifies the dump directory. You cannot specify both the  --dir  option and the  <path> \nargument, which also specifies the dump directory, to  mongorestore . You cannot use the  --archive  option with the  --dir  option. Run  mongorestore  from the system command line, not the  mongo  shell. In the following example,  mongorestore  restores from\n /opt/backup/mongodump-2011-10-24  to a  mongod \ninstance running on port  27017  on the host\n mongodb1.example.net . The  --uri \nstring omits the user's password to have  mongorestore \nprompt for the password. Alternatively, you can specify the host, port, username, and\nauthentication database using  --host ,\n --port ,  --username , and  --authenticationDatabase .  Omit  --password  to have  mongorestore  prompt for the password: To restore a specific collection, use  --nsInclude , passing in the full namespace\n( <database>.<collection> ) of the collection. For example, the following restores the collection named\n purchaseorders  in the database  test  from the corresponding\nfiles located in the  dump/  directory. The  mongorestore  outputs the results, including the\nnumber of documents restored: If the  dump/  directory does not contain the corresponding data\nfiles for the specified namespace, no data will be restored: Alternatively, you can restore a specific collection using the\n --db ,  --collection , and a  .bson  file: Queryable Encryption adds a  __safeContent__  field to documents in an encrypted\ncollection and blocks insert and update operations on those\ndocuments unless document validation is disabled. To restore a\ncollection that includes encrypted fields, use\n --bypassDocumentValidation . mongodump  exports a Queryable Encryption enabled collection's\nassociated metadata collections. Running  mongorestore  restores these collections as well. --nsInclude  and\n --nsExclude  support specifying the\n namespaces  you wish to include or exclude from a\nrestore operation using asterisks as  wild cards . The following example restores the documents in the  dump/ \nsub-directory of the current directory that match the specified\nnamespace pattern. The  --nsInclude \nstatement specifies to only restore documents in the  transactions \ndatabase while  --nsExclude \ninstructs  mongorestore  to exclude collections whose\nnames end with  _dev .  mongorestore  restores data to\nthe  mongod  instance running on the localhost interface\non port  27017 . To change the namespace of the collection that you are restoring, use the\n --nsFrom  and  --nsTo \noptions. The  --nsFrom  and  --nsTo  options support using asterisks as wild cards  and \nsupport using dollar signs to delimit \"wild card\" variables to use in\nthe replacement. Consider a database  data  that you have exported to a  dump/ \ndirectory using  mongodump . The  data  database\ncontains the following collections: Using  --nsFrom  and  --nsTo , you can restore the data into different\nnamespaces. The following operation sales_customer1 sales_customer2 sales_customer3 users_customer1 users_customer2 users_customer3 restores the  sales_<customerName>  collections in the  data \ndatabase to  sales  collections in the  <customerName>  database,\nand restores the  users_<customerName>  collections to  users \ncollections in the  <customerName>  database. Starting in version 4.2, MongoDB removes the deprecated  copydb \ncommand and  clone  command. As an alternative, users can use  mongodump  and\n mongorestore  (with the  mongorestore  options\n --nsFrom  and  --nsTo ). For example, to copy the  test  database from a local instance\nrunning on the default port 27017 to the  examples  database on the\nsame instance, you can: Alternatively, instead of using an archive file, you can\n mongodump  the  test  database to the standard\noutput stream and pipe into  mongorestore : Use  mongodump  to  dump the  test  database to\nan archive  mongodump-test-db : Use  mongorestore  with  --nsFrom  and  --nsTo  to restore (with database name change) from the\narchive: Include additional options as necessary, such as to specify\nthe uri or host, username, password and authentication\ndatabase. To restore from an archive file, run  mongorestore  with the new\n --archive  option and the archive filename. To restore from an archive file, run  mongorestore  with the new\n --archive  option and the archive filename. For example, the\nfollowing operation restores the  test  database from the file\n test.20150715.archive . mongorestore  can restore from compressed files or\ncompressed archive files created by  mongodump . To restore from a dump directory that contains compressed files, run\n mongorestore  with the  --gzip  option. For example, the following operation restores the  test \ndatabase from the compressed files located in the default  dump \ndirectory: To restore from a compressed archive file, run\n mongorestore  with the  --gzip  option and the  --archive \noption. For example, the following operation restores the  test \ndatabase from the archive file  test.20150715.gz . To change the namespace of the collection that you are restoring, use the\n --nsFrom  and  --nsTo \noptions with the  --gzip  option. To restore from the standard input, run  mongorestore \nwith the  --archive  option but  omit \nthe filename. For example: Use  mongosh  to create a time series collection. This example\nuses the default  test  database: Insert time series documents into the collection: From your terminal, use  mongodump  to export the time series collection\nto the  dump/test  directory. This commands adds\n system.buckets.weather.bson  and  weather.metadata.json  to\nthe directory: Use  mongorestore  to restore the data to the  mongorestore.weather \nnamespace: You cannot restore the  system.buckets.weather.bson  file\nby itself. Attempting to do so results in an error. To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongorestore  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongorestore  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Syntax for setting environment variables in other shells will be\ndifferent. Consult the documentation for your platform for more\ninformation. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead.",
            "code": [
                {
                    "lang": "shell",
                    "value": "error parsing uri: lookup <HOSTNAME> on 127.0.0.53:53: cannot unmarshal DNS message"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore <options> <connection-string> <directory or file to restore>"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore  dump/"
                },
                {
                    "lang": "sh",
                    "value": "2019-07-08T14:37:38.942-0400 preparing collections to restore from\n2019-07-08T14:37:38.944-0400 reading metadata for test.bakesales from dump/test/bakesales.metadata.json\n2019-07-08T14:37:38.944-0400 reading metadata for test.salaries from dump/test/salaries.metadata.json\n2019-07-08T14:37:38.976-0400 restoring test.salaries from dump/test/salaries.bson\n2019-07-08T14:37:38.985-0400 no indexes to restore\n2019-07-08T14:37:38.985-0400 finished restoring test.salaries (10 documents, 0 failures)\n2019-07-08T14:37:39.009-0400 restoring test.bakesales from dump/test/bakesales.bson\n2019-07-08T14:37:39.011-0400 restoring indexes for collection test.bakesales from metadata\n2019-07-08T14:37:39.118-0400 finished restoring test.bakesales (21 documents, 0 failures)\n2019-07-08T14:37:39.118-0400 restoring users from dump/admin/system.users.bson\n2019-07-08T14:37:39.163-0400 restoring roles from dump/admin/system.roles.bson\n2019-07-08T14:37:39.249-0400 31 document(s) restored successfully. 0 document(s) failed to restore."
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --nsInclude=test.purchaseorders dump/"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --nsInclude=foo.bar dump/"
                },
                {
                    "lang": "sh",
                    "value": "2019-07-08T14:38:15.142-0400 preparing collections to restore from\n2019-07-08T14:38:15.142-0400 0 document(s) restored successfully. 0 document(s) failed to restore."
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongorestore mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongorestore --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --db=reporting dump/test/salaries.bson"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --db=reporting --collection=employeesalaries dump/test/salaries.bson"
                },
                {
                    "lang": "sh",
                    "value": "0 document(s) restored successfully. 0 document(s) failed to\nrestore."
                },
                {
                    "lang": "sh",
                    "value": "--writeConcern=\"{w:'majority'}\""
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --uri=\"mongodb://user@mongodb1.example.net:27017/?authSource=admin\" /opt/backup/mongodump-2011-10-24"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --host=mongodb1.example.net --port=27017 --username=user --authenticationDatabase=admin /opt/backup/mongodump-2011-10-24"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --nsInclude=test.purchaseorders dump/"
                },
                {
                    "lang": "sh",
                    "value": "2019-06-28T19:23:42.858-0400   preparing collections to restore from\n2019-06-28T19:23:42.858-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json\n2019-06-28T19:23:42.893-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson\n2019-06-28T19:23:42.896-0400   restoring indexes for collection test.purchaseorders from metadata\n2019-06-28T19:23:42.991-0400   finished restoring test.purchaseorders (6 documents, 0 failures)\n2019-06-28T19:23:42.991-0400   6 document(s) restored successfully. 0 document(s) failed to restore."
                },
                {
                    "lang": "sh",
                    "value": "2019-07-08T14:39:57.121-0400. preparing collections to restore from\n2019-07-08T14:39:57.121-0400  0 document(s) restored successfully. 0 document(s) failed to restore."
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --db=test --collection=purchaseorders dump/test/purchaseorders.bson"
                },
                {
                    "lang": "sh",
                    "value": "2019-06-30T12:21:44.777-0400   checking for collection data in dump/test/purchaseorders.bson\n2019-06-30T12:21:44.779-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json\n2019-06-30T12:21:44.813-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson\n2019-06-30T12:21:44.881-0400   restoring indexes for collection test.purchaseorders from metadata\n2019-06-30T12:21:44.987-0400   finished restoring test.purchaseorders (6 documents, 0 failures)\n2019-06-30T12:21:44.987-0400   6 document(s) restored successfully. 0 document(s) failed to restore."
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --db=test --collection=personaldata dump/test/personaldata.bson --bypassDocumentValidation"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --nsInclude='transactions.*' --nsExclude='transactions.*_dev' dump/"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --nsInclude=\"data.*\" --nsFrom=\"data.$prefix$_$customer$\" --nsTo=\"$customer$.$prefix$\""
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive --db=test | mongorestore --archive  --nsFrom=\"test.*\" --nsTo=\"examples.*\""
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive=\"mongodump-test-db\" --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --archive=\"mongodump-test-db\" --nsFrom=\"test.*\" --nsTo=\"examples.*\""
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --archive=test.20150715.archive"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --archive=test.20150715.archive  --nsInclude=\"test.*\""
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --gzip  --nsInclude=\"test.*\" dump/"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --gzip --archive=test.20150715.gz --nsInclude=\"test.*\""
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --gzip --nsFrom=\"data.$prefix$_$customer$\" --nsTo=\"$customer$.$prefix$\""
                },
                {
                    "lang": "sh",
                    "value": "mongodump --archive --db=test --port=27017 | mongorestore --archive --port=27018"
                },
                {
                    "lang": "javascript",
                    "value": "db.createCollection(\n   \"weather\",\n   {\n      timeseries: {\n         timeField: \"timestamp\",\n         metaField: \"metadata\",\n         granularity: \"hours\"\n      }\n   }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.weather.insertMany( [\n   {\n      \"metadata\": { \"sensorId\": 5578, \"type\": \"temperature\" },\n      \"timestamp\": ISODate(\"2021-05-18T00:00:00.000Z\"),\n      \"temp\": 12\n   },\n   {\n      \"metadata\": { \"sensorId\": 5578, \"type\": \"temperature\" },\n      \"timestamp\": ISODate(\"2021-05-18T04:00:00.000Z\"),\n      \"temp\": 11\n   },\n   {\n      \"metadata\": { \"sensorId\": 5578, \"type\": \"temperature\" },\n      \"timestamp\": ISODate(\"2021-05-18T08:00:00.000Z\"),\n      \"temp\": 11\n   }\n] )"
                },
                {
                    "lang": "sh",
                    "value": "mongodump --db=test"
                },
                {
                    "lang": "sh",
                    "value": "mongorestore --host localhost --port 27017 --nsFrom=\"test.*\" --nsTo=\"mongorestore.*\" dump/"
                },
                {
                    "lang": "none",
                    "value": "mongorestore 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongorestore 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongorestore 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongorestore 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongorestore.",
            "tags": null,
            "facets": {
                "programming_language": [
                    "shell"
                ],
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongostat",
            "title": "mongostat",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Syntax",
                "Required Access",
                "Behavior",
                "FIPS",
                "Options",
                "Fields",
                "Examples",
                "Specify mongostat Collection Period and Frequency",
                "Add Fields to mongostat Output",
                "Specify mongostat Output Fields",
                "View Rate of Change for a Field with .rate()",
                "View Field Changes with .diff()",
                "View Statistics for a Replica Set or Sharded Cluster",
                "View Statistics in an Interactive Interface",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials",
                "Additional Information"
            ],
            "paragraphs": "The  mongostat  utility provides a quick overview of the\nstatus of a currently running  mongod  or\n mongos  instance.  Use  mongostat  to help\nidentify system bottlenecks. mongostat  is functionally\nsimilar to the UNIX/Linux file system utility  vmstat , but provides\ndata regarding  mongod  and  mongos \ninstances. Run  mongostat  from the system command line, not the  mongo  shell. This documentation is for version  100.9.0  of  mongostat . Starting with MongoDB 4.4,  mongostat  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongostat  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongostat , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongostat MongoDB 4.0 mongostat mongostat  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongostat  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongostat  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  mongostat  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongostat . The  mongostat  command has the following form: Run  mongostat  from the system command line, not the  mongo  shell. In order to connect to a  mongod  that enforces authorization\nwith the  --auth  option, specify the\n --username  and  --password  options, and the connecting user must have the\n serverStatus  privilege action on the cluster resources. The built-in role  clusterMonitor  provides this privilege as\nwell as other privileges. To create a role with just the privilege to\nrun  mongostat , see  Create a Role to Run mongostat . mongostat  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . Returns information on the options and use of  mongostat . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Returns the  mongostat  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongostat : This is the recommended way to specify a password to  mongostat ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongostat , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongostat , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongostat  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongostat  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, you can specify the set member or\nmembers to report on, as in the following (see also the\n --discover  flag): If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the\n --sslPEMKeyPassword  option\nonly if the certificate-key file is encrypted. In all cases, the\n mongostat  will redact the password from all logging and\nreporting output. If the private key in the PEM file is encrypted and you do not\nspecify the  --sslPEMKeyPassword  option, the  mongostat  will prompt\nfor a passphrase. See  TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongostat  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB\ndatabase that uses authentication. Use in conjunction with the\n --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB\ndatabase that uses authentication. Use in conjunction with the\n --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username  option without\n --password  or specify an empty\nstring as the  --password  value, as\nin  --password=\"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified\n --username  has been created. See\n Authentication Database . --authenticationDatabase  is required for  mongod \nand  mongos  instances that use  Authentication . If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongostat  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongostat  adds support for\nthe  MONGODB-AWS  authentication mechanism when connecting to a\n MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Default : true When  true ,  mongostat  formats dates and quantity values for\neasier reading, as in the following sample output: When  false ,  mongostat  returns the raw data, as in the following\nsample output: When output fields are specified with  -o , only the\nspecified fields are included in the  mongostat  output. Use dot notation to specify\n serverStatus fields , as in\n metrics.document.inserted . A custom field name can include spaces. If you include a space, do\nnot put additional quotes around the field name. To specify a custom\nname for a field, use  <field>=<customName> , as in: -o  supports the following methods to modify the information\nreturned for a given serverStatus field: mongostat  supports specifying  either   -o  or  -O : you cannot include\nboth options. See  Specify  mongostat  Output Fields  for an example of\n -o . Use  .rate()  to view the rate per second at which a\nserverStatus field is changing from  mongostat  call to\ncall. View Rate of Change for a Field with  .rate()  illustrates how to use\n mongostat  with  -o  and the\n .rate()  method. Use  .diff()  to view how much a serverStatus field has\nchanged since the previous  mongostat  call. The\ninterval between calls is specified by  <sleeptime> . View Field Changes with  .diff()  illustrates how to use\n mongostat  with  -o  and the\n .diff()  method. When specified,  mongostat  includes the specified\n serverStatus  fields after the default\n mongostat  output. Use dot notation to specify\n serverStatus fields , as in\n metrics.document.inserted . A custom field name can include spaces. If you include a space, do\nnot put additional quotes around the field name. To specify a custom\nname for a field, use  <field>=<customName> , as in: mongostat  supports specifying  either   -O  or  -o : you cannot include\nboth options. See  Add Fields to  mongostat  Output  for an example of\n -O . Disables the output of column or field names. Controls the number of rows to output. Use in conjunction with\nthe  sleeptime  argument to control the duration of a\n mongostat  operation. Unless  --rowcount  is specified,  mongostat \nwill return an infinite number of rows (e.g. value of  0 .) Discovers and reports on statistics from all members of a  replica set  or  sharded cluster . When connected to any member of a\nreplica set,  --discover  all non- hidden members  of the replica set. When connected to a  mongos ,\n mongostat  will return data from all  shards  in\nthe cluster. If a replica set provides a shard in the sharded cluster,\n mongostat  will report on non-hidden members of that replica\nset. The  mongostat --host  option is not required but\npotentially useful in this case. When running with  --discover ,\n mongostat  respects\n --rowcount . Configures  mongostat  to return all optional  fields . Returns output for  mongostat  in  JSON  format. Display  mongostat  output in an interactive non-scrolling interface\nrather than the default scrolling output. --interactive  is not available with the  --json \noption. See:  View Statistics in an Interactive Interface  for an example of  --interactive . Default : 1 The final  mongostat  argument is the length of time, in seconds, that\n mongostat  waits in between calls. By default  mongostat \nreturns one call every second. mongostat  returns values that reflect the operations\nover a 1 second period. For values of  <sleeptime>  greater\nthan 1,  mongostat  averages data to reflect average\noperations per second. mongostat  returns values that reflect the operations over a\n1 second period. When  mongostat <sleeptime>  has a value\ngreater than 1,  mongostat  averages the statistics to reflect\naverage operations per second. mongostat  outputs the following fields: The number of objects inserted into the database per second. If\nfollowed by an asterisk (e.g.  * ), the datum refers to a\nreplicated operation. The number of query operations per second. The number of update operations per second. The number of delete operations per second. The number of get more (i.e. cursor batch) operations per second. The number of commands per second. On\n secondary  systems,  mongostat  presents two values\nseparated by a pipe character (e.g.  | ), in the form of\n local|replicated  commands. For the  WiredTiger Storage Engine ,  flushes  refers to the number\nof WiredTiger checkpoints triggered between each polling interval. Only for  WiredTiger Storage Engine . The percentage of the WiredTiger\ncache with dirty bytes, calculated by\n wiredTiger.cache.tracked dirty bytes in the cache \n/  wiredTiger.cache.maximum bytes configured . Only for  WiredTiger Storage Engine . The percentage of the WiredTiger\ncache that is in use, calculated by\n wiredTiger.cache.bytes currently in the cache  /\n wiredTiger.cache.maximum bytes configured . The amount of virtual memory in megabytes used by the process at\nthe time of the last  mongostat  call. The amount of resident memory in megabytes used by the process at\nthe time of the last  mongostat  call. The percent of time in a global write lock. Only appears when\n mongostat  runs against pre-3.0 versions of MongoDB\ninstances. The length of the queue of clients waiting to read data from the\nMongoDB instance. The length of the queue of clients waiting to write data from the\nMongoDB instance. The number of active clients performing read operations. The number of active clients performing write operations. The amount of network traffic, in  bytes , received by the MongoDB instance. This includes traffic from  mongostat  itself. The amount of network traffic, in  bytes , sent by the MongoDB instance. This includes traffic from  mongostat  itself. The total number of open connections. The name, if applicable, of the replica set. The replication status of the member. =========  =========================\n Value    Replication Type \n---------  -------------------------\nPRI         primary \nSEC         secondary \nREC        recovering\nUNK        unknown\nRTR        mongos process (\"router\")\nARB         arbiter \n=========  ========================= Run  mongostat  from the system command line, not the  mongo  shell. In the first example,  mongostat  will return data every\nsecond for 20 seconds.  mongostat  collects data from the\n mongod  instance running on the localhost interface on\nport 27017. All of the following invocations produce identical\nbehavior: In the next example,  mongostat  returns data every 5 minutes\n(or 300 seconds) for as long as the program runs.  mongostat \ncollects data from the  mongod  instance running on the\nlocalhost interface on port  27017 . The following\ninvocations produce identical behavior: In the following example,  mongostat  returns data every 5\nminutes for an hour (12 times.)  mongostat  collects data\nfrom the  mongod  instance running on the localhost interface\non port 27017. The following invocations produce identical\nbehavior: -O  allows you to specify fields from the\n serverStatus  output to add to the default\n mongostat  output. If you include a space in your\ncustom filed name, do not put additional quotes around the field name. The following example adds fields to the default\n mongostat  output: The  mongostat  output resembles: The following fields are added to the default output: The  network.numRequests  field has a custom field name,\n\"network requests\". host version network.numRequests -o  specifies the columns\n mongostat  includes in its output. You can specify any\n serverStatus  field as a  mongostat  output\ncolumn. The following example uses custom fields for  mongostat : The  mongostat  output resembles: The counters and corresponding custom field names are: Counter Custom Field Name opcounters.insert.rate Insert Rate opcounters.query.rate Query Rate opcounters.command.rate Command Rate wiredTiger.cache.pages requested from the cache Pages Req metrics.document.inserted Inserted Rate .rate()  enables you to view the rate per second at which a\nnumerical field has changed from one  mongostat  call to the\nnext. For example, you can view the rate at which documents have been\ninserted during an insert operation.  .rate()  can therefore\nhelp you view the performance of your  mongod  instance. The following example reports on the rate of change of the\n metrics.document.inserted   serverStatus  field. The\ninvocation uses  -o 's ability to specify the name of an column\nto label  metrics.document.inserted.rate()  as \"inserted rate\" and\n metrics.document.inserted  as \"inserted\": The output would then resemble: .diff()  returns the difference between the current\n serverStatus  field value and the value from the previous\n mongostat  call. The following example returns statistics on\nthe number of documents being inserted into a collection:  inserted\ndiff  is the difference in the\n metrics.document.inserted  field between subsequent\ncalls, while  inserted  is the value of\n metrics.document.inserted : The output would then resemble: In many cases, using the  --discover  option\nwill help provide a more complete snapshot of the state of an entire\ngroup of machines. If a  mongos  process connected to a\n sharded cluster  is running on port  27017  of the local\nmachine, you can use the following form to return statistics from all\nmembers of the cluster: Use the  --interactive  option to\nview statistics in a non-scrolling  ncurses  -style\ninteractive output. The  --interactive  option lets you highlight specific\nhosts, columns, or fields to view. When combined with  --discover ,\n --interactive  displays statistics for all members of a\nreplica set or sharded cluster, as in the following example: The output for a sharded cluster would then resemble: To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongostat  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongostat  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Syntax for setting environment variables in other shells will be\ndifferent. Consult the documentation for your platform for more\ninformation. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead. For more information about monitoring MongoDB, see\n Monitoring for MongoDB . For more background on other MongoDB status outputs see: For an additional utility that provides MongoDB metrics see\n mongotop . serverStatus replSetGetStatus dbStats collStats",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongostat <options> <connection-string> <polling interval in seconds>"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongostat mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongostat --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "sh",
                    "value": "insert query update delete getmore command dirty used flushes vsize  res qrw arw net_in net_out conn                time\n   991    *0     *0     *0       0     2|0  3.4% 4.5%       0 2.90G 297M 0|0 0|0  12.9m   84.2k    2 Oct  6 09:45:37.478\n   989    *0     *0     *0       0     2|0  3.6% 4.7%       0 2.91G 310M 0|0 0|0  12.9m   84.1k    2 Oct  6 09:45:38.476\n   988    *0     *0     *0       0     1|0  3.7% 4.8%       0 2.92G 323M 0|0 0|0  12.8m   83.8k    2 Oct  6 09:45:39.481\n   976    *0     *0     *0       0     2|0  3.9% 5.0%       0 2.94G 335M 0|0 0|0  12.7m   83.7k    2 Oct  6 09:45:40.476"
                },
                {
                    "lang": "sh",
                    "value": "insert query update delete getmore command dirty used flushes      vsize       res qrw arw   net_in net_out conn                      time\n   992    *0     *0     *0       0     2|0   1.3  2.4       0 2941255680 149946368 0|0 0|0 12913607   84271    2 2016-10-06T09:45:25-04:00\n   989    *0     *0     *0       0     1|0   1.5  2.6       0 2974810112 163577856 0|0 0|0 12873225   84087    2 2016-10-06T09:45:26-04:00\n   996    *0     *0     *0       0     1|0   1.6  2.8       0 2972712960 177209344 0|0 0|0 12955423   84345    2 2016-10-06T09:45:27-04:00\n   987    *0     *0     *0       0     1|0   1.8  2.9       0 2989490176 190840832 0|0 0|0 12861852   84008    2 2016-10-06T09:45:28-04:00"
                },
                {
                    "lang": "sh",
                    "value": "mongostat -o='host=H,time=T,version=MongoDB Version'"
                },
                {
                    "lang": "sh",
                    "value": "mongostat -O=host=H,time=T"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --rowcount=20 1\nmongostat --rowcount=20\nmongostat -n=20 1\nmongostat -n=20"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --rowcount=0 300\nmongostat -n=0 300\nmongostat 300"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --rowcount=12 300\nmongostat -n=12 300"
                },
                {
                    "lang": "sh",
                    "value": "mongostat -O='host,version,network.numRequests=network requests'"
                },
                {
                    "lang": "sh",
                    "value": "insert query update delete getmore command dirty used flushes vsize   res qrw arw net_in net_out conn                time            host version network requests\n    *0    *0     *0     *0       0     2|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   158b   39.4k    2 Oct 11 12:14:45.878 localhost:37017  3.3.14               91\n    *0    *0     *0     *0       0     1|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   157b   39.3k    2 Oct 11 12:14:46.879 localhost:37017  3.3.14               95\n    *0    *0     *0     *0       0     1|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   157b   39.2k    2 Oct 11 12:14:47.884 localhost:37017  3.3.14               99"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --port 27500 -o='host,opcounters.insert.rate()=Insert Rate,opcounters.query.rate()=Query Rate,opcounters.command.rate()=Command Rate,wiredTiger.cache.pages requested from the cache=Pages Req,metrics.document.inserted=inserted rate'"
                },
                {
                    "lang": "sh",
                    "value": "           host Insert Rate Query Rate Command Rate Pages Req Inserted Rate\nlocalhost:27500         180          1            8   2999446          9638\nlocalhost:27500          40          3           12   2999601          9678\nlocalhost:27500         181          2            9   3000207          9859\nlocalhost:27500          39          2           12   3000362          9899\nlocalhost:27500         181          2           11   3000969         10080\nlocalhost:27500          39          2           10   3001124         10120"
                },
                {
                    "lang": "sh",
                    "value": "mongostat -o='host,mem,bits,metrics.document.inserted.rate()=inserted rate,metrics.document.inserted=inserted' --rowcount=5"
                },
                {
                    "lang": "sh",
                    "value": "           host mem.bits inserted rate inserted\nlocalhost:37017       64           501     3455\nlocalhost:37017       64           967    13128\nlocalhost:37017       64           972    22851\nlocalhost:37017       64           214    25000\nlocalhost:37017       64             0    25000"
                },
                {
                    "lang": "sh",
                    "value": "mongostat -o='host,mem.bits,metrics.document.inserted.diff()=inserted diff,metrics.document.inserted=inserted' --rowcount=5"
                },
                {
                    "lang": "sh",
                    "value": "           host mem.bits inserted diff inserted\nlocalhost:27017       64             0    25359\nlocalhost:27017       64            94    25453\nlocalhost:27017       64           938    26391\nlocalhost:27017       64           964    27355\nlocalhost:27017       64           978    28333"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --discover"
                },
                {
                    "lang": "sh",
                    "value": "mongostat --discover --interactive"
                },
                {
                    "lang": "sh",
                    "value": "                  host insert query update delete getmore command dirty used flushes mapped vsize   res faults qrw arw net_in net_out conn set repl                time\nhostname.local:27018     *0    *0     *0     *0       0     1|0  0.0% 0.0%       0        3.25G 25.0M    n/a 0|0 1|0   157b   43.9k   19 tic  PRI Nov  2 11:44:46.439\nhostname.local:27019     *0    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.18G 26.0M    n/a 0|0 1|0   322b   44.4k   12 tic  SEC Nov  2 11:44:46.439\nhostname.local:27020     *0    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.18G 26.0M    n/a 0|0 1|0   322b   44.4k   12 tic  SEC Nov  2 11:44:46.439\nhostname.local:27021   2017    *0     *0     *0     826  1029|0  0.0% 0.0%       0        3.25G 31.0M    n/a 0|0 1|0  1.74m   1.60m   20 tac  PRI Nov  2 11:44:46.439\nhostname.local:27022  *2021    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.19G 32.0M    n/a 0|0 1|0   322b   44.6k   12 tac  SEC Nov  2 11:44:46.438\nhostname.local:27023  *2022    *0     *0     *0       0     3|0  0.0% 0.0%       0        3.19G 33.0M    n/a 0|0 1|0   323b   44.7k   12 tac  SEC Nov  2 11:44:46.438\n     localhost:27017   2071    *0     *0     *0       0  2073|0                  0     0B 2.43G 9.00M      0 0|0 0|0   249k    130k    4      RTR Nov  2 11:44:47.429\n\nPress '?' to toggle help"
                },
                {
                    "lang": "none",
                    "value": "mongostat 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongostat 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongostat 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongostat 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongostat.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongoimport",
            "title": "mongoimport",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Syntax",
                "Behavior",
                "Type Fidelity",
                "JSON Format",
                "Encoding",
                "FIPS",
                "Write Concern",
                "Batches",
                "Required Access",
                "Options",
                "Examples",
                "Simple Import",
                "Replace Matching Documents during Import",
                "Merge Matching Documents during Import",
                "Delete Matching Documents",
                "Import JSON to Remote Host Running with Authentication",
                "CSV Import",
                "General CSV Import",
                "Import CSV with Specified Field Types",
                "Ignore Blank Fields",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials"
            ],
            "paragraphs": "The  mongoimport  tool imports content from an\n Extended JSON , CSV, or TSV export\ncreated by  mongoexport , or potentially, another third-party export\ntool. Run  mongoimport  from the system command line, not the  mongo  shell. mongoexport  which provides the corresponding\nstructured data export capability. You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . This documentation is for version  100.9.0  of  mongoimport . Starting with MongoDB 4.4,  mongoimport  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongoimport  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongoimport , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongoimport mongoimport  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongoimport  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongoimport  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  mongoimport  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongoimport . The  mongoimport  command has the following syntax: Run  mongoimport  from the system command line, not the  mongo  shell. If you need to preserve all rich  BSON  data types when using\n mongoexport  to perform full instance backups, be sure to\nspecify  Extended JSON v2.0 (Canonical mode)  to the\n --jsonFormat  option to\n mongoexport , in the following fashion: If  --jsonFormat  is unspecified,\n mongoexport  outputs data in\n Extended JSON v2.0 (Relaxed mode)  by default. mongoimport  will automatically use the  JSON \nformat found in the specified target data file when restoring. For\nexample, it will use  Extended JSON v2.0 (Canonical mode)  if the target data export file was\ncreated by  mongoexport  with  --jsonFormat=canonical \nspecified. mongoimport  requires import data to be in either\n Extended JSON v2.0 (Canonical)  or\n Extended JSON v2.0 (Relaxed)  format by default. For import data\nformatted using Extended JSON v1.0, specify the\n --legacy  option. In general, the versions of  mongoexport  and\n mongoimport  should match. That is, to import data\ncreated from  mongoexport , you should use the\ncorresponding version of  mongoimport . mongoimport  only supports data files that are UTF-8 encoded.\nUsing other encodings produces errors. mongoimport  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . If you specify write concern in both the\n --writeConcern  option and the\n --uri connection string  option, the\n --writeConcern  value overrides\nthe write concern specified in the URI string. mongoimport  uses a maximum batch size of 100,000 to\nperform bulk insert/upsert operations. In order to connect to a  mongod  that enforces authorization\nwith the  --auth  option, you must use the\n --username  and  --password  options. The connecting user must\npossess, at a minimum, the  readWrite  role on the database\ninto which they are importing data. Starting in MongoDB 5.0, document field names can be ( $ )\nprefixed and can contain a ( . ). However,\n mongoimport  and  mongoexport  should not\nbe used with field names that make use of these characters. MongoDB Extended JSON v2 \ncannot differentiate between type wrappers and fields that happen to\nhave the same name as type wrappers. Do not use Extended JSON\nformats in contexts where the corresponding BSON representations\nmight include ( $ ) prefixed keys. The\n DBRef  mechanism is an exception to this\ngeneral rule. There are also restrictions on using  mongoimport  and\n mongoexport  with ( . ) in field names. Since CSV\nfiles use the ( . ) to represent data hierarchies, a ( . ) in a\nfield name will be misinterpreted as a level of nesting. Returns information on the options and use of  mongoimport . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongoimport  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: output from  database commands replication activity connection accepted events connection closed events Returns the  mongoimport  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongoimport : This is the recommended way to specify a password to  mongoimport ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongoimport , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongoimport , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongoimport  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongoimport  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: When specifying the replica set list format,  mongoimport  always connects to\nthe  primary . You can also connect to any single member of the replica set by specifying\nthe host and port of only that member: If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongoimport  redacts the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongoimport \nprompts for a passphrase. See  TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs a\nwarning for invalid certificates. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongoimport  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password \"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified  --username  has been created.\nSee  Authentication Database . If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongoimport  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongoimport  adds support\nfor the  MONGODB-AWS  authentication mechanism when connecting\nto a  MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Specifies the name of the database on which to run the  mongoimport . Alternatively, you can also specify the database directly in the\n URI connection string . Providing a connection\nstring while also using  --db  and specifying conflicting\ninformation will result in an error. Specifies the collection to import. If you do not specify\n --collection ,  mongoimport  reads the\ncollection name from the input filename, omitting the file's\nextension if it has one. Specify a comma separated list of field names when importing  CSV \nor  TSV  files that do not have field names in the first (i.e.\nheader) line of the file. To also specify the field type as well as the field name, use\n --fields  with  --columnsHaveTypes . If you attempt to include  --fields  when importing JSON data,\n mongoimport  returns an error.  --fields  is only for  CSV \nor  TSV  imports. As an alternative to  --fields , the  --fieldFile \noption allows you to specify a file that holds a list of field names if\nyour  CSV  or  TSV  file does not include field names in the\nfirst line of the file (i.e. header). Place one field per line. To also specify the field type as well as the field name, use\n --fieldFile  with  --columnsHaveTypes . If you attempt to include  --fieldFile  when importing JSON data,\n mongoimport  returns an error.  --fieldFile  is only for  CSV \nor  TSV  imports. Ignores empty fields in  CSV  and  TSV  exports. If not\nspecified,  mongoimport  creates fields without values in\nimported documents. If you attempt to include  --ignoreBlanks  when importing JSON data,\n mongoimport  returns an error.  --ignoreBlanks  is only for  CSV \nor  TSV  imports. Specifies the file type to import. The default format is  JSON ,\nbut it's possible to import  CSV  and  TSV  files. The  csv  parser accepts that data that complies with RFC\n RFC-4180 . As a result, backslashes are  not  a valid escape\ncharacter. If you use double-quotes to enclose fields in the CSV\ndata, you must escape internal double-quote marks by prepending\nanother double-quote. Specifies the location and name of a file containing the data to import.\nIf you do not specify a file,  mongoimport  reads data from\nstandard input (e.g. \"stdin\"). Modifies the import process so that the target instance drops\nthe collection and any associated  indexes  before\nimporting data from the input. If using  --type csv  or  --type\ntsv , uses the first line as field names.\nOtherwise,  mongoimport  imports the first line as a\ndistinct document. If you attempt to include  --headerline  when importing JSON data,\n mongoimport  returns an error.  --headerline  is only for  CSV \nor  TSV  imports. Interpret natural numbers in fields as array indexes when importing\n CSV  or  TSV  files. Field names must be in the form  <colName>.<arrayIndex>  where\n arrayIndex  is a natural number beginning with  0  and\nincreasing sequentially by  1  for each member of the array. For example, with the following  CSV  file: An import with the  --useArrayIndexFields  option would\nresult in the following document: If using the  --columnsHaveTypes  option as well, use the\nform  <colName>.<arrayIndex>.<type>(<arg>)  to specify both the\narray index and type for each field. See  --columnsHaveTypes \nfor more information. Numerical keys with leading zeros (e.g.  a.000,a.001 ) are not\ninterpreted as array indexes. If the first part of a key is a natural number (e.g.  0.a,1.a ), it\nis interpreted as a document key, and not an array index. If using the  --ignoreBlanks  option with\n --useArrayIndexFields ,  mongoimport  returns an\nerror if you attempt to import a document that contains a\nblank value (e.g.  \"\" ) for an array index field. The  --useArrayIndexFields  option has no effect when\nimporting  JSON  data, as arrays are already encoded in\n JSON  format. Default : insert Specifies how the import process should handle existing documents\nin the database that match documents in the import file. By default,  mongoimport  uses the  _id  field to match documents in\nthe collection with documents in the import file.\nTo specify the fields against which to match existing\ndocuments for the  upsert ,  merge , and  delete  modes,\nuse  --upsertFields . Value Description insert Insert the documents in the import file.\n mongoimport  returns an error if you attempt to\nimport a document that contains a duplicate value for a field\nwith a  unique index , such as  _id . upsert Replace existing documents in the database with matching\ndocuments from the\nimport file.  mongoimport  inserts all other\ndocuments.  Replace Matching Documents during Import  describes how to\nuse  --mode   upsert . merge Merge existing documents that match a document in the import file with\nthe new document.  mongoimport  inserts all other documents.\n Merge Matching Documents during Import  describes how to use  --mode \n merge . delete Delete existing documents in the database that match a\ndocument in the import file.  mongoimport  takes\n no action  on non-matching documents.\n Delete Matching Documents  describes how to use\n --mode   delete . Specifies a list of fields for the query portion of the\nimport process.  --upsertFields  can be used with\n --mode   upsert ,  merge , and  delete . Use this option if the  _id  fields in the\nexisting documents don't match the field in the document, but\nanother field or field combination can uniquely identify\ndocuments as a basis for performing upsert operations. If you do not specify a field,  --upsertFields  upserts\non the basis of the  _id  field. To ensure adequate performance, indexes should exist for the\nfield or fields you specify with  --upsertFields . Forces  mongoimport  to halt the insert operation at the\nfirst error rather than continuing the operation despite errors. By default,  mongoimport  continues an operation\nwhen it encounters duplicate key and document validation errors.\nTo ensure that the program stops on these errors, specify\n --stopOnError . Accepts the import of data expressed with multiple MongoDB documents\nwithin a single  JSON  array. Limited to\nimports of 16 MB or smaller. Use  --jsonArray  in conjunction with  mongoexport --jsonArray . Indicates that the import data is in  Extended JSON v1 format  instead of the default\n Extended JSON v2 format . For example, if the import data is in v1 format: Import without the  --legacy  option results in\nthe following document in the collection: Import with the  --legacy  results in\nthe following document in the collection: In general, the versions of  mongoexport  and\n mongoimport  should match. That is, to import\ndata created from  mongoexport , you should use\nthe corresponding version of  mongoimport . Default : false If specified,  mongoimport  inserts the documents in the\norder of their appearance in the input source. That is, both the\nbulk write batch order and document order within the batches are\nmaintained. Specifying  --maintainInsertionOrder  also enables\n --stopOnError  and sets\n numInsertionWorkers  to\n1. If unspecified,  mongoimport  may perform the insertions in\nan arbitrary order. Default : 1 Specifies the number of insertion workers to run concurrently. For large imports, increasing the number of insertion workers\nmay increase the speed of the import. Default : majority Specifies the  write concern  for each write operation that  mongoimport \nperforms. Specify the write concern as a document with  w options : If the write concern is also included in the  --uri\nconnection string , the command-line\n --writeConcern  overrides the write concern specified in\nthe URI string. Enables  mongoimport  to bypass  document validation \nduring the operation. This lets you insert documents that do not\nmeet the validation requirements. Instructs  mongoimport  that the\nfield list specified in  --fields ,  --fieldFile ,\nor  --headerline  specifies the types of each field. Field names must be in the form of  <colName>.<type>(<arg>) . You\nmust backslash-escape the following characters if you wish to include\nthem in an argument:  ( ,  ) , and  \\ . See  Import CSV with Specified Field Types  for sample usage. If you attempt to include  --columnsHaveTypes  when importing JSON data,\n mongoimport  returns an error.  --columnsHaveTypes  is only for  CSV \nor  TSV  imports. type Supported Arguments Example Header Field auto() None. misc.auto() binary(<arg>) base32  ( RFC4648  encoding schema) base64  ( RFC4648  encoding schema) hex user thumbnail.binary(base64) boolean() None. verified.boolean() date(<arg>) Alias for  date_go(<arg>) .  Go Language time.Parse format . created.date(2006-01-02 15:04:05) date_go(<arg>) Go Language time.Parse format created.date_go(2006-01-02 15:04:05) date_ms(<arg>) Microsoft SQL Server FORMAT format created.date_ms(yyyy-MM-dd H:mm:ss) date_oracle(<arg>) Oracle Database TO_DATE format . created.date_oracle(YYYY-MM-DD HH24:MI:SS) decimal() None price.decimal() double() None. revenue.double() int32() None. followerCount.int32() int64() None. bigNumber.int64() string() None. zipcode.string() Default : stop Specifies how  mongoimport  handles type coercion failures when importing\nCSV or TSV files with  --columnsHaveTypes . --parseGrace  has no effect when importing JSON documents. Value Description autoCast Assigns a type based on the value of the field.\nFor example, if a field is defined as a  double  and the\nvalue for that field was  \"foo\" ,  mongoimport  would make\nthat field value a string type. skipField For the row being imported,  mongoimport  does not include the\nfield whose type does not match the expected type. skipRow mongoimport  does not import rows containing a value whose\ntype does not match the expected type. stop mongoimport  returns an error that ends the import. Run  mongoimport  from the system command line, not the  mongo  shell. mongoimport  restores a database from a backup taken with\n mongoexport . Most of the arguments to  mongoexport  also\nexist for  mongoimport . In the following example,  mongoimport  imports\nthe  JSON  data from the  contacts.json  file into the collection\n contacts  in the  users  database. With  --mode   upsert ,  mongoimport  replaces\nexisting documents in the database that match a document in the\nimport file with the document from the import file.\nDocuments that do not match an existing document in the database are\ninserted as usual. By default  mongoimport  matches documents\nbased on the  _id  field. Use  --upsertFields  to specify\nthe fields to match against. Consider the following document in the  people  collection in the\n example  database: The following document exists in a  people-20160927.json  JSON file.\nThe  _id  field of the JSON object matches the  _id  field of the\ndocument in the  people  collection. To import the  people-20160927.json  file and replace documents in\nthe database that match the documents in the import file, specify  --mode \n upsert , as in the following: The document in the  people  collection would then contain only\nthe fields from the imported document, as in the following: With  --mode   merge ,  mongoimport  enables you to\nmerge fields from a new record with an existing document in the\ndatabase. Documents that do not match an existing document in the\ndatabase are inserted as usual. By default  mongoimport \nmatches documents based on the  _id  field. Use\n --upsertFields  to specify the fields to match against. The  people  collection in the  example  database contains the\nfollowing document: The following document exists in a  people-20160927.json  JSON file.\nThe  _id  field of the JSON object matches the  _id  field of the\ndocument in the  people  collection. To import the  people-20160927.json  file and merge documents from\nthe import file with matching documents in the database, specify\n --mode   merge , as in the following: The import operation combines the fields from the JSON file with the\noriginal document in the database,\nmatching the documents based on the  _id  field.\nDuring the import process,  mongoimport  adds the new  username  and\n likes  fields to the document and updates the  email  field with\nthe value from the imported document, as in the following: With  --mode   delete ,\n mongoimport  deletes existing documents in the database\nthat match a document in the import file. Documents that do not match an\nexisting document in the database are ignored. By default\n mongoimport  matches documents based on the  _id  field.\nUse  --upsertFields  to specify\nthe fields to match against. The  people  collection in the  example  database contains the\nfollowing document: The following document exists in a  people-20160927.json  JSON file.\nThe  _id  field of the JSON object matches the  _id  field of the\ndocument in the  people  collection. To delete the documents in the database that match a document in the\n people-20160927.json  file, specify\n --mode   delete , as in the following: Because the  _id  fields match between the database and the input\nfile,  mongoimport  deletes the matching document from the\n people  collection. The same results could also have been achieved\nby using  --upsertFields  to\nspecify the  employee_id  field, which also matches between the\ndatabase and the input file. With  --mode   delete ,\n mongoimport  only deletes one existing document per\nmatch. Ensure that documents from the import file match a single\nexisting document from the database. In the following example,  mongoimport  imports data from the\nfile  /opt/backups/mdb1-examplenet.json  into the  contacts  collection\nwithin the database  marketing  on a remote MongoDB\ndatabase with authentication enabled. mongoimport  connects to the  mongod  instance running on\nthe host  mongodb1.example.net  over port  37017 . It authenticates with the\nusername  user ; the example omits the  --password \noption to have  mongoimport  prompt for the password: In the following example,  mongoimport  imports the  CSV \nformatted data in the  /opt/backups/contacts.csv  file into the\ncollection  contacts  in the  users  database on the MongoDB\ninstance running on the localhost port numbered\n 27017 . Specifying  --headerline  instructs\n mongoimport  to determine the name of the fields using the first\nline in the CSV file. mongoimport  uses the input file name, without the\nextension, as the collection name if  -c  or  --collection  is\nunspecified. The following example is therefore equivalent: When specifying the field name, you can also specify the data type. To\nspecify field names and type, include\n --columnsHaveTypes  with\neither:  --fields ,  --fieldFile , or  --headerline . Specify field names and data types in the form\n <colName>.<type>(<arg>) . For example,  /example/file.csv  contains the following data: The following operation uses  mongoimport  with the\n --fields  and\n --columnsHaveTypes  option\nto specify both the field names and the BSON types of the imported CSV\ndata. Use the  --ignoreBlanks  option\nto ignore blank fields. For  CSV  and  TSV  imports, this\noption provides the desired functionality in most cases because it avoids\ninserting fields with null values into your collection. The following example imports the data from  data.csv , skipping\nany blank fields: To connect to a  MongoDB Atlas  cluster which\nhas been configured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongoimport  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongoimport  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Other shells use different syntax to set environment variables. Consult\nthe documentation for your platform for more information. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongoimport <options> <connection-string> <file>"
                },
                {
                    "lang": "javascript",
                    "value": "mongoexport --jsonFormat=canonical --collection=<coll> <connection-string>"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri \"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongoimport mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongoimport --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>"
                },
                {
                    "lang": "javascript",
                    "value": "a.0,a.1,a.2,a.3\nred,yellow,green,blue"
                },
                {
                    "lang": "javascript",
                    "value": "\"a\" : [ \"red\", \"yellow\", \"green\", \"blue\" ]"
                },
                {
                    "lang": "javascript",
                    "value": "{\"_id\":1.0,\"myregfield\":{\"$regex\":\"foo\",\"$options\":\"i\"}}"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"myregfield\" : { \"$regex\" : \"foo\", \"$options\" : \"i\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : 1, \"myregfield\" : { \"$regularExpression\" : { \"pattern\" : \"foo\", \"options\" : \"i\" } } }"
                },
                {
                    "lang": "sh",
                    "value": "--writeConcern \"{w:'majority'}\""
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --db=users --collection=contacts --file=contacts.json"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"name\" : \"Crystal Duncan\",\n   \"region\" : \"United States\",\n   \"email\" : \"crystal@example.com\"\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"username\" : \"crystal\",\n   \"likes\" : [ \"running\", \"pandas\", \"software development\" ]\n}"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport -c=people -d=example --mode=upsert --file=people-20160927.json"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"username\" : \"crystal\",\n   \"likes\" : [ \"running\", \"pandas\", \"software development\" ]\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"name\" : \"Crystal Duncan\",\n   \"region\" : \"United States\",\n   \"email\" : \"crystal@example.com\"\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"username\" : \"crystal\",\n   \"email\": \"crystal.duncan@example.com\",\n   \"likes\" : [ \"running\", \"pandas\", \"software development\" ]\n}"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport -c=people -d=example --mode=merge --file=people-20160927.json"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"name\" : \"Crystal Duncan\",\n   \"region\" : \"United States\",\n   \"email\" : \"crystal.duncan@example.com\",\n   \"username\" : \"crystal\",\n   \"likes\" : [\n      \"running\",\n      \"pandas\",\n      \"software development\"\n   ]\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"name\" : \"Crystal Duncan\",\n   \"region\" : \"United States\",\n   \"email\" : \"crystal@example.com\",\n   \"employee_id\" : \"5463789356\"\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"_id\" : ObjectId(\"580100f4da893943d393e909\"),\n   \"username\" : \"crystal\",\n   \"email\": \"crystal.duncan@example.com\",\n   \"likes\" : [ \"running\", \"pandas\", \"software development\" ],\n   \"employee_id\" : \"5463789356\"\n}"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport -c=people -d=example --mode=delete --file=people-20160927.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --host=mongodb1.example.net --port=37017 --username=user --collection=contacts --db=marketing --file=/opt/backups/mdb1-examplenet.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --db=users --collection=contacts --type=csv --headerline --file=/opt/backups/contacts.csv"
                },
                {
                    "lang": "none",
                    "value": "mongoimport --db=users --type=csv --headerline --file=/opt/backups/contacts.csv"
                },
                {
                    "lang": "none",
                    "value": "Katherine Gray, 1996-02-03, false, 1235, TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLg==\nAlbert Gilbert, 1992-04-24, true, 13, Q3VwY2FrZSBpcHN1bSBkb2xvciBzaXQgYW1ldCB0b290c2llIHJvbGwgYm9uYm9uIHRvZmZlZS4gQ2FuZHkgY2FuZXMgcGllIGNyb2lzc2FudCBjaG9jb2xhdGUgYmFyIGxvbGxpcG9wIGJlYXIgY2xhdyBtYWNhcm9vbi4gU3dlZXQgcm9sbCBjdXBjYWtlIGNoZWVzZWNha2Ugc291ZmZsw6kgYnJvd25pZSBpY2UgY3JlYW0uIEp1anViZXMgY2FrZSBjdXBjYWtlIG1hY2Fyb29uIGRhbmlzaCBqZWxseS1vIHNvdWZmbMOpLiBDYWtlIGFwcGxlIHBpZSBnaW5nZXJicmVhZCBjaG9jb2xhdGUgc3VnYXIgcGx1bS4gU3dlZXQgY2hvY29sYXRlIGNha2UgY2hvY29sYXRlIGNha2UganVqdWJlcyB0aXJhbWlzdSBvYXQgY2FrZS4gU3dlZXQgc291ZmZsw6kgY2hvY29sYXRlLiBMaXF1b3JpY2UgY290dG9uIGNhbmR5IGNob2NvbGF0ZSBtYXJzaG1hbGxvdy4gSmVsbHkgY29va2llIGNha2UgamVsbHkgYm=="
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --db=users --collection=contacts --type=csv \\\n   --columnsHaveTypes \\\n   --fields=\"name.string(),birthdate.date(2006-01-02),contacted.boolean(),followerCount.int32(),thumbnail.binary(base64)\" \\\n   --file=/example/file.csv"
                },
                {
                    "lang": "sh",
                    "value": "mongoimport --db=users --collection=contacts --type=csv --file=/example/data.csv --ignoreBlanks"
                },
                {
                    "lang": "none",
                    "value": "mongoimport 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongoimport 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongoimport 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongoimport 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongoimport.",
            "tags": null,
            "facets": {
                "programming_language": [
                    "shell"
                ],
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "mongoexport",
            "title": "mongoexport",
            "headings": [
                "Synopsis",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Syntax",
                "Connect to a MongoDB Instance",
                "Connect to a Replica Set",
                "Connect to a Sharded Cluster",
                "Required Access",
                "Behavior",
                "Type Fidelity",
                "FIPS",
                "Read Preference",
                "Options",
                "Examples",
                "Export in CSV Format",
                "Export Data in CSV Format using --fields option",
                "Use a File to Specify the Fields to Export in CSV Format",
                "Exclude Field Names from CSV Output",
                "Export in JSON Format",
                "Export from Remote Host Running with Authentication",
                "Export Query Results",
                "Connect to a MongoDB Atlas Cluster using AWS IAM Credentials"
            ],
            "paragraphs": "mongoexport  is a command-line tool that produces a JSON\nor CSV export of data stored in a MongoDB instance. Run  mongoexport  from the system command line, not the  mongo  shell. mongoimport  which provides the corresponding\nstructured data import capability. If you are archiving stale data to save on storage costs, consider\n Online Archive  in\n MongoDB Atlas . Online\nArchive automatically archives infrequently accessed data to\nfully-managed S3 buckets for cost-effective data tiering. You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . This documentation is for version  100.9.0  of  mongoexport . Starting with MongoDB 4.4,  mongoexport  is now released separately\nfrom the MongoDB Server and uses its own versioning, with an initial\nversion of  100.0.0 . Previously,  mongoexport  was released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of\n mongoexport , reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 mongoexport MongoDB 4.0 mongoexport mongoexport  version  100.9.0  supports the following versions\nof the MongoDB Server: While  mongoexport  may work on earlier versions of MongoDB server,\nany such compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 mongoexport  version  100.9.0  is supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713 The  mongoexport  tool is part of the  MongoDB Database Tools  package: \u27a4  Follow the  Database Tools Installation Guide  to install  mongoexport . The  mongoexport  command has the following form: You must specify the  collection  to\nexport. If you do not specify an  output file ,  mongoexport  writes to the standard output (e.g.\nstdout). Run  mongoexport  from the system command line, not the  mongo  shell. To connect to a local MongoDB instance running on port 27017, you do\nnot have to specify the host or port. For example, to export the specified  collection  to the specified  output file  from a local MongoDB instance running on port 27017: To specify a host and/or port of the MongoDB instance, you can either: For more information on the options available, see  Options . Specify the hostname and port in the  --uri connection string : When using the  --uri connection string ,\nthe database can be specified as part of the string. Specify the hostname and port in the  --host : Specify the hostname and port in the  --host  and  --port : To connect to a replica set to export its data, you can either: By default,  mongoexport  reads from the primary of the\nreplica set. To override the default, you can specify the  read\npreference : For more information on the options available, see  Options . Specify the replica set name and members in the  --uri connection string : When using the  --uri connection string ,\nthe database can be specified as part of the string. Specify the replica set name and members in the  --host : You can specify the read preference in the\n --uri connection string If specifying the read preference tags, include the\n readPreferenceTags  option: When using the  --uri connection string ,\nthe database can be specified as part of the string. You can specify the read preference using the\n --readPreference  command-line\noption. The command-line option takes a string if specifying only the read preference mode: Or, the command-line option can takes a quote-enclosed document\n '{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}' \nto specify the mode, the optional  read preference tag\nsets , and the optional\n maxStalenessSeconds : To connect to a sharded cluster to export its data, you can either: By default,  mongoexport  reads from the primary of the\nshard replica set. To override the default, you can specify the  read\npreference : For more information on the options available, see  Options . Specify the hostname of the  mongos  instance in the\n --uri connection string When using the  --uri connection string ,\nthe database can be specified as part of the string. Specify the hostname and port of the  mongos  instance in the  --host You can specify the read preference in the\n --uri connection string If specifying the read preference tags, include the\n readPreferenceTags  option: When using the  --uri connection string ,\nthe database can be specified as part of the string. You can specify the read preference using the\n --readPreference  command-line\noption.  The command-line option takes a string if specifying only the read preference mode: Or, the command-line option can takes a quote-enclosed document\n '{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}' \nto specify the mode, the optional  read preference tag\nsets , and the optional\n maxStalenessSeconds : Examples mongoexport  requires read access on the target database. Ensure that the connecting user possesses, at a minimum, the  read \nrole on the target database. When connecting to a  mongod  or  mongos  that enforces\n Authentication , ensure you use the required security\nparameters based on the configured\n authentication mechanism . If you need to preserve all rich  BSON  data types when using\n mongoexport  to perform full instance backups, be sure to\nspecify  Extended JSON v2.0 (Canonical mode)  to the\n --jsonFormat  option to\n mongoexport , in the following fashion: If  --jsonFormat  is unspecified,\n mongoexport  outputs data in\n Extended JSON v2.0 (Relaxed mode)  by default. mongoimport  will automatically use the  JSON \nformat found in the specified target data file when restoring. For\nexample, it will use  Extended JSON v2.0 (Canonical mode)  if the target data export file was\ncreated by  mongoexport  with  --jsonFormat=canonical \nspecified. mongoexport  automatically creates FIPS-compliant\nconnections to a  mongod / mongos  that is\n configured to use FIPS mode . By default,  mongoexport  uses read preference\n primary . To override the default, you can specify the\n read preference  in the\n --readPreference  command line\noption or in the  --uri connection string . If you specify read preference in the URI string and the\n --readPreference , the\n --readPreference  value\noverrides the read preference specified in the URI string. Starting in MongoDB 5.0, document field names can be ( $ )\nprefixed and can contain a ( . ). However,\n mongoimport  and  mongoexport  should not\nbe used with field names that make use of these characters. MongoDB Extended JSON v2 \ncannot differentiate between type wrappers and fields that happen to\nhave the same name as type wrappers. Do not use Extended JSON\nformats in contexts where the corresponding BSON representations\nmight include ( $ ) prefixed keys. The\n DBRef  mechanism is an exception to this\ngeneral rule. There are also restrictions on using  mongoimport  and\n mongoexport  with ( . ) in field names. Since CSV\nfiles use the ( . ) to represent data hierarchies, a ( . ) in a\nfield name will be misinterpreted as a level of nesting. Returns information on the options and use of  mongoexport . Increases the amount of internal reporting returned on standard output\nor in log files. Increase the verbosity with the  -v  form by\nincluding the option multiple times, (e.g.  -vvvvv .) Runs  mongoexport  in a quiet mode that attempts to limit the amount\nof output. This option suppresses: Output from  database commands Replication activity Connection accepted and closed events All logs, including error messages, except for those that occur when\nparsing options Returns the  mongoexport  release number. Specifies the full path to a YAML configuration file containing\nsensitive values for the following options to  mongoexport : This is the recommended way to specify a password to  mongoexport ,\naside from specifying it through a password prompt. The configuration file takes the following form: Specifying a password to the  password:  field and providing a\nconnection string in the  uri:  field which contains a conflicting\npassword will result in an error. Be sure to secure this file with appropriate filesystem permissions. --password --uri --sslPEMKeyPassword If you specify a configuration file with  --config  and\nalso use the  --password ,  --uri  or\n --sslPEMKeyPassword  option to  mongoexport , each\ncommand line option overrides its corresponding option in the\nconfiguration file. Specifies the resolvable  URI connection string  of the MongoDB deployment, enclosed\nin quotes: For information on the components of the connection string, see\nthe  Connection String URI Format  documentation. Starting with version  100.0  of  mongoexport , the connection\nstring may alternatively be provided as a positional parameter,\nwithout using the  --uri  option: As a positional parameter, the connection string may be specified\nat any point on the command line, as long as it begins with either\n mongodb://  or  mongodb+srv:// . For example: Only one connection string can be provided. Attempting to\ninclude more than one, whether using the  --uri  option or as\na positional argument, will result in an error. Some components in the  connection string  may\nalternatively be specified using their own explicit command-line\noptions, such as  --username  and  --password .\nProviding a connection string while also using an explicit option and\nspecifying conflicting information will result in an error. If using  mongoexport  on Ubuntu 18.04, you may experience a\n cannot unmarshal DNS  error message when using\n SRV connection strings  (in the\nform  mongodb+srv:// ) with the  --uri  option. If so, use\none of the following options instead: the  --uri  option with a  non-SRV connection string  (in the form\n mongodb:// ) the  --host  option to specify the host to connect to\ndirectly On some systems, a password provided in a connection string\nwith the  --uri  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\ninstead: omitting the password in the connection string to receive an\ninteractive password prompt, or using the  --config  option to specify a configuration file\ncontaining the password. Default : localhost:27017 Specifies the resolvable hostname of the MongoDB deployment. By\ndefault,  mongoexport  attempts to connect to a MongoDB\ninstance running on the localhost on port number  27017 . To connect to a replica set, specify the\n replSetName  and a seed list of set members, as in\nthe following: When specifying the replica set list format,  mongoexport  always connects to\nthe  primary . You can also connect to any single member of the replica set by specifying\nthe host and port of only that member: If you use IPv6 and use the  <address>:<port>  format, you must\nenclose the portion of an address and port combination in\nbrackets (e.g.  [<address>] ). Alternatively, you can also specify the hostname directly in the\n URI connection string . Providing a connection\nstring while also using  --host  and specifying conflicting\ninformation will result in an error. Default : 27017 Specifies the TCP port on which the MongoDB instance listens for\nclient connections. Alternatively, you can also specify the port directly in the\n URI connection string . Providing a connection\nstring while also using  --port  and specifying conflicting\ninformation will result in an error. Enables connection to a  mongod  or  mongos  that has\nTLS/SSL support enabled. Alternatively, you can also configure TLS/SSL support directly in the\n URI connection string . Providing a connection\nstring while also using  --ssl  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains the root certificate chain\nfrom the Certificate Authority. Specify the file name of the\n .pem  file using relative or absolute paths. Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslCAFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the  .pem  file that contains both the TLS/SSL certificate\nand key. Specify the file name of the  .pem  file using relative\nor absolute paths. This option is required when using the  --ssl  option to connect\nto a  mongod  or  mongos  that has\n CAFile  enabled  without \n allowConnectionsWithoutCertificates . Alternatively, you can also specify the  .pem  file directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyFile  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies the password to de-crypt the certificate-key file (i.e.\n --sslPEMKeyFile ). Use the  --sslPEMKeyPassword  option only if the\ncertificate-key file is encrypted. In all cases, the  mongoexport  will\nredact the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not specify\nthe  --sslPEMKeyPassword  option, the  mongoexport  will prompt for a passphrase. See\n TLS/SSL Certificate Passphrase . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --sslPEMKeyPassword  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . On some systems, a password provided directly using the\n --sslPEMKeyPassword  option may be visible to system status\nprograms such as  ps  that may be invoked by other users. Consider\nusing the  --config  option to specify a configuration file\ncontaining the password instead. Specifies the  .pem  file that contains the Certificate Revocation\nList. Specify the file name of the  .pem  file using relative or\nabsolute paths. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Bypasses the validation checks for server certificates and allows\nthe use of invalid certificates. When using the\n allowInvalidCertificates  setting, MongoDB logs as a\nwarning the use of the invalid certificate. Although available, avoid using the\n --sslAllowInvalidCertificates  option if possible. If the use\nof  --sslAllowInvalidCertificates  is necessary, only use the\noption on systems where intrusion is not possible. Connecting to a  mongod  or\n mongos  instance without validating server\ncertificates is a potential security risk. If you only need to\ndisable the validation of the hostname in the TLS/SSL\ncertificates, see  --sslAllowInvalidHostnames . Alternatively, you can also disable certificate validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidCertificates  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Disables the validation of the hostnames in TLS/SSL certificates. Allows\n mongoexport  to connect to MongoDB instances even if the hostname in their\ncertificates do not match the specified hostname. Alternatively, you can also disable hostname validation directly in the\n URI connection string . Providing a connection\nstring while also using  --sslAllowInvalidHostnames  and specifying conflicting\ninformation will result in an error. For more information about TLS/SSL and MongoDB, see\n Configure mongod and mongos for TLS/SSL  and\n TLS/SSL Configuration for Clients . Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --password  and\n --authenticationDatabase  options. Alternatively, you can also specify the username directly in the\n URI connection string . Providing a connection\nstring while also using  --username  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS access key ID\nin: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_ACCESS_KEY_ID  environment variable. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the  --username  and\n --authenticationDatabase  options. To prompt the user for the password, pass the  --username \noption without  --password  or specify an empty string as the\n --password  value, as in  --password \"\"  . Alternatively, you can also specify the password directly in the\n URI connection string . Providing a connection\nstring while also using  --password  and specifying conflicting\ninformation will result in an error. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , you can specify your AWS secret access\nkey in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. this field, the  connection string , or the  AWS_SECRET_ACCESS_KEY  environment variable. On some systems, a password provided directly using the\n --password  option may be visible to system status programs\nsuch as  ps  that may be invoked by other users. Consider instead: omitting the  --password  option to receive an interactive\npassword prompt, or using the  --config  option to specify a configuration file\ncontaining the password. If connecting to a  MongoDB Atlas  cluster\nusing the  MONGODB-AWS   authentication mechanism , and using session tokens in addition to\nyour AWS access key ID and secret access key, you can specify your AWS\nsession token in: See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials  for an example of each. Only valid when using the  MONGODB-AWS \n authentication mechanism . this field, the  AWS_SESSION_TOKEN   authMechanismProperties \nparameter to the  connection string , or the  AWS_SESSION_TOKEN  environment variable. Specifies the authentication database where the specified  --username  has been created.\nSee  Authentication Database . If you do not specify an authentication database,  mongoexport \nassumes that the database specified to export holds the user's credentials. If using the  GSSAPI  (Kerberos),\n PLAIN  (LDAP SASL), or  MONGODB-AWS \n authentication mechanisms , you\nmust set  --authenticationDatabase  to  $external . Alternatively, you can also specify the authentication database directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationDatabase  and specifying conflicting\ninformation will result in an error. Default : SCRAM-SHA-1 Specifies the authentication mechanism the  mongoexport  instance uses to\nauthenticate to the  mongod  or  mongos . Starting in version  100.1.0 ,  mongoexport  adds support\nfor the  MONGODB-AWS  authentication mechanism when connecting\nto a  MongoDB Atlas  cluster. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the SHA-1\nhash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the SHA-256\nhash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB TLS/SSL certificate authentication. MONGODB-AWS External authentication using AWS IAM credentials for use in\nconnecting to a\n MongoDB Atlas \ncluster. See  Connect to a MongoDB Atlas Cluster using AWS IAM Credentials . GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . Alternatively, you can also specify the authentication mechanism directly in the\n URI connection string . Providing a connection\nstring while also using  --authenticationMechanism  and specifying conflicting\ninformation will result in an error. Specify the name of the service using  GSSAPI/Kerberos . Only required if the service does not use the\ndefault name of  mongodb . This option is available only in MongoDB Enterprise. Specify the hostname of a service using  GSSAPI/Kerberos .  Only  required if the hostname of a machine does\nnot match the hostname resolved by DNS. This option is available only in MongoDB Enterprise. Specifies the name of the database on which to run the  mongoexport . Alternatively, you can also specify the database directly in the\n URI connection string . Providing a connection\nstring while also using  --db  and specifying conflicting\ninformation will result in an error. Specifies the collection to export. Specifies a field or fields to  include  in the export. Use a comma\nseparated list of fields to specify multiple fields. If any of your field names include white space, use\nquotation marks to enclose the field list. For example, if you wished\nto export two fields,  phone  and  user number , you would\nspecify  --fields \"phone,user number\" . For  csv  output formats,\n mongoexport  includes only the specified field(s), and the\nspecified field(s) can be a field within a sub-document. For  JSON  output formats,  mongoexport  includes\nonly the specified field(s)  and  the  _id  field, and if the\nspecified field(s) is a field within a sub-document, the\n mongoexport  includes the sub-document with all\nits fields, not just the specified field within the document. See:  Export Data in CSV Format using  --fields  option  for sample usage. An alternative to  --fields . The\n --fieldFile  option allows you to\nspecify in a file the field or fields to  include  in the export and is\n only valid  with the  --type  option\nwith value  csv . The\nfile must have only one field per line, and the line(s) must end with\nthe LF character ( 0x0A ). mongoexport  includes only the specified field(s). The\nspecified field(s) can be a field within a sub-document. See  Use a File to Specify the Fields to Export in CSV Format  for sample usage. Provides a query as a  JSON document  (enclosed in quotes) to\nreturn matching documents in the export. The query  must  be in  Extended JSON v2 format\n(either relaxed or canonical/strict mode) , including enclosing the\nfield names and operators in quotes: For example, given a collection named  records  in the database\n test  with the following documents: The following  mongoexport  uses the  -q  option\nto export only the documents with the field  a  greater than or\nequal to ( $gte )  3  and the field  date  less than\n( $lt )  ISODate(\"2016-01-01T00:00:00Z\") , which is\nspecified using the  extended JSON v2 format (relaxed mode) for\ndates  (  { \"$date\":\n\"YYYY-MM-DDTHH:mm:ss.mmm\\<offset\\>\"}  ): The resulting file contains the following documents: You can sort the results with the  --sort  option to\n mongoexport . You must enclose the query document in single quotes ( '{ ... }' ) to ensure that it does\nnot interact with your shell environment. An alternative to  --query . The\n --queryFile  option allows you to\nspecify in a file the query in  Extended JSON v2 format . Default : json Specifies the file type to export. Specify  csv  for  CSV \nformat or  json  for  JSON  format. If you specify  csv , then you must also use either\nthe  --fields  or the  --fieldFile  option to\ndeclare the fields to export from the collection. Specifies a file to write the export to. If you do not specify a file\nname, the  mongoexport  writes data to standard output\n(e.g.  stdout ). Default : relaxed Modifies the output to use either canonical or relaxed mode of the\n MongoDB Extended JSON (v2)  format. For differences between canonical and relaxed modes, see\n MongoDB Extended JSON (v2) . Modifies the output of  mongoexport  to write the\nentire contents of the export as a single  JSON  array. By\ndefault  mongoexport  writes data using one JSON document\nfor every MongoDB document. Outputs documents in a pretty-printed format JSON. By default,  mongoexport  includes the exported field names as the first\nline in a CSV output.  --noHeaderLine  directs  mongoexport  to export the\ndata without the list of field names.\n --noHeaderLine  is  only valid  with the\n --type  option with value  csv . See  Exclude Field Names from CSV Output  for sample usage. Default :  primary Specifies the  read preference  for\n mongoexport . The  --readPreference  option can take: mongoexport  defaults to  primary \n read preference . If the read preference is also included in the\n --uri connection string , the command-line\n --readPreference  overrides the read preference specified in\nthe URI string. A string if specifying only the read preference mode: A quote-enclosed document to specify the mode, the optional\n read preference tag sets , and the\noptional  maxStalenessSeconds : If specifying the  maxStalenessSeconds , the value must be greater than or equal to 90. Use  --skip  to control where  mongoexport  begins\nexporting documents. See  skip()  for information about\nthe underlying operation. Specifies a maximum number of documents to include in the\nexport. See  limit()  for information about\nthe underlying operation. Specifies an ordering for exported results. If an index does\n not  exist that can support the sort operation, the results must\nbe  less than  32 megabytes. Use  --sort  conjunction with  --skip  and\n --limit  to limit number of exported documents. See  sort()  for information about the underlying\noperation. Run  mongoexport  from the system command line, not the  mongo  shell. In the following example,  mongoexport  exports data from the\ncollection  contacts  collection in the  users  database in  CSV \nformat to the file  /opt/backups/contacts.csv . The  mongod  instance that  mongoexport  connects to is\nrunning on the localhost port number  27017 . When you export in CSV format, you must specify the fields in the documents\nto export. The operation specifies the  name  and  address  fields\nto export. The output would then resemble: For CSV exports only, you can also specify the fields in a file\ncontaining the line-separated list of fields to export. The file must\nhave only one field per line. For example, you can specify the  name  and  address  fields in a\nfile  fields.txt : Then, using the  --fieldFile  option, specify the fields to export with\nthe file: The  --noHeaderLine  option can be\nused to exclude field names in a CSV export. The following example\nexports the  name  and  address  fields in the  contacts \ncollection in the  users  database and uses\n --noHeaderLine  to suppress the\noutput of the field names as the first line: The CSV output would then resemble: This example creates an export of the  contacts  collection from the\nMongoDB instance running on the localhost port number  27017 . This\nwrites the export to the  contacts.json  file in  JSON  format. The following example exports the  contacts  collection in the\n marketing  database from a remote MongoDB instance that requires\nauthentication. Specify the: Alternatively, you use the  --uri  option to specify the host, port, username, authentication database, and db. --host --port --username --authenticationDatabase --collection --db --out Omit the  --password  option to\nhave  mongoexport  prompt for the password: Omit the password in the URI string to have  mongoexport  prompt\nfor the password: You can export only the results of a query by supplying a query filter with\nthe  --query  option, and limit the results to a single\ndatabase using the \" --db \" option. For instance, this command returns all documents in the  sales \ndatabase's  contacts  collection that contain a field named  dept \nequal to  \"ABC\"  and the field  date  greater than or equal to\nISODate(\"2018-01-01\") (using the  canonical format for dates\n{ \"$date\": \"YYYY-MM-DDTHH:mm:ss.mmm<offset>\"}  ) You must enclose the query document in single quotes ( '{ ... }' ) to ensure that it does\nnot interact with your shell environment. To connect to a  MongoDB Atlas  cluster which has been\nconfigured to support authentication via  AWS IAM credentials ,\nprovide a  connection string  to\n mongoexport  similar to the following: Connecting to Atlas using AWS IAM credentials in this manner uses the\n MONGODB-AWS   authentication mechanism \nand the  $external   authSource , as shown in this example. If using an  AWS session token ,\nas well, provide it with the  AWS_SESSION_TOKEN \n authMechanismProperties  value, as follows: Alternatively, the AWS access key ID, secret access key, and optionally\nsession token can each be provided outside of the connection string\nusing the  --username ,  --password , and\n --awsSessionToken  options instead, like so: When provided as command line parameters, these three options do not\nrequire percent encoding. You may also set these credentials on your platform using standard\n AWS IAM environment variables .\n mongoexport  checks for the following environment variables when you\nuse the  MONGODB-AWS \n authentication mechanism : If set, these credentials do not need to be specified in the connection\nstring or via their explicit options. The following example sets these environment variables in the  bash \nshell: Syntax for setting environment variables in other shells will be\ndifferent. Consult the documentation for your platform for more\ninformation. You can verify that these environment variables have been set with the\nfollowing command: Once set, the following example connects to a MongoDB Atlas cluster\nusing these environment variables: If the AWS access key ID, secret access key, or session token\ninclude the following characters: those characters must be converted using  percent encoding . AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN If you chose to use the AWS environment variables to specify these\nvalues, you cannot mix and match with the corresponding explicit or\nconnection string options for these credentials. Either use the\nenvironment variables for access key ID  and  secret access key\n( and  session token if used),  or  specify each of these using the\nexplicit or connection string options instead.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongoexport --collection=<coll> <options> <connection-string>"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --collection=events --db=reporting --out=events.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongodb0.example.com:27017/reporting\"  --collection=events  --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"mongodb0.example.com:27017\" --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"mongodb0.example.com\" --port=27017 --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com\" --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/reporting?replicaSet=myReplicaSetName&readPreference=secondary&readPreferenceTags=region:east\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017\" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017\" --readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ]}' --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongos0.example.com:27017/reporting\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"mongos0.example.com:27017\" --collection=events --db=reporting --out=events.json[additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongos0.example.com:27017/reporting?readPreference=secondary\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri=\"mongodb://mongos0.example.com:27017/reporting?readPreference=secondary&readPreferenceTags=region:east\" --collection=events --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"mongos0.example.com:27017\" --readPreference=secondary --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=\"mongos0.example.com:27017\" --readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ]}' --collection=events --db=reporting --out=events.json [additional options]"
                },
                {
                    "lang": "javascript",
                    "value": "mongoexport --jsonFormat=canonical --collection=<coll> <connection-string>"
                },
                {
                    "lang": "sh",
                    "value": "password: <password>\nuri: mongodb://mongodb0.example.com:27017\nsslPEMKeyPassword: <password>"
                },
                {
                    "lang": "none",
                    "value": "--uri=\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\""
                },
                {
                    "lang": "none",
                    "value": "mongoexport mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
                },
                {
                    "lang": "none",
                    "value": "mongoexport --username joe --password secret1 mongodb://mongodb0.example.com:27017 --ssl"
                },
                {
                    "lang": "none",
                    "value": "--host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "--host=<hostname1><:port>"
                },
                {
                    "lang": "json",
                    "value": "{ \"_id\" : ObjectId(\"51f0188846a64a1ed98fde7c\"), \"a\" : 1, \"date\" : ISODate(\"1960-05-01T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"520e61b0c6646578e3661b59\"), \"a\" : 1, \"b\" : 2, \"date\" : ISODate(\"1970-05-01T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"520e642bb7fa4ea22d6b1871\"), \"a\" : 2, \"b\" : 3, \"c\" : 5, \"date\" : ISODate(\"2010-05-01T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"520e6431b7fa4ea22d6b1872\"), \"a\" : 3, \"b\" : 3, \"c\" : 6, \"date\" : ISODate(\"2015-05-02T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"520e6445b7fa4ea22d6b1873\"), \"a\" : 5, \"b\" : 6, \"c\" : 8, \"date\" : ISODate(\"2018-03-01T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"5cd0de910dbce4346295ae28\"), \"a\" : 15, \"b\" : 5, \"date\" : ISODate(\"2015-03-01T00:00:00Z\") }"
                },
                {
                    "lang": "bash",
                    "value": "mongoexport -d=test -c=records -q='{ \"a\": { \"$gte\": 3 }, \"date\": { \"$lt\": { \"$date\": \"2016-01-01T00:00:00.000Z\" } } }' --out=exportdir/myRecords.json"
                },
                {
                    "lang": "json",
                    "value": "{\"_id\":{\"$oid\":\"520e6431b7fa4ea22d6b1872\"},\"a\":3.0,\"b\":3.0,\"c\":6.0,\"date\":{\"$date\":\"2015-05-02T00:00:00Z\"}}\n{\"_id\":{\"$oid\":\"5cd0de910dbce4346295ae28\"},\"a\":15.0,\"b\":5.0,\"date\":{\"$date\":\"2015-03-01T00:00:00Z\"}}"
                },
                {
                    "lang": "sh",
                    "value": "--readPreference=secondary"
                },
                {
                    "lang": "sh",
                    "value": "--readPreference='{mode: \"secondary\", tagSets: [ { \"region\": \"east\" } ], maxStalenessSeconds: 120}'"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --out=export.0.json\nmongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=100 --out=export.1.json\nmongoexport -d=test -c=records --sort='{a: 1}' --limit=100 --skip=200 --out=export.2.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=users --collection=contacts --type=csv --fields=name,address --out=/opt/backups/contacts.csv"
                },
                {
                    "lang": "none",
                    "value": "name, address\nSophie Monroe, 123 Example Road\nCharles Yu, 345 Sample Street"
                },
                {
                    "lang": "none",
                    "value": "name\naddress"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=users --collection=contacts --type=csv --fieldFile=fields.txt --out=/opt/backups/contacts.csv"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=users --collection=contacts --type=csv --fields=name,address --noHeaderLine --out=/opt/backups/contacts.csv"
                },
                {
                    "lang": "none",
                    "value": "Sophie Monroe, 123 Example Road\nCharles Yu, 345 Sample Street"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=sales --collection=contacts --out=contacts.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --host=mongodb1.example.net --port=27017 --username=someUser --authenticationDatabase=admin --collection=contacts --db=marketing --out=mdb1-examplenet.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --uri='mongodb://someUser@mongodb0.example.com:27017/marketing?authsource=admin' --collection=contacts --out=mdb1-examplenet.json"
                },
                {
                    "lang": "sh",
                    "value": "mongoexport --db=sales --collection=contacts --query='{\"dept\": \"ABC\", date: { $gte: { \"$date\": \"2018-01-01T00:00:00.000Z\" } }}'"
                },
                {
                    "lang": "none",
                    "value": "mongoexport 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongoexport 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>"
                },
                {
                    "lang": "none",
                    "value": "mongoexport 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>"
                },
                {
                    "lang": "none",
                    "value": "export AWS_ACCESS_KEY_ID='<aws access key id>'\nexport AWS_SECRET_ACCESS_KEY='<aws secret access key>'\nexport AWS_SESSION_TOKEN='<aws session token>'"
                },
                {
                    "lang": "none",
                    "value": "env | grep AWS"
                },
                {
                    "lang": "none",
                    "value": "mongoexport 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>"
                },
                {
                    "lang": "none",
                    "value": ": / ? # [ ] @"
                }
            ],
            "preview": "Returns information on the options and use of mongoexport.",
            "tags": null,
            "facets": {
                "programming_language": [
                    "shell"
                ],
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "installation/installation-macos",
            "title": "Installing the Database Tools on macOS",
            "headings": [
                "Overview",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Install Homebrew.",
                "Tap the MongoDB formula.",
                "Install the MongoDB Database Tools.",
                "Run the installed Tools.",
                "Download the Database Tools Zip archive.",
                "Extract the files from the downloaded archive.",
                "Make the DB Tools available in your PATH."
            ],
            "paragraphs": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the macOS\nplatform. Starting with MongoDB 4.4, the MongoDB Database Tools are now released separately\nfrom the MongoDB Server and use their own versioning, with an initial\nversion of  100.0.0 . Previously, these tools were released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of these\ntools, reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 Tools MongoDB 4.0 Tools MongoDB Database Tools version  100.9.0  supports the following versions\nof the MongoDB server: While the tools may work on earlier versions of MongoDB server, any\nsuch compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 The MongoDB Database Tools version  100.9.0  are supported on macOS 10.12 or\nlater. The MongoDB Database Tools can be installed with the third party Homebrew package\nmanager, or downloaded as a  .tgz  archive. Select the tab below\ndepending on your desired installation method: Starting with MongoDB 4.4.1,\n installing the MongoDB Server via Homebrew  also installs the Database Tools. The\nfollowing command will determine if the Database Tools are already\ninstalled on your system: macOS does not include the Homebrew  brew  package by default.\nInstall  brew  using the official\n Homebrew installation instructions . In your macOS Terminal, run the following command to download the\nofficial  MongoDB Homebrew formulae  for MongoDB and the\nDatabase Tools: In your macOS Terminal, run the following command to install the\nMongoDB Database Tools: Once installed, you can later update the Database Tools with: Once installed, you can run any of the Database Tools directly\nfrom your macOS Terminal. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage. Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: Select the  macOS x86_64  Platform Select the  zip  Package Click the  Download  button You can either: Double-click the downloaded Zip archive to unpack it. In your MacOS Terminal, navigate to the directory containing the\ndownloaded Zip archive, then run the following command: You may wish to make the Database Tools available in your system's\n PATH  environment variable, which allows referencing each tool\ndirectly on the command line by name, without needing to specify its\nfull path, or first navigating to its parent directory. You can either: Copy the DB Tools binaries into a directory listed in your\n PATH  variable, such as  /usr/local/bin . Run the following\ncommand from the directory containing the DB Tools binaries: Add the DB Tools installation directory to your PATH, by editing\nyour shell's configuration file. For example, in  bash , you\nwould edit the  ~/.bash_profile  file.",
            "code": [
                {
                    "lang": "shell",
                    "value": "brew list | grep mongodb-database-tools"
                },
                {
                    "lang": "sh",
                    "value": "brew tap mongodb/brew"
                },
                {
                    "lang": "sh",
                    "value": "brew install mongodb-database-tools"
                },
                {
                    "lang": "sh",
                    "value": "brew upgrade mongodb-database-tools"
                },
                {
                    "lang": "sh",
                    "value": "unzip mongodb-database-tools-*-100.9.0.zip"
                },
                {
                    "lang": "sh",
                    "value": "sudo cp * /usr/local/bin/"
                }
            ],
            "preview": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the macOS\nplatform.",
            "tags": null,
            "facets": {
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "installation/installation",
            "title": "Installation",
            "headings": [
                "Installing the Database Tools",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support"
            ],
            "paragraphs": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Follow the guides below to install the Database Tools on\nyour platform: You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . Linux Installing the Database Tools on Linux macOS Installing the Database Tools on macOS Windows Installing the Database Tools on Windows Starting with MongoDB 4.4, the MongoDB Database Tools are now released separately\nfrom the MongoDB Server and use their own versioning, with an initial\nversion of  100.0.0 . Previously, these tools were released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of these\ntools, reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 Tools MongoDB 4.0 Tools MongoDB Database Tools version  100.9.0  supports the following versions\nof the MongoDB server: While the tools may work on earlier versions of MongoDB server, any\nsuch compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 The MongoDB Database Tools version  100.9.0  are supported on the following\nplatforms: x86_64 ARM64 PPC64LE s390x Amazon Linux 2023 \u2713 \u2713 Amazon 2 \u2713 Amazon 2013.03+ \u2713 Debian 10 \u2713 Debian 9 \u2713 Debian 8 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 9 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 8 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 7 \u2713 \u2713 \u2713 RHEL (Red Hat Enterprise Linux)  / CentOS 6 \u2713 SUSE 15 \u2713 SUSE 12 \u2713 Ubuntu 20.04 \u2713 \u2713 Ubuntu 18.04 \u2713 \u2713 Ubuntu 16.04 \u2713 \u2713 \u2713 Windows 8 and later \u2713 Windows Server 2012 and later \u2713 macOS 11 and later \u2713 \u2713 macOS 10.12 - 10.15 \u2713",
            "code": [],
            "preview": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "meta/410",
            "title": "File Deleted",
            "headings": [],
            "paragraphs": "The URL you requested has been deleted.",
            "code": [],
            "preview": "The URL you requested has been deleted.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "installation/installation-linux",
            "title": "Installing the Database Tools on Linux",
            "headings": [
                "Overview",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Download the Database Tools .deb package.",
                "Install the downloaded package.",
                "Run the installed Tools.",
                "Download the Database Tools .rpm package.",
                "Install the downloaded package.",
                "Run the installed Tools.",
                "Download the Database Tools .tgz archive.",
                "Extract the files from the downloaded archive.",
                "Make the DB Tools available in your PATH.",
                "Run the installed Tools."
            ],
            "paragraphs": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the Linux\nplatform. You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . Starting with MongoDB 4.4, the MongoDB Database Tools are now released separately\nfrom the MongoDB Server and use their own versioning, with an initial\nversion of  100.0.0 . Previously, these tools were released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of these\ntools, reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 Tools MongoDB 4.0 Tools MongoDB Database Tools version  100.9.0  supports the following versions\nof the MongoDB server: While the tools may work on earlier versions of MongoDB server, any\nsuch compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 The MongoDB Database Tools version  100.9.0  are supported on the following\nplatforms on the  x86_64  architecture: In addition, the Database Tools also support select Linux platforms\non the  arm64 ,  ppc64le , and  s390x  architectures.  See\n Supported Platforms  for more\ninformation. Amazon Linux 2 and 2013.03+ Debian 10, 9, and 8 RHEL / CentOS 8, 7, and 6 SUSE 12 Ubuntu 20.04, 18.04, and 16.04 The MongoDB Database Tools can be installed with your Linux distribution's package\nmanger or downloaded as a  .tgz  archive. Select the appropriate tab\nbased on your Linux distribution and desired package from the tabs\nbelow: To install the  .deb  package on Ubuntu and Debian,\nclick the  DEB Package  tab. To install the  .rpm  package on\n RHEL (Red Hat Enterprise Linux)  / CentOS / SUSE, click the\n RPM Package  tab. To install the  .tgz  tarball, click the  TGZ Archive  tab. If you have already installed the MongoDB Server via your system's\npackage manager, you likely already have the Database Tools\ninstalled. The following command will determine if the\nDatabase Tools are already installed on your system: Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: If installing on a headless Linux system, click  Copy Link \nto the right of the  Download  button to copy the download\nlink, then use a command line tool such as  wget  or  curl  to\ndownload the  .deb  directly on your Linux system. Select your Linux Platform and Architecture Select the  deb  Package Click the  Download  button Navigate to the directory containing the downloaded  .deb  package,\nthen run the following command to install the Database Tools using\nthe  apt  package manager: Be sure to include the leading  ./  in the command above,\nwhich instructs  apt  to look for this file in the local\ndirectory instead of searching remote repositories. Once installed, you can run any of the Database Tools directly\nfrom your system's command line. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage. If you have already installed the MongoDB Server via your system's\npackage manager, you likely already have the Database Tools\ninstalled. The following command will determine if the\nDatabase Tools are already installed on your system: Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: If installing on a headless Linux system, click  Copy Link \nto the right of the  Download  button to copy the download\nlink, then use a command line tool such as  wget  or  curl  to\ndownload the  .rpm  directly on your Linux system. Select your Linux Platform and Architecture Select the  rpm  Package Click the  Download  button Navigate to the directory containing the downloaded  .rpm  package,\nthen run the following command to install the Database Tools using\nthe  yum  package manager: Once installed, you can run any of the Database Tools directly\nfrom your system's command line. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage. Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: If installing on a headless Linux system, click  Copy Link \nto the right of the  Download  button to copy the download\nlink, then use a command line tool such as  wget  or  curl  to\ndownload the  .tgz  directly on your Linux system. Select your Linux Platform and Architecture Select the  tgz  Package Click the  Download  button Run the following command from the directory containing the\ndownloaded  .tgz  package: You may wish to make the Database Tools available in your system's\n PATH  environment variable, which allows referencing each tool\ndirectly on the command line by name, without needing to specify its\nfull path, or first navigating to its parent directory. You can either: Copy the DB Tools binaries from the extracted directory into a\ndirectory already listed in your  PATH , such as\n /usr/local/bin . Navigate into the extracted directory, then run\nthe following command to copy the binaries: Add the DB Tools installation directory to your PATH, by editing\nyour shell's configuration file. For example, in  bash , you\nwould edit the  ~/.bash_profile  file. Once installed, you can run any of the Database Tools directly\nfrom your system's command line. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage.",
            "code": [
                {
                    "lang": "shell",
                    "value": "sudo dpkg -l mongodb-database-tools"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt install ./mongodb-database-tools-*-100.9.0.deb"
                },
                {
                    "lang": "shell",
                    "value": "sudo yum list installed mongodb-database-tools"
                },
                {
                    "lang": "sh",
                    "value": "sudo yum install -y mongodb-database-tools-*-100.9.0.rpm"
                },
                {
                    "lang": "sh",
                    "value": "tar -zxvf mongodb-database-tools-*-100.9.0.tgz"
                },
                {
                    "lang": "sh",
                    "value": "sudo cp * /usr/local/bin/"
                }
            ],
            "preview": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the Linux\nplatform.",
            "tags": null,
            "facets": {
                "programming_language": [
                    "shell"
                ],
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "meta/404",
            "title": "File not found",
            "headings": [],
            "paragraphs": "The URL you requested does not exist or has been removed.",
            "code": [],
            "preview": "The URL you requested does not exist or has been removed.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "meta/403",
            "title": "Access Denied",
            "headings": [],
            "paragraphs": "You do not have access to the URL you requested.",
            "code": [],
            "preview": "You do not have access to the URL you requested.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "meta/401",
            "title": "Authentication Required",
            "headings": [],
            "paragraphs": "You must log in to access the URL you requested.",
            "code": [],
            "preview": "You must log in to access the URL you requested.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "release-notes/database-tools-changelog",
            "title": "Database Tools Changelog",
            "headings": [
                "100.9.4 Changelog",
                "Release",
                "100.9.3 Changelog",
                "Bug",
                "100.9.2 Changelog",
                "Task",
                "100.9.1 Changelog",
                "Bug",
                "100.9.0 Changelog",
                "Epic",
                "100.8.0 Changelog",
                "Release",
                "Bug",
                "100.7.5 Changelog",
                "Task",
                "Release",
                "100.7.4 Changelog",
                "Bug",
                "100.7.3 Changelog",
                "Bug",
                "Task",
                "100.7.2 Changelog",
                "Bug",
                "100.7.1 Changelog",
                "Bug",
                "Task",
                "100.7.0 Changelog",
                "Bug",
                "Epic",
                "Task",
                "100.6.1 Changelog",
                "Bug",
                "Task",
                "100.6.0 Changelog",
                "New Feature",
                "100.5.4 Changelog",
                "Build Failure",
                "Task",
                "100.5.3 Changelog",
                "Build Failure",
                "Bug",
                "Task",
                "100.5.2 Changelog",
                "Bug",
                "Task",
                "100.5.1 Changelog",
                "Bug",
                "100.5.0 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "New Feature",
                "Task",
                "100.4.1 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "Task",
                "100.4.0 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "New Feature",
                "Task",
                "100.3.1 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "Task",
                "100.3.0 Changelog",
                "Build Failure",
                "Release",
                "Investigation",
                "Bug",
                "New Feature",
                "Task",
                "100.2.1 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "New Feature",
                "Task",
                "100.2.0 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "New Feature",
                "Task",
                "100.1.1 Changelog",
                "Release",
                "Bug",
                "100.1.0 Changelog",
                "Build Failure",
                "Release",
                "Bug",
                "New Feature",
                "Task",
                "100.0.2 Changelog",
                "Bug",
                "Task",
                "100.0.1 Changelog",
                "Task",
                "100.0.0 Changelog",
                "Build Failure",
                "Bug",
                "New Feature",
                "Task"
            ],
            "paragraphs": "Released 2023-12-07 This version updates the Go version used to build the tools to\n 1.20.12  . TOOLS-3438  Release Database Tools 100.9.4 and update go\nversion to 1.20.12 Released 2023-11-17 TOOLS-3429  - Add support for  Debian 11 (Bullseye) Released 2023-11-16 TOOLS-3302  - Add support for Debian 12 Released 2023-11-09 This version updates external dependencies and fixes an issue where mongodump\ncould change the ordering of fields in a view definition ( TOOLS-3411 ).\nView pipelines and schema validation are the only collection options sensitive\nto field ordering. Depending on the contents of the view or validator options,\nthe following can change: Not all view pipelines or schema validations are affected by key reordering. The set of results returned by a view, or The criteria that determines which documents are accepted by a validator. TOOLS-3367  Building fails: failed to detect local platform from kernel name TOOLS-3388  mongodb/mongo-tools master :go.mod - Denial of Service DoS in golang.org/x/net TOOLS-3411  MongoDump does not maintain field-order for sort and match in Views. Released 2023-10-20 This version adds support for\n MongoDB Server 7.0 . This version updates the Go version used to build the tools to\n 1.20.10  . TOOLS-3278  Tools 7.0 Support Released 2023-08-16 This release uploads the MongoDB Database Tools to the\nMongoDB Linux v7.0 repos. TOOLS-3369  Release Database Tools 100.8.0 TOOLS-3368  MongoDB 7 Linux repos are missing  mongodb-database-tools Released 2023-08-07 This version updates Go to 1.19.12. This release of Go includes a security fix\nto the crypto/tls package. This version no longer supports the PowerPC Ubuntu 18.04 platform. TOOLS-3349  - Add integration testing for mongodump/restore on\nconfig db (and other special case dbs) TOOLS-3365  - Release Database Tools 100.7.5 with golang 1.19.12 Released 2023-07-21 This release fixes issues with mongorestore that ommitted all namespaces\ncontaining \"admin\" when restoring to an Atlas Proxy Cluster. This release\nalso fixes an issue with mongodump where the process failed against clusters\nusing Atlas Online Archive. TOOLS-3338  - Mongorestore to Atlas Proxy fails for any collection\ncontaining \"admin\" TOOLS-3344  - Mongodump does not work with Atlas Data Federation. Released 2023-06-26 This release fixes an issue introduced in 100.7.1 where specifying\n mongodump --db=confg  would not dump the entire config collection. TOOLS-3324  Fix failure to dump needed sharded collections\nfrom config database TOOLS-3319  Change mongorestore so that it works with atlas proxy\nbackup tests Released 2023-05-30 This release fixes an issue with installing Database Tools on RHEL AArch64 architecture. TOOLS-3309  Fix release issue on RHEL AArch64 architecture Released 2023-05-24 This release fixes a few bugs and adds downloads for the following platforms: The tools were compiled with Go 1.19.9. macOS 11 on ARM RedHat Enterprise Linux 9 (x86 and ARM) Amazon Linux 2023 (x86 and ARM) TOOLS-2598  Tools improperly parse multi-certs inside client certificate file TOOLS-3203  mongodump fails because it can\u2019t query system.sharding_ddl_coordinators collection TOOLS-3273  Validation added in 100.7.0 prevents Atlas proxy from running mongodump TOOLS-3279  Test suite segfaults in some failure cases TOOLS-2722  Add MacOS 11.0 ARM to Tools TOOLS-3052  Add Amazon Linux 2023 ARM to Tools TOOLS-3054  Add RHEL9 ARM to Tools TOOLS-3062  Add Amazon Linux 2023 to Tools TOOLS-3276  Skip columnstore indexes tests in mongodump and mongorestore if error is NotImplemented Released 2023-03-01 This release adds tests against MongoDB 6.3. Highlights include: New tests for  Column Store Indexes . Updating the minimum Go version to 1.19. Fixing a bug that caused the Tools to ignore a password supplied via a\nprompt. Several build failures are also fixed. TOOLS-3243  Tools produce error about missing password after prompting for a password TOOLS-3235  Tools 6.3 Support TOOLS-3169  Upgrade Go to 1.19 TOOLS-3202  Fix legacy-jstests failure with latest Server\n(6.1) TOOLS-3208  Investigate test failures in HEAD and make more\ntickets as needed TOOLS-3229  Ignore admin database in dump/restore for\natlasProxy TOOLS-3241  Fix flaky TestFailDuringResharding test TOOLS-3247  Remove mongo-tools support for ZAP PPC64LE Ubuntu\n16.04 TOOLS-3248  Fix TestRestoreTimeseriesCollections for server\n6.3+ TOOLS-3249  Remove mongo-tools support for server version 3.4\non MacOS TOOLS-3250  Fix aws-auth task failures TOOLS-3251  Update common.yml to run tests with 6.3 TOOLS-3252  Test support for Columnstore Indexes TOOLS-3255  Fix qa-tests-3.4 TOOLS-3256  Make the push tasks only run on git tags TOOLS-3257  Override deprecated mongo shell functions to fix\nqa-tests-latest TOOLS-3259  Remove 6.3 tests on  ZAP s390x RHEL 7.2  and\n ZAP PPC64LE RHEL 8.1 TOOLS-3260  Fix qa-tests on Debian 11 Released 2022-11-03 This release fixes an issue where users without permissions\nto read  config.system.preimages  could not run\n mongodump .\nThis release also fixes issues with installing the Database Tools on\nAmazon Linux 2 aarch64 and RHEL 8.3 s390x. The Database Tools\nare now available on RHEL 9.0 x86. We also made several\nimprovements to our testing and release infrastructure. TOOLS-3176  - Ignore config.system.preimages namespace TOOLS-3179  - Mongo Tools Enterprise Z series package is being published to Community repo TOOLS-3204  - Tools should not be packaged as arm64 on aarch64 platforms TOOLS-2956  - Use the new notary service to notarize MacOS builds TOOLS-3056  - Add RHEL9 x86 to Tools TOOLS-3185  - Fix TestMongorestoreTxns failure on all platforms when run against latest Server TOOLS-3201  - Add a .snyk file to exclude tests from snyk code analysis Released 2022-08-19 This release introduces a security enhancement. The tools will\ninteractively prompt for a SSL key password if the corresponding SSL key\nis encrypted and no password is provided on the command line. TOOLS-2913  - Prompt for SSL key password when key is\nencrypted Released 2022-07-19 This release mostly consists of build failure fixes, support for new\nplatforms, and tests against server version 6.0. The new platforms are\nDebian 11 on x86, Ubuntu 22.04 on x86 and ARM, and RHEL 8.3 on s390x.\nThe version of Go driver used by the tools has been updated to 1.10.0. TOOLS-3100  - Fix native-cert-ssl-4.4 task failure in all\nbuild variants TOOLS-3101  - Fix failing aws-auth-6.0 and aws-auth-latest\ntasks TOOLS-3102  - Fix intermittent failures of qa-tests-{5.3, 6.0,\nlatest} tasks TOOLS-3110  - Fix integration test failures with server 6.0+ TOOLS-3111  - Fix intermittent legacy JS test task failure TOOLS-3122  - Fix SSL cert test(s) on RHEL 6.2 TOOLS-3156  - Unable to publish to Ubuntu 22.04 repos TOOLS-3045  - Add tests for latest server release TOOLS-3051  - Release Tools with Debian 11 TOOLS-3058  - Add Ubuntu 22.04 ARM to Tools TOOLS-3059  - Release Tools with Ubuntu 22.04 ARM TOOLS-3060  - Add Ubuntu 22.04 x86 to Tools TOOLS-3061  - Release Tools with Ubuntu 22.04 x86 TOOLS-3103  - Add tests for 6.0 to evergreen TOOLS-3113  - Test secondary indexes on timeseries collections TOOLS-3130  - Add 6.0 to list of linux repos we release to TOOLS-3149  - Update the Go Driver to 1.10.0 TOOLS-3155  - Repo config for RHEL 8.3 on s390x is incorrect TOOLS-2939  - Add Enterprise RHEL 8 zSeries Released 2022-06-14 This release contains a number of bug fixes and changes. Highlights\ninclude support for clustered collections in mongorestore, updating\nour Go version from 1.16.7 to 1.17.8 to address CVEs, and supported\nplatform updates. TOOLS-3119  - All builds are failing on RHEL6.2 TOOLS-3126  - The unit tests for options processing segfault on macOS TOOLS-3127  - The dist CI task is failing on Windows TOOLS-2958  - An index deletion or collMod in the oplog can be applied to the wrong index TOOLS-2961  - The RHEL82 ARM release does not use the correct architecture TOOLS-2963  - Tools are not prompting for a password in many cases where they should TOOLS-3044  - The zip file for tools on Windows contains invalid paths TOOLS-3071 - Tools installed by RPM packages to /usr/bin are owned by mongod:mongod instead of root:root TOOLS-2906  - Update Evergreen config to use new merge key format TOOLS-3001  - bsondump should allow documents up to the internal max bson size (16mb + 16kb) TOOLS-3028  - Remove evergreen batchtimes from ZAP TOOLS-3049  - Update the Go version used to build mongo-tools to address several critical and high CVEs TOOLS-3050  - Add Debian 11 to platforms we publish tools packages for TOOLS-3095  - Remove Ubuntu 14.04 from CI and release platforms TOOLS-3104  - Add tests for 5.3 to evergreen TOOLS-3105  - Pin Go driver to version 1.9.1 TOOLS-3106  - Remove tests for 5.1 and 5.2 for most platforms TOOLS-3108  - Update mongorestore to support clustered indexes TOOLS-3116  - Change Windows build to run on windows-vsCurrent-large Released 2022-02-03 This release fixes an issue where inserting large documents with\n mongorestore  or  mongoimport \ncould cause extremely high memory usage ( TOOLS-2875 ). It also\nfixes a few minor bugs. TOOLS-2745  Tools don't support setting  retryWrites=false \nin URI parameter TOOLS-2983  Some error messages for conflicting URI/CLI\narguments are misleading TOOLS-2875  Limit the  BufferedBulkInserter  batch size by\nbytes Released 2021-10-12 This release fixes an issue where certain  config  collections which\nshould generally be ignored were included by  mongodump \nand  mongorestore . This release also ensures that any\noperations on these collections will not be applied during the oplog\nreplay phase of  mongorestore . TOOLS-2952  Filter config collections in dump/restore Released 2021-08-10 This release includes support for the loadbalanced URI option, which\nprovides compatibility with MongoDB Atlas Serverless. TOOLS-2938  Re-add Ubuntu 16.04 PowerPC platform TOOLS-2880  Release Database Tools 100.5.0 TOOLS-2863  cs.AuthMechanismProperties is not initialized\nwhen mechanism set by --authenticationMechanism TOOLS-2937  Set loadbalanced option in\ndb.configureClient() TOOLS-2932  Upgrade to Go Driver 1.7.1 Released 2021-07-23 This patch fixes a bug (:issue:` TOOLS-2931`) that was introduced in\nversion  100.4.0  which causes  mongodump  to skip any\ndocument that contains an empty field name (e.g.  { \"\": \"foo\" } ).\nDocuments with empty field names were not skipped by default if the\n --query  or  --queryFile  options were specified. No tools other\nthan  mongodump  were affected. It is highly recommended to\nupgrade to  100.4.1  if it is possible that your database contains\ndocuments with empty field names. TOOLS-2927  Clean up the platforms list inside platform.go TOOLS-2929  Release Database Tools 100.4.1 TOOLS-2931  mongodump skips documents with empty field names TOOLS-2926  Run release on 'test' and 'development' linux repo separately. Released 2021-07-19 This release includes  MongoDB Server 5.0 \nsupport, including dump/restoring of timeseries collections. TOOLS-2892  aws-auth tests failing on all variants TOOLS-2893  legacy-js-tests 4.4 and 5.0 failing on all variants TOOLS-2845  Release Database Tools 100.4.0 TOOLS-2041  Mongorestore should handle duplicate key errors during oplog replay TOOLS-2833  Creating an index with partialFilterExpression during oplogReplay fails TOOLS-2925  RPM packages are only signed with the 4.4 auth token TOOLS-2857  Dump timeseries collections TOOLS-2858  Mongodump can query timeseries collections by metadata TOOLS-2859  Restore timeseries collections TOOLS-2860  Include/Exclude/Rename timeseries collections in mongorestore TOOLS-2719  Add Enterprise RHEL 8 zSeries to Tools TOOLS-2721  Add RHEL8 ARM to Tools TOOLS-2777  Generate Full JSON variant should not be running on every commit TOOLS-2823  Build with go 1.16 TOOLS-2824  Add static analysis task that runs \"evergreen validate\" TOOLS-2849  Mongodump should fail during resharding TOOLS-2850  Mongorestore should fail when restoring geoHaystack indexes to 4.9.0 TOOLS-2851  importCollection command should cause mongodump to fail TOOLS-2853  Hide deprecated --slaveOk option TOOLS-2866  Drop support for zSeries platforms TOOLS-2873  Run full test suite on all supported distros in evergreen TOOLS-2881  Push tools releases to 4.9+ linux repos TOOLS-2921  Upgrade to Go Driver 1.6 Released 2021-03-17 This release includes various bug fixes. Particularly notable is\n TOOLS-2783 , where we reverted a change from 100.2.1\n( TOOLS-1856 : use a memory pool in  mongorestore )\nafter discovering that it was causing memory usage issues. TOOLS-2796  mongotop_sharded.js failing on all versions of the qa-tests TOOLS-2815  Development build artifacts accidentally uploaded for versioned release TOOLS-2791  Release Database Tools 100.3.1 TOOLS-2584  Restoring single BSON file should use db set in URI TOOLS-2783  Mongorestore uses huge amount of RAM TOOLS-704  Remove system.indexes collection dumping from mongodump TOOLS-2801  Migrate from dep to Go modules and update README TOOLS-2802  Make mongo-tools-common a subpackage of mongo-tools TOOLS-2805  Add mod tidy static analysis check for Go modules TOOLS-2806  Migrate mongo-tools-common unit tests to mongo-tools TOOLS-2807  Migrate mongo-tools-common integration tests to mongo-tools TOOLS-2808  Migrate mongo-tools-common IAM auth tests to mongo-tools Released 2021-02-04 This release includes support for PKCS8-encrypted client private keys,\nsupport for providing secrets in a config file instead of on the command\nline, and a few small bug fixes. TOOLS-2795  Tools failing to build on SUSE15-sp2 TOOLS-2800  RPM creation failing on amazon linux 1 TOOLS-2790  Release Database Tools 100.3.0 TOOLS-2771  SSL connection problems mongodump TOOLS-2751  Deferred query EstimatedDocumentCount helper incorrect with filter TOOLS-2760  rpm package should not obsolete itself TOOLS-2775  --local does not work with multi-file get or get_regex TOOLS-2779  Add --config option for password values TOOLS-2013  Support PKCS8 encrypted client private keys TOOLS-2707  Build mongo-tools and mongo-tools-common with go 1.15 TOOLS-2780  Add warning when password value appears on command line TOOLS-2798  Add Amazon Linux 2 Arm64 to Tools Released 2020-11-13 This release includes a  mongorestore  performance\nimprovement, a fix for a bug affecting highly parallel\n mongorestore  instances, and an observability improvement\nto  mongodump  and  mongoexport , in addition\nto a number of internal build/release changes. TOOLS-2767  Windows 64 dist task fails TOOLS-2741  Release Database Tools 100.2.1 TOOLS-2744  mongorestore not scaling due to unnecessary incremental sleep time TOOLS-2750  Log before getting collection counts TOOLS-1856  use a memory pool in mongorestore TOOLS-2651  Simplify build scripts TOOLS-2687  Add archived releases JSON feed for Database Tools TOOLS-2735  Move server vendoring instructions to a README in the repo TOOLS-2748  Add a String() to OpTime TOOLS-2758  Bump Go driver to 1.4.2 Released 2020-10-15 This release deprecates the  --sslAllowInvalidHostnames  and\n --sslAllowInvalidCertificates  flags in favor of a new\n --tlsInsecure  flag. The  mongofiles   put  and\n mongofiles   get  commands can now accept a list of file\nnames. There is a new  mongofiles   get_regex  command to\nretrieve all files matching a regex pattern. The  100.2.0  release\nalso contains fixes for several bugs. It fixes a bug introduced in\nversion  100.1.0  that made it impossible to connect to clusters with\nan SRV connection string ( TOOLS-2711 ). TOOLS-2693  Most tasks failing on race detector variant TOOLS-2737  Fix TLS tests on Mac and Windows TOOLS-2747  Git tag release process does not work TOOLS-2704  Release Database Tools 100.2.0 TOOLS-2587  sslAllowInvalidHostnames bypass ssl/tls server certification validation entirely TOOLS-2688   mongodump  does not handle EOF when passing in the password as STDIN TOOLS-2706  tar: implausibly old time stamp error on Amazon Linux/RHEL TOOLS-2708  Atlas recommended connection string for  mongostat  doesn't work TOOLS-2710  Non-zero index key values are not preserved in ConvertLegacyIndexes TOOLS-2711  Tools fail with \"a direct connection cannot be made if multiple hosts are specified\" if mongodb+srv URI or a legacy uri containing multiple  mongos  is specified TOOLS-2716   mongodb-database-tools  package should break older versions of  mongodb-*-tools TOOLS-2667  Support list of files for  put  and  get  subcommands in  mongofiles TOOLS-2668  Create regex interface for getting files from remote FS in  mongofiles TOOLS-2674  Clarify contribution guidelines TOOLS-2700  Use git tags for triggering release versions TOOLS-2701  Log target linux repo in push task Released 2020-07-31 This release contains a fix for a linux packaging bug and a\n mongorestore  bug related to the\n --convertLegacyIndexes \nflag. TOOLS-2685  Release Database Tools 100.1.1 TOOLS-2645  Check for duplicate index keys after converting legacy index definitions TOOLS-2683  Ubuntu 16.04 DB Tools 100.1.0 DEB depends on  libcom-err2 , should be  libcomerr2 Released 2020-07-24 This release officially adds support for MongoDB 4.4. In addition to\nvarious bug fixes, it adds support for MongoDB 4.4's new  MONGODB-AWS \nauthentication mechanism. The full list of changes is below: TOOLS-2604  integration-4.4-cluster is failing on master TOOLS-2638  Test-case failure for mongorestore TOOLS-2643  New linux distros missing from repo-config.yaml TOOLS-2630  Release Database Tools 100.1.0 TOOLS-2287  URI parser incorrectly prints unsupported parameter warnings TOOLS-2337  nsInclude does not work with percent encoded namespaces TOOLS-2366  ^C isn't handled by mongodump TOOLS-2494  mongorestore thorw error \"panic: close of closed channel\" TOOLS-2531  mongorestore hung if restoring views with --preserveUUID --drop options TOOLS-2596  DBTools --help links to old Manual doc pages TOOLS-2597  swallows errors from URI parsing TOOLS-2609  Detached signatures incorrectly appearing in download JSON TOOLS-2622  Tools do not build following README instructions TOOLS-2669  macOS zip archive structure incorrect TOOLS-2670  Troubleshoot IAM auth options errors TOOLS-2369  IAM Role-based authentication TOOLS-2363  Update warning message for \"mongorestore\" TOOLS-2476  Notarize builds for macOS catalina TOOLS-2505  Add missing 4.4 Platforms TOOLS-2534  Ignore startIndexBuild and abortIndexBuild oplog entries in oplog replay TOOLS-2535  commitIndexBuild and createIndexes oplog entries should build indexes with the createIndexes command during oplog replay TOOLS-2554  Remove ReplSetTest file dependencies from repo TOOLS-2569  Update tools to go driver 1.4.0 TOOLS-2618  Refactor AWS IAM auth testing code TOOLS-2628  Add 3.4 tests to evg TOOLS-2644  Update barque authentication TOOLS-2650  Create changelog for tools releases This release contains several bugfixes. It also adds support for dumping\nand restoring collections with long names since the 120 byte name limit\nwill be raised to 255 bytes in MongoDB version 4.4. The full list of changes is below: TOOLS-1785  Typo in mongodump help TOOLS-2495  Oplog replay can't handle entries > 16 MB TOOLS-2498  Nil pointer error mongodump TOOLS-2559  Error on uninstalling database-tools 99.0.1-1 RPM TOOLS-2575  mongorestore panic during convertLegacyIndexes from 4.4 mongodump TOOLS-2593  Fix special handling of $admin filenames TOOLS-2446  Add MMAPV1 testing to Tools tests TOOLS-2469  Accept multiple certs in CA TOOLS-2530  Mongorestore can restore from new mongodump format TOOLS-2537  Ignore config.system.indexBuilds namespace TOOLS-2544  Add 4.4 tests to Evergreen TOOLS-2551  Split release uploading into per-distro tasks TOOLS-2555  Support directConnection option TOOLS-2561  Sign mongodb-tools tarballs TOOLS-2605  Cut 100.0.2 release This release was a test of our new release infrastructure and contains\nno changes from 100.0.0. TOOLS-2493  Cut tools 100.0.0 and 100.0.1 GA releases This is the first separate release of the Database Tools from the\nServer. We decided to move to a separate release so we can ship new\nfeatures and bugfixes more frequently. The new separate release version\nstarts from  100.0.0  to make it clear the versioning is separate from\nthe Server. You can read more about this on the\n MongoDB blog . This release contains bugfixes, some new command-line options, and\nquality of life improvements. A full list can be found below, but here\nare some highlights: There are no longer restrictions on using  --uri  with other\nconnection options such as  --port  and  --password  as long as\nthe URI and the explicit option don't provide conflicting information.\nConnection strings can now be specified as a positional argument\nwithout the  --uri  option. The new  --useArrayIndexFields  flag for  mongoimport \ninterprets natural numbers in fields as array indexes when importing\ncsv or tsv files. The new  --convertLegacyIndexes  flag for  mongorestore \nremoves any invalid index options specified in the corresponding\n mongodump  output, and rewrites any legacy index key values\nto use valid values. A new  delete   mode  for\n mongoimport . With  --mode \n delete ,  mongoimport  deletes existing documents in the\ndatabase that match a document in the import file. TOOLS-2489  format-go task failing on master TOOLS-1493  Tools crash running help when terminal width is low TOOLS-1786  mongodump does not create metadata.json file for views dumped as collections TOOLS-1826  mongorestore panic in archive mode when replay oplog failed TOOLS-1909  mongoimport does not report that it supports the decimal type TOOLS-2275  autoIndexId:false is not supported in 4.0 TOOLS-2334  Skip system collections during oplog replay TOOLS-2336  Wrong deprecation error message printed when restoring from stdin TOOLS-2346  mongodump --archive to stdout corrupts archive when prompting for password TOOLS-2379  mongodump/mongorestore error if source database has an invalid index option TOOLS-2380  mongodump fails against hidden node with authentication enabled TOOLS-2381  Restore no socket timeout behavior TOOLS-2395  Incorrect message for oplog overflow TOOLS-2403  mongorestore hang while replaying last oplog failed in archive mode TOOLS-2422  admin.tempusers is not dropped by mongorestore TOOLS-2423  mongorestore does not drop admin.tempusers if it exists in the dump TOOLS-2455  mongorestore hangs on invalid archive TOOLS-2462  Password prompt does not work on windows TOOLS-2497  mongorestore may incorrectly validate index name length before calling createIndexes TOOLS-2513  Creating client options results in connection string validation error TOOLS-2520  Fix options parsing for SSL options TOOLS-2547  Installing database tools fails on rhel 7.0 TOOLS-2548  Installing database tools fails on SLES 15 TOOLS-1954  Support roundtrip of mongoexport array notation in mongoimport TOOLS-2268  Add remove mode to mongoimport TOOLS-2412  Strip unsupported legacy index options TOOLS-2430  mongorestore: in dotted index keys, replace \"hashed\" with \"1\" TOOLS-2459  Allow --uri to be used with other connection string options TOOLS-2460  A connection string can be set as a positional argument TOOLS-2521  Add support for the tlsDisableOCSPEndpointCheck URI option TOOLS-2529  Mongodump outputs new file format for long collection names TOOLS-2418  Remove mongoreplay from mongo-tools TOOLS-2421  Maintain test coverage after moving tools tests from server TOOLS-2438  Create MSI installer in dist task TOOLS-2439  Tools formula included in homebrew tap TOOLS-2440  Sign MSI installer TOOLS-2441  Update release process documentation TOOLS-2442  Automate release uploads TOOLS-2443  Generate tarball archive in dist task TOOLS-2444  Generate deb packages in dist task TOOLS-2449  Create sign task TOOLS-2464  Update platform support TOOLS-2470  Sign linux packages TOOLS-2471  Automate JSON download feed generation TOOLS-2472  Automate linux package publishing TOOLS-2473  Consolidate community and enterprise buildvariants TOOLS-2475  Manually verify tools release TOOLS-2480  Generate rpm packages in dist task TOOLS-2488  Update package naming and versioning TOOLS-2493  Cut tools 100.0.0 and 100.0.1 GA releases TOOLS-2506  Update maintainer in linux packages TOOLS-2523  Remove Ubuntu 12.04 and Debian 7.1 variants TOOLS-2536  ignoreUnknownIndexOptions option in the createIndexes command for servers >4.1.9 TOOLS-2538  Move convertLegacyIndexKeys() from mongorestore to mongo-tools-common TOOLS-2539  Publish linux packages to curator with correct names TOOLS-2549  Push GA releases to server testing repo TOOLS-2550  Push GA releases to the 4.4 repo TOOLS-2551  Split release uploading into per-distro tasks",
            "code": [],
            "preview": "Released 2023-12-07",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        },
        {
            "slug": "installation/installation-windows",
            "title": "Installing the Database Tools on Windows",
            "headings": [
                "Overview",
                "Versioning",
                "Compatibility",
                "MongoDB Server Compatibility",
                "Platform Support",
                "Installation",
                "Download the Database Tools MSI installer.",
                "Run the MSI installer.",
                "Make the DB Tools available in your PATH.",
                "Download the Database Tools Zip archive.",
                "Copy the files from the downloaded archive.",
                "Make the DB Tools available in your PATH."
            ],
            "paragraphs": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the Windows\nplatform. You can use  the MongoDB Database Tools  to migrate from a self-hosted deployment\nto  MongoDB Atlas . MongoDB\nAtlas is the fully managed service for MongoDB deployments in the\ncloud. To learn more, see  Seed with mongorestore .\nTo learn all the ways you can migrate to MongoDB Atlas, see\n Migrate or Import Data . Starting with MongoDB 4.4, the MongoDB Database Tools are now released separately\nfrom the MongoDB Server and use their own versioning, with an initial\nversion of  100.0.0 . Previously, these tools were released\nalongside the MongoDB Server and used matching versioning. For documentation on the MongoDB 4.2 or earlier versions of these\ntools, reference the  MongoDB Server Documentation  for that version of the tool: MongoDB 4.2 Tools MongoDB 4.0 Tools MongoDB Database Tools version  100.9.0  supports the following versions\nof the MongoDB server: While the tools may work on earlier versions of MongoDB server, any\nsuch compatibility is not guaranteed. MongoDB 7.0 MongoDB 6.0 MongoDB 5.0 MongoDB 4.4 MongoDB 4.2 The MongoDB Database Tools version  100.9.0  are supported on: Windows 8 and later Windows Server 2012 and later The MongoDB Database Tools can be installed with an MSI installer, or\ndownloaded as a ZIP archive. Select the tab below depending on your\ndesired installation method: Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: Select the  Windows x86_64  Platform Select the  msi  Package Click the  Download  button Double-click the downloaded MSI installer to install the\nDatabase Tools. During the install you may customize the\ninstallation directory if desired. You may wish to make the Database Tools available in your system's\n PATH  environment variable, which allows referencing each tool\ndirectly on the command prompt by name, without needing to specify\nits full path, or first navigating to its parent directory. Once you've installed the Database Tools, follow the instructions\nbelow to add the install directory to your system's  PATH \nenvironment variable.: Once set, you can run any of the Database Tools directly\nfrom your command prompt. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage. Open the  Control Panel . In the  System and Security  category, click\n System . Click  Advanced system settings . The  System\nProperties  modal displays. Click  Environment Variables . In the  System variables  section, select  Path  and click\n Edit . The  Edit environment variable  modal\ndisplays. Click  New  and add the filepath to the location where\nyou installed the Database Tools. Click  OK  to confirm your changes. On each other\nmodal, click  OK  to confirm your changes. Open the  MongoDB Download Center .\nUsing the drop-down menu on the right-hand side of the page: Select the  Windows x86_64  Platform Select the  zip  Package Click the  Download  button Double-click the downloaded Zip archive to unpack it and copy the\nDatabase Tools from the  bin  directory to your computer's\nfilesystem. You may wish to make the Database Tools available in your system's\n PATH  environment variable, which allows referencing each tool\ndirectly on the command prompt by name, without needing to specify\nits full path, or first navigating to its parent directory. Once you've copied the Database Tools to the desired location on\nyour filesystem, follow the instructions below to add that location\nto your system's  PATH  environment variable.: Once set, you can run any of the Database Tools directly\nfrom your command prompt. Consult the reference page for the\nspecific tool you wish to use for its full syntax and usage. Open the  Control Panel . In the  System and Security  category, click\n System . Click  Advanced system settings . The  System\nProperties  modal displays. Click  Environment Variables . In the  System variables  section, select  Path  and click\n Edit . The  Edit environment variable  modal\ndisplays. Click  New  and add the filepath to the location where\nyou copied the Database Tools. Click  OK  to confirm your changes. On each other\nmodal, click  OK  to confirm your changes.",
            "code": [],
            "preview": "The MongoDB Database Tools are a suite of command-line utilities for working with\nMongoDB. Use this guide to install the Database Tools on the Windows\nplatform.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "database-tools"
                ]
            }
        }
    ]
}