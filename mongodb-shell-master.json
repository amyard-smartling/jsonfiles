{
    "url": "http://mongodb.com/docs/mongodb-shell",
    "includeInGlobalSearch": true,
    "documents": [
        {
            "slug": "run-commands",
            "title": "Run Commands",
            "headings": [
                "Format Input and Output",
                "Switch Databases",
                "Create a New Database and Collection",
                "Terminate a Running Command",
                "Command Exceptions",
                "Clear the mongosh Console"
            ],
            "paragraphs": "To run commands in  mongosh , you must first\n connect to a MongoDB deployment . mongosh  uses the  Node.js BSON parser  parser to parse  BSON \ndata. You can use the parser's  EJSON  interface to transform your\ndata when you work with  mongosh . For examples that use EJSON, see:  EJSON . To display the database you are using, type  db : The operation should return  test , which is the default database. To switch databases, issue the  use <db>  helper, as in the\nfollowing example: To access a different database from the current database without\nswitching your current database context, see the\n db.getSiblingDB()  method. To list the databases available to the user, use the helper  show\ndbs . To create a new database, issue the  use <db>  command with the\ndatabase that you would like to create. For example, the following\ncommands create both the database  myNewDatabase  and the\n collection   myCollection  using the\n insertOne()  operation: If a collection does not exist, MongoDB creates the collection when you\nfirst store data for that collection. To terminate a running command or query in  mongosh ,\npress  Ctrl + C . When you enter  Ctrl + C ,  mongosh : If  mongosh  cannot cleanly terminate the running process,\nit issues a warning. Pressing  Ctrl + C  once will not exit  mongosh , press\n Ctrl + C  twice to  exit  mongosh . You can also terminate a script from within the script code by calling the\n exit(<code>)  command. For more information, refer to\n Terminate a Script on Error . interrupts the active command, tries to terminate the ongoing, server-side operation, and returns a command prompt. Pressing  Ctrl + C  in  mongosh  does not terminate\nasynchronous code. Asynchronous operations such as  setTimeout  or\noperations like  fs.readFile  continue to run. There is no way to terminate asynchronous code in\n mongosh . This is the same behavior as in the Node.js\n REPL . In scenarios where the output of a command includes  { ok: 0 } ,\n mongosh  throws an exception and does not return the raw output from\nthe server. In the legacy  mongo  shell, when a command's output included  {\nok: 0 } , the behavior differs between commands.  mongosh \nprovides consistent behavior by always throwing an exception in these\nscenarios. The  cls  command clears the console. You can also clear the console\nwith  Ctrl + L  and  console.clear() .",
            "code": [
                {
                    "lang": "sh",
                    "value": "db"
                },
                {
                    "lang": "javascript",
                    "value": "use <database>"
                },
                {
                    "lang": "javascript",
                    "value": "use myNewDatabase\ndb.myCollection.insertOne( { x: 1 } );"
                }
            ],
            "preview": "Use run commands in the MongoDB Shell to create or switch databases, terminate a query, or clear the console.",
            "tags": "server, atlas",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "run-agg-pipelines",
            "title": "Run Aggregation Pipelines",
            "headings": [
                "Understand the Aggregation Syntax",
                "Example",
                "Example Document",
                "Example Aggregation Pipeline"
            ],
            "paragraphs": "You can run  aggregation pipelines  on your\ncollections using the  MongoDB Shell . Aggregation pipelines transform your\ndocuments into aggregated results based on selected\n pipeline stages . Common uses for aggregation include: When you run an aggregation,  MongoDB Shell  outputs the results directly to\nthe terminal. Grouping data by a given expression. Calculating results based on multiple fields and storing those results\nin a new field. Filtering data to return a subset that matches a given criteria. Sorting data. The MongoDB aggregation pipeline consists of  stages .\nEach stage transforms the documents as they pass through the pipeline.\nPipeline stages do not need to produce one output document for every\ninput document; e.g., some stages may generate new documents or filter\nout documents. To create an aggregation pipeline, use the following syntax in the\n MongoDB Shell : The example below uses the  movies  collection in the  Atlas \n sample_mflix  sample dataset. The examples on this page reference the  Atlas \n sample dataset . You can create a free  Atlas \ncluster and populate that cluster with sample data to follow along with\nthese examples. To learn more, see\n Get Started with Atlas . Each document in the  movies  collection describes a movie: The documents aggregated in this tutorial reside in the\n sample_mflix.movies  collection. Use the following command to switch\nto the database that contains this collection: Consider the following pipeline: This pipeline performs an aggregation in four stages: When you run the  example pipeline , the  MongoDB Shell  prints documents\nsimilar to the following to the terminal: The  $project  stage passes documents that\ncontain the following fields to the next pipeline stage: Documents from the collection that don't include all of these fields\nare not passed to the next pipeline stage. The  $project  stage transforms the example document and passes\nthe following output to the next pipeline stage: genres imdb title The  $project  stage specifies  _id: 0  to suppress the  _id \nfield from the documents it passes to the next stage. For more information, see the  MongoDB Manual . The  $unwind  stage passes a document for each\nelement in the  genres  array to the next pipeline stage. The  $unwind  stage generates the following two documents from the\noriginal example document, then passes them to the next pipeline\nstage: The  $group  stage: This stage sends documents that look similar to the following to\nthe next pipeline stage: Retrieves the distinct genre values from the documents it receives\nfrom the previous pipeline stage, Creates a document for each distinct genre where the  _id  is the\ngenre name, Adds a field,  averageGenreRating , to each new document that\ncontains the average  imdb.rating  of all documents that match the\ngenre, and Passes the new documents to the next pipeline stage. The  $sort  stage sorts the documents it receives\nfrom the previous stage in descending order based on the value of\nthe  averageGenreRating  field. To learn more about the available aggregation stages, see\n Aggregation Pipeline Stages . To learn more about the available aggregation operators you\ncan use within stages, see\n Aggregation Pipeline Operators .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "db.<collection>.aggregate([\n  {\n    <$stage1>\n  },\n  {\n    <$stage2>\n  }\n  ...\n])"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  _id: 573a1397f29313caabce8347,\n  fullplot: 'In a cyberpunk vision of the future, man has developed the technology to create replicants, human clones used to serve in the colonies outside Earth but with fixed lifespans. In Los Angeles, 2019, Deckard is a Blade Runner, a cop who specializes in terminating replicants. Originally in retirement, he is forced to re-enter the force when four replicants escape from an off-world colony to Earth.',\n  imdb: { rating: 8.2, votes: 419589, id: 83658 },\n  year: 1982,\n  plot: 'A blade runner must pursue and try to terminate four replicants who stole a ship in space and have returned to Earth to find their creator.',\n  genres: [ 'Sci-Fi', 'Thriller' ],\n  rated: 'R',\n  metacritic: 88,\n  title: 'Blade Runner',\n  lastupdated: '2015-09-04 00:05:51.990000000',\n  languages: [ 'English', 'German', 'Cantonese', 'Japanese', 'Hungarian' ],\n  writers: [\n    'Hampton Fancher (screenplay)',\n    'David Webb Peoples (screenplay)',\n    'Philip K. Dick (novel)'\n  ],\n  type: 'movie',\n  tomatoes: {\n    viewer: { rating: 4, numReviews: 331213, meter: 91 },\n    dvd: 1997-08-27T00:00:00.000Z,\n    critic: { rating: 8.5, numReviews: 102, meter: 90 },\n    lastUpdated: 2015-09-12T17:48:21.000Z,\n    consensus: \"Misunderstood when it first hit theaters, the influence of Ridley Scott's mysterious, neo-noir Blade Runner has deepened with time. A visually remarkable, achingly human sci-fi masterpiece.\",\n    rotten: 10,\n    production: 'Warner Bros. Pictures',\n    fresh: 92\n  },\n  poster: 'https://m.media-amazon.com/images/M/MV5BNzQzMzJhZTEtOWM4NS00MTdhLTg0YjgtMjM4MDRkZjUwZDBlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SY1000_SX677_AL_.jpg',\n  num_mflix_comments: 1,\n  released: 1982-06-25T00:00:00.000Z,\n  awards: {\n    wins: 13,\n    nominations: 15,\n    text: 'Nominated for 2 Oscars. Another 11 wins & 15 nominations.'\n  },\n  countries: [ 'USA', 'Hong Kong', 'UK' ],\n  cast: [\n    'Harrison Ford',\n    'Rutger Hauer',\n    'Sean Young',\n    'Edward James Olmos'\n  ],\n  directors: [ 'Ridley Scott' ],\n  runtime: 117\n}"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix"
                },
                {
                    "lang": "javascript",
                    "value": "db.movies.aggregate([\n\n  // First Stage\n\n  { $project: { _id: 0, genres: 1, imdb: 1, title: 1 } },\n\n  // Second Stage\n\n  { $unwind: \"$genres\" },\n\n  // Third Stage\n\n  { $group:\n    { _id: \"$genres\",\n      averageGenreRating: { $avg: \"$imdb.rating\" }\n    }\n  },\n\n   // Fourth Stage\n\n   { $sort: { averageGenreRating: -1 } }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n  { _id: 'Film-Noir', averageGenreRating: 7.503809523809523 },\n  { _id: 'Documentary', averageGenreRating: 7.365266635205286 },\n  { _id: 'Short', averageGenreRating: 7.355813953488372 },\n  { _id: 'News', averageGenreRating: 7.254901960784314 },\n  { _id: 'History', averageGenreRating: 7.202306920762287 },\n  { _id: 'War', averageGenreRating: 7.183944374209861 },\n  { _id: 'Biography', averageGenreRating: 7.097142857142857 },\n  { _id: 'Talk-Show', averageGenreRating: 7 },\n  { _id: 'Music', averageGenreRating: 6.923452380952381 },\n  { _id: 'Animation', averageGenreRating: 6.917993795243019 },\n  { _id: 'Western', averageGenreRating: 6.879197080291971 },\n  { _id: 'Drama', averageGenreRating: 6.830528688822631 },\n  { _id: 'Sport', averageGenreRating: 6.781233933161954 },\n  { _id: 'Crime', averageGenreRating: 6.730478683620045 },\n  { _id: 'Musical', averageGenreRating: 6.696913580246913 },\n  { _id: 'Romance', averageGenreRating: 6.695711554220159 },\n  { _id: 'Mystery', averageGenreRating: 6.563317384370015 },\n  { _id: 'Adventure', averageGenreRating: 6.527788649706458 },\n  { _id: 'Comedy', averageGenreRating: 6.479626461362988 },\n  { _id: 'Fantasy', averageGenreRating: 6.42495652173913 }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  imdb: { rating: 8.2, votes: 419589, id: 83658 },\n  genres: [ 'Sci-Fi', 'Thriller' ],\n  title: 'Blade Runner'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  imdb: { rating: 8.2, votes: 419589, id: 83658 },\n  genres: 'Sci-Fi',\n  title: 'Blade Runner'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  imdb: { rating: 8.2, votes: 419589, id: 83658 },\n  genres: 'Thriller',\n  title: 'Blade Runner'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{ _id: 'Sport', averageGenreRating: 6.781233933161954 },\n{ _id: 'History', averageGenreRating: 7.202306920762287 },\n{ _id: 'Biography', averageGenreRating: 7.097142857142857 },\n{ _id: 'Adventure', averageGenreRating: 6.527788649706458 },\n{ _id: 'Family', averageGenreRating: 6.36096256684492 },\n{ _id: 'Crime', averageGenreRating: 6.730478683620045 },\n{ _id: 'Western', averageGenreRating: 6.879197080291971 },\n{ _id: 'Fantasy', averageGenreRating: 6.42495652173913 },\n{ _id: 'Talk-Show', averageGenreRating: 7 },\n{ _id: 'Documentary', averageGenreRating: 7.365266635205286 },\n{ _id: 'War', averageGenreRating: 7.183944374209861 },\n{ _id: 'Short', averageGenreRating: 7.355813953488372 },\n{ _id: 'Horror', averageGenreRating: 5.84110718492344 },\n{ _id: 'Film-Noir', averageGenreRating: 7.503809523809523 },\n{ _id: 'News', averageGenreRating: 7.254901960784314 },\n{ _id: 'Thriller', averageGenreRating: 6.322121555303888 },\n{ _id: 'Action', averageGenreRating: 6.3774842271293375 },\n{ _id: 'Music', averageGenreRating: 6.923452380952381 },\n{ _id: 'Animation', averageGenreRating: 6.917993795243019 },\n{ _id: 'Drama', averageGenreRating: 6.830528688822631 }"
                }
            ],
            "preview": "You can run aggregation pipelines on your\ncollections using the MongoDB Shell. Aggregation pipelines transform your\ndocuments into aggregated results based on selected\npipeline stages.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "write-scripts",
            "title": "Write Scripts",
            "headings": [
                "Compatibility",
                "Execute a JavaScript File",
                "Execute a Script from Within mongosh",
                "File Paths",
                "Example",
                "Execute a Script From the Command Line",
                "Example",
                "Execute a Script From the Command Line with Authentication",
                "Terminate a Script on Error",
                "Execute Code From a Configuration File",
                "Execute JavaScript Code",
                "Execute MongoDB Code",
                "Execute JavaScript and MongoDB Code",
                "Open a New Connection",
                "Connect to a Local MongoDB Instance",
                "Connect to an Atlas Deployment",
                "Connect to a MongoDB Instance that Enforces Access Control",
                "Use connect() to Connect to a MongoDB Instance",
                "Connection Considerations",
                "Script Includes Connection Detail",
                "Script Does Not Include Connection Details"
            ],
            "paragraphs": "You can write scripts for the  MongoDB Shell  that modify data in MongoDB or\nperform administrative operations. You may also want to package your\nscripts as  snippets  for easier distribution and\nmanagement. This tutorial introduces using the  MongoDB Shell  with JavaScript to\naccess MongoDB. To learn more about using the  MongoDB Shell  for deployments\nhosted in MongoDB Atlas, see  Connect via mongosh . You can  write scripts for the  MongoDB Shell  for deployments hosted\nin the following environments: MongoDB Atlas : The fully\nmanaged service for MongoDB deployments in the cloud MongoDB Enterprise : The\nsubscription-based, self-managed version of MongoDB MongoDB Community : The\nsource-available, free-to-use, and self-managed version of MongoDB You can execute a  .js  file from within the  MongoDB Shell \nusing the  load()  method. The  load()  method accepts relative\nand absolute paths. If the current working directory of the  MongoDB Shell \nis  /data/db , and  connect-and-insert.js  is in the\n /data/db/scripts  directory, then the following calls within the\n MongoDB Shell  are equivalent: The following example creates and executes a script that: Connects to a local instance running on the default port. Connects to the  myDatabase  database. Populates the  movies  collection with sample documents. Create a file named  connect-and-insert.js  with the following\ncontents: To load and execute the  connect-and-insert.js  file, use\n mongosh  to connect to your deployment and run the following\ncommand: To confirm that the documents loaded correctly, use the\n myDatabase  collection and query the  movies  collection. There is no search path for the  load()  method. If the target\nscript is not in the current working directory or the full specified\npath, the  MongoDB Shell  cannot access the file. You can use  mongosh  to execute a script from the command\nline without entering the  mongosh  console. To specify the filename, use the  --file  or  -f  parameter to\nspecify the filename. You may also need to specify connection\ninformation in addition to the  --file  or  -f  parameters. If you pass a filename to  mongosh  without using the\nparameter flags the connection may fail if there are other command\nline arguments. To pass filenames always use  --file  or  -f . The following example creates scripts and runs them from the command\nline. loadMovies.js , uses  insertMany()  to a\nupdate a local MongodDB instance. queryMovies.js  uses  db.collection.find()  to verify\nthe update. Copy this script and save it as  loadMovies.js . Verify the connection string in the highlighted line. If your\nMongoDB instance is not running on  localhost:27017 , you\nmust edit the connection string. For example, the following connection string connects to\n localhost  port  27500 : Copy this script and save it as  queryMovies.js . Run the scripts from the command line. Verify the output. The output of the  db.collection.find()  command shows\nthat the  movies  collection was updated. To make the output visible, use  printjson()  to call\n db.collection.find() . To execute a script against a remote  mongod  instance that\nrequires authentication, specify the connection and authentication\ndetails in addition to the filename. For example: You can also specify the shortened form of the options: In shells like  bash  and  zsh , if you begin a command with a\nspace it will not be saved in your command history. This minimizes\nexposure if you enter passwords on the command line. It is often useful to terminate a running script if an exception is thrown, or\nin the case of unexpected results. Exiting at a specific point in the script\nprevents the execution of unnecessary code and potentially unexpected results. To terminate a script, you can call the  exit(<code>)  method, where the\n <code>  is any user-specified value. As a best practice, wrap code in a  try - catch , calling the\n exit  method in the  catch  block. Likewise, to check the results of a query or any command,\nyou can add an  if - else  statement and call the  exit  method if the\nresults are not what is expected. On startup,  mongosh  checks your  HOME  directory for a\nJavaScript file named  .mongoshrc.js . If this file is found,\n mongosh  reads the content of  .mongoshrc.js  before\ndisplaying the prompt for the first time. Customize the  mongosh  Prompt .mongoshrc  Configuration File To update the  mongosh  prompt to display line numbers, add\nthe following code to  <your-home-directory>/.mongoshrc.js The prompt will look like this: To create a log of when your  mongosh  client connects to a\ndatabase, add the following code to\n <your-home-directory>/.mongoshrc.js : Each time you connect to a database, the MongoDB server adds a\ndocument like the following to the  clientConnections  collection. The current database name is part of the default  mongosh  prompt. To\nreformat the prompt to show the database and hostname, use a function\nlike this one: The prompt will look like this: From the  MongoDB Shell  or from a JavaScript file, you can instantiate\ndatabase connections using the  Mongo()  method: The  MongoDB Shell  does not support the\n ClientSideFieldLevelEncryptionOptions \ndocument with the  Mongo()  method. Consider a MongoDB instance running on localhost on the default port. The following example: Instantiates a new connection to the instance, and Sets the global  db  variable to  myDatabase  using the\n Mongo.getDB()  method. To  connect to a deployment \nhosted in MongoDB Atlas, run the  mongosh  command with your\nAtlas connection string. For example: Once you've established a connection to your deployment, you can\ninstantiate database connections directly from the  MongoDB Shell .\nThe following example: Instantiates a connection to the current deployment by using the\n db.getMongo()  method. Sets the global  db  variable to  myDatabase  by using the\n Mongo.getDB()  method. To connect to a MongoDB instance that enforces access control, you\nmust include the credentials in the  connection string . The following command connects to a MongoDB instance that is: Running on  localhost  on the default port, and Secured using  SCRAM . The  MongoDB Shell  redacts credentials from the  command history  and the  logs . You can also use the  connect()  method to connect to the MongoDB instance. The following command: Connects to the MongoDB instance that is running on  localhost  with\nthe non-default port  27020 , and Sets the global  db  variable. Consider portability and the operating environment when you write\nscripts. If the connection details are included in the script: Consider a  mongod  instance running on\n localhost:27500 . The following script prints the number of users. Copy the code and save\nit as  getUserCount.js . Run  getUserCount.js : The highlighted line is correct, but  getUserCount.js  will not run\nwithout  --nodb  because  mongosh  cannot connect to the\nlocal instance. With  --nodb ,  mongosh  runs\n getUserCount.js  and uses the highlighted information to connect. You do not need to specify connection information on the command\nline. You should use the  --nodb  parameter. mongosh  defaults to port 27170. mongod  is running on port 27500. The  --nodb  parameter instructs  mongosh  to run a\nscript without first connecting to a  mongod  instance. It is convenient to specify connection information in your script, but\nthat also makes it less portable. The  getUserCount.js  script would\nhave to be updated to run on a remote instance or one running on a\ndifferent port. To increase portability, use  db.getSiblingDB()  and specify\nthe connection information on the command line. The following script is more portable than  getUserCount.js  because\nit does not have specific connection details. Copy the code and save it\nas  portableGetUserCount.js . To run  portableGetUserCount.js , specify the host and port on the\ncommand line: To run  portableGetUserCount.js  on a different host or port, change\nthe connection details on the command line. Unlike  getUserCount.js ,\nyou do not have to edit the script to run  portableGetUserCount.js .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "load( \"scripts/connect-and-insert.js\" )\nload( \"/data/db/scripts/connect-and-insert.js\" )"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect( 'mongodb://localhost/myDatabase' );\n\ndb.movies.insertMany( [\n   {\n      title: 'Titanic',\n      year: 1997,\n      genres: [ 'Drama', 'Romance' ]\n   },\n   {\n      title: 'Spirited Away',\n      year: 2001,\n      genres: [ 'Animation', 'Adventure', 'Family' ]\n   },\n   {\n      title: 'Casablanca',\n      genres: [ 'Drama', 'Romance', 'War' ]\n   }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "load( \"connect-and-insert.js\" )"
                },
                {
                    "lang": "javascript",
                    "value": "use myDatabase\ndb.movies.find()"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect( 'mongodb://localhost/films' );\n\ndb.movies.insertMany( [\n   {\n      title: 'Titanic',\n      year: 1997,\n      genres: [ 'Drama', 'Romance' ]\n   },\n   {\n      title: 'Spirited Away',\n      year: 2001,\n      genres: [ 'Animation', 'Adventure', 'Family' ]\n   },\n   {\n      title: 'Casablanca',\n      genres: [ 'Drama', 'Romance', 'War' ]\n   }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect( 'mongodb://localhost:27500/films' );"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect( 'mongodb://localhost/films' );\nprintjson( db.movies.find( {} ) );"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --file loadMovies.js --file queryMovies.js"
                },
                {
                    "lang": "javascript",
                    "value": "Loading file: loadMovies.js\nLoading file: queryMovies.js\n[\n   {\n      _id: ObjectId(\"616f1b8092dbee425b661117\"),\n      title: 'Titanic',\n      year: 1997,\n      genres: [ 'Drama', 'Romance' ]\n   },\n   {\n      _id: ObjectId(\"616f1b8092dbee425b661118\"),\n      title: 'Spirited Away',\n      year: 2001,\n      genres: [ 'Animation', 'Adventure', 'Family' ]\n   },\n   {\n      _id: ObjectId(\"616f1b8092dbee425b661119\"),\n      title: 'Casablanca',\n      genres: [ 'Drama', 'Romance', 'War' ]\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "printjson( db.movies.find( {} ) ) ;"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --host 172.17.0.3 --port 27500 --username filmFan --password superSecret --file loadMovies.js"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --host 172.17.0.3 --port 27500 -u filmFan -p superSecret -f loadMovies.js"
                },
                {
                    "lang": "javascript",
                    "value": "let cmdCount = 1;\nprompt = function() {\n             return (cmdCount++) + \"> \";\n         }"
                },
                {
                    "lang": "javascript",
                    "value": "1> show collections\n2> use test\n3>"
                },
                {
                    "lang": "javascript",
                    "value": "db.clientConnections.insertOne( { connectTime: ISODate() } )"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  _id: ObjectId(\"61d4bbf0fa4c85f53418070f\"),\n  connectTime: ISODate(\"2022-01-04T21:28:16.367Z\")\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   const hostnameSymbol = Symbol('hostname');\n   prompt = () => {\n      if (!db[hostnameSymbol])\n         db[hostnameSymbol] = db.serverStatus().host;\n      return `${db.getName()}@${db[hostnameSymbol]}> `;\n   };\n}"
                },
                {
                    "lang": "javascript",
                    "value": "admin@centos0722:27502>"
                },
                {
                    "lang": "javascript",
                    "value": "new Mongo()\nnew Mongo(<host>)\nnew Mongo(<host:port>)"
                },
                {
                    "lang": "javascript",
                    "value": "conn = Mongo();\ndb = conn.getDB(\"myDatabase\");"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb+srv://YOUR_CLUSTER_NAME.YOUR_HASH.mongodb.net/\" --apiVersion YOUR_API_VERSION --username YOUR_USERNAME"
                },
                {
                    "lang": "javascript",
                    "value": "conn = db.getMongo()\ndb = conn.getDB(\"myDatabase\");"
                },
                {
                    "lang": "javascript",
                    "value": "conn = Mongo(\"mongodb://<username>:<password>@localhost:27017/<authDB>\");"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect(\"localhost:27020/myDatabase\");"
                },
                {
                    "lang": "javascript",
                    "value": "db = connect( \"localhost:27500/admin\" );\u02d8\nprintjson( db.system.users.countDocuments() );"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb --file getUserCount.js"
                },
                {
                    "lang": "javascript",
                    "value": "db = db.getSiblingDB( \"admin\" );\nprintjson( db.system.users.countDocuments() );"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --host 172.17.0.3 --port 27500 --file portableGetUserCount.js"
                }
            ],
            "preview": "Write scripts for the MongoDB Shell that modify data in MongoDB or perform administrative operations.",
            "tags": "server",
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "programming_language": [
                    "javascript/typescript"
                ],
                "target_product": [
                    "mongodb-shell"
                ]
            }
        },
        {
            "slug": "configure-mongosh",
            "title": "Configure mongosh",
            "headings": [],
            "paragraphs": "Learn how to configure  mongosh  behaviors and user experience: Use an Editor for Commands Configure Settings Customize the  mongosh  Prompt Configure Telemetry Options",
            "code": [],
            "preview": "Learn how to configure mongosh behaviors and user experience.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "logs",
            "title": "Retrieve Shell Logs",
            "headings": [
                "View MongoDB Shell Logs",
                "Find your Log ID.",
                "View the log for the session.",
                "View MongoDB Shell Command History",
                "Log Retention"
            ],
            "paragraphs": "MongoDB Shell  uses  ndjson  to store session logs.\nStarting in  mongosh  version 1.0.5, the log  MongoDB Shell \nformat is updated to match the MongoDB server log format. For details,\nsee  Log Messages . You can view or tail the logs for a  MongoDB Shell  session based on its\nlog ID. The  MongoDB Shell  redacts credentials from the  command history  and the  logs . MongoDB Shell  displays the log ID each time you open the shell. MongoDB Shell  saves the log for each session to your user's\n .mongodb/mongosh  directory: Run the following command to view the log for a session: Run the following command to tail the log for a session: MongoDB Shell  saves the log for each session to your user's\n C:\\Users\\<username>\\AppData\\Local\\  directory: Run the following PowerShell command to view the log for a session: Run the following PowerShell command to tail the log for a\nsession: MongoDB Shell  saves a history of all commands you've run across sessions.\nWhen a new command is issued, it is added to the beginning of the\nhistory file. Open the following file in a text editor to view the  MongoDB Shell  command\nhistory: Operating System Path to History File macOS and Linux ~/.mongodb/mongosh/mongosh_repl_history Windows %UserProfile%/.mongodb/mongosh/mongosh_repl_history mongosh  retains up to 100 log files for 30 days.  mongosh \nautomatically deletes log files older than 30 days.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "$ mongosh\n\nCurrent Mongosh Log ID: c2961dbd6b73b052671d9df0\nConnecting to: mongodb://127.0.0.1:27017\nUsing MongoDB: 4.2.8\nUsing Mongosh: 2.1.4"
                },
                {
                    "lang": "sh",
                    "value": "~/.mongodb/mongosh/<LogID>_log"
                },
                {
                    "lang": "sh",
                    "value": "cat ~/.mongodb/mongosh/<LogID>_log"
                },
                {
                    "lang": "sh",
                    "value": "tail -f ~/.mongodb/mongosh/<LogID>_log"
                },
                {
                    "lang": "sh",
                    "value": "%UserProfile%/AppData/Local/mongodb/mongosh/<LogID>_log"
                },
                {
                    "lang": "sh",
                    "value": "Get-Content %UserProfile%/AppData/Local/mongodb/mongosh/<LogID>_log"
                },
                {
                    "lang": "sh",
                    "value": "Get-Content %UserProfile%/AppData/Local/mongodb/mongosh/<LogID>_log"
                }
            ],
            "preview": "MongoDB Shell uses ndjson to store session logs.\nStarting in mongosh version 1.0.5, the log MongoDB Shell\nformat is updated to match the MongoDB server log format. For details,\nsee Log Messages.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "connect",
            "title": "Connect to a Deployment",
            "headings": [
                "Prerequisites",
                "Supported MongoDB Versions",
                "Install mongosh",
                "Connect to a MongoDB Atlas Deployment",
                "Get your Atlas Connection String",
                "Set Your Database Credentials",
                "Connect to MongoDB Atlas with mongosh",
                "Connect to a Local Deployment on the Default Port",
                "Connect to a Local Deployment on a Non-Default Port",
                "Connect to a Deployment on a Remote Host",
                "Specify Connection Options",
                "Connect With Authentication",
                "Connect with OpenID Connect",
                "Connect with LDAP",
                "Connect to a Replica Set",
                "Option 1: DNS Seedlist Format",
                "Option 2: Specify Members in Connection String",
                "Connect Using TLS",
                "Connect to a Specific Database",
                "Connect to a Different Deployment",
                "Verify Current Connection",
                "Disconnect from a Deployment",
                "Non-genuine Deployments",
                "Limitations"
            ],
            "paragraphs": "This page shows how to use the  MongoDB Shell  to connect to a MongoDB\ndeployment. You can connect to a\n MongoDB Atlas cloud-hosted deployment ,\nconnect to a local deployment, or connect to another remote host with\n MongoDB Shell . To use the  MongoDB Shell , you must have a MongoDB deployment to connect\nto. For a free cloud-hosted deployment, you can use\n MongoDB Atlas . To learn how to run a local MongoDB deployment, see\n Install MongoDB . You can use the  MongoDB Shell  to connect to MongoDB version 4.2 or\ngreater. These procedures assume you have already installed  mongosh . For more\ninformation about installing  mongosh , refer to\n Install  mongosh . You can connect to your MongoDB Atlas deployment directly from your shell. You need an Atlas connection string to connect from  MongoDB Shell .\nYou can get the Atlas connection string in the Atlas UI. Refer to the\n Find Your MongoDB Atlas Connection String \nguide for details. If you haven't already\n created a database user ,\nyou must set a username and password. To connect to Atlas, pass your username with the connection string.\nthe connection string to connect to Atlas. After you issue the\nconnect command, the shell prompts for your password. To establish your connection, run the  mongosh  command with your connection string and options\nto establish the connection. The connection string includes the following elements: It resembles the following string: Your cluster name A hash A flag for the API version A flag for the username you want to use to connect You can use other connection security options to connect to Atlas via\n mongosh . For information on connecting with a private\nIP for peering or a Private Endpoint connection, refer to the\n Atlas Connect via mongosh \ndocumentation. To connect to a MongoDB deployment running on  localhost  with\n default port  27017, run  mongosh  without any options: This is equivalent to the following command: To specify a port to connect to on localhost, you can use either: For example, the following commands connect to a deployment running on\nlocalhost port 28015: A  connection string  with the\nchosen port The  --port  command-line option To specify a remote host and port, you can use either: For example, the following commands connect to a MongoDB deployment\nrunning on host  mongodb0.example.com  and port 28015: A  connection string  with the\nchosen host and port. The  --host  and  --port  command-line options. If you omit the\n --port  option,  mongosh  uses the default port 27017. If your remote host is an  Atlas  cluster, you can copy your\nconnection string from the  Atlas  UI. To learn more, see\n Connect to a Cluster \nin the Atlas documentation. Specify different connection options to connect to different types of\ndeployments. To connect to a MongoDB deployment that requires authentication, use the\n --username  and  --authenticationDatabase  options.  mongosh  prompts you for a\npassword, which it hides as you type. For example, to authenticate as user  alice  on the  admin \ndatabase, run the following command: To provide a password as part of the connection command instead of using\nthe prompt, use the  --password  option. Use this\noption for programmatic usage of  mongosh , like a  driver . To enforce authentication on a deployment, see\n Enable Access Control . To provision access to a MongoDB deployment, see  Database\nUsers . To connect to a deployment using  OpenID Connect ,\nuse the  --authenticationMechanism  option and set it to  MONGODB-OIDC .\n mongosh  redirects you to a browser where you enter your identity provider's\nlog-in information. For example, the following connects to a local deployment using  MONGODB-OIDC : To connect to a deployment using  LDAP : Include the  --host  and\n --port  of the MongoDB deployment, along with\nany other options relevant to your deployment. For example, the following operation authenticates to a MongoDB\ndeployment running with LDAP authentication and authorization: Set  --username  to a username that\nrespects the  security.ldap.authz.queryTemplate , or any\nconfigured  security.ldap.userToDNMapping  template. Set  --password  to the appropriate\npassword. If you do not specify the password to the\n --password  command-line option,  mongosh  prompts you for\nthe password. Set  --authenticationDatabase \nto  $external .\nThe  $external  argument must be placed in single quotes, not\ndouble quotes, to prevent the shell from interpreting  $external \nas a variable. Set  --authenticationMechanism \nto  PLAIN . When you use one-time passwords with LDAP authentication, adding\nthe  connection string options \n maxPoolSize=1&srvMaxHosts=1  to your connection string is\nrecommended to reduce the potential for connection failures. To connect to a replica set, you can either: Use the  DNS Seedlist Connection Format . Explicitly specify the replica set name and members in the connection\nstring. To use the DNS seedlist connection format, include the  +srv  modifier\nin your connection string. For example, to connect to a replica set on  server.example.com , run\nthe following command: When you use the  +srv  connection string modifier, MongoDB\nautomatically sets the  --tls  connection option to\n true . To override this behavior, set  --tls  to  false . You can specify individual replica set members in the\n connection string . For example, to connect to a three-member replica set named  replA ,\nrun the following command: When you specify individual replica set members in the connection\nstring,  mongosh  automatically adds the  directConnection=true \nparameter, unless at least one of the following is true: When  directConnection=true , all operations are run on the host\nspecified in the connection URI. The  replicaSet  query parameter is present in the connection string. The connection string uses the  mongodb+srv://  connection string\nformat. The connection string contains a seed list with multiple hosts. The connection string already contains a  directConnection \nparameter. To connect to a deployment using TLS, you can either: Use the  DNS Seedlist Connection Format . The\n +srv  connection string modifier automatically sets the  tls \noption to  true  for the connection. For example, to connect to a DNS seedlist-defined replica set with\n tls  enabled, run the following command: Set the  --tls  option to  true  in the connection\nstring. For example, to enable  tls  with a connection string option, run\nthe following command: Specify the  --tls  command-line option. For example, to connect to a remote host with  tls  enabled, run the\nfollowing command: To connect to a specific database, specify a database in your\n connection string URI path . If\nyou do not specify a database in your URI path, you connect to the\n test  database. For example, to connect to a database called  qa  on localhost, run the\nfollowing command: If you are already connected to a deployment in the  MongoDB Shell , you can\nuse the  Mongo()  or  connect()  method to connect to a different\ndeployment from within the  MongoDB Shell . To learn how to connect to a different deployment using these methods,\nsee  Open a New Connection . To verify your current database connection, use the\n db.getMongo()  method. The method returns the  connection string URI  for your current connection. To disconnect from a deployment and exit  mongosh , perform one of the\nfollowing actions: Type  .exit ,  exit , or  exit() . Type  quit  or  quit() . Press  Ctrl  +  D . Press  Ctrl  +  C  twice. The shell displays a warning message when you connect to non-genuine\nMongoDB instances. Non-genuine instances may behave differently from the\nofficial MongoDB instances due to missing, inconsistent, or incomplete\nfeatures. Kerberos authentication  does not allow\n authMechanismProperties=CANONICALIZE_HOST_NAME:true|false  in the\nconnection string. Instead, use either: authMechanismProperties=CANONICALIZE_HOST_NAME:forward authMechanismProperties=CANONICALIZE_HOST_NAME:forwardAndReverse authMechanismProperties=CANONICALIZE_HOST_NAME:none mongosh  currently only supports the  zlib \n compressor . The following\ncompressors are not supported: zstd snappy Starting in  mongosh  2.0.0: For boolean values in  connection strings , you: must use  true  or  false . cannot use  1 ,  y ,  yes , or  t  instead of  true . cannot use  -1 ,  0 ,  n ,  no , or  f  instead of\n false .",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb+srv://YOUR_CLUSTER_NAME.YOUR_HASH.mongodb.net/\" --apiVersion YOUR_API_VERSION --username YOUR_USERNAME"
                },
                {
                    "lang": "sh",
                    "value": "mongosh"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://localhost:27017\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://localhost:28015\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh --port 28015"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://mongodb0.example.com:28015\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh --host mongodb0.example.com --port 28015"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://mongodb0.example.com:28015\" --username alice --authenticationDatabase admin"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://localhost/\" --authenticationMechanism MONGODB-OIDC"
                },
                {
                    "lang": "bash",
                    "value": "mongosh --username alice@dba.example.com --password  --authenticationDatabase '$external' --authenticationMechanism \"PLAIN\"  --host \"mongodb.example.com\" --port 27017"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb+srv://server.example.com/\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb+srv://server.example.com/\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://mongodb0.example.com:28015/?tls=true\""
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://mongodb0.example.com:28015\" --tls"
                },
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb://localhost:27017/qa\""
                }
            ],
            "preview": "How to use the MongoDB Shell to connect to a MongoDB Atlas cloud-hosted deployment, a local deployment, or another remote host.",
            "tags": "server",
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference",
            "title": "Reference",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "",
            "title": "Welcome to MongoDB Shell (mongosh)",
            "headings": [
                "Access MongoDB From Your Shell",
                "Find Your Connection String",
                "Connect to MongoDB",
                "Interact with Your Data",
                "Insert Documents",
                "Read Documents",
                "Update Documents",
                "Delete Documents",
                "Run Aggregation Pipelines",
                "Manage Databases and Collections",
                "Administer Servers",
                "Manage Users and Roles",
                "Run Scripts for CRUD or Administrative Tasks",
                "Create Custom Helper Functions with .mongoshrc",
                "Use or Publish Snippets",
                "Other Powerful Features"
            ],
            "paragraphs": "The  MongoDB Shell ,  mongosh , is a JavaScript and Node.js  REPL (Read Eval Print Loop) \nenvironment for interacting with MongoDB deployments in\n Atlas , locally,\nor on another remote host. Use the  MongoDB Shell  to test queries and\ninteract with the data in your MongoDB database. Find your connection string. The connection string varies\ndepending on the type of deployment you're connecting to. Learn how to find your connection string for\n Atlas . Or connect to an\n self-hosted \ndeployment. Connect to a MongoDB deployment using the\nconnection string. The following connection string connects to\nan Atlas deployment: Use your chosen connection type to view your data, import\ndocuments, and run queries. For more information, refer to  Perform CRUD Operations . mongosh  supports common insert opererations,\nincluding: For more information and examples, refer to  Insert Documents . db.collection.insertOne() db.collection.insertMany() Use the  db.collection.find()  method to query documents\nin a collection. For more information and examples, refer to\n Query Documents . mongosh  supports common update operations,\nincluding: For more information and examples, refer to  Update Documents . db.collection.updateOne() db.collection.updateMany() db.collection.replaceOne() mongosh  supports common delete operations,\nincluding: For more information and examples, refer to  Delete Documents . db.collection.deleteMany() db.collection.deleteOne() You can run aggregation pipelines in  mongosh \nusing the  db.collection.aggregate()  method.\nAggregation pipelines transform your documents into\naggregated results based on the stages you specify. For more\ninformation and examples, refer to  Run Aggregation Pipelines . View information about databases, create collections or views,\nor drop databases - all from your shell. See all\n Database Methods . Perform collection operations, create or delete indexes, or\nexplain queries with  Collection Methods . Manage  replication  or\n sharding  conveniently in\nyour shell. Check server status with a variety of  Server Status Methods . Create or update roles, define and update privileges, or drop\nroles using  Role Management Methods . Create and update users, authenticate users, and manage user\nroles with  User Management Methods . Write scripts to run with the  MongoDB Shell  that perform CRUD or\nadministrative operations in MongoDB. For example, if you have a JS file that seeds synthetic or\nmock data into MongoDB in your development or staging\nenvironment, run the file with: Explore a tutorial that uses the  MongoDB Shell  with JavaScript to\naccess MongoDB:  Write Scripts . Repeatedly writing large helper functions in the Shell? Store\nthem in a  .mongoshrc config file . For\nexample, if you often find yourself converting date strings to\nISO format for queries, create a function in  .mongoshrc  to\nhandle it: Then, call the function in  mongosh : For more information, refer to  Execute Code From a Configuration File . Pull existing snippets  into\nyour codebase for convenient reuse. Or  create and share\nsnippets  for your custom use case. For example, you might have a snippet that validates the data\nyou import daily as a cron job. You can publish this snippet,\nso your development team can access it. Publish to a community\nregistry or configure a private registry. For more information, refer to  Registries and Registry Configuration . Use an external or built-in editor to work with multiline\nfunctions. Go beyond the line-oriented  mongosh \ndefault console. Access session logs for any session within the last 30 days. Find\nthe command syntax you can't quite remember, or look for common\ncommands you can script. Find out which methods  mongosh  supports. Get example\nsyntax and parameter details for supported methods.",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongosh \"mongodb+srv://mycluster.abcd1.mongodb.net/myFirstDatabase\" --apiVersion 1 --username <username>"
                },
                {
                    "lang": "sh",
                    "value": "mongosh YOUR_JS_FILENAME.js"
                },
                {
                    "lang": "JavaScript",
                    "value": "function toISO(dateString) {\n   return new Date(dateString).toISOString();\n}"
                },
                {
                    "lang": "sh",
                    "value": "db.clientConnections.find( { connectTime: toISO(\"06/07/2017\") } )"
                }
            ],
            "preview": "Use the MongoDB Shell to test queries and interact with the data in your MongoDB database.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "mongoshrc",
            "title": ".mongoshrc Configuration File",
            "headings": [
                "Example Usage"
            ],
            "paragraphs": "On startup,  mongosh  checks your  HOME  directory for a\nJavaScript file named .mongoshrc.js. If this file is found,\n mongosh  reads the content of .mongoshrc.js before\ndisplaying the prompt for the first time. If you use  mongosh  to evaluate a JavaScript file or\nexpression, either by using the  --eval  option\non the command line or by specifying a  .js file ,  mongosh  reads .mongoshrc.js\n after  the JavaScript has finished processing. You can prevent\n.mongoshrc.js from being loaded by using the  --norc  option. The legacy  mongo  shell used a configuration file called\n .mongorc.js . If  mongosh  detects this file on startup and\n .mongoshrc.js  is not present,  mongosh  does not load the legacy\n .mongorc.js  file, and suggests renaming  .mongorc.js  to\n .mongoshrc.js . You can use the .mongoshrc file to customize  mongosh  startup\nbehavior and add scripted functionality. For examples, see\n Execute Code From a Configuration File .",
            "code": [],
            "preview": "You can use the .mongoshrc file to customize mongosh startup\nbehavior and add scripted functionality. For examples, see\nExecute Code From a Configuration File.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "crud",
            "title": "Perform CRUD Operations",
            "headings": [
                "Create Operations",
                "Read Operations",
                "Update Operations",
                "Delete Operations"
            ],
            "paragraphs": "CRUD operations  create ,  read ,  update , and  delete  documents. Create or insert operations add new documents to a collection. If the\ncollection does not exist, create operations also create the\ncollection. You can insert a single document or multiple documents in a single\noperation. For examples, see  Insert Documents . Read operations retrieve documents from a collection; i.e. query a\ncollection for documents. You can specify criteria, or filters, that identify the documents to\nreturn. For examples, see  Query Documents . Update operations modify existing documents in a collection. You can\nupdate a single document or multiple documents in a single operation. You can specify criteria, or filters, that identify the documents to\nupdate. These filters use the same syntax as read operations. For examples, see  Update Documents . Delete operations remove existing documents from a collection. You can\nremove a single document or multiple documents in a single operation. You can specify criteria, or filters, that identify the documents to\nremove. These filters use the same syntax as read operations. For examples, see  Delete Documents .",
            "code": [],
            "preview": "Use the MongoDB Shell to create, read, update, and delete documents in a MongoDB collection.",
            "tags": "server",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets",
            "title": "Snippets",
            "headings": [
                "Introduction",
                "Components",
                "Get Started"
            ],
            "paragraphs": "This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. A  snippet  is a script that is packaged and stored in a registry to\nfacilitate sharing and reuse. You can  write your own scripts  in\n mongosh  to manipulate data or to perform administrative\ntasks. Snippets are an improvement on locally stored scripts because\nthey can be easily shared and maintained. This page provides a high level introduction to working with snippets.\nThe links in each section go deeper into writing, managing, and working\nwith snippets. The Snippets feature has three main components: There are also built in  commands  to help you\nwork with snippets and utility scripts to help with\n packaging tasks . Scripts  are code that can be used with  mongosh . Packages  are scripts that are bundled with metadata so they can be\nmanaged more easily. Registries  are collections of packages that can be shared. The fastest way to get started with snippets is to try one of the\nsnippets in the  community registry \nmaintained by MongoDB. You can also create your own snippets, package them for easier\nmanagement, and configure a registry to share them. Try an Existing Snippet . Install  and  run \na snippet package from the  community registry Create Your Own Snippet Package . Write  the snippet code and supporting files. Then,\n publish  the snippet package. Configure Snippet Registries . Use the  community registry \nor  configure  a private registry.",
            "code": [],
            "preview": "A snippet is a script that is packaged and stored in a registry to\nfacilitate sharing and reuse.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "field-level-encryption",
            "title": "Client-Side Field Level Encryption",
            "headings": [
                "Create a Data Encryption Key",
                "Launch the mongosh Shell.",
                "Create the Encryption Configuration.",
                "Connect with Encryption Support.",
                "Create the Key Vault Object.",
                "Create the Encryption Key.",
                "Launch the mongosh Shell.",
                "Create the Encryption Configuration.",
                "Connect with Encryption Support.",
                "Create the Key Vault Object.",
                "Create the Encryption Key.",
                "Launch the mongosh Shell.",
                "Create the Encryption Configuration.",
                "Connect with Encryption Support.",
                "Create the Key Vault Object.",
                "Create the Encryption Key.",
                "Launch the mongosh Shell.",
                "Generate an Encryption Key.",
                "Create the Encryption Configuration.",
                "Connect with Encryption Support.",
                "Create the Key Vault Object.",
                "Create the Encryption Key."
            ],
            "paragraphs": "When working with a  MongoDB Enterprise \nor MongoDB Atlas cluster, you can use  mongosh  to configure\n Client-Side Field Level Encryption  and connect with encryption\nsupport. Client-side field level encryption uses data encryption keys\nfor supporting encryption and decryption of field values, and stores\nthis encryption key material in a Key Management Service (KMS). mongosh  supports the following KMS providers for use with\nclient-side field level encryption: Amazon Web Services KMS Azure Key Vault Google Cloud Platform KMS Locally Managed Keyfile The following procedure uses  mongosh  to create a data encryption key\nfor use with client-side field level encryption and decryption. Use the tabs below to select the  KMS (Key Management Service) \nappropriate for your deployment: Create a  mongosh  session without connecting to a running database\nby using the  --nodb  option: Configuring client-side field level encryption for the AWS KMS\nrequires an AWS Access Key ID and its associated Secret Access Key.\nThe AWS Access Key must correspond to an IAM user with all  List  and\n Read  permissions for the KMS service. In  mongosh , create a new\n AutoEncryptionOpts  variable for storing the\nclient-side field level encryption configuration, which contains these\ncredentials: Fill in the values for  YOUR_AWS_ACCESS_KEY_ID  and\n YOUR_AWS_SECRET_ACCESS_KEY  as appropriate. In  mongosh , use the  Mongo()  constructor to\nestablish a database connection to the target cluster. Specify the\n AutoEncryptionOpts  document as the second\nparameter to the  Mongo()  constructor to configure\nthe connection for client-side field level encryption: Replace the  replaceMe.example.net   URI  with\nthe connection string for the target cluster. Create the  keyVault  object using the  getKeyVault()  shell method: Create the data encryption key using the\n createKey()  shell method: Where: The first parameter  must  be  \"aws\"  to specify the configured\nAmazon Web Services KMS. The second parameter  must  be a document containing the following: the AWS region you are connecting to, such as  us-west-2 the  Amazon Resource Name (ARN) \nto the AWS customer master key (CMK). The third parameter  may  be an array of one or more\n keyAltNames  for the data encryption key. Each key alternate\nname  must  be unique.  getKeyVault()  creates a\n unique index  on  keyAltNames  to\nenforce uniqueness on the field if one does not already exist. Key\nalternate names facilitate data encryption key findability. If successful,  createKey()  returns\nthe  UUID (Universally unique identifier)  of the new data\nencryption key. To retrieve the new data encryption key document from\nthe key vault, either: Use  getKey()  to retrieve the created\nkey by its  UUID (Universally unique identifier) , or Use  getKeyByAltName()   to\nretrieve the key by its alternate name, if specified. Create a  mongosh  session without connecting to a running database\nby using the  --nodb  option: Configuring client-side field level encryption for Azure Key Vault\nrequires a valid Tenant ID, Client ID, and Client Secret. In  mongosh , create a new\n AutoEncryptionOpts  variable for storing the\nclient-side field level encryption configuration, which contains these\ncredentials: Fill in the values for  YOUR_TENANT_ID ,  YOUR_CLIENT_ID , and\n YOUR_CLIENT_SECRET  as appropriate. In  mongosh , use the  Mongo()  constructor to\nestablish a database connection to the target cluster. Specify the\n AutoEncryptionOpts  document as the second\nparameter to the  Mongo()  constructor to configure\nthe connection for client-side field level encryption: Replace the  replaceMe.example.net   URI  with\nthe connection string for the target cluster. Create the  keyVault  object using the  getKeyVault()  shell method: Create the data encryption key using the\n createKey()  shell method: Where: The first parameter  must  be  \"azure\"  to specify the configured\nAzure Key Vault. The second parameter  must  be a document containing: the name of your  Azure Key Vault the DNS name of the Azure Key Vault to use (e.g.\n my-key-vault.vault.azure.net ) The third parameter  may  be an array of one or more\n keyAltNames  for the data encryption key. Each key alternate\nname  must  be unique.  getKeyVault()  creates a\n unique index  on  keyAltNames  to\nenforce uniqueness on the field if one does not already exist. Key\nalternate names facilitate data encryption key findability. If successful,  createKey()  returns\nthe  UUID (Universally unique identifier)  of the new data\nencryption key. To retrieve the new data encryption key document from\nthe key vault, either: Use  getKey()  to retrieve the created\nkey by its  UUID (Universally unique identifier) , or Use  getKeyByAltName()   to\nretrieve the key by its alternate name, if specified. Create a  mongosh  session without connecting to a running database\nby using the  --nodb  option: Configuring client-side field level encryption for the GCP KMS\nrequires your GCP Email and its associated Private Key. In  mongosh , create a new\n AutoEncryptionOpts  variable for storing the\nclient-side field level encryption configuration, which contains these\ncredentials: Fill in the values for  YOUR_GCP_EMAIL  and\n YOUR_GCP_PRIVATEKEY  as appropriate. In  mongosh , use the  Mongo()  constructor to\nestablish a database connection to the target cluster. Specify the\n AutoEncryptionOpts  document as the second\nparameter to the  Mongo()  constructor to configure\nthe connection for client-side field level encryption: Replace the  replaceMe.example.net   URI  with\nthe connection string for the target cluster. Create the  keyVault  object using the  getKeyVault()  shell method: Create the data encryption key using the\n createKey()  shell method: Where: The first parameter  must  be  \"gcp\"  to specify the configured\nGoogle Cloud KMS. The second parameter  must  be a document containing projectid  is the name of your GCP project, such as\n my-project locationname  is the location of the KMS keyring, such as\n global keyringname  is the name of the KMS keyring, such as\n my-keyring keyname  is the name of your key. The third parameter  may  be an array of one or more\n keyAltNames  for the data encryption key. Each key alternate\nname  must  be unique.  getKeyVault()  creates a\n unique index  on  keyAltNames  to\nenforce uniqueness on the field if one does not already exist. Key\nalternate names facilitate data encryption key findability. If successful,  createKey()  returns\nthe  UUID (Universally unique identifier)  of the new data\nencryption key. To retrieve the new data encryption key document from\nthe key vault, either: Use  getKey()  to retrieve the created\nkey by its  UUID (Universally unique identifier) , or Use  getKeyByAltName()   to\nretrieve the key by its alternate name, if specified. Create a  mongosh  session without connecting to a running database\nby using the  --nodb  option: To configure client-side field level encryption for a locally managed\nkey, you must specify a base64-encoded 96-byte string with no line\nbreaks. Run the following command in  mongosh  to generate a key\nmatching these requirements: You will need this key in the next step. In  mongosh , create a new\n AutoEncryptionOpts  variable for storing the\nclient-side field level encryption configuration, replacing\n MY_LOCAL_KEY  with the key generated in step 1: In  mongosh , use the  Mongo()  constructor to\nestablish a database connection to the target cluster. Specify the\n AutoEncryptionOpts  document as the second\nparameter to the  Mongo()  constructor to configure\nthe connection for client-side field level encryption: Create the  keyVault  object using the  getKeyVault()  shell method: Create the data encryption key using the\n createKey()  shell method: Where: The first parameter  must  be  local  to specify the configured\nLocally Managed Key. The second parameter  may  be an array of one or more\n keyAltNames  for the data encryption key. Each key alternate\nname  must  be unique.  getKeyVault()  creates a unique\nindex on  keyAltNames  to enforce uniqueness on the field if\none does not already exist. Key alternate names facilitate data\nencryption key findability. If successful,  createKey()  returns\nthe  UUID (Universally unique identifier)  of the new data\nencryption key. To retrieve the new data encryption key document from\nthe key vault, either: Use  getKey()  to retrieve the created\nkey by its  UUID (Universally unique identifier) , or Use  getKeyByAltName()   to\nretrieve the key by its alternate name, if specified. List of field level encryption shell methods Client-side field level encryption reference",
            "code": [
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb"
                },
                {
                    "lang": "javascript",
                    "value": "var autoEncryptionOpts = {\n  \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n  \"kmsProviders\" : {\n    \"aws\" : {\n      \"accessKeyId\" : \"YOUR_AWS_ACCESS_KEY_ID\",\n      \"secretAccessKey\" : \"YOUR_AWS_SECRET_ACCESS_KEY\"\n    }\n  }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "csfleDatabaseConnection = Mongo(\n  \"mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster\",\n  autoEncryptionOpts\n)"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault = csfleDatabaseConnection.getKeyVault();"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault.createKey(\n  \"aws\",\n  { region: \"regionname\", key: \"awsarn\" },\n  [ \"keyAlternateName\" ]\n)"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb"
                },
                {
                    "lang": "javascript",
                    "value": "var autoEncryptionOpts = {\n  \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n  \"kmsProviders\" : {\n    \"azure\" : {\n      \"tenantId\" : \"YOUR_TENANT_ID\",\n      \"clientId\" : \"YOUR_CLIENT_ID\",\n      \"clientSecret\" : \"YOUR_CLIENT_SECRET\"\n    }\n  }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "csfleDatabaseConnection = Mongo(\n  \"mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster\",\n  autoEncryptionOpts\n)"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault = csfleDatabaseConnection.getKeyVault();"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault.createKey(\n  \"azure\",\n  { keyName: \"keyvaultname\", keyVaultEndpoint: \"endpointname\" },\n  [ \"keyAlternateName\" ]\n)"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb"
                },
                {
                    "lang": "javascript",
                    "value": "var autoEncryptionOpts = {\n  \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n  \"kmsProviders\" : {\n    \"gcp\" : {\n      \"email\" : \"YOUR_GCP_EMAIL\",\n      \"privateKey\" : \"YOUR_GCP_PRIVATEKEY\"\n    }\n  }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "csfleDatabaseConnection = Mongo(\n  \"mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster\",\n  autoEncryptionOpts\n)"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault = csfleDatabaseConnection.getKeyVault();"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault.createKey(\n  \"gcp\",\n  { projectId: \"projectid\",\n    location: \"locationname\",\n    keyRing: \"keyringname\",\n    keyName: \"keyname\"\n  },\n  [ \"keyAlternateName\" ]\n)"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb"
                },
                {
                    "lang": "javascript",
                    "value": "crypto.randomBytes(96).toString('base64')"
                },
                {
                    "lang": "javascript",
                    "value": "var autoEncryptionOpts = {\n  \"keyVaultNamespace\" : \"encryption.__dataKeys\",\n  \"kmsProviders\" : {\n    \"local\" : {\n      \"key\" : BinData(0, \"MY_LOCAL_KEY\")\n    }\n  }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "csfleDatabaseConnection = Mongo(\n  \"mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster\",\n  autoEncryptionOpts\n)"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault = csfleDatabaseConnection.getKeyVault();"
                },
                {
                    "lang": "javascript",
                    "value": "keyVault.createKey(\n  \"local\",\n  [ \"keyAlternateName\" ]\n)"
                }
            ],
            "preview": "When working with a MongoDB Enterprise\nor MongoDB Atlas cluster, you can use mongosh to configure\nClient-Side Field Level Encryption and connect with encryption\nsupport. Client-side field level encryption uses data encryption keys\nfor supporting encryption and decryption of field values, and stores\nthis encryption key material in a Key Management Service (KMS).",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "telemetry",
            "title": "Configure Telemetry Options",
            "headings": [
                "Data Tracked by mongosh",
                "Toggle Telemetry Collection"
            ],
            "paragraphs": "mongosh  collects anonymous aggregated usage data to improve\nMongoDB products.  mongosh  collects this information by default, but\nyou can disable this data collection at any time. mongosh  tracks the following data: mongosh   does not  track: For more information, see MongoDB's  Privacy Policy . The type of MongoDB  mongosh  is connected to. For example,\nEnterprise Edition, Community Edition, or Atlas Data Lake. The methods run in  mongosh .  mongosh  only tracks the names of\nthe methods, and does not track any arguments supplied to methods. Whether users run scripts with  mongosh . Errors. IP addresses, hostnames, usernames, or credentials. Queries run in  mongosh . Any data stored in your MongoDB deployment. Personal identifiable information. Use the following methods in  mongosh  to toggle telemetry data\ncollection. Disable telemetry for  mongosh . The command response confirms that telemetry is disabled: You can also disable telemetry at startup by using the\n --eval  startup option. The following command starts  mongosh  with telemetry disabled: Enable telemetry for  mongosh . The command response confirms that telemetry is enabled:",
            "code": [
                {
                    "lang": "javascript",
                    "value": "disableTelemetry()"
                },
                {
                    "lang": "javascript",
                    "value": "Telemetry is now disabled."
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb --eval \"disableTelemetry()\""
                },
                {
                    "lang": "javascript",
                    "value": "enableTelemetry()"
                },
                {
                    "lang": "javascript",
                    "value": "Telemetry is now enabled."
                }
            ],
            "preview": "Disable telemetry for mongosh.",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "crud/insert",
            "title": "Insert Documents",
            "headings": [
                "Insert a Single Document",
                "Insert Multiple Documents",
                "Insert Behavior",
                "Learn More"
            ],
            "paragraphs": "The MongoDB shell provides the following methods to insert documents\ninto a collection: To insert a single document, use  db.collection.insertOne() . To insert multiple documents, use\n db.collection.insertMany() . The examples on this page reference the  Atlas \n sample dataset . You can create a free  Atlas \ncluster and populate that cluster with sample data to follow along with\nthese examples. To learn more, see\n Get Started with Atlas . db.collection.insertOne()  inserts a  single \n document  into a collection. If the document\ndoes not specify an  _id  field, MongoDB adds the  _id  field with\nan ObjectId value to the new document. See\n Insert Behavior . To insert a new document into the  sample_mflix.movies  collection: insertOne()  returns a document that\nincludes the newly inserted document's  _id  field value. To retrieve the inserted document,\n read the collection : To ensure you return the document you inserted, you can instead\nquery by  _id . db.collection.insertMany()  can insert  multiple \n documents  into a collection. Pass an array\nof documents to the method. If the documents do not specify an  _id \nfield, MongoDB adds the  _id  field with an ObjectId value to each\ndocument. See  Insert Behavior . To insert two new documents into the  sample_mflix.movies \ncollection: insertMany()  returns a document that\nincludes the newly inserted documents'  _id  field values. To  read documents in the collection : To learn more about the specific behavior of inserting documents,\nsee  Insert Behavior . To see more examples of inserting documents into a collection, see\nthe  insertOne()  and\n db.collection.insertMany()  method pages. To see all available methods to insert documents into a collection,\nsee  Additional Methods for Inserts",
            "code": [
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.insertOne(\n  {\n    title: \"The Favourite\",\n    genres: [ \"Drama\", \"History\" ],\n    runtime: 121,\n    rated: \"R\",\n    year: 2018,\n    directors: [ \"Yorgos Lanthimos\" ],\n    cast: [ \"Olivia Colman\", \"Emma Stone\", \"Rachel Weisz\" ],\n    type: \"movie\"\n  }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.movies.find( { title: \"The Favourite\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.insertMany([\n   {\n      title: \"Jurassic World: Fallen Kingdom\",\n      genres: [ \"Action\", \"Sci-Fi\" ],\n      runtime: 130,\n      rated: \"PG-13\",\n      year: 2018,\n      directors: [ \"J. A. Bayona\" ],\n      cast: [ \"Chris Pratt\", \"Bryce Dallas Howard\", \"Rafe Spall\" ],\n      type: \"movie\"\n    },\n    {\n      title: \"Tag\",\n      genres: [ \"Comedy\", \"Action\" ],\n      runtime: 105,\n      rated: \"R\",\n      year: 2018,\n      directors: [ \"Jeff Tomsic\" ],\n      cast: [ \"Annabelle Wallis\", \"Jeremy Renner\", \"Jon Hamm\" ],\n      type: \"movie\"\n    }\n])"
                },
                {
                    "lang": "javascript",
                    "value": "db.movies.find( {} )"
                }
            ],
            "preview": "Insert single or multiple documents into a MongoDB collection.",
            "tags": "server, atlas, sample dataset",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "install",
            "title": "Install mongosh",
            "headings": [
                "Prerequisites",
                "Supported MongoDB Versions",
                "Supported Operating Systems",
                "Compatibility Considerations",
                "Procedure",
                "Install from MSI",
                "Open the MongoDB Shell download page.",
                "In the Platform dropdown, select Windows 64-bit (8.1+) (MSI)",
                "Click Download.",
                "Double-click the installer file.",
                "Follow the prompts to install mongosh.",
                "Install from .zip File",
                "Open the MongoDB Shell download page.",
                "Download the mongosh installation archive for your operating system.",
                "Extract the files from the downloaded archive.",
                "Add the mongosh binary to your PATH environment variable.",
                "Install with Homebrew",
                "Considerations",
                "Procedure",
                "Install Homebrew.",
                "Install the mongosh package.",
                "Install from .zip File",
                "Open the MongoDB Shell download page.",
                "Download the mongosh installation archive for your operating system.",
                "Extract the files from the downloaded archive.",
                "Add the downloaded binaries to your PATH environment variable.",
                "Allow macOS to run mongosh.",
                "Supported Platforms",
                "Procedure",
                "Import the public key used by the package management system.",
                "Create a list file for MongoDB.",
                "Reload local package database.",
                "Install the mongosh package.",
                "Confirm that mongosh installed successfully.",
                "Supported Platforms",
                "Procedure",
                "Configure the package management system (yum).",
                "Install mongosh.",
                "Procedure",
                "Open the MongoDB Shell download page.",
                "Download the Linux 64-bit .tgz package.",
                "Extract the files from the downloaded archive.",
                "Add the downloaded binaries to your PATH environment variable.",
                "Next Steps"
            ],
            "paragraphs": "To use the  MongoDB Shell , you must have a MongoDB deployment to connect\nto. For a free cloud-hosted deployment, you can use\n MongoDB Atlas . To learn how to run a local MongoDB deployment, see\n Install MongoDB . You can use the  MongoDB Shell  to connect to MongoDB version 4.2 or\ngreater. You can install MongoDB Shell 2.0.0 on these operating systems: Operating System Supported Versions macOS 11+ (x64 and ARM64) Microsoft Windows Microsoft Windows Server 2016+ Linux Red Hat Enterprise Linux (RHEL) 8+ (x64, ARM64, ppc64le, and s390x) Starting in  mongosh  2.0.0: Amazon Linux 1, Debian 9, and macOS 10.14 aren't supported. Red Hat Enterprise Linux (RHEL) 7, Amazon Linux 2, SUSE Linux\nEnterprise Server (SLES) 12, and Ubuntu 18.04 support is deprecated\nand might be removed in a later  mongosh  release. If you must use  Node.js  16 with  mongosh , install  Node.js \nand then install  mongosh  through  npm . The ability to run\n mongosh  installed with  npm  and use  Node.js  16 might be\nremoved during the lifetime of  mongosh  2.x. Select the appropriate tab for your operating system: On Windows,  mongosh  preferences and configuration options\nare stored in the  %APPDATA%/mongodb/mongosh  directory. Open the  MongoDB Download Center . Open the  MongoDB Download Center . Download  mongosh  from the  MongoDB Download Center . Open a  cmd  terminal and run the following command from the\ndirectory that has the  mongosh   .zip  archive: The extracted archive has a  bin  folder that contains two files,\n mongosh.exe  and  mongosh_crypt_v1.dll . Ensure that the extracted  MongoDB Shell  binary is in the desired\nlocation in your filesystem, then add that location to your  PATH \nenvironment variable. To add the  MongoDB Shell  binary's location to your\n PATH  environment variable: To confirm that your  PATH  environment variable is correctly\nconfigured to find  mongosh , open a command prompt and enter the\n mongosh --help  command. If your  PATH  is configured\ncorrectly, a list of valid commands displays. Open the  Control Panel . In the  System and Security  category, click\n System . Click  Advanced system settings . The  System\nProperties  modal displays. Click  Environment Variables . In the  System variables  section, select  Path  and click\n Edit . The  Edit environment variable  modal\ndisplays. Click  New  and add the filepath to your  mongosh \nbinary. Click  OK  to confirm your changes. On each other\nmodal, click  OK  to confirm your changes. The Homebrew package manager is the recommended installation\nmethod for  mongosh  on macOS. To learn how to manually\ninstall  mongosh  from an archive instead, see\n Install from  .zip  File . To view the complete list of system requirements for Homebrew,\nsee the\n Homebrew Website . mongosh  installed with Homebrew does not support\n automatic client-side field level encryption . To install  mongosh  with Homebrew: Refer to the  Homebrew  website\nfor the steps to install Homebrew on macOS. Issue the following command from the terminal to install the\n mongosh  package: To manually install  mongosh  using a downloaded  .zip \nfile: Open the  MongoDB Download Center . Download the appropriate version of  mongosh  for your operating\nsystem. MongoDB provides versions of  mongosh  for Intel and ARM\narchitectures. See the  MongoDB Download Center . Go to the directory that contains the  mongosh   .zip  archive,\nthen unpack the  .zip  file. If your computer is Intel based, run: If your computer is ARM based (M1 or M2), run: The extracted archive has a  bin  folder that contains two files,\n mongosh  and  mongosh_crypt_v1.dylib . If your web browser automatically extracts the archive as part of the\ndownload, or if you extract the archive without using the  unzip \ncommand, you may need to make the binary executable. To make the binary executable, run the following command in the\ndirectory where you extracted the archive: You can either: Copy the  mongosh  binary into a directory listed in your\n PATH  variable, such as  /usr/local/bin . Run the following\ncommands from the directory where you extracted the download file: Create symbolic links to the  MongoDB Shell . Switch to the\ndirectory where you extracted the files from the  .tgz  archive.\nRun the following command to create links to a directory already\nin your  PATH  such as  /usr/local/bin . macOS may prevent  mongosh  from running after installation. If\nyou receive a security error when starting  mongosh  indicating\nthat the developer could not be identified or verified, perform\nthe following actions: Open  System Preferences . Select the  Security and Privacy  pane. Under the  General  tab, click the button to the right of the\nmessage about  mongosh , labelled either  Open Anyway \nor  Allow Anyway  depending on your version of macOS. Select the appropriate tab based on your Linux distribution and\ndesired package from the tabs below: To install the  .deb  package on Ubuntu 22.04 (Jammy), Ubuntu\n20.04 (Focal), Ubuntu 18.04 (Bionic), or Debian, click the\n .deb  tab. To install the  .rpm  package on\n RHEL (Red Hat Enterprise Linux) , Amazon Linux 2023, or Amazon\nLinux 2, click the  .rpm  tab. To install the  .tgz  tarball, click the  .tgz  tab. mongosh  is available as a  PPA (Personal\nPackage Archive)  for the following platforms: Ubuntu 22.04 (Jammy) Ubuntu 20.04 (Focal) Ubuntu 18.04 (Bionic) From a terminal, issue the following command to import the\nMongoDB public GPG key from  https://www.mongodb.org/static/pgp/server-7.0.asc : The previous command writes the GPG key to your system's\n /etc/apt/trusted.gpg.d  folder and prints the key to your\nterminal. You do not need to copy or save the key that is printed to\nthe terminal. If you receive an error indicating that  gnupg  is not installed,\nperform the following steps: Install  gnupg  and its required libraries using the following command: Retry importing the key: Create the list file\n /etc/apt/sources.list.d/mongodb-org-7.0.list  for your\nversion of Ubuntu. Click on the appropriate tab for your version of Ubuntu.\nIf you are unsure of what Ubuntu version the host is running,\nopen a terminal or shell on the host and run  lsb_release -dc . The following instruction is for  Ubuntu 22.04 (Jammy) .\nFor other Ubuntu releases, click the appropriate tab. Create the\n /etc/apt/sources.list.d/mongodb-org-7.0.list \nfile for Ubuntu 22.04 (Jammy): The following instruction is for  Ubuntu 20.04 (Focal) .\nFor other Ubuntu releases, click the appropriate tab. Create the\n /etc/apt/sources.list.d/mongodb-org-7.0.list \nfile for Ubuntu 20.04 (Focal): The following instruction is for  Ubuntu 18.04\n(Bionic) . For other Ubuntu releases, click the\nappropriate tab. Create the\n /etc/apt/sources.list.d/mongodb-org-7.0.list \nfile for Ubuntu 18.04 (Bionic): Issue the following command to reload the local package database: To install the latest stable version of  mongosh  with the included\nOpenSSL libraries: To install  mongosh  with your OpenSSL 1.1 libraries: To install  mongosh  with your OpenSSL 3.0 libraries: mongosh  supports OpenSSL. You can also configure  mongosh  to use\nyour system's OpenSSL installation. To confirm that  mongosh  installed successfully, run the following\ncommand: Your terminal should respond with the version of  mongosh  you have\ninstalled. mongosh  is available as  yum  package for the\nfollowing platforms: RHEL (Red Hat Enterprise Linux) Amazon Linux 2023 Amazon Linux 2 Create a  /etc/yum.repos.d/mongodb-org-7.0.repo  file so that\nyou can install  mongosh  directly using  yum . There are  .rpm  distributions for RHEL and Amazon Linux. Choose the tab to select the file for your distribution. Copy the contents of the tab. Paste the contents into the  .repo  file. You can also download the  .rpm  files directly from the\n MongoDB repository .\nDownloads are organized in the following order: Red Hat or CentOS version (for example,  8 ) MongoDB edition (for example,  mongodb-enterprise ) MongoDB  release version \n(for example,  7.0 ) Architecture (for example,  x86_64 ) You can also download the  .rpm  files directly from the\n MongoDB repository . Downloads are\norganized in the following order: If your system uses Amazon Linux 2, replace  2023  with\n 2  in the baseurl. Amazon Linux version (for example,  2023 ) MongoDB  release version \n(for example,  7.0 ) Architecture (for example,  x86_64 ) To install the latest stable version of  mongosh  with the included\nOpenSSL libraries: To install  mongosh  with your OpenSSL 1.1 libraries: To install  mongosh  with your OpenSSL 3.0 libraries: mongosh  supports OpenSSL. You can also configure  mongosh  to use\nyour system's OpenSSL installation. Open the  MongoDB Download Center . Download the appropriate version of  mongosh  for your operating\nsystem. MongoDB also provides versions of  mongosh  that use your\nsystem's OpenSSL installation. See the  MongoDB Download Center . Go to the directory that contains the  .tgz  archive, then unpack\nthe archive. The name of the  .tgz  package varies depending on the version you\ndownloaded. Replace the  .tgz  package name in the following\ncommand with the name of the package you downloaded and run the\ncommand. The extracted archive has a  bin  folder that contains two files,\n mongosh  and  mongosh_crypt_v1.so . If your web browser automatically extracts the archive as part of the\ndownload, or if you extract the archive without using the  tar \ncommand, you may need to make the binary executable. To make the binary executable, run the following command in the\ndirectory where you extracted the archive: You can either: Copy the  mongosh  binary into a directory listed in your\n PATH  variable, such as  /usr/local/bin . Run the following\ncommands from the directory where you extracted the download file: Create symbolic links to the  MongoDB Shell . Switch to the\ndirectory where you extracted the files from the  .tgz  archive.\nRun the following command to create links to a directory already\nin your  PATH  such as  /usr/local/bin . Once you successfully install  mongosh , learn how to\n connect to your MongoDB deployment . MongoDB provides a programmatically accessible list of  mongosh \n downloads  that\ncan be accessed through your application.",
            "code": [
                {
                    "lang": "sh",
                    "value": "tar -xf mongosh-2.1.4-win32-x64.zip"
                },
                {
                    "lang": "sh",
                    "value": "brew install mongosh"
                },
                {
                    "lang": "sh",
                    "value": "unzip mongosh-2.1.4-darwin-x64.zip"
                },
                {
                    "lang": "sh",
                    "value": "unzip mongosh-2.1.4-darwin-arm64.zip"
                },
                {
                    "lang": "sh",
                    "value": "chmod +x bin/mongosh"
                },
                {
                    "lang": "sh",
                    "value": "sudo cp mongosh /usr/local/bin/\nsudo cp mongosh_crypt_v1.so /usr/local/lib/"
                },
                {
                    "lang": "sh",
                    "value": "sudo ln -s $(pwd)/bin/* /usr/local/bin/"
                },
                {
                    "lang": "sh",
                    "value": "wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt-get install gnupg"
                },
                {
                    "lang": "sh",
                    "value": "wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc"
                },
                {
                    "lang": "sh",
                    "value": "echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list"
                },
                {
                    "lang": "sh",
                    "value": "echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list"
                },
                {
                    "lang": "sh",
                    "value": "echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt-get update"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt-get install -y mongodb-mongosh"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt-get install -y mongodb-mongosh-shared-openssl11"
                },
                {
                    "lang": "sh",
                    "value": "sudo apt-get install -y mongodb-mongosh-shared-openssl3"
                },
                {
                    "lang": "sh",
                    "value": "mongosh --version"
                },
                {
                    "lang": "shell",
                    "value": "[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/7.0/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc"
                },
                {
                    "lang": "shell",
                    "value": "[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/7.0/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc"
                },
                {
                    "lang": "sh",
                    "value": "sudo yum install -y mongodb-mongosh"
                },
                {
                    "lang": "sh",
                    "value": "sudo yum install -y mongodb-mongosh-shared-openssl11"
                },
                {
                    "lang": "sh",
                    "value": "sudo yum install -y mongodb-mongosh-shared-openssl3"
                },
                {
                    "lang": "sh",
                    "value": "tar -zxvf mongosh-2.1.4-linux-x64.tgz"
                },
                {
                    "lang": "sh",
                    "value": "chmod +x bin/mongosh"
                },
                {
                    "lang": "sh",
                    "value": "sudo cp mongosh /usr/local/bin/\nsudo cp mongosh_crypt_v1.so /usr/local/lib/"
                },
                {
                    "lang": "sh",
                    "value": "sudo ln -s $(pwd)/bin/* /usr/local/bin/"
                }
            ],
            "preview": "Prerequisites, compatibility issues, and installation instructions for mongosh, the MongoDB Shell.",
            "tags": "server, atlas",
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "changelog",
            "title": "Release Notes",
            "headings": [
                "v2.1.5",
                "v2.1.4",
                "v2.1.3",
                "v2.1.0",
                "v2.0.2",
                "v2.0.1",
                "v2.0.0",
                "Compatibility Considerations",
                "v1.10.6",
                "v1.10.5",
                "v1.10.4",
                "v1.10.3",
                "v1.10.2",
                "v1.10.1",
                "v1.10.0",
                "v1.9.1",
                "v1.9.0",
                "v1.8.1",
                "v1.8.0",
                "Compatibility Changes",
                "Updates in 1.8.0",
                "v1.7.1",
                "v1.7.0",
                "v1.6.2",
                "v1.6.1",
                "v1.6.0",
                "v1.5.4",
                "v1.5.3",
                "v1.5.2",
                "v1.5.1",
                "v1.5.0",
                "v1.4.2",
                "v1.4.1",
                "v1.3.1",
                "v1.3.0",
                "v1.2.3",
                "v1.2.2",
                "v1.2.1",
                "v1.1.9",
                "v1.1.8",
                "v1.1.7",
                "v1.1.6",
                "v1.1.5",
                "v1.1.4",
                "v1.1.2",
                "v1.1.1",
                "v1.1.0",
                "v1.0.7",
                "v1.0.6",
                "v1.0.5",
                "v1.0.4",
                "v1.0.3",
                "v1.0.1",
                "v1.0",
                "v0.15.4",
                "v0.15.3",
                "v0.15.1",
                "v0.14.0",
                "v0.13.1",
                "v0.12.1",
                "v0.12.0",
                "v0.11.0",
                "v0.10.1",
                "v0.10.0",
                "v0.9.0",
                "v0.8.2",
                "v0.8.1",
                "v0.8.0",
                "v0.7.7",
                "v0.6.1",
                "v0.5.2",
                "v0.5.0",
                "v0.4.2",
                "v0.4.0",
                "v0.3.1",
                "Improvements",
                "Behavior Updates",
                "Bug Fixes",
                "v0.2.2",
                "API Additions",
                "Bug Fixes",
                "Past Releases"
            ],
            "paragraphs": "Released February 19, 2024 Upgrades to Node.js version 20.11.1. Node 20.11.1 resolves security issues.\nFor more information, see the  February 2024 Node.js security release \nand  CVE-2024-24806 . Full release notes available on JIRA . Released February 7, 2024 Full release notes available on JIRA . MONGOSH-1198  - Shows the code for an error with the error response. MONGOSH-1669  - Allows OIDC device auth flow without an  id_  token. MONGOSH-1679  - Improves error message reading from a secondary. MONGOSH-1706  - Accounts for unsharded collections becoming part of\nthe sharding catalog. This ensures forward compatibility with upcoming server\nversions. Released January 29, 2024 Full release notes available on JIRA . MONGOSH-1631  - Adds support for the new  type  field when creating\nsearch indexes for  runCommand ,  createSearchIndex , and\n createSearchIndexes  commands. MONGOSH-1664  - Removes tests for the  validate  command background\noption. Released November 21, 2023 Full release notes available on JIRA . MONGOSH-1621  and  NODE-5709  \u2013 Homebrew users who were automatically upgraded\nto Node.js 21 stop seeing deprecation warnings. MONGOSH-1452  and  NODE-5040  \u2013  mongosh  now displays BSON objects in a format\nthat is more consistent with other  mongosh  output. Also, many BSON objects now support syntax\nhighlighting. MONGOSH-1527  \u2013 You can now iterate mongosh cursors with idiomatic\nsyntax:  for (const doc of db.coll.find()) { } . Previously,  mongosh  only supported  .forEach \nsyntax for iteration. Released October 16, 2023 Full release notes available on JIRA . Upgrades to Node.js version 20.8.1. Node 20.8.1 resolves security\nissues. For more information, see\n Node.js security releases  and\n CVE-2023-45133 . CVE-2023-45143 \naffects the  fetch()  API that is available in  mongosh  2.x. mongosh  1.x does not address the security issues in the previous list.\nFor improved security, upgrade to  mongosh  2.0.2. Released September 14, 2023 Full release notes available on JIRA . MONGOSH-1346  - Group download center packages by platform. Released September 6, 2023 Added support for these constructors: Binary.createFromBase64() Binary.createFromHexString() ObjectId.createFromBase64() ObjectId.createFromHexString() mongosh  returns binary values as  Binary.createFromBase64(\n<base64String> )  values instead of  Binary( Buffer.from(\n<base64String> ) )  values. For example:\n binaryValue:Binary.createFromBase64( \"SGVsbG8gV29ybGQhCg==\" ) For additional details, see  Binary.createFromBase64() . For boolean values in  connection strings , you: must use  true  or  false . cannot use  1 ,  y ,  yes , or  t  instead of  true . cannot use  -1 ,  0 ,  n ,  no , or  f  instead of\n false . The following  config.version  fields were removed and aren't\nreturned in the  sh.status()  output: To obtain version information, see the  feature compatibility\nversion (fcv) . minCompatibleVersion currentVersion excluding upgradeId upgradeState Removes support for  Free Monitoring \nhelper functions: db.getFreeMonitoringStatus db.enableFreeMonitoring db.disableFreeMonitoring Full release notes available on JIRA . Amazon Linux 1, Debian 9, and macOS 10.14 aren't supported. Red Hat Enterprise Linux (RHEL) 7, Amazon Linux 2, SUSE Linux\nEnterprise Server (SLES) 12, and Ubuntu 18.04 support is deprecated\nand might be removed in a later  mongosh  release. If you must use  Node.js  16 with  mongosh , install  Node.js \nand then install  mongosh  through  npm . The ability to run\n mongosh  installed with  npm  and use  Node.js  16 might be\nremoved during the lifetime of  mongosh  2.x. Released August 25, 2023 Full release notes available on JIRA . MONGOSH-1533  - Display a notification banner when a new\n mongosh  release is available. MONGOSH-923  - Disable and hide  getLastError  when\nconnecting to a cluster older than 5.1.0. MONGOSH-1539  - Add support for Debian 12. Released August 11, 2023 Provides a programmatically accessible list of\n mongosh   downloads \nthat can be accessed through your application. Released August 10, 2023 Full release notes available on JIRA . MONGOSH-1140  -  mongosh  now officially supports\nAmazon Linux 2023 on all architectures. MONGOSH-1142  -  mongosh  now officially supports RHEL9 on\nall architectures. MONGOSH-1146  -  mongosh  now officially supports Ubuntu\n22.04 and Debian 12 on all architectures. MONGOSH-1546  -  mongosh  now produces Linux release\nartifacts that support using OpenSSL 3 on arm64 architectures. Released July 31, 2023 Updates environment variables related to telemetry. Full release notes available on JIRA . Released July 28, 2023 Full release notes available on JIRA . Inverts and fixes passwordless-auth-mechanism check MONGOSH-1495  Remove argument validation for db.killOp() MONGOSH-1499  Rename configureQueryAnalyzer option to match server MONGOSH-1449  Cap number of log files to 100 MONGOSH-1496  Do not include crypt shared library version in buildInfo Released June 21, 2023 Full release notes available on JIRA . Upgrades to Node.js version 16.20.1. Node 16.20.1 addresses security\nissues. For more information, see\n Node.js security releases . MONGOSH-1286   mongosh --build-info  now lists driver\ndependency versions. You can access driver dependency versions within the shell by\nrunning the new  buildInfo()  function. Released June 14, 2023 Full release notes available on JIRA . MONGOSH-1469  Node driver for MongoDB 5.6.0. MONGOSH-1432  Added helper for the\n checkMetadataConsistency  command. For details, see the\n driver command example . MONGOSH-1442  Added helpers for shard key selection: db.collection.analyzeShardKey( key ) db.collection.configureQueryAnalyzer( { mode, sampleRate } ) Released May 25, 2023 Full release notes available on JIRA . Internal improvements for reporting and monitoring. Released May 17, 2023 Full release notes available on JIRA . mongosh  supports the new Queryable Encryption protocol. Starting\nin v1.9.0,  mongosh  is not compatible with MongoDB server versions\n earlier than 7.0  when using Queryable Encryption. When using queryable encryption on pre-7.0 servers, you can decrypt\nencrypted data, but you cannot insert or query data. Released April 24, 2023 mongosh  now uses version 5.3.0 of the  Node.js driver . Full release notes available on JIRA . MONGOSH-1304   rs.reconfig()  will no longer automatically retry operations MONGOSH-1413  This is the first release that uploads to PPAs for Amazon 2023 after the distro rename Released February 28, 2023 Autocomplete suggests completions for database level aggregation stages. EJSON.stringify  no longer accepts a  {{strict}}  option. These methods are removed: ObjectId.prototype.generate ObjectId.prototype.getInc ObjectId.prototype.get_inc ObjectId.getInc Code objects store a string in their  .code  property. Code objects do\nnot store JavaScript functions in their  .code  property. If an object passes a key to a database function,  mongosh  only sends\nthe object's own keys to the server.  mongosh  does not send\ninherited enumerable keys to the server. Full release notes available on JIRA . MONGOSH-1358  Updates for the 5.1.0  Node.js driver . MONGOSH-1336  Performance improvement some use cases including\nthe  --version  and  --build-info  flags. MONGOSH-1316  Surfaces the  createEncryptedCollection \nhelper method. Released February 16, 2023 Full release notes available on JIRA . MONGOSH-1378  Fixes connectivity issues when  mongosh  is\ninstalled using Homebrew. Released February 10, 2023 Full release notes available on JIRA . MONGOSH-57  Display a warning when connecting to databases\nthat mimic MongoDB. MONGOSH-545  To get the current connection string, use\n db.getMongo().getURI() . Released January 9, 2023 Full release notes available on JIRA . Improves  mongosh  startup time. mongosh  now uses  Node.js driver 4.13.0 . Improves error messages. Released December 1, 2022 Full release notes available on JIRA . MONGOSH-1320 : Fixes a startup bug related to Docker and\nsimilar environments. MONGOSH-1050 : Adds support for the\n convertShardKeyToHashed()  helper method. Released September 20, 2022 Full release notes available on JIRA . MONGOSH-1299 :  mongosh  now uses  Node.js driver\n4.10.0 . MONGOSH-1254 : Adds the  sh.getShardedDataDistribution() \nhelper method. This method runs the  $shardedDataDistribution \naggregation stage and returns a cursor for the result. MONGOSH-1266 : The KeyVault  getKey()  and\n getKeyByAltName()  methods now return Documents. MONGOSH-1249 : Adds a  --json  flag for use with\n --eval  commands. MONGOSH-1287 :  cursor.count()  is now deprecated. Instead,\nuse  countDocuments()  and\n estimatedDocumentCount() . Released July 31, 2022 Fixes a potential data corruption bug in\n KeyVault.rewrapManyDataKey()  when rotating encrypted data\nencryption keys backed by Azure or GCP key services. In previous versions of  mongosh , this bug occurs when an\nAzure-backed or GCP-backed data encryption key being rewrapped requires\nfetching an access token for decryption of the data encryption key. As a result of this bug, all data encryption keys being rewrapped are\nreplaced by new randomly generated material, destroying the original key\nmaterial. To mitigate potential data corruption, upgrade  mongosh  to v1.5.4 or\nhigher before using  KeyVault.rewrapManyDataKey()  to rotate\nAzure-backed or GCP-backed data encryption keys. You should always\ncreate a backup of the key vault collection before key rotation. Released July 29, 2022 Updates telemetry internals. Full release notes available on JIRA . Released July 27, 2022 mongosh  now uses  Node.js driver 4.8.1 . Full release notes available on JIRA . Released July 14, 2022 Full release notes available on JIRA . MONGOSH-1194  -  mongosh  supports multiple  --eval  arguments. mongosh  now uses  Node.js driver 4.8.0 . Released June 2, 2022 Full release notes available on JIRA . MONGOSH-1138  \u2013  mongosh  now supports Queryable Encryption. MONGOSH-1169  \u2013  mongosh  now supports FIPS-compliant mode. mongosh  now uses Node.js version 16.x. mongosh  no longer provides per-distribution  mongosh  linux packages. You\ncan still get .rpm, .deb and .tgz packages through your package manager\nbut the naming convention may change slightly. Released May 17, 2022 Full release notes available on JIRA . MONGOSH-1139  - Adds Debian 11 support for  mongosh . MONGOSH-1183  -  cursor.allowDiskUse()  now accepts  true \nor  false . MONGOSH-1204  - Adds visual identifier for Queryable\nEncyption collections in  show collections . MONGOSH-1207  - Adds Queryable Encryption helpers. Released May 12, 2022 Full release notes available on JIRA . MONGOSH-1118  - Bundles and uses a CSFLE shared library in\nplace of  mongocryptd . MONGOSH-1217  - Introduces partial support for Queryable\nEncryption. MONGOSH-1178  - Uses  Node.js driver 4.6.0 . Released March 21, 2022 MONGOSH-1163  -  mongosh  now uses Node.js 14.19.1. Node\n14.19.1 includes an OpenSSL version that addresses\n CVE-2022-0778 . Released March 17, 2022 Full release notes available on JIRA . MONGOSH-856  - Kerberos feature parity with the legacy shell\nis done now, with the last command line option now also working as it\ndid in the legacy shell. MONGOSH-1013  - KMIP support for CSFLE. More specifically, you\ncan provide per-KMS-provider TLS options when creating your\nCSFLE-enabled connections now. MONGOSH-1151  - Support for snapshot reads, now also in\nmongosh. Released March 10, 2022 Full release notes available on JIRA . MONGOSH-1121  - Support the  commitQuorum  parameter for the\n createIndexes()  method. Released February 25, 2022 Full release notes available on JIRA . MONGOSH-1134  - Internal bug fix required to re-enable\nHomebrew installation. Released February 24, 2022 Full release notes available on JIRA . MONGOSH-1063  - You can now create a global  monogosh \n configuration file . MONGOSH-959  \u2013 You can now use the  config.reset  method to reset a configuration setting to\nthe default value. MONGOSH-1133  \u2013  mongosh  adds a  --tlsUseSystemCA \noption that causes  mongosh  to attempt to load system\ncertificates as well as the built-in certificates. Released January 18, 2022 New features in this release: Full release notes available on JIRA . MONGOSH-1015  \u2013  mongosh  no longer overrides  appName  if it\nwas present in the connection string. MONGOSH-1073  \u2013 You can now pass BSON number objects to the\nlegacy BSON number constructors. For example,\n NumberInt(NumberInt(n))  now works like it did in the legacy shell. Released January 11, 2022 New features in this release: Full release notes available on JIRA . mongosh  now uses  Node.js driver 4.3.0 . Provides PGP signatures for uploaded tarballs. Released December 14, 2021 Full release notes available on JIRA . mongosh  now uses  Node.js driver 4.2.2 . Minor bug fixes. Released December 2, 2021 New features in this release: Bug fixes in this release: Full release notes available on JIRA . mongosh  now uses  Node.js driver 4.2.1 . Fixes the way  try ,  catch ,  finally  works if no exception\nwas thrown in the  try  block. Released December 1, 2021 Minor bug fixes. Full release notes available on JIRA . Released November 24, 2021 Minor bug fixes. Full release notes available on JIRA . Released November 5, 2021 New features in this release: Full release notes available on JIRA . mongosh  now uses the following driver versions: Node.js driver 4.1.4 . Node.js BSON package 4.5.4 . mongosh  release tarballs now include manpages. Released October 28, 2021 Full release notes available on JIRA . Provides autocompletion for additional aggregation stages. Minor bug fixes. Released October 7, 2021 New features in this release: Full release notes available on JIRA . Adds support for the  edit  command and  $EDITOR  variable. Auto-complete for databases and collections is now case-insensitive. Released September 22, 2021 New features in this release: mongosh  now uses the following driver versions: Full release notes available on JIRA . Node.js driver 4.1.2 . Node.js BSON package 4.5.2 . Node.js BSON extension 4.0.1 . Node.js driver Kerberos addon 1.1.7 . Node.js driver CSFLE addon 1.2.7 . Released September 14, 2021 New features in this release: Bug Fixes in this Release: Full release notes available on JIRA . You can now run  sh.status()  when not connected to a\n mongos , for example when connected to a\n config server . db.setSecondaryOk() ,  mongo.setSecondaryOk() , and\n rs.secondaryOk()  methods are reintroduced but  deprecated .\nThese methods alias to  mongo.setReadPref() . When you enter multiline input into the shell, single-line\n // comments  are now preserved as  /* comments */  in the\nhistory entry. The  Aggregation Pipeline  parameter is now optional for\n db.collection.watch() ,  db.watch() , and\n Mongo.watch() . mongosh  now runs aggregations with  $out  or\n $merge  immediately, and not lazily once the result of the\naggregation is accessed. Using the legacy  NumberLong()  method no longer truncates numbers\noutside of the 32-bit range. Released August 12, 2021 New features in this release: You can use  config.set('maxTimeMS', <number>)  to set a default\n maxTimeMS  value for operations.  maxTimeMS  specifies a time\nlimit in milliseconds within which the operation must complete. config  settings persist across sessions. On Windows,  you can start  mongosh  by double-clicking on the\n .exe  file. When you do,  mongosh  prompts you for a connection\nstring to connect to your deployment. The log files created by  mongosh  follow the format of the\n mongod ,  mongos , or  mongocryptd . Meaning, the log files are\nnewline-delimited JSON with the same set of fields used by the server. Released August 4, 2021 New features in this release: Bug fixes in this release: mongosh  now uses version  4.1.0  of the Node.js driver, with\nfull support for connections to load balancers and MongoDB Atlas\n serverless instances . The  Timestamp()  argument order is now reversed compared to\nprevious  mongosh  versions. Released July 29, 2021 Bug fixes in this release: Passing the exit code to  quit()  works like it does in the legacy\nshell. Instances of  MaxListenersExceededWarning  are no longer emitted\nwhen methods like  console.log()  are used in loops. When an internal error in  mongosh  occurs, the error message\npoints you to the log file for the current  mongosh  session. When printing the name of a collection (such as in response to\n db.coll ), the database name is included in the output. Released July 21, 2021 New features in this release: Bug fixes in this release: Adds full support for the  --host  flag. Adds the  --build-info  flag which provides detailed information\nabout the  mongosh  version. When using Kerberos,  mongosh  will now make use of tokens if they\nare still valid. You no longer need to specify a password when using\nvalid tokens. An issue that sporadically resulted in an  AcquireCredentialsHandle \nerror on Kerberos was fixed. Miscellaneous other improvements. Released July 9, 2021 New features in this release: All the static methods of the Node.js driver BSON classes are now\navailable. Specifically, you can use\n ObjectId.createFromTime(unixTimestampSeconds)  instead of the\nlegacy shell\u2019s  ObjectId.fromDate(dateObj) . When connected to an Atlas deployment, the default  mongosh  prompt\ndisplays  Atlas  instead of  Enterprise . The  cursor  referred to when\nusing  it  is cleared when either  db  is reassigned or\n db.auth()  /  db.logout()  is called. Minor bug fixes and improvements. Released July 1, 2021 New features in this release: mongosh  now color coordinates matching brackets. Released June 25, 2021 New features in this release: mongosh  now shows the current database name in prompt by default. Released June 22, 2021 New features in this release: Bug fixes in this release: .tar  and  .zip   mongosh  download archives now include a\nparent directory. Autocomplete is now aware of the  --apiStrict  flag. When\n --apiStrict  is  true , autocomplete only completes methods\nthat work with your defined API version. For more information, see\n Stable API . Snippets . An experimental feature that\nallows users to create custom shell extensions. mongosh  can now connect to a replica set containing unhealthy nodes. Released May 28, 2021 New features in this release: When you run  show collections , the type of collection is shown in\nthe output. Adds  sh.reshardCollection()  for resharding support. Adds  inspectCompact  option to the\n configuration API  to print each\ndocument field on its own line. Released May 18, 2021 New features in this release: When you use  Ctrl+C  to interrupt an operation, you interrupt\noperations that are running on the server, and not just local\nJavaScript execution. .editor  sessions are aggregated into one\nitem in shell history. Build and publish packages for all platforms in the current MongoDB\n5.0 server support matrix. Publish Windows MSI to the download center. Adds a customizable REPL prompt using  prompt  (or your\n .mongoshrc.js  file). When running against a MongoDB 5.0 deployment, shows reasons for\ndocument validation failures. Adds basic support for the  --apiStrict  flag. New connection methods: Mongo.getDBNames()  returns a list of databases. Mongo.getDBs()  returns a document with a list of\ndatabases and metadata. Released April 30, 2021 New features in this release: Bug fixes in this release: Adds support for the  db.hello()  shell method and\n hello  database command. Use these commands in place of\n isMaster . Extends the shell customization API to allow controlling log\nverbosity. Adds autocomplete for  show  and  use  commands. For example,\n show collections  and  use test . collStats  now works properly on sharded collections. Released April 23, 2021 New async rewriter, allowing for a much wider range of JavaScript\nfeatures in the shell. Connection failure response is now more prompt if a connection\nis deemed unlikely to succeed. Adds new API for shell customization. Released April 8, 2021 Internal improvements and various bug fixes. Released April 1, 2021 Internal improvements. Released March 31, 2021 New features in this release: Bug fixes in this release: Support for loading a  .mongoshrc.js  file at startup. Use this\nfile to bootstrap the shell with customizations and extended\nfunctionality. Ability to load scripts from the command line. Support for  --eval  option. Support for\n --tlsCertificateSelector \non Windows and macOS. Objects in  explain output  now\nproperly expand. Released March 10, 2021 New features in this release: Bug fixes in this release: Support for the  load()  method. Support for AWS IAM authentication. Autocomplete works properly when connected to secondary node. db.createUser()  on  $external  database now handles\npassword properly. Miscellaneous other improvements. Released February 24, 2021 Minor internal improvements and bug fixes. Released February 22, 2021 Minor internal improvements and bug fixes. Released February 17, 2021 New features in this release: Bug fixes in this release: Support for  Client-Side Field Level Encryption . Running  setReadConcern  no longer reverses  db.auth() \nauthentication operations. Pressing the backspace key in the password prompt no longer adds an\nasterisk, and now behaves as expected. Running  UUID()  without a value now generates a random UUID. Released February 3, 2021 New features in this release: Bug fixes in this release: explain()  support for the following methods: count() distinct() findAndModify() remove() update() Support for specifying  cursor.batchSize() , and type  it  for\nmore. Autocomplete for collection names. mongosh  no longer fails when connecting to a node in the\n STARTUP2  state. mongosh  now properly displays startup warnings. explain()  on aggregations now return\naccurate and complete results. Released November 30, 2020 New features in this release: Bug fixes and miscellaneous updates in this release: Support for  readPreference \nmethods. Support for the  session object \nand related session object methods. Support for  transaction  methods. Remove support for deprecated 3.6 CRUD methods ( insert() ,\n remove() ,  save() , and  update() ). Fix an issue with loading JavaScript files into  mongosh . Fix an issue where when inserting many documents via a for loop,\nthe loop would abort before all documents were inserted. Fix issue with output when printing result of a cursor. Update the Node REPL to use Node version 14. Released November 11, 2020 Autocomplete now works properly when connected to a MongoDB 4.4.1\ndeployment. The  sh.status()  method now outputs correctly in the browser\nshell. Released October 12, 2020 Adds support for replica set management methods. Adds support for sharded cluster management methods. Released October 1, 2020 Adds support for collection names with a dot. For example, to query\na collection named  my.collection , you can run: Released September 15, 2020 Adds support for the following methods: db.collection.mapReduce() db.collection.validate() Adds support for  maxAwaitTimeMS  for cursors. Released September 14, 2020 This release adds support for: This release includes an  .rpm  artifact which can be downloaded from\nthe  MongoDB Download Center . New  cursor  methods Query  planCache  methods Error helper methods The following helper commands: show users show profile show logs show log[<name>] Whenever a command's output includes  { ok: 0 } ,  mongosh  throws\nan exception and does not return the raw output from the server. The legacy  mongo  shell error handling is not consistent between\ncommands.  mongosh  standardizes the user-facing behavior for a\nmore consistent experience. MONGOSH-323 : getUser() userId field is\noutputted as binary. MONGOSH-337 : Linux tarball is not gzipped. MONGOSH-341 : Wrong values with NumberLong for\nnumbers > Number.MAX_SAFE_INTEGER. As a result of this fix, values\npassed to  NumberLong  and  NumberDecimal  must be strings. The fix for  MONGOSH-341  is a breaking\nchange when compared to behavior in the legacy  mongo  shell. MONGOSH-346 :  Ctrl+C  does not terminate the\ncurrently running command in the shell. Ctrl+C  terminates the process in the shell, but does not\nterminate the process on the MongoDB server. Released August 31, 2020 This release adds support for the following APIs: Admin commands such as  db.killOp()  and\n db.currentOp() . More detail in\n MONGOSH-307 . Free monitoring commands such as  db.enableFreeMonitoring() .\nMore detail in   MONGOSH-300 . Logging and profiling helper method implementations\n(for example,  db.setLogLevel() ).\nMore detail in  MONGOSH-299 . Raw command execution methods helpers (e.g.\n db.listCommands() ). More detail in\n MONGOSH-301 . Server stats commands such as  db.serverBuildInfo()  and\n db.serverStatus() . More detail in\n MONGOSH-304 . Bulk API support. Details in  MONGOSH-296 . Credentials are now properly redacted in logging and history. For information on past releases, refer to\n mongosh Releases on GitHub .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "db.my.collection.findOne()"
                }
            ],
            "preview": "Released February 19, 2024",
            "tags": null,
            "facets": {
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "crud/delete",
            "title": "Delete Documents",
            "headings": [
                "Delete All Documents",
                "Delete All Documents that Match a Condition",
                "Delete Only One Document that Matches a Condition",
                "Delete Behavior",
                "Learn More"
            ],
            "paragraphs": "The MongoDB shell provides the following methods to delete documents\nfrom a collection: To delete multiple documents, use\n db.collection.deleteMany() . To delete a single document, use  db.collection.deleteOne() . The examples on this page reference the  Atlas \n sample dataset . You can create a free  Atlas \ncluster and populate that cluster with sample data to follow along with\nthese examples. To learn more, see\n Get Started with Atlas . To delete all documents from a collection, pass an empty\n filter  document  {}  to the\n db.collection.deleteMany()  method. To delete all documents from the  sample_mflix.movies  collection: The method returns a document with the status of the operation. For\nmore information and examples, see\n deleteMany() . You can specify criteria, or filters, that identify the documents to\ndelete. The  filters  use the same syntax\nas read operations. To specify equality conditions, use  <field>:<value>  expressions in\nthe query filter document. To delete all documents that match a deletion criteria, pass a filter\nparameter to the  deleteMany()  method. To delete all documents from the  sample_mflix.movies  collection\nwhere the  title  equals  \"Titanic\" : The method returns a document with the status of the operation. For\nmore information and examples, see\n deleteMany() . To delete at most a single document that matches a specified filter\n(even though multiple documents may match the specified filter) use the\n db.collection.deleteOne()  method. To delete the  first  document from the  sample_mflix.movies \ncollection where the  cast  array contains  \"Brad Pitt\" : MongoDB preserves a natural sort order for documents. This\nordering is an internal implementation feature, and you should not\nrely on any particular structure within it. To learn more, see\n natural order . To learn more about the specific behavior of deleting documents,\nsee  Behavior . To see additional examples of deleting documents, see the following\nmethod pages: db.collection.deleteMany() db.collection.deleteOne() To see all available methods to delete documents, see\n Delete Methods .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.deleteMany({})"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.deleteMany( { title: \"Titanic\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.deleteOne( { cast: \"Brad Pitt\" } )"
                }
            ],
            "preview": "Delete one or many documents from a MongoDB collection.",
            "tags": "server, atlas, sample dataset",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "crud/read",
            "title": "Query Documents",
            "headings": [
                "Read All Documents in a Collection",
                "Specify Equality Condition",
                "Specify Conditions Using Query Operators",
                "Specify Logical Operators (AND / OR)",
                "Read Behavior",
                "Additional Query Tutorials"
            ],
            "paragraphs": "Use the  db.collection.find()  method in the  MongoDB Shell \nto query documents in a collection. The examples on this page reference the  Atlas \n sample dataset . You can create a free  Atlas \ncluster and populate that cluster with sample data to follow along with\nthese examples. To learn more, see\n Get Started with Atlas . To read all documents in the collection, pass an empty document as the\nquery filter parameter to the find method. The query filter parameter\ndetermines the select criteria. To return all documents from the  sample_mflix.movies  collection: This operation is equivalent to the following SQL statement: To select documents which match an equality condition, specify\nthe condition as a  <field>:<value>  pair in the\n query filter document . To return all movies where the  title  equals  Titanic  from the\n sample_mflix.movies  collection: This operation corresponds to the following SQL statement: Use  query operators  in a\n query filter document \nto perform more complex comparisons and evaluations. Query operators\nin a query filter document have the following form: To return all movies from the  sample_mflix.movies  collection\nwhich are either rated  PG  or  PG-13 : This operation corresponds to the following SQL statement: Although you can express this query using the  $or  operator,\nuse the  $in  operator rather than the  $or \noperator when performing equality checks on the same field. A compound query can specify conditions for more than one field in the\ncollection's documents. Implicitly, a logical  AND  conjunction\nconnects the clauses of a compound query so that the query selects the\ndocuments in the collection that match all the conditions. Use the  $or  operator to specify a compound query that joins\neach clause with a logical  OR  conjunction so that the query selects\nthe documents in the collection that match at least one condition. To return movies which were released in Mexico  and  have an IMDB\nrating of at least 7: To return movies from the  sample_mflix.movies  collection which\nwere released in 2010  and   either  won at least 5 awards or\nhave a  genre  of  Drama : To learn more about the specific behavior of reading documents,\nsee  Behavior . For additional query examples, see: Query Embedded Documents Query an Array Query an Array of Embedded Documents Project Fields to Return from Query Query for Null or Missing Fields",
            "code": [
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.find()"
                },
                {
                    "lang": "sql",
                    "value": "SELECT * FROM movies"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.find( { \"title\": \"Titanic\" } )"
                },
                {
                    "lang": "sql",
                    "value": "SELECT * FROM movies WHERE title = \"Titanic\""
                },
                {
                    "lang": "javascript",
                    "value": "{ <field1>: { <operator1>: <value1> }, ... }"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.find( { rated: { $in: [ \"PG\", \"PG-13\" ] } } )"
                },
                {
                    "lang": "sql",
                    "value": "SELECT * FROM movies WHERE rated in (\"PG\", \"PG-13\")"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.find( { countries: \"Mexico\", \"imdb.rating\": { $gte: 7 } } )"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.find( {\n     year: 2010,\n     $or: [ { \"awards.wins\": { $gte: 5 } }, { genres: \"Drama\" } ]\n} )"
                }
            ],
            "preview": "Use the db.collection.find() method in the MongoDB Shell to query documents in a collection.",
            "tags": "server, atlas, sample dataset",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "crud/update",
            "title": "Update Documents",
            "headings": [
                "Update Operator Syntax",
                "Update a Single Document",
                "Update Multiple Documents",
                "Replace a Document",
                "Update Behavior",
                "Learn More"
            ],
            "paragraphs": "The MongoDB shell provides the following methods to update documents in\na collection: To update a single document, use\n db.collection.updateOne() . To update multiple documents, use\n db.collection.updateMany() . To replace a document, use\n db.collection.replaceOne() . The examples on this page reference the  Atlas \n sample dataset . You can create a free  Atlas \ncluster and populate that cluster with sample data to follow along with\nthese examples. To learn more, see\n Get Started with Atlas . To update a document, MongoDB provides\n update operators , such\nas  $set , to modify field values. To use the update operators, pass to the update methods an\nupdate document of the form: Some update operators, such as  $set , create the field if\nthe field does not exist. See the individual\n update operator  reference for\ndetails. Use the  db.collection.updateOne()  method to update the  first \ndocument that matches a specified filter. MongoDB preserves a natural sort order for documents. This\nordering is an internal implementation feature, and you should not\nrely on any particular structure within it. To learn more, see\n natural order . To update the  first  document in the  sample_mflix.movies \ncollection where  title  equals  \"Twilight\" : The update operation: Uses the  $set  operator to update the value of the\n plot  field for the movie  Twilight . Uses the  $currentDate  operator to update the value\nof the  lastUpdated  field to the current date. If\n lastUpdated  field does not exist,\n $currentDate  will create the field. See\n $currentDate  for details. Use the  db.collection.updateMany()  to update all documents\nthat match a specified filter. To update all documents in the  sample_airbnb.listingsAndReviews \ncollection to update where  security_deposit  is less than  100 : The update operation uses the  $set  operator to update the\nvalue of the  security_deposit  field to  100  and the value of\nthe  minimum_nights  field to  1 . To replace the entire content of a document except for the  _id \nfield, pass an entirely new document as the second argument to\n db.collection.replaceOne() . When replacing a document, the replacement document must contain only\nfield/value pairs. Do not include  update operators  expressions. The replacement document can have different fields from the original\ndocument. In the replacement document, you can omit the  _id  field\nsince the  _id  field is immutable; however, if you do include the\n _id  field, it must have the same value as the current value. To replace the  first  document from the\n sample_analytics.accounts  collection where\n account_id: 371138 : Run the following command to read your updated document: To learn more about the specific behavior of updating documents,\nsee  Behavior . To learn how to update documents using an aggregation pipeline, see\n Updates with Aggregation Pipeline . To see all available methods to update documents, see\n Update Methods .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{\n  <update operator>: { <field1>: <value1>, ... },\n  <update operator>: { <field2>: <value2>, ... },\n  ...\n}"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_mflix\n\ndb.movies.updateOne( { title: \"Twilight\" },\n{\n  $set: {\n    plot: \"A teenage girl risks everything\u2013including her life\u2013when she falls in love with a vampire.\"\n  },\n  $currentDate: { lastUpdated: true }\n})"
                },
                {
                    "lang": "javascript",
                    "value": "use sample_airbnb\n\ndb.listingsAndReviews.updateMany(\n  { security_deposit: { $lt: 100 } },\n  {\n    $set: { security_deposit: 100, minimum_nights: 1 }\n  }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.accounts.replaceOne(\n  { account_id: 371138 },\n  { account_id: 893421, limit: 5000, products: [ \"Investment\", \"Brokerage\" ] }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.accounts.findOne( { account_id: 893421 } )"
                }
            ],
            "preview": "Use the MongoDB Shell to update a single document, update multiple documents, or replace a document.",
            "tags": "server, atlas, sample dataset",
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/configure-shell-settings-api",
            "title": "Configure Settings Using the API",
            "headings": [
                "Syntax",
                "Supported property parameters",
                "Behavior",
                "Remove or Redact Sensitive Information From History",
                "Behavior with Configuration File",
                "Examples",
                "Update Number of Items Returned by a Cursor",
                "Turn On Stack Traces",
                "Call config API from outside mongosh",
                "Redact Sensitive Information",
                "Reset a Configuration Setting to the Default Value"
            ],
            "paragraphs": "The  config  API provides methods to examine and update the\n mongosh  configuration. Updates made using the  config \nAPI persist between sessions. The  config  API can be used within the  mongosh \ncommand line interface. It has no effect in the\n embedded Compass shell . Print the current  mongosh  configuration: Return the current value for  <property> : Change the current setting of  <property>  to  <value> : Reset a  <property>  to the default value: Key Type Default Description displayBatchSize integer 20 The number of items displayed per cursor iteration enableTelemetry boolean true Enables sending anonymized tracking and diagnostic data to\nMongoDB. editor string null Designates an editor to use within the  mongosh \nconsole. Overrides the  EDITOR  environment variable if set. forceDisableTelemetry boolean false Only available in the global configuration file. When true,\nusers cannot enable telemetry manually. historyLength integer 1000 The number of items to store in  mongosh  REPL's\nhistory file. inspectCompact integer or boolean 3 The level of inner elements that  mongosh  outputs\non a single line. Short array elements are also grouped together\non a single line. If set to  false ,  mongosh  outputs each field\non its own line. inspectDepth integer or Infinity 6 The depth to which objects are printed. Setting  inspectDepth \nto  Infinity  (the javascript object) prints all nested\nobjects to their full depth. redactHistory string remove Controls what information is recorded in the shell history.\nMust be one of: keep : Retain all history. remove : Remove lines which contain sensitive information. remove-redact : Redact sensitive information. showStackTraces boolean false Controls display of a stack trace along with error messages. snippetAutoload boolean true If  true , automatically load installed\n snippets  at startup. snippetIndexSourceURLs string MongoDB Repository A semicolon-separated list of URLs that link to a\n snippet  registry. snippetRegistryURL string npm Registry The npm registry used by the  mongosh  npm client\nthat installs  snippet . mongosh  makes \"best-effort\" attempts to match patterns\nthat normally correspond to certain kinds of sensitive information. There are patterns that match: Certain operations, such as  connect() , are considered\ninherently sensitive. If  redactHistory  is set to  remove  or\n remove-redact , lines with these operations will be removed from the\n command line history . Other operations, like  find() , sometimes have\nsensitive information like email addresses. The\n shell history  will retain these\nlines as entered unless  redactHistory  is set to  remove-redact . Certificates and keys Email addresses Generic user directories HTTP(s) URLs IP addresses MongoDB connection strings Settings specified with the  config  API: Override settings specified in the  configuration file . Persist across restarts. Consider the following configuration file that sets the\n inspectDepth  setting to  20 : During your  mongosh  session you run the following command to set\n inspectDepth  to  10 : The value of  inspectDepth  becomes  10 , and will remain  10 \neven when  mongosh  is restarted. Consider viewing a collection with a number of large documents. You can\nupdate the  batchSize  to limit the number of items returned by a\ncursor. Future  db.collection.find()  operations will only return 3 documents\nper cursor iteration. Enable stack traces to see more detailed error reporting. The output differs like this: You can call the  config  API from the command line using\n --eval  with  mongosh . In this case the\n --nodb  option means  mongosh  will update\nwithout connecting to a MongoDB database. mongosh  returns additional information along with the\nresult of the API call. You must use different quotation marks for the  --eval \nexpression and the  config  property. That is, single quotes for\none and double quotes for the other. Compare the recalled history when  redactHistory  is set to\n remove-redact  or  remove . Set  redactHistory  to  remove-redact  mode and enter a query\ncontaining an email address. When you press the  up arrow  to replay the last command the email\naddress is redacted. Set  redactHistory  to  remove  mode and enter a query containing\nan email address. When you press the  up arrow  to replay the last command the email\naddress is present. The  shell history  reflects the\nchanges. (Note that this stores the most recent input first.) If you modified a configuration setting and want to reset it to the\ndefault value, use  config.reset( \"<property>\" ) . Change the value of the  historyLength  setting to  2000 : Verify the updated value for  historyLength : Reset the  historyLength  setting to the default value of  1000 : Verify the updated value for  historyLength :",
            "code": [
                {
                    "lang": "javascript",
                    "value": "config"
                },
                {
                    "lang": "javascript",
                    "value": "config.get( \"<property>\" )"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"<property>\", <value> )"
                },
                {
                    "lang": "javascript",
                    "value": "config.reset( \"<property>\" )"
                },
                {
                    "lang": "yaml",
                    "value": "mongosh:\n  inspectDepth: 20"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"inspectDepth\", 10 )"
                },
                {
                    "lang": "javascript",
                    "value": "config.set(\"displayBatchSize\", 3)"
                },
                {
                    "lang": "javascript",
                    "value": "config.set(\"showStackTraces\", true)"
                },
                {
                    "lang": "javascript",
                    "value": "// showStackTraces set to 'false'\nEnterprise> db.orders.find( {}, { $thisWontWork: 1 } )\nMongoError: FieldPath field names may not start with '$'.\n\n// showStackTraces set to 'true'\nEnterprise> db.orders.find( {}, { $thisWontWork: 1 } )\nUncaught:\nMongoError: FieldPath field names may not start with '$'.\n    at MessageStream.messageHandler (/usr/bin/mongosh:58878:20)\n    at MessageStream.emit (events.js:315:20)\n    at MessageStream.EventEmitter.emit (domain.js:548:15)\n    at processIncomingData (/usr/bin/mongosh:57954:12)\n    at MessageStream._write (/usr/bin/mongosh:57850:5)\n    at writeOrBuffer (_stream_writable.js:352:12)\n    at MessageStream.Writable.write (_stream_writable.js:303:10)\n    at Socket.ondata (_stream_readable.js:719:22)\n    at Socket.emit (events.js:315:20)\n    at Socket.EventEmitter.emit (domain.js:548:15)"
                },
                {
                    "lang": null,
                    "value": "mongosh --nodb --eval 'config.set(\"enableTelemetry\", true)'"
                },
                {
                    "lang": null,
                    "value": "Current Mongosh Log ID:      609583b730e14918fa0d363f\nUsing MongoDB:               undefined\nUsing Mongosh Beta:  0.12.1\n\nFor mongosh info see: https://www.mongodb.com/docs/mongodb-shell/\n\nSetting \"enableTelemetry\" has been changed"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"redactHistory\", \"remove-redact\" )\ndb.contacts.find( {\"email\": \"customer@clients.com\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "db.contacts.find( {\"email\": \"<email>\" } )  // Redacted"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"redactHistory\", \"remove\" )\ndb.contacts.find( {\"email\": \"customer@clients.com\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "db.contacts.find( {\"email\": \"customer@clients.com\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "db.contacts.find( {\"email\": \"customer@clients.com\" } )\nconfig.set( \"redactHistory\", \"remove\" )\ndb.contacts.find( {\"email\": \"<email>\" } )\nconfig.set( \"redactHistory\", \"remove-redact\" )"
                },
                {
                    "lang": "javascript",
                    "value": "config.set(\"historyLength\", 2000)"
                },
                {
                    "lang": "javascript",
                    "value": "config.get(\"historyLength\")"
                },
                {
                    "lang": "javascript",
                    "value": "config.reset(\"historyLength\")"
                },
                {
                    "lang": "javascript",
                    "value": "config.get(\"historyLength\")"
                }
            ],
            "preview": "The config API provides methods to examine and update the\nmongosh configuration. Updates made using the config\nAPI persist between sessions.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/configure-shell-settings-global",
            "title": "Configure Settings Using a Configuration File",
            "headings": [
                "Configuration File Format",
                "Example Configuration File",
                "Configuration File Location",
                "Configurable Settings",
                "Behavior with config API"
            ],
            "paragraphs": "You can specify  mongosh  settings in a global configuration file.\nWhen you specify settings in a configuration file, those settings are\napplied at startup. After you create a configuration file, the settings\nin the file take effect the next time you start  mongosh . The  mongosh  configuration file uses the YAML format. All options are\nunder the  mongosh  namespace. The following configuration file sets: displayBatchSize  to 50 inspectDepth  to 20 redactHistory  to  remove-redact The file location where  mongosh  looks for the configuration file\ndepends on your operating system: Operating System File Location Windows mongosh.cfg , in the same directory as the  mongosh.exe \nbinary. macOS mongosh  looks for a configuration file in the following\ndirectories in the order they are listed: Once  mongosh  reads a configuration file in one of these\ndirectories, any remaining directories in the list are not\nchecked and configuration files in those directories are ignored. /usr/local/etc/mongosh.conf /opt/homebrew/etc/mongosh.conf /etc/mongosh.conf Linux /etc/mongosh.conf You can specify the following  mongosh  settings in your configuration\nfile: Key Type Default Description displayBatchSize integer 20 The number of items displayed per cursor iteration enableTelemetry boolean true Enables sending anonymized tracking and diagnostic data to\nMongoDB. editor string null Designates an editor to use within the  mongosh \nconsole. Overrides the  EDITOR  environment variable if set. forceDisableTelemetry boolean false Only available in the global configuration file. When true,\nusers cannot enable telemetry manually. historyLength integer 1000 The number of items to store in  mongosh  REPL's\nhistory file. inspectCompact integer or boolean 3 The level of inner elements that  mongosh  outputs\non a single line. Short array elements are also grouped together\non a single line. If set to  false ,  mongosh  outputs each field\non its own line. inspectDepth integer or Infinity 6 The depth to which objects are printed. Setting  inspectDepth \nto  Infinity  (the javascript object) prints all nested\nobjects to their full depth. redactHistory string remove Controls what information is recorded in the shell history.\nMust be one of: keep : Retain all history. remove : Remove lines which contain sensitive information. remove-redact : Redact sensitive information. showStackTraces boolean false Controls display of a stack trace along with error messages. snippetAutoload boolean true If  true , automatically load installed\n snippets  at startup. snippetIndexSourceURLs string MongoDB Repository A semicolon-separated list of URLs that link to a\n snippet  registry. snippetRegistryURL string npm Registry The npm registry used by the  mongosh  npm client\nthat installs  snippet . Settings specified with the  config API : Override settings specified in the configuration file. Persist across restarts. Consider the following configuration file that sets the\n inspectDepth  setting to  20 : During your  mongosh  session you run the following command to set\n inspectDepth  to  10 : The value of  inspectDepth  becomes  10 , and will remain  10 \neven when  mongosh  is restarted.",
            "code": [
                {
                    "lang": "yaml",
                    "value": "mongosh:\n  displayBatchSize: 50\n  inspectDepth: 20\n  redactHistory: \"remove-redact\""
                },
                {
                    "lang": "yaml",
                    "value": "mongosh:\n  inspectDepth: 20"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"inspectDepth\", 10 )"
                }
            ],
            "preview": "You can specify mongosh settings in a global configuration file.\nWhen you specify settings in a configuration file, those settings are\napplied at startup. After you create a configuration file, the settings\nin the file take effect the next time you start mongosh.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/customize-prompt",
            "title": "Customize the mongosh Prompt",
            "headings": [
                "Display Line Numbers",
                "Display Database and Hostname",
                "Display System Up Time and Document Count"
            ],
            "paragraphs": "By default the  mongosh  prompt includes the current\ndatabase name. You can modify the  prompt  variable to display custom\nstrings or to return dynamic information about your  mongosh  session. Custom prompts are not stored when you exit  mongosh . To\nhave a custom prompt persist through restarts, add the code for your\ncustom prompt to  .mongoshrc.js . To display line numbers in the  mongosh  prompt, run the\nfollowing code inside  mongosh : The prompt will look like this: The current database name is part of the default  mongosh  prompt. To\nreformat the prompt to show the database and hostname, use a function\nlike this one: The prompt will look like this: To create a prompt that shows the system uptime and a count of\ndocuments across all collections in the current database, use a\nfunction like this one:",
            "code": [
                {
                    "lang": "javascript",
                    "value": "let cmdCount = 1;\nprompt = function() {\n             return (cmdCount++) + \"> \";\n         }"
                },
                {
                    "lang": "javascript",
                    "value": "1> show collections\n2> use test\n3>"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   const hostnameSymbol = Symbol('hostname');\n   prompt = () => {\n      if (!db[hostnameSymbol])\n         db[hostnameSymbol] = db.serverStatus().host;\n      return `${db.getName()}@${db[hostnameSymbol]}> `;\n   };\n}"
                },
                {
                    "lang": "javascript",
                    "value": "admin@centos0722:27502>"
                },
                {
                    "lang": "javascript",
                    "value": "prompt = function() {\n   return \"Uptime:\" + db.serverStatus().uptime +\n          \" Documents:\" + db.stats().objects +\n          \" > \";\n   }"
                }
            ],
            "preview": "By default the mongosh prompt includes the current\ndatabase name. You can modify the prompt variable to display custom\nstrings or to return dynamic information about your mongosh session.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/editor-mode",
            "title": "Use an Editor for Commands",
            "headings": [
                "Using an External Editor",
                "Start a New Editing Session",
                "Edit a Variable",
                "Edit a Statement",
                "Using the Built-in Editor",
                "Examples",
                "Set the External Editor",
                "Set the EDITOR environment variable",
                "Set the editor Property",
                "Editing a Command",
                "Using Visual Studio as an External Editor",
                "Unset the External Editor",
                "Using the Built-In Editor"
            ],
            "paragraphs": "The  mongosh  console is line oriented. However, you can\nalso use an editor to work with multiline functions. There are two\noptions: Use the  edit  command with an  external editor . Use the  .editor  command, a  built-in editor . The  mongosh   edit  command works with an external\neditor. You can configure an external editor in the shell that runs\n mongosh  or from within  mongosh . If editors are configured in both locations, the editor configured\nwithin  mongosh  will take precedence. To set an editor within  mongosh , use the\n config.set()  command. See  setting the external editor \nfor more examples. You can use  edit  in three ways: Start a new Editing Session Edit a Variable Edit a Statement Enter  edit  by itself to start a new editing session. If you start an editing session without any arguments, the editor opens\nwith the last edit loaded. See the example,  Editing a Command . If an argument exists in the console namespace, you can use  edit  to\nupdate it. The variable  albums  is set in the first line. The second line opens the external editor to edit the value of\n albums . To edit a statement in the external editor, invoke  edit  with a\nstatement such as  db.collection.insertMany() . After editing  db.music.insertMany( [] )  and exiting the external\neditor, the  mongosh  console might look like this: When you exit the external editor, the statement is copied to the\nconsole input line, ready to run. It does not run automatically.\nPress  <enter>  to run the statement or  <ctrl> + c  to cancel it. The  .editor  command provides basic multiline editing capabilities. The editor does not save code. When you close the built-in editor, your\nedits are loaded into the global scope. If your edit calls any\nfunctions or commands, they will run when you close the editor. To start the built-in editor: Enter  <ctrl> + d  to exit and run your function. See  Using the Built-In Editor . If the  EDITOR  environment variable is set in the shell running\n mongosh , the  edit  command will use that editor. If the  mongosh   editor  property is also set,\n mongosh  will use that program instead. The  editor \nproperty overrides the  EDITOR  environment variable. The environment variable should be set before starting\n mongosh . Set an environment variable in  bash  or  zsh : The  vi  editor will open when you run  edit  in the\n mongosh  console. You can also set environment variables from within\n mongosh  using  process.env.<VARIABLE> . Set the EDITOR environment variable from  mongosh : The environment variable is only updated for the current\n mongosh . The update does not persist when\n mongosh  exits. To set  nano  as the editor from within  mongosh , use\nthe  config.set()  command. The  nano  editor will open when you run  edit  in the\n mongosh  console. mongosh  will attempt to use whatever program is\nconfigured. A program like  less  will work. Other programs, such\nas  grep , may crash or have unexpected results. Use  edit  to start an editing session. If the editor was already\nused in the current console session, the editor opens the last edit. The following statement has a syntax error. The highlighted line is\nmissing a comma: To set up the example: When you exit the editor, it copies the example code to the command\nline.  mongosh  returns an error when the code runs. To reload the example code, enter  edit  without any arguments. The code is reformatted for easier editing. In this case the missing\ncomma in the highlighted line causes the documents to be misaligned. Copy the example code. Enter  edit  to start an editing session. Paste the example code into the editor. Exit the editor. Press  enter . Visual Studio requires a special parameter to work as an external\neditor. Use  --wait  with Visual Studio. Set an environment variable: You can also set the editor with  config.set() . If Visual Studio is in your  PATH , open\n mongosh  and run: If you use Visual Studio, you can also use the  MongoDB VS Code\nExtension . Unset the  editor  variable in  mongosh : If the  EDITOR  environment is configured, unset it as well. From\n mongosh , run: If you unset  EDITOR  using  process.env  the change will not\npersist after exiting  mongosh . To make the change\npersistent, unset  EDITOR  from your shell. Start the editor: mongosh  enters editor mode. Enter your code: To leave the editor, Objects which are declared using  .editor , like  albums  in this\nexample, are added to the global scope. They are available after\n .editor  closes. Press  <ctrl> + d  to exit and run your function Press  <ctrl> + c  to exit without running your function",
            "code": [
                {
                    "lang": "javascript",
                    "value": "config.set( \"editor\", \"vi\" )"
                },
                {
                    "lang": "javascript",
                    "value": "edit"
                },
                {
                    "lang": "javascript",
                    "value": "var albums = [ ];\nedit albums"
                },
                {
                    "lang": "javascript",
                    "value": "edit db.digits.insertMany( [] )"
                },
                {
                    "lang": "javascript",
                    "value": "prompt> db.digits.insertMany([{ \"zero\": 0 }, { \"one\": 1 }, { \"two\": 2 }])"
                },
                {
                    "lang": "javascript",
                    "value": ".editor"
                },
                {
                    "lang": "shell",
                    "value": "export EDITOR=vi"
                },
                {
                    "lang": "javascript",
                    "value": "process.env.EDITOR = 'nano'"
                },
                {
                    "lang": "javascript",
                    "value": "config.set( \"editor\", \"nano\" )"
                },
                {
                    "lang": "javascript",
                    "value": "// WARNING: This code contains an error\n\ndb.users.insertMany( [\n   { \"name\": \"Joey\", \"group\": \"sales\" }\n   { \"name\": \"Marie\", \"group\": \"sales\" },\n   { \"name\": \"Elton\", \"group\": \"accounting\" },\n   { \"name\": \"Paola\", \"group\": \"marketing\" }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "// WARNING: This code contains an error\n\ndb.users.insertMany([{\n        \"name\": \"Joey\",\n        \"group\": \"sales\"\n   } {\n        \"name\": \"Marie\",\n        \"group\": \"sales\"\n   },\n   {\n        \"name\": \"Elton\",\n        \"group\": \"accounting\"\n   },\n   {\n        \"name\": \"Paola\",\n        \"group\": \"marketing\"\n   }\n])"
                },
                {
                    "lang": "javascript",
                    "value": "export EDITOR=\"/usr/local/bin/code --wait\""
                },
                {
                    "lang": "javascript",
                    "value": "config.set(\"editor\", \"code --wait\")"
                },
                {
                    "lang": "javascript",
                    "value": "config.set(\"editor\", null)"
                },
                {
                    "lang": "javascript",
                    "value": "process.env.EDITOR = ''"
                },
                {
                    "lang": "javascript",
                    "value": ".editor"
                },
                {
                    "lang": "javascript",
                    "value": "// Entering editor mode (^D to finish, ^C to cancel)\nvar albums =\n    [\n       { \"artist\": \"Beatles\", \"album\": \"Revolver\" },\n       { \"artist\": \"The Monkees\", \"album\": \"Head\"}\n    ]\n\ndb.music.insertMany( albums )"
                }
            ],
            "preview": "The mongosh console is line oriented. However, you can\nalso use an editor to work with multiline functions. There are two\noptions:",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/data-types",
            "title": "Data Types",
            "headings": [
                "Date",
                "ObjectId",
                "Int32",
                "Long",
                "Decimal128",
                "Equality and Sort Order",
                "Timestamp",
                "Type Checking",
                "Examples",
                "Return Date as a String",
                "Return Date",
                "Numeric Types",
                "Default Numeric Type Consistency",
                "Timestamp a New Document",
                "Create a Custom Timestamp",
                "Type Checking with $type()",
                "Type Checking with a Constructor"
            ],
            "paragraphs": "MongoDB Server stores data using the\n BSON  format which supports some\nadditional data types that are not available using the  JSON \nformat. Compared to the legacy  mongo  shell, MongoDB Shell\n( mongosh ) has type handling which is better aligned with the\ndefault types used by the MongoDB  drivers . This document highlights changes in type usage between  mongosh  and\nthe legacy  mongo  shell. See the\n Extended JSON  reference for\nadditional information on supported types. mongosh  provides various methods to return the date, either as a\nstring or as a  Date  object: Date()  method which returns the current date as a string. new Date()  constructor which returns a  Date  object using the\n ISODate()  wrapper. ISODate()  constructor which returns a  Date  object using the\n ISODate()  wrapper. mongosh  provides the  ObjectId()  wrapper class around the\n ObjectId  data type. To generate a new ObjectId, use the following\noperation in  mongosh : Starting in  1.8.0, the  ObjectId  wrapper no longer accepts: ObjectId.prototype.generate ObjectId.prototype.getInc ObjectId.prototype.get_inc ObjectId.getInc ObjectId() If a number can be converted to a 32-bit integer,  mongosh  will\nstore it as  Int32 . If not,  mongosh  defaults to storing the\nnumber as a  Double . Numerical values that are stored as  Int32 \nin  mongosh  would have been stored by default as  Double  in the\n mongo  shell. The  Int32()  constructor can be used to\nexplicitly specify 32-bit integers. Default  Int32  and  Double  types may be stored inconsistently\nif you connect to the same collection using both  mongosh  and the\nlegacy  mongo  shell. The  Long()  constructor can be used to\nexplicitly specify a 64-bit integer. In the legacy  mongo  shell  NumberLong()  accepted\neither a string or integer value. In  mongosh ,  NumberLong() \nonly accepts string values.  Long()  provides\nmethods to manage conversions to and from 64-bit values. Decimal128()  values are  128-bit\ndecimal-based floating-point numbers that emulate decimal rounding with\nexact precision. This functionality is intended for applications that handle\n monetary data , such as\nfinancial, tax, and scientific computations. The  Decimal128   BSON type \nuses the IEEE 754 decimal128 floating-point numbering format which\nsupports 34 decimal digits (i.e. significant digits) and an exponent\nrange of \u22126143 to +6144. To use the  Decimal128  data type with a\n MongoDB driver , be sure to use a driver\nversion that supports it. Values of the  Decimal128  type are compared and sorted with other\nnumeric types based on their actual numeric value.  Numeric values\nof the binary-based  Double  type generally have approximate\nrepresentations of decimal-based values and may not be exactly\nequal to their decimal representations. MongoDB uses a\n BSON Timestamp  internally\nin the  oplog . The  Timestamp  type works similarly to the\nJava Timestamp type. Use the  Date  type\nfor operations involving dates. A  Timestamp  signature has two optional parameters. For usage examples, see  Timestamp a New Document ,\n Create a Custom Timestamp . Parameter Type Default Definition t integer Current time since  UNIX epoch . Optional. A time in seconds. i integer 1 Optional. Used for ordering when there are multiple operations\nwithin a given second.  i  has no effect if used without\n t . Use the  $type  query operator or examine the object constructor\nto determine types. The Javascript  typeof  operator returns generic values such as\n number  or  object  rather than the more specific  Int32  or\n ObjectId . Javascript's  instanceof  operator is not reliable. For example,\n instanceof  assigns BSON values in a server response to a different\nbase class than user supplied values. For usage examples, see  Type Checking with  $type()  and\n Type Checking with a Constructor . To return the date as a string, use the  Date()  method, as in the\nfollowing example: To print the value of the variable, type the variable name in the\nshell, as in the following: The result is the value of  myDateString : To verify the type, use the  typeof  operator, as in the following: The operation returns  string . mongosh  wraps objects of  Date  type with the\n ISODate  helper; however, the objects remain of type  Date . The following example uses both the  new Date()  constructor and the\n ISODate()  constructor to return  Date  objects. You can use the  new  operator with the  ISODate()  constructor as\nwell. To print the value of the variable, type the variable name in the\nshell, as in the following: The result is the  Date  value of  myDate  wrapped in the\n ISODate()  helper: To verify the type: The operation returns  true . Consider the   types  collection: This table shows the results of the  db.types.find( <QUERY> ) \ncommand for the corresponding  <QUERY> . The type names and aliases\nare given on the  BSON types  page. The query  { \"value\": 1.01 }  implicitly searches for the\n Double  representation of  1.01 . Document  _id: 4  is a\n Decimal128  so it is not selected. Note, however, that  { \"value\": 1 }  returns both  Int32  and\n Long  types. Query Results Consider the  typeExample  collection. This collection consists of\ntwo identical documents,  { \"a\": 1 } . The first document was created\nin the legacy  mongo  shell, the second document was created in\n mongosh . We can use the  $type  operator in an aggregation pipeline\nto see the type that was assigned in each shell. In the first document, created in the legacy  mongo  shell, the value\nwas stored as a  double . In the  mongosh  document the value was\nstored as type  int . Use  Timestamp()  without parameters to insert multiple documents\nusing the default settings: Run  db.flights.find({})  to see the timestamps. Notice that even\nthough all three entries were stamped in the same second, the interval\nwas incremented on each one. Use custom parameters to insert multiple documents with a specific\n Timestamp . This operation inserts three documents into the  flights  collection\nand uses the  UNIX epoch  value  1627811580  to\nset the  ts  times to 9:53 GMT on August 1, 2021. The resulting documents look like this: The  $type  query operator accepts either a string alias or a\nnumeric code corresponding to the data type. See\n BSON Types  for a list of BSON data\ntypes and their corresponding numeric codes. For example, these checks for the  Decimal128  type are equivalent: Examine the object  constructor  to determine the type. For example,\nthe output of  db.collection.find()  is a  Cursor .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "new ObjectId"
                },
                {
                    "lang": "javascript",
                    "value": "db.types.insertOne(\n   {\n       \"_id\": 1,\n       \"value\": Int32(\"1\"),\n       \"expectedType\": \"Int32\"\n   }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.types.insertOne(\n   {\n      \"_id\": 3,\n      \"value\": Long(\"1\"),\n      \"expectedType\": \"Long\"\n   }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "db.types.insertOne(\n   {\n       \"_id\": 5,\n       \"value\": Decimal128(\"1\"),\n       \"expectedType\": \"Decimal128\"\n   }\n)"
                },
                {
                    "lang": "javascript",
                    "value": "Timestamp( { \"t\": <integer>, \"i\": <integer> } )"
                },
                {
                    "lang": "javascript",
                    "value": "var myDateString = Date();"
                },
                {
                    "lang": "javascript",
                    "value": "myDateString"
                },
                {
                    "lang": "javascript",
                    "value": "Wed Dec 19 2012 01:03:25 GMT-0500 (EST)"
                },
                {
                    "lang": "javascript",
                    "value": "typeof myDateString"
                },
                {
                    "lang": "javascript",
                    "value": "var myDate = new Date();\nvar myDateInitUsingISODateWrapper = ISODate();"
                },
                {
                    "lang": "javascript",
                    "value": "myDate"
                },
                {
                    "lang": "javascript",
                    "value": "ISODate(\"2012-12-19T06:01:17.171Z\")"
                },
                {
                    "lang": "javascript",
                    "value": "var myDate = ISODate(\"2021-03-21T06:00:00.171Z\")\nObject.prototype.toString.call(myDate) === \"[object Date]\""
                },
                {
                    "lang": "javascript",
                    "value": "{ _id: 1, value: 1, expectedType: 'Int32' },\n{ _id: 2, value: Long(\"1\"), expectedType: 'Long' },\n{ _id: 3, value: 1.01, expectedType: 'Double' },\n{ _id: 4, value: Decimal128(\"1.01\"), expectedType: 'Decimal128' },\n{ _id: 5, value: 3200000001, expectedType: 'Double' }"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"value\":\n      {\n         $type: \"int\"\n      }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   _id: 1,\n   value: 1,\n   expectedType: 'Int32'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"value\":\n      {\n         $type: \"long\"\n      }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   _id: 2,\n   value: Long(\"1\"),\n   expectedType: 'Long'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"value\":\n      {\n         $type: \"decimal\"\n      }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   _id: 4,\n   value: Decimal128(\"1\"),\n   expectedType: 'Decimal128'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"value\":\n      {\n         $type: \"double\"\n      }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   _id: 3,\n   value: 1.01,\n   expectedType: 'Double'\n}\n{\n   _id: 5,\n   value: 3200000001,\n   expectedType: 'Double'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n   \"value\":\n      {\n         $type: \"number\"\n      }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    _id: 1,\n    value: 1,\n    expectedType: 'Int32'\n}\n{\n    _id: 2,\n    value: Long(\"1\"),\n    expectedType: 'Long'\n}\n{\n    _id: 3,\n    value: 1.01,\n    expectedType: 'Double'\n}\n{\n    _id: 4,\n    value: Decimal128(\"1.01\"),\n    expectedType: 'Decimal128'\n}\n{\n    _id: 5,\n    value: 3200000001,\n    expectedType: 'Double'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"value\": 1.01\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    _id: 3,\n    value: 1.01,\n    expectedType: 'Double'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"value\": 1\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    _id: 1,\n    value: 1,\n    expectedType: 'Int32'\n}\n{\n    _id: 2,\n    value: Long(\"1\"),\n    expectedType: 'Long'\n}"
                },
                {
                    "lang": "javascript",
                    "value": "db.typeExample.aggregate(\n  [\n    {\n       $project:\n         {\n           \"valueType\":\n             {\n               \"$type\": \"$a\"\n             },\n           \"_id\": 0\n         }\n    }\n  ]\n)"
                },
                {
                    "lang": "javascript\n.. :copyable: false",
                    "value": "[\n  {\n     valueType: 'double'  // inserted in legacy mongo shell\n  },\n  {\n     valueType: 'int'     // inserted in mongosh\n  }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "db.flights.insertMany(\n   [\n      { arrival: \"true\", ts: Timestamp() },\n      { arrival: \"true\", ts: Timestamp() },\n      { arrival: \"true\", ts: Timestamp() }\n   ]\n)"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      _id: ObjectId(\"6114216907d84f5370391919\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1628709225, i: 1 })\n   },\n   {\n      _id: ObjectId(\"6114216907d84f537039191a\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1628709225, i: 2 })\n   },\n   {\n      _id: ObjectId(\"6114216907d84f537039191b\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1628709225, i: 3 })\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "db.flights.insertMany(\n   [\n      { arrival: \"true\", ts: Timestamp(1627811580, 10) },\n      { arrival: \"true\", ts: Timestamp(1627811580, 20) },\n      { arrival: \"true\", ts: Timestamp(1627811580, 30) }\n   ]\n)"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      _id: ObjectId(\"6123d8315e6bba6f61a1031c\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1627811580, i: 10 })\n   },\n   {\n      _id: ObjectId(\"6123d8315e6bba6f61a1031d\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1627811580, i: 20 })\n   },\n   {\n      _id: ObjectId(\"6123d8315e6bba6f61a1031e\"),\n      arrival: 'true',\n      ts: Timestamp({ t: 1627811580, i: 30 })\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "db.types.find( { \"value\": { $type: \"decimal\" } } )\ndb.types.find( { \"value\": { $type: 19 } } )"
                },
                {
                    "lang": "javascript",
                    "value": "var findResults = db.housing.find({\"multiUnit\": true} )\nfindResults.constructor.name     // Returns the type"
                }
            ],
            "preview": "MongoDB Server stores data using the\nBSON format which supports some\nadditional data types that are not available using the JSON\nformat. Compared to the legacy mongo shell, MongoDB Shell\n(mongosh) has type handling which is better aligned with the\ndefault types used by the MongoDB drivers.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/compatibility",
            "title": "Compatibility Changes with Legacy mongo Shell",
            "headings": [
                "Deprecated Methods",
                "Read Preference Behavior",
                "Read Operations on a Secondary Node",
                "show Helper Methods",
                "Write Preference Behavior",
                "ObjectId Methods and Attributes",
                "Numeric Values",
                "Object Quoting Behavior",
                "Limitations on Database Calls",
                "Constructors",
                "Generator Functions",
                "Array Sort",
                "JavaScript Setters"
            ],
            "paragraphs": "This page describes differences between  mongosh  and the legacy\n mongo  shell. In addition to the alternatives listed here, you can\nuse the  mongocompat \nsnippet to access to legacy  mongo  shell APIs. Snippets are an\nexperimental feature, for more information, see  Snippets . The following shell methods are deprecated in  mongosh . Instead, use\nthe methods listed in the  Alternative Resources  column. Deprecated Method Alternative Resources db.collection.copyTo() Aggregation stage:  $out db.collection.count() db.collection.countDocuments() db.collection.estimatedDocumentCount() db.collection.insert() db.collection.insertOne() db.collection.insertMany() db.collection.bulkWrite() db.collection.remove() db.collection.deleteOne() db.collection.deleteMany() db.collection.findOneAndDelete() db.collection.bulkWrite() db.collection.save() db.collection.insertOne() db.collection.insertMany() db.collection.updateOne() db.collection.updateMany() db.collection.findOneAndUpdate() db.collection.update() db.collection.updateOne() db.collection.updateMany() db.collection.findOneAndUpdate() db.collection.bulkWrite() DBQuery.shellBatchSize config.set(\"displayBatchSize\", \"<value>\") cursor.batchSize() Mongo.getSecondaryOk Mongo.getReadPrefMode() Mongo.isCausalConsistency Session.getOptions() Mongo.setSecondaryOk Mongo.setReadPref() rs.secondaryOk No longer required. See\n Read Operations on a Secondary Node . When using the legacy mongo shell to connect directly to\n secondary  replica set member, you must run\n mongo.setReadPref()  to enable secondary reads. When using  mongosh  to connect directly to a  secondary \nreplica set member, you can read from that member if you specify a\n read preference  of either: To specify a read preference, you can use either: When using  mongosh  to connect directly to a  secondary \nreplica set member, if your read preference is set to\n primaryPreferred ,  secondary  or\n secondaryPreferred  it is  not  required to run\n rs.secondaryOk() . primaryPreferred secondary secondaryPreferred The  readPreference  connection string option when\nconnecting to the node. The  Mongo.setReadPref()  method. The following  show  helper methods always use a read preference of\n primaryPreferred , even when a different read preference has been\nspecified for the operation: In the legacy  mongo  shell, these operations use the specified read\npreference. show dbs show databases show collections show tables Retryable writes  are enabled by default in\n mongosh . Retryable writes were disabled by default in the\nlegacy  mongo  shell. To disable retryable writes, use\n --retryWrites=false . These  ObjectId()  methods work differently\nin  mongosh  than in the legacy  mongo  shell. Method or Attribute mongo  Behavior mongosh  Behavior ObjectId.str ObjectId.valueOf() ObjectId.toString() The legacy  mongo  shell stored numerical values as  doubles  by\ndefault. In  mongosh  numbers are stored as 32 bit integers,\n Int32 , or else as  Double  if the value cannot be stored as an\n Int32 . MongoDB Shell continues to support the numeric types that are supported\nin  mongo  shell. However, the preferred types have been updated to\nbetter align with the MongoDB  drivers . See\n mongosh Data Types  for more information. The preferred types for numeric variables are different in MongoDB\nShell than the types suggested in the legacy  mongo  shell. The types\nin  mongosh  better align with the types used by the MongoDB Drivers. mongo  type mongosh  type NumberInt Int32 NumberLong Long NumberDecimal Decimal128 Data types may be stored inconsistently if you connect to the same\ncollection using both  mongosh  and the legacy  mongo  shell. For more information on managing types, refer to the\n schema validation overview . mongosh  does not quote object keys in its output, and places single\nquotes on values. To reproduce the output of the legacy\n mongo  shell, which wraps both the keys and string values in double quotes,\nuse  mongosh --eval  with  EJSON.stringify() . For example, the following command returns the items in the  sales \ncollection on the  test  database with double quotes and indentation: The output looks like the following: The results of database queries cannot be passed inside the following\ncontexts: To access to the results of database calls, use  async functions ,\n async generator functions ,\nor  .map() . Class constructor functions Non-async generator functions Callbacks to  .sort()  on an array JavaScript setters in classes The following constructors do not work: Use an  async  function instead: You can also create a method that performs a database operation\ninside a class as an alternative to working with asynchronous\nJavaScript. To use this class, first construct a class instance then call the\n .init()  method. The following generator functions do not work: Use an  async generator function  instead: The following array sort does not work: Use  .map()  instead. This approach to array sort is often more performant than the\nequivalent unsupported code. The following JavaScript setter does not work:",
            "code": [
                {
                    "lang": "shell",
                    "value": "snippet install mongocompat"
                },
                {
                    "lang": "shell",
                    "value": "mongosh --eval \"EJSON.stringify(db.sales.findOne().toArray(), null, 2)\""
                },
                {
                    "lang": "javascript",
                    "value": "{\n     \"_id\": {\n          \"$oid\": \"64da90c1175f5091debcab26\"\n     },\n     \"custId\": 345,\n     \"purchaseDate\": {\n          \"$date\": \"2023-07-04T00:00:00Z\"\n     },\n     \"quantity\": 4,\n     \"cost\": {\n          \"$numberDecimal\": \"100.60\"\n     }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nclass FindResults {\n   constructor() {\n      this.value = db.students.find();\n   }\n}\n\n// This code will fail\nfunction listEntries() { return db.students.find(); }\nclass FindResults {\n   constructor() {\n      this.value = listEntries();\n   }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "class FindResults {\n   constructor() {\n      this.value = ( async() => {\n         return db.students.find();\n      } )();\n   }\n}"
                },
                {
                    "lang": null,
                    "value": "class FindResults {\n   constructor() { }\n\n   init() { this.value = db.students.find(); }\n }"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nfunction* FindResults() {\n   yield db.students.findMany();\n}\n\n// This code will fail\nfunction listEntries() { return db.students.findMany(); }\nfunction* findResults() {\n   yield listEntries();\n}"
                },
                {
                    "lang": "javascript",
                    "value": "function listEntries() { return db.students.findMany(); }\nasync function* findResults() {\n   yield listEntries();\n}"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\ndb.getCollectionNames().sort( ( collectionOne, collectionTwo ) => {\n  return db[ collectionOne ].estimatedDocumentCount() - db[ collectionOne ].estimatedDocumentCount() )\n} );"
                },
                {
                    "lang": "javascript",
                    "value": "db.getCollectionNames().map( collectionName => {\n   return { collectionName, size: db[ collectionName ].estimatedDocumentCount() };\n} ).sort( ( collectionOne, collectionTwo ) => {\n   return collectionOne.size - collectionTwo.size;\n} ).map( collection => collection.collectionName);"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nclass TestClass {\n  value = 1;\n\n  get property() {\n    return this.value;\n  }\n\n  // does not work:\n  set property(value) {\n    this.value = db.test.findOne({ value });\n  }\n}"
                }
            ],
            "preview": "This page describes differences between mongosh and the legacy\nmongo shell. In addition to the alternatives listed here, you can\nuse the mongocompat\nsnippet to access to legacy mongo shell APIs. Snippets are an\nexperimental feature, for more information, see Snippets.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/configure-shell-settings",
            "title": "Configure Settings",
            "headings": [
                "Configurable Settings",
                "How to Configure Settings"
            ],
            "paragraphs": "To specify certain shell behaviors, you can configure  mongosh \nsettings. You can configure the following settings for  mongosh : Key Type Default Description displayBatchSize integer 20 The number of items displayed per cursor iteration enableTelemetry boolean true Enables sending anonymized tracking and diagnostic data to\nMongoDB. editor string null Designates an editor to use within the  mongosh \nconsole. Overrides the  EDITOR  environment variable if set. forceDisableTelemetry boolean false Only available in the global configuration file. When true,\nusers cannot enable telemetry manually. historyLength integer 1000 The number of items to store in  mongosh  REPL's\nhistory file. inspectCompact integer or boolean 3 The level of inner elements that  mongosh  outputs\non a single line. Short array elements are also grouped together\non a single line. If set to  false ,  mongosh  outputs each field\non its own line. inspectDepth integer or Infinity 6 The depth to which objects are printed. Setting  inspectDepth \nto  Infinity  (the javascript object) prints all nested\nobjects to their full depth. redactHistory string remove Controls what information is recorded in the shell history.\nMust be one of: keep : Retain all history. remove : Remove lines which contain sensitive information. remove-redact : Redact sensitive information. showStackTraces boolean false Controls display of a stack trace along with error messages. snippetAutoload boolean true If  true , automatically load installed\n snippets  at startup. snippetIndexSourceURLs string MongoDB Repository A semicolon-separated list of URLs that link to a\n snippet  registry. snippetRegistryURL string npm Registry The npm registry used by the  mongosh  npm client\nthat installs  snippet . To configure  mongosh  settings, you can either use: The config API A global configuration file",
            "code": [],
            "preview": "To specify certain shell behaviors, you can configure mongosh\nsettings.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/ejson",
            "title": "EJSON",
            "headings": [
                "Learn More"
            ],
            "paragraphs": "MongoDB uses  BSON , a binary serialization format, to store\ndocuments and to exchange data. BSON is a rich format and has data types\nthat aren't included in the JSON standard.  Extended JSON (EJSON)  adds support for the additional types. EJSON\nis a JSON compatible way to represent BSON values. mongosh  exposes the  EJSON  interface from the  Node.js BSON parser  to\nhelp you transform your data. Use the  EJSON  interface when you need\nto transform BSON data. For additional EJSON capabilities, see the  npm EJSON documentation . EJSON Method Use EJSON.deserialize() Convert Extended JSON objects to BSON objects. This method\nis useful to import JSON data from external applications. EJSON.stringify() Convert BSON objects to strings. This method is useful to\ntransform  mongosh  output. EJSON.serialize() Convert BSON objects to Extended JSON representation as\nJavaScript objects. This method is useful to export JSON data for\nexternal data transformation applications. EJSON.parse() Convert strings to JSON. This method is useful to transform\ninputs. BSON specification",
            "code": [],
            "preview": "MongoDB uses BSON, a binary serialization format, to store\ndocuments and to exchange data. BSON is a rich format and has data types\nthat aren't included in the JSON standard. Extended JSON (EJSON) adds support for the additional types. EJSON\nis a JSON compatible way to represent BSON values.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/options",
            "title": "Options",
            "headings": [
                "General Options",
                "Stable API Options",
                "Connection Options",
                "TLS Options",
                "Authentication Options",
                "Session Options",
                "Client-Side Field Level Encryption Options"
            ],
            "paragraphs": "Use the following options to view and control various aspects of your\n MongoDB Shell . Returns a JSON-formatted document with information about\nyour  mongosh  build and driver dependencies. Example: View Build Information You can check the build information and driver dependencies of your\n mongosh  binary by running the following command\nfrom your terminal: This command returns the following JSON-formatted document: Evaluates a JavaScript expression. You can use a single  --eval \nargument or multiple  --eval  arguments together. After  mongosh  evaluates the  --eval  argument, it prints the\nresults to your command line. If you use multiple  --eval \nstatements,  mongosh  only prints the results of the last\n --eval . You can use the  --json  flag with  --eval  to return\n mongosh  results in  Extended JSON  format.  mongosh \nsupports both  --json=canonical  and  --json=relaxed  modes. If\nyou omit the mode,  mongosh  defaults to the  canonical \nmode. The  --json  flag is mutually exclusive with  --shell . Example: Format Output Example: Multiple --eval Arguments Example: --json Option To get output suitable for automated parsing, use\n EJSON.stringify() . After parsing with  jq , the output resembles this: EJSON  has built in formatting options which may eliminate the\nneed for a parser like  jq . For example, the following code\nproduces output that is formatted the same as above. To get a list of collections in the  moviesDatabase , use multiple\n --eval  statements: To return statistics about a collection in Extended JSON format using\nmultiple  --eval  statements: Runs a script from the command line without entering the\n MongoDB Shell  console. For additional details and an example, see\n Execute a Script From the Command Line . Returns information on the options and use of the  MongoDB Shell . Prevents the shell from connecting to any database instances. Prevents the shell from sourcing and evaluating  ~/.mongoshrc.js \non startup. Skips all messages during startup (such as welcome messages and startup\nwarnings) and goes directly to the prompt. Enables the shell interface. If you invoke the  mongosh \ncommand and specify a JavaScript file as an argument, or use\n --eval  to specify JavaScript on the command line,\nthe  --shell  option provides the user with a shell\nprompt after the file finishes executing. The  --shell  flag is\nmutually exclusive with  --json . Increases the verbosity of the shell output during the connection\nprocess and when running commands. Returns the  MongoDB Shell  release number. Specifies the  apiVersion .  \"1\"  is\ncurrently the only supported value. Specifies that the server will respond with  APIStrictError  if your application uses a command or behavior\noutside of the  Stable API . If you specify  --apiStrict , you must also specify\n --apiVersion . Specifies that the server will respond with  APIDeprecationError  if your application uses a command or behavior\nthat is deprecated in the specified  apiVersion . If you specify  --apiDeprecationErrors , you must also\nspecify  --apiVersion . Specifies the name of the host machine where the\n mongod  or  mongos  is running. If this is\nnot specified, the  MongoDB Shell  attempts to connect to a MongoDB\nprocess running on the localhost. Specify the  replica set name \nand a seed list of set members. Use the following form: The  MongoDB Shell  shell verifies that the hostname\n(specified in the  --host  option or the\nconnection string) matches the  SAN  (or, if  SAN  is not\npresent, the  CN ) in the certificate presented by the\n mongod  or  mongos . If  SAN  is\npresent, the  MongoDB Shell  does not match against the  CN . If\nthe hostname does not match the  SAN  (or  CN ), the\n MongoDB Shell  shell fails to connect. Specify the connection protocol as  mongodb+srv , followed by\nthe DNS SRV hostname record and any options. The  authSource \nand  replicaSet  options, if included in the connection string,\noverrides any corresponding DNS-configured options set in the\nTXT record. Use of the  mongodb+srv:  connection string\nimplicitly enables  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer)  (normally set with  tls=true ) for\nthe client connection. The  TLS (Transport Layer Security)  option can be turned off by\nsetting  tls=false  in the query string. Specifies the port where the  mongod  or\n mongos  instance is listening. If\n --port  is not\nspecified, the  MongoDB Shell  attempts to connect to port  27017 . Enables connection to a  mongod  or\n mongos  that has  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer)  support enabled. To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Specifies the  .pem  file that contains both the  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer) \ncertificate and key for  mongosh . Specify the\nfile name of the  .pem  file using relative or absolute paths. This option is required when using the  --tls  option to connect to\na  mongod  or  mongos  instance that\nrequires  client certificates . That is, the\n MongoDB Shell  presents this certificate to the server. Starting in version 4.4,  mongod  /  mongos \nlogs a warning on connection if the presented x.509 certificate expires\nwithin  30  days of the  mongod/mongos  host system time. To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Specifies the password to de-crypt the certificate-key file (i.e.\n --tlsCertificateKeyFile ). Use the\n --tlsCertificateKeyFilePassword  option only if the\ncertificate-key file is encrypted. In all cases, the  MongoDB Shell \nredacts the password from all logging and reporting output. If the private key in the PEM file is encrypted and you do not\nspecify the\n --tlsCertificateKeyFilePassword  option; the  MongoDB Shell  prompts\nfor a passphrase. See  TLS/SSL Certificate Passphrase . To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Specifies the  .pem  file that contains the root certificate\nchain from the Certificate Authority. This file is used to validate\nthe certificate presented by the\n mongod  /  mongos  instance. Specify the file name of the  .pem  file using relative or\nabsolute paths. To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Specifies the  .pem  file that contains the Certificate\nRevocation List. Specify the file name of the  .pem  file\nusing relative or absolute paths. To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Disables the validation of the hostnames in the certificate presented\nby the  mongod  /  mongos  instance. Allows\nthe  MongoDB Shell  to connect to MongoDB instances even if the hostname\nin the server certificates do not match the server's host. To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Bypasses the validation checks for the certificates presented by the\n mongod  /  mongos  instance and allows\nconnections to servers that present invalid certificates. Starting in MongoDB 4.0, if you specify\n --tlsAllowInvalidCertificates  when using x.509\nauthentication, an invalid certificate is only sufficient to\nestablish a  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer)  connection but is  insufficient  for\nauthentication. Although available, avoid using the\n --tlsAllowInvalidCertificates  option if possible. If the\nuse of  --tlsAllowInvalidCertificates  is necessary, only\nuse the option on systems where intrusion is not possible. If the  MongoDB Shell  shell (and other\n MongoDB Tools ) runs with the\n --tlsAllowInvalidCertificates  option, the shell (and\nother  MongoDB Tools ) do not attempt to validate\nthe server certificates. This creates a vulnerability to expired\n mongod  and  mongos  certificates as\nwell as to foreign processes posing as valid  mongod \nor  mongos  instances. If you only need to disable\nthe validation of the hostname in the  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer)  certificates, see\n --tlsAllowInvalidHostnames . To learn more about TLS/SSL and MongoDB, see: Configure mongod and mongos for TLS/SSL TLS/SSL Configuration for Clients Available on Windows and macOS as an alternative to\n --tlsCertificateKeyFile . The  --tlsCertificateKeyFile  and\n --tlsCertificateSelector \noptions are mutually exclusive. You can only specify one. Specifies a certificate property in order to select a matching\ncertificate from the operating system's certificate store. --tlsCertificateSelector \naccepts an argument of the format  <property>=<value>  where the\nproperty can be one of the following: When using the system SSL certificate store, OCSP (Online\nCertificate Status Protocol) is used to validate the revocation\nstatus of certificates. When you import your private key, you must mark it as exportable.\nThe Windows  Certificate Import Wizard  doesn't check this\noption by default. Property Value type Description subject ASCII string Subject name or common name on certificate thumbprint hex string A sequence of bytes, expressed as hexadecimal, used to\nidentify a public key by its SHA-1 digest. The  thumbprint  is sometimes referred to as a\n fingerprint . Starting in version 4.4,  mongod  /  mongos \nlogs a warning on connection if the presented x.509 certificate expires\nwithin  30  days of the  mongod/mongos  host system time. Disables the specified TLS protocols. The option recognizes the\nfollowing protocols: Starting in version 4.0, MongoDB disables the use of TLS 1.0 if TLS\n1.1+ is available on the system. To enable the\ndisabled TLS 1.0, specify  none  to\n --tlsDisabledProtocols . TLS1_0 TLS1_1 TLS1_2 (Starting in version 4.0.4, 3.6.9, 3.4.24)   TLS1_3 On macOS, you cannot disable  TLS1_1  and leave both  TLS1_0 \nand  TLS1_2  enabled. You must also disable at least one of the\nother two; for example,  TLS1_0,TLS1_1 . To list multiple protocols, specify as a comma separated list of\nprotocols. For example  TLS1_0,TLS1_1 . The specified disabled protocols overrides any default disabled\nprotocols. Allows  mongosh  to load TLS certificates available to the\noperating system's certificate authority. Use this option if you want\nto use TLS certificates already available to your operating system\nwithout explicitly specifying those certificates to  mongosh . Specifies the authentication database where the specified\n --username  has been created. See\n Authentication Database . If you do not specify a value for\n --authenticationDatabase ,\nthe  MongoDB Shell  uses the database specified in the connection\nstring. Specifies the authentication mechanism the  MongoDB Shell  uses to\nauthenticate to the  mongod  or  mongos .\nIf you don't specify an  authenticationMechanism  but provide user\ncredentials, the MongoDB Shell and drivers attempt to use\nSCRAM-SHA-256. If this fails, they fall back to SCRAM-SHA-1. Value Description SCRAM-SHA-1 RFC 5802  standard\nSalted Challenge Response Authentication Mechanism using the\nSHA-1 hash function. SCRAM-SHA-256 RFC 7677  standard\nSalted Challenge Response Authentication Mechanism using the\nSHA-256 hash function. Requires featureCompatibilityVersion set to  4.0 . MONGODB-X509 MongoDB  TLS (Transport Layer Security)  /  SSL (Secure Sockets Layer)  certificate authentication. GSSAPI  (Kerberos) External authentication using Kerberos. This mechanism is\navailable only in  MongoDB Enterprise . PLAIN  (LDAP SASL) External authentication using LDAP. You can also use  PLAIN \nfor authenticating in-database users.  PLAIN  transmits\npasswords in plain text. This mechanism is available only in\n MongoDB Enterprise . MONGODB-OIDC  (OpenID Connect) External authentication using OpenID Connect. This mechanism is\navailable only in  MongoDB Enterprise . Specify the name of the service using\n GSSAPI/Kerberos . Only required if the service does not use the default name of  mongodb . This option is available only in MongoDB Enterprise. Specifies whether or not to use Hostname Canonicalization. --sspiHostnameCanonicalization  has the same effect as setting the\n CANONICALIZE_HOST_NAME:true|false  key-pair in the\n authMechanismProperties  portion of the\n connection string . If  --sspiHostnameCanonicalization  is set to: forwardAndReverse , performs a forward DNS lookup and then a\nreverse lookup. New in  mongosh  1.3.0. forward , the effect is the same as setting\n authMechanismProperties=CANONICALIZE_HOST_NAME:true . none , the effect is the same as setting\n authMechanismProperties=CANONICALIZE_HOST_NAME:false . Specifies OpenID Connect flows in a comma-separated list.\nThe OpenID Connect flows specify how  mongosh  interacts with the identity\nprovider for the authentication process.  mongosh  supports the following\nOpenID Connect flows: To set  device-auth  as a fallback option to  auth-code , see the following\nexample: OpenID Connect Flow Description auth-code Default.  mongosh  opens a browser and redirects you to the identity\nprovider log-in screen. device-auth mongosh  provides you with a URL and code to finish authentication.\nThis is considered a less secure OpenID Connect flow but can be used when\n mongosh  is run in an environment in which it cannot open a browser. Specifies a URI where the identity provider redirects you after authentication.\nThe URI must match the configuration of the identity provider.\nThe default is  http://localhost:27097/redirect . Specifies a connection to a trusted endpoint that is not Atlas or localhost.\nOnly use this option when connecting to servers that you trust. Specifies the browser  mongosh  redirects you to when  MONGODB-OIDC \nis enabled. This option is run with the system shell. Specifies a password with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the\n --username  and\n --authenticationDatabase \noptions. To force the  MongoDB Shell  to prompt for a password, enter the\n --password  option as the last option and leave out the\nargument. Specifies a username with which to authenticate to a MongoDB database\nthat uses authentication. Use in conjunction with the\n --password  and\n --authenticationDatabase \noptions. Enables  Retryable Writes . Retryable writes are enabled by\ndefault in  mongosh . Retryable writes are disabled by\ndefault in the legacy  mongo  shell. To disable retryable\nwrites, use  --retryWrites=false . For more information on sessions, see  Client Sessions and Causal Consistency Guarantees . An  AWS Access Key \nassociated with an IAM user who has  List  and  Read  permissions\nfor the AWS Key Management Service (KMS).  mongosh  uses the\nspecified  --awsAccessKeyId  to access the KMS. --awsAccessKeyId  is required to enable\n Client-Side Field Level Encryption  for the  mongosh  shell session.\n --awsAccessKeyId  requires  both  of the following command\nline options: If  --awsAccessKeyId  is omitted, use the  Mongo() \nconstructor within the shell session to enable client-side field\nlevel encryption. To mitigate the risk of leaking access keys into logs, consider\nspecifying an environmental variable to  --awsAccessKeyId . --awsSecretAccessKey --keyVaultNamespace An  AWS Secret Key \nassociated to the specified  --awsAccessKeyId . --awsSecretAccessKey  is required to enable\n Client-Side Field Level Encryption  for the  mongosh  session.\n --awsSecretAccessKey  requires  both  of the following\ncommand line options: If  --awsSecretAccessKey  and its supporting options are\nomitted, use  Mongo()  within the shell session to enable\nclient-side field level encryption. To mitigate the risk of leaking access keys into logs, consider\nspecifying an environmental variable to\n --awsSecretAccessKey . --awsAccessKeyId --keyVaultNamespace An  AWS Session Token \nassociated to the specified  --awsAccessKeyId . --awsSessionToken  is required to enable\n Client-Side Field Level Encryption  for the  mongosh  shell session.\n --awsSessionToken  requires  all  of the following command\nline options: If  --awsSessionToken  and its supporting options are\nomitted, use  Mongo()  within the shell session to enable\nclient-side field level encryption. To mitigate the risk of leaking access keys into logs, consider\nspecifying an environmental variable to  --awsSessionToken . --awsAccessKeyId --awsSecretAccessKey --keyVaultNamespace The full namespace ( <database>.<collection> ) of the collection\nused as a key vault for  Client-Side Field Level Encryption .\n --keyVaultNamespace  is required for enabling client-side\nfield level encryption. for the  mongosh  shell session.\n mongosh  creates the specified namespace if it does not\nexist. --keyVaultNamespace  requires  both  of the following\ncommand line options: If  --keyVaultNamespace  and its supporting options are\nomitted, use the  Mongo()  constructor within the shell\nsession to enable client-side field level encryption. --awsAccessKeyId --awsSecretAccessKey",
            "code": [
                {
                    "lang": "sh",
                    "value": "mongosh --build-info"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  version: '1.10.1',\n  distributionKind: 'packaged',\n  buildArch: 'x64',\n  buildPlatform: 'linux',\n  buildTarget: 'unknown',\n  buildTime: '2023-06-21T09:49:37.225Z',\n  gitVersion: '05ad91b4dd40382a13f27abe1ae8c3f9f52a38f7',\n  nodeVersion: 'v16.20.1',\n  opensslVersion: '3.1.1',\n  sharedOpenssl: true,\n  runtimeArch: 'x64',\n  runtimePlatform: 'darwin',\n  deps: {\n     nodeDriverVersion: '5.6.0'\n   }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --quiet  --host rs0/centos1104 --port 27500 \\\n        --eval \"EJSON.stringify(rs.status().members.map( \\\n          m => ({'id':m._id, 'name':m.name, 'stateStr':m.stateStr})));\" \\\n| jq"
                },
                {
                    "lang": "javascript",
                    "value": "[\n  {\n     \"id\": 0,\n     \"name\": \"centos1104:27500\",\n     \"stateStr\": \"PRIMARY\"\n  },\n  {\n     \"id\": 1,\n     \"name\": \"centos1104:27502\",\n     \"stateStr\": \"SECONDARY\"\n  },\n  {\n     \"id\": 2,\n     \"name\": \"centos1104:27503\",\n     \"stateStr\": \"SECONDARY\"\n  }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --quiet  --host rs0/centos1104 --port 27500 \\\n        --eval \"EJSON.stringify( rs.status().members.map( \\\n          ({ _id, name, stateStr }) => ({ _id, name, stateStr })), null, 2);\""
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --quiet \\\n        --eval 'use moviesDatabase' \\\n        --eval 'show collections' \\\n        mongodb://localhost/"
                },
                {
                    "lang": "sh",
                    "value": "mongosh --quiet --json=relaxed \\\n        --eval 'use <database-name>' \\\n        --eval 'db.<collection>.stats()' \\\n        mongodb://localhost/"
                },
                {
                    "lang": "none",
                    "value": "<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>"
                },
                {
                    "lang": "none",
                    "value": "mongodb+srv://server.example.com/?connectionTimeout=3000ms"
                },
                {
                    "lang": "bash",
                    "value": "mongosh 'mongodb://localhost/' --authenticationMechanism MONGODB-OIDC --oidcFlows=auth-code,device-auth"
                }
            ],
            "preview": "Returns a JSON-formatted document with information about\nyour mongosh build and driver dependencies.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/access-mdb-shell-help",
            "title": "mongosh Help",
            "headings": [
                "Command Line Help",
                "mongosh Shell Help",
                "Database Help",
                "Show Available Databases",
                "Show Database Methods",
                "Show Help for a Specific Database Method",
                "Show Additional Usage Details for a Database Method",
                "Collection Help",
                "List Collections in the Current Database",
                "Show Collection Methods",
                "Show Help for a Specific Collection Method",
                "Show Additional Details for a Collection Method",
                "Cursor Help",
                "BSON Class Help",
                "Command Helpers"
            ],
            "paragraphs": "This document provides an overview of the help available in\n mongosh . When accessing help in  mongosh , you can use the  .help()  and\n .help  syntaxes interchangeably. To see the options for running the  mongosh  executable and\nconnecting to a deployment, use the  --help \noption from the command line: To see the list of commands available in the  mongosh  console,\ntype  help  inside a running  mongosh  console: You can view database level information from inside the\n mongosh  console: By default  mongosh  shows the current database in the prompt.\nYou can also see the current database by running the  db  command: To see the list of databases available to you on the server, use the\n show dbs  command: show databases  is an alias for  show dbs . The list of databases will change depending on your access\nauthorizations. For more information on access restrictions for\nviewing databases, see  listDatabases . To see the list of  database methods  you can use on the  db  object, run\n db.help() : The output resembles the following abbreviated list: To see help for a specific database method in  mongosh , type the\n db.<method name> , followed by  .help  or  .help() . The\nfollowing example returns help for the  db.adminCommand() \nmethod: The output resembles the following: To see additional usage details for a database method in  mongosh ,\ntype the  db.<method name>  without the parenthesis ( () ). The\nfollowing example returns details about the\n db.adminCommand()  method: The output resembles the following: You can view collection level information from inside the\n mongosh  console. These help methods accept a collection name,  <collection> , but you\ncan also use the generic term, \"collection\", or even a collection that\ndoes not exist. To see the list of collections in the current database, use the\n show collections  command: The  show collections  output indicates if a collection is a\n time series collection  or a\nread-only  view . In the preceding example: managementFeedback  is a  view weather  is a time series survey  is a collection system.buckets.weather  is a system generated collection\nthat supports the  weather  time series system.views  is a system generated collection that supports\nviews on other collections To see the list of methods available on collection objects use the\n db.<collection>.help()  method: <collection>  can be the name of an existing or non-existent\ncollection. The output resembles the following abbreviated list: To see help for a specific collection method in  mongosh , use\n db.<collection>.<method name> , followed by  .help  or\n .help() . The following example displays help for  db.collection.insertOne() : The output resembles the following: To see additional details for a collection method type the method name,\n db.<collection>.<method> , without the parenthesis ( () ). The following example returns details about the\n insertOne()  method: The output resembles the following: To modify  read operations  that use\n find() , use  cursor methods . To list the available modifier and cursor handling methods, use the\n db.collection.find().help()  command: This help call accepts a collection name,  <collection> , but you\ncan also use the generic term, \"collection\", or even a collection which\ndoes not exist. Some useful methods for handling cursors are: For a list of available cursor methods, see  Cursor . hasNext()  checks if the cursor has more documents. next()  returns the next document and moves the\ncursor position forward by one. forEach(<function>)   applies the\n <function>  to each document returned by the cursor. mongosh  provides help methods for  BSON  classes. The\nhelp methods provide a brief overview of the BSON class and a link with\nmore information. To access help for BSON classes, run  .help()  on either the class\nname or an instantiated instance of the class: For example, to view help for the  ObjectId  BSON class, run one of\nthe following commands: mongosh  returns the same output for both  .help()  methods: mongosh  provides help methods for the following BSON classes: BinData Code DBRef MinKey MaxKey NumberDecimal NumberInt NumberLong ObjectId Symbol   (Deprecated) Timestamp mongosh  provides the following methods and commands to wrap\ncertain database commands and obtain information on your deployment: Help Methods and Commands Description db.help() Display help for database methods. db.<collection>.help() Display help on collection methods. The  <collection>  can be\nthe name of an existing collection or a non-existing collection. help Display help. show collections Display a list of all collections for current database. show dbs Display a list of all databases on the server. show dbs  is synonymous with  show databases . show log <name> Displays the last segment of log in memory for the specified\nlogger name. If you do not specify a  <name> , the command\ndefaults to  global . To show  startupWarning  logs, run: show logs Display the accessible logger names. See  Retrieve Shell Logs . show profile Display the five most recent operations that took 1 millisecond or\nmore. See documentation on the\n database profiler  for more information. show roles Display a list of all roles, both user-defined and built-in, for\nthe current database. show tables Display a list of collections in the current database. See  show\ncollections . show users Display a list of users for current database.",
            "code": [
                {
                    "lang": "bash",
                    "value": "mongosh --help"
                },
                {
                    "lang": "javascript",
                    "value": "help"
                },
                {
                    "lang": "javascript",
                    "value": "db"
                },
                {
                    "lang": "javascript",
                    "value": "show dbs"
                },
                {
                    "lang": "javascript",
                    "value": "db.help()"
                },
                {
                    "lang": "none",
                    "value": "Database Class:\n\n  getMongo                      Returns the current database connection\n  getName                       Returns the name of the DB\n  getCollectionNames            Returns an array containing the names of all collections in the current database.\n  getCollectionInfos            Returns an array of documents with collection information, i.e. collection name and options, for the current database.\n  runCommand                    Runs an arbitrary command on the database.\n  adminCommand                  Runs an arbitrary command against the admin database.\n  ..."
                },
                {
                    "lang": "javascript",
                    "value": "db.adminCommand.help()"
                },
                {
                    "lang": "javascript",
                    "value": "  db.adminCommand({ serverStatus: 1 }):\n\n  Runs an arbitrary command against the admin database.\n\n  For more information on usage: https://www.mongodb.com/docs/manual/reference/method/db.adminCommand"
                },
                {
                    "lang": "javascript",
                    "value": "db.adminCommand"
                },
                {
                    "lang": "javascript",
                    "value": "[Function: adminCommand] AsyncFunction {\n  apiVersions: [ 1, Infinity ],\n  serverVersions: [ '3.4.0', '999.999.999' ],\n  returnsPromise: true,\n  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],\n  returnType: { type: 'unknown', attributes: {} },\n  deprecated: false,\n  platforms: [ 0, 1, 2 ],\n  isDirectShellCommand: false,\n  acceptsRawInput: false,\n  shellCommandCompleter: undefined,\n  help: [Function (anonymous)] Help\n}"
                },
                {
                    "lang": "javascript",
                    "value": "show collections"
                },
                {
                    "lang": "javascript",
                    "value": "managementFeedback          [view]\nsurvey\nweather                     [time-series]\nsystem.buckets.weather\nsystem.views"
                },
                {
                    "lang": "javascript",
                    "value": "db.collection.help()"
                },
                {
                    "lang": "none",
                    "value": "Collection Class:\n\n  aggregate          Calculates aggregate values for the data in a collection or a view.\n  bulkWrite          Performs multiple write operations with controls for order of execution.\n  count              Returns the count of documents that would match a find() query for the collection or view.\n  countDocuments     Returns the count of documents that match the query for a collection or view.\n  deleteMany         Removes all documents that match the filter from a collection.\n  deleteOne          Removes a single document from a collection.\n  ..."
                },
                {
                    "lang": "javascript",
                    "value": "db.collection.insertOne.help()"
                },
                {
                    "lang": "none",
                    "value": "db.collection.insertOne(document, options):\n\nInserts a document into a collection.\n\nFor more information on usage: https://www.mongodb.com/docs/manual/reference/method/db.collection.insertOne"
                },
                {
                    "lang": "javascript",
                    "value": "db.collection.insertOne"
                },
                {
                    "lang": "javascript\n :copyable: false",
                    "value": "[Function: insertOne] AsyncFunction {\n  apiVersions: [ 1, Infinity ],\n  serverVersions: [ '3.2.0', '999.999.999' ],\n  returnsPromise: true,\n  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],\n  returnType: { type: 'unknown', attributes: {} },\n  deprecated: false,\n  platforms: [ 0, 1, 2 ],\n  isDirectShellCommand: false,\n  acceptsRawInput: false,\n  shellCommandCompleter: undefined,\n  help: [Function (anonymous)] Help\n}"
                },
                {
                    "lang": "javascript",
                    "value": "db.collection.find().help()"
                },
                {
                    "lang": "none",
                    "value": "<BSON class>.help()\n// or\n<BSON class>().help()"
                },
                {
                    "lang": "javascript",
                    "value": "ObjectId.help()"
                },
                {
                    "lang": "javascript",
                    "value": "ObjectId().help()"
                },
                {
                    "lang": "javascript",
                    "value": "The ObjectId BSON Class:\n\nFor more information on usage: https://mongodb.github.io/node-mongodb-native/3.6/api/ObjectID.html"
                },
                {
                    "lang": "sh",
                    "value": "show log startupWarnings"
                }
            ],
            "preview": "This document provides an overview of the help available in\nmongosh.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/ejson/deserialize",
            "title": "EJSON.deserialize()",
            "headings": [
                "Syntax",
                "Method Fields",
                "Behavior",
                "Example",
                "Create the Example File",
                "Import the Example File from the Command Line",
                "Learn More"
            ],
            "paragraphs": "The  EJSON.deserialize()  method converts Extended JSON objects to\nBSON objects. The method has this syntax: The method takes the following fields: Field Type Necessity Description object EJSON object Required EJSON object to convert. For example, an array of documents. options string Optional Modifies the output object  types .\nThe only option is  { relaxed: <boolean> } . Boolean Value Description true Return plain JavaScript object types. Default is\n true . false Return BSON object types. You can run  EJSON.deserialize()  from an interactive  mongosh \nsession or from the system command line using  --eval . To run  EJSON.deserialize()  from an interactive  mongosh  session,\nuse: To run  EJSON.deserialize()  from the system command line, use: Create the  sales  collection: The following sections show how to create an example file and then\nimport the file with an  EJSON.deserialize()  example. The following example retrieves the  sales  documents as an array and\nsaves the results to a file named  salesDeserialize.json  on the\ncomputer's file system: To import the  salesDeserialize.json  file and create a new collection\nnamed  salesFromDeserializeFile , exit  mongosh  and then run this\nexample from the command line: In the example: fs.readFileSync()  reads the  salesDeserialize.json  file and\ninterprets the content as  utf8  Unicode character strings. JSON.parse()  converts the strings read from the file to JSON. EJSON.deserialize()  outputs JSON. db.salesFromDeserializeFile.insertMany()  creates and populates the\n salesFromDeserializeFile  collection using the JSON returned by\n EJSON.deserialize() . You could use  EJSON.parse()  in the previous example, which is a\nsimpler approach.  JSON.parse()  and  EJSON.deserialize() \nprovide more flexibility. EJSON deserialize method EJSON  documentation",
            "code": [
                {
                    "lang": "javascript",
                    "value": "EJSON.deserialize( object, [ options ] )"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.deserialize( object, [ options ] )"
                },
                {
                    "lang": "shell",
                    "value": "mongosh --eval \"EJSON.deserialize( object, [ options ] )\""
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.insertMany( [\n   { custId: 345, purchaseDate: ISODate(\"2023-07-04\"),\n     quantity: 4, cost: Decimal128(\"100.60\") },\n   { custId: 346, purchaseDate: ISODate(\"2023-07-12\"),\n     quantity: 3, cost: Decimal128(\"175.45\") },\n   { custId: 486, purchaseDate: ISODate(\"2023-08-01\"),\n     quantity: 9, cost: Decimal128(\"200.53\") }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "let salesCollection = EJSON.stringify( db.sales.find().toArray() )\n\nfs.writeFileSync( 'salesDeserialize.json', salesCollection )"
                },
                {
                    "lang": "sh",
                    "value": "# Note: The example is formatted to fit the page.\n\nmongosh --quiet  --eval \"db.salesFromDeserializeFile.insertMany( \\\n   EJSON.deserialize( JSON.parse ( \\\n   fs.readFileSync( 'salesDeserialize.json', 'utf8' ) ) ) )\""
                }
            ],
            "preview": "The EJSON.deserialize() method converts Extended JSON objects to\nBSON objects.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "programming_language": [
                    "shell"
                ],
                "target_product": [
                    "mongodb-shell"
                ]
            }
        },
        {
            "slug": "reference/ejson/stringify",
            "title": "EJSON.stringify()",
            "headings": [
                "Syntax",
                "Command Fields",
                "Behavior",
                "Examples",
                "Change Output Spacing",
                "Select Output Fields",
                "Use a Function to Transform Output Fields",
                "Use a Function to Transform Output Fields in Nested Objects",
                "Use a Function to Replace BSON Strings",
                "Write to a File from Inside mongosh",
                "Run from the Command Line",
                "Filter Output Fields",
                "Legacy tojsononeline()",
                "Learn More"
            ],
            "paragraphs": "The  EJSON.stringify()  method converts BSON values to strings. The  EJSON.stringify()  method takes a BSON object as input and\noptional modifiers that control the format of the output string. The  EJSON.stringify()  method has these fields: Field Type Necessity Description value BSON object Required Object  EJSON.stringify()  transforms replacer array or function Optional Modifies output. If the value exists but it is not an array or a\nfunction,  EJSON.stringify()  returns all document fields. replacer  can be an array or a function. Value Effect array An array of document fields to include in the output. The\narray elements must specify the field names to include in\nthe returned JSON string. function A function that takes two parameters,  key  and\n value .  key  provides the function's  this \ncontext. EJSON returns the transformed  value . The function is run for each object. The object\nvalues are replaced with the function's return value. For an example, see  Use a Function to Transform Output Fields . spacer integer or string Optional Controls spacing in the output. Use  null  as a place holder\nfor  replacer  if you only want to specify the  spacer \noption. Value Effect integer The number of spaces to indent each level.  10  is the\nmaximum. string A character to use to indent each level. This option\nproduces invalid JSON if you use a character other than a\nspace or tab. For more information see\n JSON.stringify() options boolean Optional Additional configuration options Option Default Meaning relaxed true Enable relaxed mode for Extended JSON. Returns native\nJSON types instead of attaching BSON type information\nwhere applicable. You can call the EJSON interface from inside an interactive  mongosh \nsession or from the system command line using  --eval . Call the EJSON interface from an interactive session: Call the EJSON interface from the system command line: To control how documents are passed to EJSON, use one of the  mongosh \n cursor method  iterators. Iterator Characteristics .toArray() Blocking, buffers the entire result .foreach Non-blocking, prints documents one-by-one .next() Non-blocking, manually iterate over results To try these examples, first create a  sales  collection in the  test \ndatabase: To increase indentation between levels, set the  spacing  option. EJSON.stringify()  indents each document level five spaces. To select a subset of document fields, use an array to set the\n replace  option. EJSON formats the  quantity  and  cost  for each document. The  spacing  option is not specified in this example, so EJSON\nreturns the selected fields on a single line. To transform field values, use a JavaScript function to set the\n replacer  option. For example: The function runs recursively against the input object. Example output: The  replacer  function updates two fields,  _id  and  quantity . EJSON.stringify()  ignores fields with undefined values, so setting\n _id: undefined  removes the  _id  field from the output string. The function also modifies the  quantity  field in the output string.\nAll of the  quantity  values are multiplied by two in the output\nstring.  EJSON.stringify()  does not update the collection. Create the  salesWithAddress  collection with nested addresses: The following example uses a  replacer  function to change the ZIP\ncodes for the addresses to  55555 : Example output: For a list of BSON data types and the corresponding numeric codes, see\n BSON Types . The following example uses a  replacer  function to replace the BSON\nstrings with the string  \"This is a string\" : Example output: To write to a file from within  mongosh , use the  fs  API. Use\n EJSON.stringify()  to format the string that you pass to  fs . The example queries the  sales  collection for sales in July, 2023. sales_2023_07  stores a MongoDB BSON object. EJSON.stringify()  formats the object as a JSON string. fs.writeFileSync()  writes the formatted string to the\n sales_2023_07.json  file in the directory where you ran\n mongosh . To run a query from the operating system shell, use the  --eval  option. The command returns a single line of JSON for each document: The output is: The single-line output format is convenient for scripting.\n EJSON.stringify()  can also produce human-readable formatting: The output is: If the you want the output string to have additional type information,\nadd the  { relaxed: false }  option: The output is: --quiet  suppresses the  mongosh  connection information --eval  calls the  find  method .forEach  is a JavaScript method that tells  mongosh  to iterate\nover the response EJSON.stringify()  converts each document to JSON o  is the BSON value that  EJSON.stringify()  converts on each\niteration of  .forEach() . null  is a place holder for an optional  replacer .  When the\n replacer  is absent,  EJSON.stringify()  returns all fields that\nhave a defined value. 3  is the  spacer  value. It tells  EJSON.stringify()  to\nindent each new level by 3 spaces. EJSON.stringify()  provides formatting options that reduce the need\nfor an additional JSON parser like  jq . The output is: mongosh  formats query output differently than the deprecated\n mongo  shell. You may have scripts which rely on the old format. To\nreformat  mongosh  output on a single line, use  EJSON.stringify() . Run a sample query in  mongosh  and  mongo  to see the different\nformats. Legacy output: mongosh  output: Reformat the output with  EJSON.stringify() . EJSON  documentation Mozilla Developer Network  JSON.stringify()  documentation",
            "code": [
                {
                    "lang": "javascript",
                    "value": "EJSON.stringify(BSON object, [replacer], [space], [options])"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.stringify( db.sales.find().toArray(), null, 2  )"
                },
                {
                    "lang": "shell",
                    "value": "mongosh --eval \"EJSON.stringify( db.sales.find().toArray(), null, 2  )\""
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.insertMany( [\n   { custId: 345, purchaseDate: ISODate(\"2023-07-04\"), quantity: 4, cost: Decimal128(\"100.60\"), },\n   { custId: 346, purchaseDate: ISODate(\"2023-07-12\"), quantity: 3, cost: Decimal128(\"175.45\"), },\n   { custId: 486, purchaseDate: ISODate(\"2023-08-01\"), quantity: 9, cost: Decimal128(\"200.53\"), },\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.stringify( db.sales.findOne( { custId: 345 } ), null , 5 )"
                },
                {
                    "lang": "javascript",
                    "value": "{\n     \"_id\": {\n          \"$oid\": \"64da90c1175f5091debcab26\"\n     },\n     \"custId\": 345,\n     \"purchaseDate\": {\n          \"$date\": \"2023-07-04T00:00:00Z\"\n     },\n     \"quantity\": 4,\n     \"cost\": {\n          \"$numberDecimal\": \"100.60\"\n     }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.stringify( db.sales.find().toArray(), [ \"quantity\", \"cost\" ] )"
                },
                {
                    "lang": "javascript",
                    "value": "[{\"quantity\":4,\"cost\":{}},{\"quantity\":3,\"cost\":{}},{\"quantity\":9,\"cost\":{}}]"
                },
                {
                    "lang": "javascript",
                    "value": "let queryResults = db.sales.find().toArray()\nlet replacer = function( key, value ){\n   if ( key === '_id' ) {\n      value = undefined;\n   }\n   if ( key === 'quantity' ) {\n      value = 2 * value;\n   }\n\n   return value;\n}\n\nEJSON.stringify( queryResults, replacer, 3 )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      \"custId\": 345,\n      \"purchaseDate\": {\n         \"$date\": \"2023-07-04T00:00:00Z\"\n      },\n      \"quantity\": 8,\n      \"cost\": {\n         \"$numberDecimal\": \"100.60\"\n      }\n   },\n   {\n      \"custId\": 346,\n      \"purchaseDate\": {\n         \"$date\": \"2023-07-12T00:00:00Z\"\n      },\n      \"quantity\": 6,\n      \"cost\": {\n         \"$numberDecimal\": \"175.45\"\n      }\n   },\n   {\n      \"custId\": 486,\n      \"purchaseDate\": {\n         \"$date\": \"2023-08-01T00:00:00Z\"\n      },\n      \"quantity\": 18,\n      \"cost\": {\n         \"$numberDecimal\": \"200.53\"\n      }\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "db.salesWithAddress.insertMany( [\n   { custId: 345, purchaseDate: ISODate(\"2023-07-04\"),\n     quantity: 4, cost: Decimal128(\"100.60\"),\n     address: { number: 100, street: \"Main Street\", ZIP: 12345 } },\n   { custId: 346, purchaseDate: ISODate(\"2023-07-12\"),\n     quantity: 3, cost: Decimal128(\"175.45\"),\n     address: { number: 200, street: \"East Street\", ZIP: 12345 } }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "// Retrieve the salesWithAddress contents as an array and save\n// in queryResults\nlet queryResults = db.salesWithAddress.find().toArray()\n\n// Define a replacer function to change the ZIP codes\nlet replacer = function( key, value ) {\n   if (key === 'address') {\n      value.ZIP = 55555;\n   }\n   return value;\n}\n\n// Run EJSON.stringify() to change the ZIP codes in queryResults\nEJSON.stringify( queryResults, replacer, 3 )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      \"_id\": {\n         \"$oid\": \"65498c6562f443aa1490070f\"\n      },\n      \"custId\": 345,\n      \"purchaseDate\": {\n         \"$date\": \"2023-07-04T00:00:00Z\"\n      },\n      \"quantity\": 4,\n      \"cost\": {\n         \"$numberDecimal\": \"100.60\"\n      },\n      \"address\": {\n         \"number\": 100,\n         \"street\": \"Main Street\",\n         \"ZIP\": 55555\n      }\n   },\n   {\n      \"_id\": {\n         \"$oid\": \"65498c6562f443aa14900710\"\n      },\n      \"custId\": 346,\n      \"purchaseDate\": {\n         \"$date\": \"2023-07-12T00:00:00Z\"\n      },\n      \"quantity\": 3,\n      \"cost\": {\n         \"$numberDecimal\": \"175.45\"\n      },\n      \"address\": {\n         \"number\": 200,\n         \"street\": \"East Street\",\n         \"ZIP\": 55555\n      }\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "// Retrieve the salesWithAddress contents as an array and save\n// in queryResults\nlet queryResults = db.salesWithAddress.find().toArray()\n\n// Define a replacer function to replace the strings\nlet replacer = function( key, value ) {\n   if (typeof value === \"string\") {\n      return \"This is a string\";\n   }\n   return value;\n}\n\n// Run EJSON.stringify() to replace the strings in queryResults\nEJSON.stringify( queryResults, replacer, 3 )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      \"_id\": {\n         \"$oid\": \"This is a string\"\n      },\n      \"custId\": 345,\n      \"purchaseDate\": {\n         \"$date\": \"This is a string\"\n      },\n      \"quantity\": 4,\n      \"cost\": {\n         \"$numberDecimal\": \"This is a string\"\n      },\n      \"address\": {\n         \"number\": 100,\n         \"street\": \"This is a string\",\n         \"ZIP\": 12345\n      }\n   },\n   {\n      \"_id\": {\n         \"$oid\": \"This is a string\"\n      },\n      \"custId\": 346,\n      \"purchaseDate\": {\n         \"$date\": \"This is a string\"\n      },\n      \"quantity\": 3,\n      \"cost\": {\n         \"$numberDecimal\": \"This is a string\"\n      },\n      \"address\": {\n         \"number\": 200,\n         \"street\": \"This is a string\",\n         \"ZIP\": 12345\n      }\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "const sales_2023_07 = db.sales.find(\n   {\n      purchaseDate:\n      {\n          $gte: ISODate( \"2023-07-01\" ),\n          $lte: ISODate( \"2023-07-31\" )\n      }\n   }\n)\n\nfs.writeFileSync(\n   'sales_2023_07.json',\n   EJSON.stringify( sales_2023_07.toArray(), null, 2 )\n)"
                },
                {
                    "lang": "shell",
                    "value": "# Note: This example is formatted to fit on the page.\n\nmongosh --quiet \\\n        --eval \"db.sales.find().forEach( \\\n                   o => print( EJSON.stringify( o ) ) )\""
                },
                {
                    "lang": "json",
                    "value": "{\"_id\":{\"$oid\":\"64da90c1175f5091debcab26\"},\"custId\":345,\"purchaseDate\":{\"$date\":\"2023-07-04T00:00:00Z\"},\"quantity\":4,\"cost\":{\"$numberDecimal\":\"100.60\"}}\n{\"_id\":{\"$oid\":\"64da90c1175f5091debcab27\"},\"custId\":346,\"purchaseDate\":{\"$date\":\"2023-07-12T00:00:00Z\"},\"quantity\":3,\"cost\":{\"$numberDecimal\":\"175.45\"}}\n{\"_id\":{\"$oid\":\"64da90c1175f5091debcab28\"},\"custId\":486,\"purchaseDate\":{\"$date\":\"2023-08-01T00:00:00Z\"},\"quantity\":9,\"cost\":{\"$numberDecimal\":\"200.53\"}}"
                },
                {
                    "lang": "shell",
                    "value": "# Note: This example is formatted to fit on the page.\n\nmongosh --quiet \\\n        --eval \"db.sales.find().forEach( \\\n                   o => print( EJSON.stringify(o, null, 3 ) ) )\""
                },
                {
                    "lang": "json",
                    "value": "# Note: This is only the first document.\n\n{\n   \"_id\": {\n      \"$oid\": \"64da90c1175f5091debcab26\"\n   },\n   \"custId\": 345,\n   \"purchaseDate\": {\n      \"$date\": \"2023-07-04T00:00:00Z\"\n   },\n   \"quantity\": 4,\n   \"cost\": {\n      \"$numberDecimal\": \"100.60\"\n   }\n}"
                },
                {
                    "lang": "shell",
                    "value": "# Note: This example is formatted to fit on the page.\n\nmongosh --quiet \\\n        --eval \"db.sales.find().forEach( \\\n              o => print( \\\n                  EJSON.stringify( o, null, 3, { relaxed: false } ) \\\n           ) )\""
                },
                {
                    "lang": "json",
                    "value": "# Note: This is only the first document.\n\n{\n   \"_id\": {\n      \"$oid\": \"64da90c1175f5091debcab26\"\n   },\n   \"custId\": {\n      \"$numberInt\": \"345\"\n   },\n   \"purchaseDate\": {\n      \"$date\": {\n         \"$numberLong\": \"1688428800000\"\n      }\n   },\n   \"quantity\": {\n      \"$numberInt\": \"4\"\n   },\n   \"cost\": {\n      \"$numberDecimal\": \"100.60\"\n   }\n}"
                },
                {
                    "lang": "shell",
                    "value": "# Note: This example is formatted to fit on the page.\n\nmongosh --quiet \\\n        --eval \"EJSON.stringify( \\\n             db.sales.find( {}, \\\n                { _id: 0, custId: 1, quantity: 1 } ).toArray(), null, 2 \\\n          );\""
                },
                {
                    "lang": "json",
                    "value": "[\n  {\n    \"custId\": 345,\n    \"quantity\": 4\n  },\n  {\n    \"custId\": 346,\n    \"quantity\": 3\n  },\n  {\n    \"custId\": 486,\n    \"quantity\": 9\n  }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.find( { custId: 345 } )"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"_id\" : ObjectId(\"64da90c1175f5091debcab26\"), \"custId\" : 345, \"purchaseDate\" : ISODate(\"2023-07-04T00:00:00Z\"), \"quantity\" : 4, \"cost\" : NumberDecimal(\"100.60\") }"
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.find( { custId: 345 } )\n[\n  {\n    _id: ObjectId(\"64da90c1175f5091debcab26\"),\n    custId: 345,\n    purchaseDate: ISODate(\"2023-07-04T00:00:00.000Z\"),\n    quantity: 4,\n    cost: Decimal128(\"100.60\")\n  }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.stringify( db.sales.find( { custId: 345 } ).toArray() )"
                },
                {
                    "lang": "javascript",
                    "value": "[{\"_id\":{\"$oid\":\"64da90c1175f5091debcab26\"},\"custId\":345,\"purchaseDate\":{\"$date\":\"2023-07-04T00:00:00Z\"},\"quantity\":4,\"cost\":{\"$numberDecimal\":\"100.60\"}}]"
                }
            ],
            "preview": "The EJSON.stringify() method converts BSON values to strings.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/error-handlers",
            "title": "Error Handlers",
            "headings": [],
            "paragraphs": "Error handlers allow you to specify regular expressions to catch\nruntime errors and display custom error messages. To use an error matcher, add a line to your  package.json  file like the highlighted line in this\nexcerpt from a snippet in the community  GitHub repository . For an example of error matching code, see the  mongocompat \nsnippet. This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project.",
            "code": [
                {
                    "lang": "shell",
                    "value": "...\n\"description\": \"mongo compatibility script for mongosh\",\n\"main\": \"index.js\",\n\"errorMatchers\": \"error-matchers.js\",\n\"license\": \"SSPL\",\n..."
                }
            ],
            "preview": "Error handlers allow you to specify regular expressions to catch\nruntime errors and display custom error messages.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/ejson/serialize",
            "title": "EJSON.serialize()",
            "headings": [
                "Syntax",
                "Method Fields",
                "Behavior",
                "Examples",
                "Interactive Mongo Shell EJSON.serialize() Example",
                "Command Line Mongo Shell EJSON.serialize() Example",
                "Learn More"
            ],
            "paragraphs": "The  EJSON.serialize()  method converts BSON objects to Extended JSON\nrepresentation as JavaScript objects. MongoDB stores data using BSON. Many external data transformation\napplications use JSON. You can use  EJSON.serialize()  to convert BSON\nto JSON and save the output for those external applications. The method has this syntax: The method takes the following fields: Field Type Necessity Description object BSON object Required BSON object to convert. For example, an array of documents. options string Optional Modifies the output object  types .\nThe only option is  { relaxed: <boolean> } . Boolean Value Description true Return JSON object types. Default is  true . false Return BSON object types. You can run  EJSON.serialize()  from an interactive  mongosh \nsession or from the system command line using  --eval . To run  EJSON.serialize()  from an interactive  mongosh  session,\nuse: To run  EJSON.serialize()  from the system command line, use: Create the  sales  collection for the examples: The following example retrieves the  sales  documents as an array and\nstores the results in the  salesCollection  object: Example output, which uses JSON: To save collection data to a file, you can use  EJSON.serialize() \nwith the  mongosh --eval  method. The following example retrieves the  sales  documents as an array and\nsaves the results to a file named  sales.json  on the computer's file\nsystem: You could then use the  sales.json  file with an external data\ntransformation application. EJSON serialize method EJSON  documentation",
            "code": [
                {
                    "lang": "javascript",
                    "value": "EJSON.serialize( object, [ options ] )"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.serialize( object, [ options ] )"
                },
                {
                    "lang": "shell",
                    "value": "mongosh --eval \"EJSON.serialize( object, [ options ] )\""
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.insertMany( [\n   { custId: 345, purchaseDate: ISODate(\"2023-07-04\"),\n     quantity: 4, cost: Decimal128(\"100.60\") },\n   { custId: 346, purchaseDate: ISODate(\"2023-07-12\"),\n     quantity: 3, cost: Decimal128(\"175.45\") },\n   { custId: 486, purchaseDate: ISODate(\"2023-08-01\"),\n     quantity: 9, cost: Decimal128(\"200.53\") }\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "salesCollection = EJSON.serialize( db.sales.find().toArray() )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   {\n      _id: { '$oid': '6520519a0dbd2d208a5c7941' },\n      custId: 345,\n      purchaseDate: { '$date': '2023-07-04T00:00:00Z' },\n      quantity: 4,\n      cost: { '$numberDecimal': '100.60' }\n   },\n   {\n      _id: { '$oid': '6520519a0dbd2d208a5c7942' },\n      custId: 346,\n      purchaseDate: { '$date': '2023-07-12T00:00:00Z' },\n      quantity: 3,\n      cost: { '$numberDecimal': '175.45' }\n   },\n   {\n      _id: { '$oid': '6520519a0dbd2d208a5c7943' },\n      custId: 486,\n      purchaseDate: { '$date': '2023-08-01T00:00:00Z' },\n      quantity: 9,\n      cost: { '$numberDecimal': '200.53' }\n   }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "# Note: The example is formatted to fit the page.\n\nmongosh --quiet \\\n        --eval \"EJSON.serialize( db.sales.find().toArray() )\" \\\n        > sales.json"
                }
            ],
            "preview": "The EJSON.serialize() method converts BSON objects to Extended JSON\nrepresentation as JavaScript objects.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/ejson/parse",
            "title": "EJSON.parse()",
            "headings": [
                "Syntax",
                "Command Fields",
                "Behavior",
                "Examples",
                "Format Input with EJSON.parse()",
                "Use EJSON.parse() from the command line",
                "Learn More"
            ],
            "paragraphs": "The  EJSON.parse()  method converts string values to JSON. The  EJSON.parse()  method takes a string as input and an optional\nmodifier that controls the output format. The  EJSON.parse()  method takes these fields: Field Type Necessity Description value string Required String  EJSON.parse()  transforms into JSON key-value pairs options string Optional Modifies output  types . The only\noption is  { relaxed: <boolean> } . Value Effect true Returns native JavaScript types when possible false Prefer to return BSON types You can call  EJSON.parse()  from inside an interactive  mongosh \nsession or from the system command line using  --eval . Call  EJSON.parse()  from an interactive session: Call  EJSON.parse()  from the system command line: To try these examples, first create the  sales  collection: EJSON.parse()  accepts a string as input. For this example, use the\n EJSON.stringify()  method to export the\n sales  collection as a string. Use  EJSON.parse()  to format the string for methods like\n db.collection.insertMany()  that expect JSON pairs: EJSON.parse()  formats the values in  salesCollection  as JSON\npairs. db.salesRestored.insertMany() \nuses the JSON pairs to create the  salesRestored  collection. To import string data from an external source such as a file or an API\ncall, use  EJSON.parse()  with the  mongosh --eval  method. For this example, save the  sales  collection as a file. The code creates a file on your local system called  sales.json . To\nimport the file and create a new collection, exit  mongosh  and run an\n --eval  operation from the command line. EJSON.parse()  takes a string as input. This example uses\n fs.readFileSync()  to read the  sale.json  file as a string. EJSON.parse()  formats the input string as JSON pairs. db.salesFromFile.insertMany()  creates the  salesFromFile \ncollection from the JSON pairs. EJSON  documentation Mozilla Developer Network  JSON.parse  documentation",
            "code": [
                {
                    "lang": "javascript",
                    "value": "EJSON.parse(string, [options])"
                },
                {
                    "lang": "javascript",
                    "value": "EJSON.parse(string)"
                },
                {
                    "lang": "shell",
                    "value": "mongosh --eval \"EJSON.parse(string)\""
                },
                {
                    "lang": "javascript",
                    "value": "db.sales.insertMany( [\n   { custId: 345, purchaseDate: ISODate(\"2023-07-04\"), quantity: 4, cost: Decimal128(\"100.60\"), },\n   { custId: 346, purchaseDate: ISODate(\"2023-07-12\"), quantity: 3, cost: Decimal128(\"175.45\"), },\n   { custId: 486, purchaseDate: ISODate(\"2023-08-01\"), quantity: 9, cost: Decimal128(\"200.53\"), },\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "let salesCollection = EJSON.stringify( db.sales.find().toArray() )"
                },
                {
                    "lang": "javascript",
                    "value": "db.salesRestored.insertMany( EJSON.parse( salesCollection ) )"
                },
                {
                    "lang": "javascript",
                    "value": "let salesCollection = EJSON.stringify( db.sales.find().toArray() )\n\nfs.writeFileSync( 'sales.json', salesCollection )"
                },
                {
                    "lang": "javascript",
                    "value": "# Note: This example is formatted to fit on the page.\n\nmongosh --quiet \\\n        --eval \"db.salesFromFile.insertMany( \\\n           EJSON.parse( fs.readFileSync( 'sales.json', 'utf8' ) ) )\""
                }
            ],
            "preview": "The EJSON.parse() method converts string values to JSON.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/registry-index",
            "title": "Create a Registry Index File Manually",
            "headings": [],
            "paragraphs": "This page discusses how to manually create a registry index file. To\ngenerate the registry index file using a script, see  Create a\nRegistry Index File . To create the registry index file: This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. Copy the following TypeScript template and save it as  make-index.ts : Edit  make-index.ts  as needed for your snippet package. Use the\ncomments as a guide to filling out the required information. Run  ts-node make-index.ts  to create the  index.bson.br file . Upload  index.bson.br  to your GitHub repository. Update  snippetIndexSourceURLs  to include a URL that references\nyour  index.bson.br .",
            "code": [
                {
                    "lang": "typescript",
                    "value": "import bson from 'bson';\nimport zlib from 'zlib';\n\ninterface ErrorMatcher {\n   // Add additional information to shell errors matching one of the regular.\n   // expressions. The message can point to a snippet helping solve that error.\n   matches: RegExp[];\n   message: string;\n}\n\ninterface SnippetDescription {\n   // The *npm* package name. Users do not interact with this.\n   name: string;\n\n   // The snippet name. This is what users interact with.\n   snippetName: string;\n\n   // An optional install specifier that can be used to point npm towards\n   // packages that are not uploaded to the registry. For example,\n   // this could be an URL to a git repository or a tarball.\n   installSpec?: string;\n\n   // A version field. Users do not interact with this, as currently, `snippet`\n   // always installs the latest versions of snippets.\n   version: string;\n   description: string;\n   readme: string;\n\n   // License should be a SPDX license identifier.\n   license: string;\n   errorMatchers?: ErrorMatcher[];\n}\n\ninterface SnippetIndexFile {\n   // This must be 1 currently.\n   indexFileVersion: 1;\n   index: SnippetDescription[];\n   metadata: { homepage: string };\n}\n\nconst indexFileContents: SnippetIndexFile = {\n   indexFileVersion: 1,\n   index: [ /* ... */ ],\n   metadata: { homepage: 'https://example.com' }\n};\n\n// Serialize, compress and store the index file:\nfs.writeFileSync('index.bson.br',\n   zlib.brotliCompressSync(\n   bson.serialize(indexFileContents)));"
                }
            ],
            "preview": "This page discusses how to manually create a registry index file. To\ngenerate the registry index file using a script, see Create a\nRegistry Index File.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/troubleshooting",
            "title": "Troubleshooting",
            "headings": [
                "View npm Log Files",
                "Non-specific Error Message",
                "Error: Cannot find module",
                "Uninstalling a Snippet Fails"
            ],
            "paragraphs": "The following sections provide troubleshooting suggestions. This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. The  npm  log files are a good place to start if you encounter a\nproblem. The log file location will vary depending on your  npm \ninstallation. It will be something like: When you locate the log files, check the most recent one. Problem :  mongosh  returns a non-specific error\nmessage when you try to start the shell. Solution : Disable snippets, restart  mongosh  to\ncontinue debugging. Problem :  mongosh  returns an error message like this when you try\nto start the shell: The  npm log file  may have lines like these: Solution : Edit the  ~/.mongodb/mongosh/snippets/package.json \nfile to remove the line with the  bad-snippet-name . In this example, do not forget to delete the trailing comma from the\nline above as well. Problem : Uninstall fails, but the error message refers to a\ndifferent snippet. The following error message below is reformatted for readability: Solution : Edit the  package.json  file to remove the missing\nentry. In this example, delete the highlighted line and the trailing\ncomma from the line above.",
            "code": [
                {
                    "lang": "shell",
                    "value": "/<NPM USER HOME>/.npm/_logs/2021-09-16T22_03_34_534Z-debug.log"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb --eval 'config.set(\"snippetIndexSourceURLs\", \"\")'"
                },
                {
                    "lang": "javascript",
                    "value": "Error: Cannot find module '/<PATH to USER HOME>/.mongodb/mongosh/snippets/node_modules/@<REGISTRY NAME>/bad-snippet-name'"
                },
                {
                    "lang": "javascript",
                    "value": "36 error code ELSPROBLEMS\n37 error missing: @<REGISTRY NAME>/bad-snippet-name@*, required by snippets@"
                },
                {
                    "lang": "shell",
                    "value": "{\n   \"dependencies\": {\n      \"@mongosh/snippet-analyze-schema\": \"^1.0.5\",\n      \"@mongosh/snippet-spawn-mongod\": \"^1.0.1\",\n      \"npm\": \"*\",\n      \"@<REGISTRY NAME>/bad-snippet-name\": \"^1.0.7\"\n   }\n}"
                },
                {
                    "lang": "shell",
                    "value": "Running uninstall...\nUncaught:\nError: Command failed: /usr/bin/mongosh\n          /root/.mongodb/mongosh/snippets/node_modules/npm/bin/npm-cli.js\n          --no-package-lock\n          --ignore-scripts\n          --registry=https://registry.npmjs.org uninstall\n          --save @mongosh/snippet-mongocompat with exit code 1: \\\n                 npm ERR! code E404 npm ERR! 404 Not Found\n         - GET https://registry.npmjs.org/@<REGISTRY NAME>%2fbad-snippet-name\n         - Not found\nnpm ERR! 404\nnpm ERR! 404  '@<REGISTRY NAME>/bad-snippet-namen@*' is not in this registry."
                },
                {
                    "lang": "shell",
                    "value": "{\n   \"dependencies\": {\n      \"@mongosh/snippet-analyze-schema\": \"^1.0.5\",\n      \"@mongosh/snippet-spawn-mongod\": \"^1.0.1\",\n      \"npm\": \"*\",\n      \"@<REGISTRY NAME>/bad-snippet-name\": \"^1.0.7\"\n   }\n}"
                }
            ],
            "preview": "The following sections provide troubleshooting suggestions.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "reference/methods",
            "title": "Methods",
            "headings": [
                "Administration Methods",
                "Atlas Search Index Methods",
                "Bulk Operation Methods",
                "Collection Methods",
                "Connection Methods",
                "Cursor Methods",
                "Database Methods",
                "Client-Side Field Level Encryption Methods",
                "Native Methods",
                "Query Plan Cache Methods",
                "Replication Methods",
                "Role Management Methods",
                "Session Object Methods",
                "Server Status Methods",
                "Sharding Methods",
                "Telemetry Methods",
                "Transaction Methods",
                "User Management Methods"
            ],
            "paragraphs": "The following document lists the available methods in the  MongoDB Shell .\nClick a method to see its documentation in the\n MongoDB Manual , including syntax and examples. Methods which reset the shell's connection to the server trigger a\ntermination of all open server  sessions . When a session ends, all in-progress\noperations are terminated as well, and the client must re-authenticate if\nauthentication is enabled. The following methods reset the shell's\nconnection: db.auth Mongo.setReadPref Mongo.setReadConcern Method Description db.adminCommand() Runs a command against the  admin  database. db.currentOp() Reports the current in-progress operations. db.killOp() Terminates a specified operation. db.shutdownServer() Shuts down the current  mongod  or  mongos \nprocess cleanly and safely. db.fsyncLock() Flushes writes to disk and locks the database to prevent write\noperations and assist backup operations. db.fsyncUnlock() Allows writes to continue on a database locked with\n db.fsyncLock() . Atlas Search indexes  let you query data\nin  Atlas Search . Atlas Search indexes enable\nperformant text search queries by mapping search terms to the documents\nthat contain those terms. Use the following methods to manage Atlas Search indexes. The following methods can only be run on deployments hosted on\n MongoDB Atlas . Name Description db.collection.createSearchIndex() Creates one or more Atlas Search indexes on a specified\ncollection. db.collection.dropSearchIndex() Deletes an existing Atlas Search index. db.collection.getSearchIndexes() Returns information about existing Atlas Search indexes on a specified\ncollection. db.collection.updateSearchIndex() Updates an existing Atlas Search index. Method Description db.collection.initializeOrderedBulkOp() Initializes and returns a new  Bulk()  operations builder\nfor a collection. The builder constructs an ordered list of write\noperations that MongoDB executes in bulk. db.collection.initializeUnorderedBulkOp() Initializes and returns a new  Bulk()  operations builder\nfor a collection. The builder constructs an unordered list of write\noperations that MongoDB executes in bulk. Bulk() Creates a bulk operations builder used to construct a list of write\noperations to perform in bulk for a single collection. To instantiate\nthe builder, use either the  db.collection.initializeOrderedBulkOp() \nor the  db.collection.initializeUnorderedBulkOp()  method. Bulk.execute() Executes the list of operations built by the  Bulk() \noperations builder. Bulk.find() Specifies a query condition for an update or a remove operation. Bulk.find.hint() Sets the  hint  option that specifies the index to support the\nbulk operation. Bulk.find.remove() Adds a remove operation to a bulk operations list. Bulk.find.removeOne() Adds a single document remove operation to a bulk operations list. Bulk.find.replaceOne() Adds a single document replacement operation to a bulk operations\nlist. Bulk.find.updateOne() Adds a single document update operation to a bulk operations list. Bulk.find.update() Adds a  multi  update operation to a bulk operations list. The\nmethod updates specific fields in existing documents. Bulk.find.upsert() Sets the  upsert  option\nto  true  for an update or a replacement operation. Bulk.getOperations() Returns an array of write operations executed through\n Bulk.execute() . Bulk.insert() Adds an insert operation to a bulk operations list. Bulk.toJSON() Returns a JSON document that contains the number of operations and\nbatches in the  Bulk()  object. Bulk.toString() Returns as a string a JSON document that contains the number of\noperations and batches in the  Bulk()  object. Method Description db.collection.aggregate() Provides access to the\n aggregation pipeline . db.collection.bulkWrite() Provides bulk write operation functionality. db.collection.count() Deprecated in  mongosh  1.0.6. Use\n db.collection.countDocuments()  or\n db.collection.estimatedDocumentCount()  instead. db.collection.countDocuments() Returns a count of the number of documents in a collection or a\nview. Wraps the  $group  aggregation stage with a\n $sum  expression. db.collection.estimatedDocumentCount() Returns an approximate count of the documents in a collection or\na view. db.collection.createIndex() Builds an index on a collection. db.collection.createIndexes() Builds one or more indexes on a collection. db.collection.dataSize() Returns the size of the collection. Wraps the\n size  field in the output of the\n collStats . db.collection.deleteOne() Deletes a single document in a collection. db.collection.deleteMany() Deletes multiple documents in a collection. db.collection.distinct() Returns an array of documents that have distinct values for the\nspecified field. db.collection.drop() Removes the specified collection from the database. db.collection.dropIndex() Removes a specified index on a collection. db.collection.dropIndexes() Removes all indexes on a collection. db.collection.ensureIndex() Deprecated. Use  db.collection.createIndex() . db.collection.explain() Returns information on the query execution of various methods. db.collection.find() Performs a query on a collection or a view and returns a cursor\nobject. db.collection.findAndModify() Atomically modifies and returns a single document. db.collection.findOne() Performs a query and returns a single document. db.collection.findOneAndDelete() Finds a single document and deletes it. db.collection.findOneAndReplace() Finds a single document and replaces it. db.collection.findOneAndUpdate() Finds a single document and updates it. db.collection.getIndexes() Returns an array of documents that describe the existing indexes\non a collection. db.collection.getShardDistribution() Prints the data distribution statistics for a sharded collection. db.collection.getShardVersion() Provides a wrapper for the database command  getShardVersion . db.collection.insertOne() Inserts a new document in a collection. db.collection.insertMany() Inserts several new document in a collection. db.collection.isCapped() Reports if a collection is a  capped collection . db.collection.mapReduce() Runs  map-reduce  aggregation operations on a collection. db.collection.reIndex() Rebuilds all existing indexes on a collection. db.collection.renameCollection() Changes the name of a collection. db.collection.replaceOne() Replaces a single document in a collection. db.collection.stats() Reports on the state of a collection. Provides a wrapper around\nthe  collStats . db.collection.storageSize() Reports the total size used by the collection in bytes. Provides\na wrapper around the  storageSize  field of the\n collStats  output. db.collection.totalIndexSize() Reports the total size used by the indexes on a collection.\nProvides a wrapper around the  totalIndexSize \nfield of the  collStats  output. db.collection.totalSize() Reports the total size of a collection, including the size of\nall documents and all indexes on a collection. db.collection.updateOne() Modifies a single document in a collection. db.collection.updateMany() Modifies multiple documents in a collection. db.collection.validate() Validates a collection. db.collection.watch() Opens a  change stream cursor  on the\ncollection. Method Description Mongo() JavaScript constructor to instantiate a database connection from\nthe  mongo  shell or from a JavaScript file. The  Mongo()  method has the following parameters: Parameter Type Description host string Optional The connection string for the target database\nconnection. If omitted,  Mongo()  instantiates a connection to the\nlocalhost interface on the default port  27017 . autoEncryptionOpts Document Optional Configuration parameters for enabling\n Client-Side Field Level Encryption . autoEncryptionOpts  overrides the\nexisting client-side field level encryption configuration of\nthe database connection. If omitted,  Mongo() \ninherits the client-side field level encryption configuration\nof the current database connection. For documentation of usage and syntax, see\n AutoEncryptionOpts . Mongo.getDB() Returns a database object. Mongo.setReadPref() Sets the  read preference  for the MongoDB connection. Mongo.watch() Opens a  change stream cursor  for a replica\nset or a sharded cluster to report on all its non-system collections\nacross its databases, with the exception of the  admin ,  local ,\nand  config  databases. Method Description cursor.addOption() Adds special wire protocol flags that modify the behavior of the\nquery. cursor.allowPartialResults() Allows  db.collection.find()  operations against a\nsharded collection to return partial results, rather than an\nerror, if one or more queried shards are unavailable. cursor.batchSize() Controls the number of documents MongoDB will return to the\nclient in a single network message. The following example query returns results in batches of\n100: cursor.close() Close a cursor and free associated server resources. cursor.collation() Specifies the collation for the cursor returned by the\n db.collection.find() . cursor.comment() Attaches a comment to the query to allow for traceability in the\nlogs and the system.profile collection. cursor.count() Modifies the cursor to return the number of documents in the\nresult set rather than the documents themselves. cursor.explain() Reports on the query execution plan for a cursor. cursor.forEach() Applies a JavaScript function for every document in a cursor. cursor.hasNext() Returns  true  if the cursor has documents and can be iterated. cursor.hint() Forces MongoDB to use a specific index for a query. cursor.isClosed() Returns  true  if the cursor is closed. cursor.isExhausted() Returns  true  if the cursor is closed  and  there are no\nobjects remaining in the batch. cursor.itcount() Computes the total number of documents in the cursor client-side\nby fetching and iterating the result set. cursor.limit() Constrains the size of a cursor's result set. cursor.map() Applies a function to each document in a cursor and collects the\nreturn values in an array. cursor.max() Specifies an exclusive upper index bound for a cursor. For use\nwith  cursor.hint() cursor.maxTimeMS() Specifies a cumulative time limit in milliseconds for processing\noperations on a cursor. cursor.min() Specifies an inclusive lower index bound for a cursor. For use\nwith  cursor.hint() cursor.next() Returns the next document in a cursor. cursor.noCursorTimeout() Instructs the server to avoid closing a cursor automatically\nafter a period of inactivity. cursor.objsLeftInBatch() Returns the number of documents left in the current cursor batch. cursor.readConcern() Specifies a  read concern  for a\n db.collection.find()  operation. cursor.readPref() Specifies a  read preference  to a cursor to control how\nthe client directs queries to a  replica set . cursor.returnKey() Modifies the cursor to return index keys rather than the\ndocuments. cursor.showRecordId() Adds an internal storage engine ID field to each document\nreturned by the cursor. cursor.size() Returns a count of the documents in the cursor after applying\n skip()  and  limit()  methods. cursor.skip() Returns a cursor that begins returning results only after\npassing or skipping a number of documents. cursor.sort() Returns results ordered according to a sort specification. cursor.tailable() Marks the cursor as tailable. Only valid for cursors over capped\ncollections. cursor.toArray() Returns an array that contains all documents returned by the\ncursor. Method Description db.aggregate() Runs admin/diagnostic pipeline which does not require an\nunderlying collection. db.createCollection() Creates a new collection or view. db.createView() Creates a view as the result of applying the specified\naggregation pipeline to the source collection or view. db.commandHelp() Displays help text for the specified database command. db.dropDatabase() Removes the current database. db.getCollection() Returns a collection or view object. Used to access collections\nwith names that are not valid in the  mongo  shell. db.getCollectionInfos() Returns collection information for all collections and views in\nthe current database. db.getCollectionNames() Lists all collections and views in the current database. db.getMongo() Returns the current database connection. db.getLogComponents() Returns the current log verbosity settings. db.getName() Returns the name of the current database. db.getProfilingStatus() Returns the current  profile level ,  slowOpThresholdMs \nsetting, and  slowOpSampleRate \nsetting. db.getSiblingDB() Provides access to the specified database. db.listCommands() Provides a list of all database commands. db.logout() Ends an authenticated session. db.printShardingStatus() Prints a formatted report of the sharding configuration and the\ninformation regarding existing chunks in a sharded cluster. db.runCommand() Runs a  database command . db.setLogLevel() Sets a single verbosity level for  log messages . db.setProfilingLevel() Configures the database  profiler level ,\n slowms ,\nand  sampleRate . db.watch() Opens a  change stream cursor  for a\ndatabase to report on all its non-system collections. Automatic encryption is only available when  mongosh  is connected\nto an Atlas cluster or a MongoDB Enterprise Server. For details,\nsee  Automatic Client-Side Field Level Encryption . The methods\nlisted in this section are used for  manual  encryption, and are\nsupported on non-enterprise servers. Automatic encryption is not available with the Homebrew installation\nof  mongosh . Field level encryption is only available in the  mongosh  binary,\nand not available in the  embedded Compass shell . Method Description ClientEncryption.createEncryptedCollection() Creates a collection with encrypted fields. ClientEncryption.decrypt() Decrypts the specified  encryptedValue  if the current database\nconnection was configured with access to the Key Management Service\n(KMS) and key vault used to encrypt  encryptedValue . ClientEncryption.encrypt() Encrypts the specified value using the specified  encryptionKeyId \nand  encryptionAlgorithm . getClientEncryption() Returns the  ClientEncryption  object for the current database\ncollection. getKeyVault() Returns the  KeyVault  object for the current database connection. KeyVault.addKeyAlternateName() Adds the  keyAltName  to the  keyAltNames  array of the data\nencryption key with the specified UUID. KeyVault.createKey() Adds a data encryption key to the key vault associated to the\ndatabase connection. KeyVault.deleteKey() Deletes a data encryption key with the specified UUID from the key\nvault associated to the database connection. KeyVault.getKey() Gets a data encryption key with the specified UUID. The data\nencryption key must exist in the key vault associated to the\ndatabase connection. KeyVault.getKeyByAltName() Gets all data encryption keys with the specified  keyAltName . KeyVault.getKeys() Returns all data encryption keys stored in the key vault associated\nto the database connection. KeyVault.removeKeyAlternateName() Removes the specified  keyAltName  from the data encryption key\nwith the specified UUID. The data encryption key must exist in the\nkey vault associated to the database connection. Method Description buildInfo() Returns the following JSON-formatted document that describes\nyour  mongosh  build and driver dependencies: cd() Changes the current working directory to the specified path. isInteractive() Returns a boolean indicating whether mongosh is running in\ninteractive or script mode. load() Loads and runs a JavaScript file in the shell. In  mongosh , scripts loaded with the  load()  method support\nthe  __filename  and  __dirname  Node.js variables. These\nvariables return the file name and directory of the loaded\nscript, respectively. The returned values are always absolute\npaths. In the legacy shell, you cannot not access the script's file name\nor directory using the  load()  method. print() Print the specified text or variable.  print()  and  printjson() \nare aliases for  console.log() . pwd() Returns the current working directory of the active shell session. quit() Exits the current shell session. sleep() Suspends the  mongo  shell for a given period of time. version() Returns the current version of the  mongosh  instance. Method Description db.collection.getPlanCache() Returns an interface to access the query plan cache object and\nassociated  PlanCache  methods for a collection. PlanCache.clear() Removes all cached query plans for a collection. PlanCache.clearPlansByQuery() Clears the cached query plans for the specified\n query shape . PlanCache.help() Lists the methods available to view and modify a collection\u2019s\nquery plan cache. PlanCache.list() Returns an array of\n plan cache entries \nfor a collection. Method Description rs.add() Adds a member to the replica set. You must connect to the\nprimary of the replica set to run this method. rs.addArb() Adds an arbiter to an existing replica set. rs.config() Returns a document that contains the current replica set configuration. rs.freeze() Makes the replica set member that  mongosh  is connected to\nineligible to become primary for the specified duration. You\nmust specify the duration in seconds. db.getReplicationInfo() Returns the status of the replica set from the oplog data. rs.initiate() Initializes a new replica set. db.printReplicationInfo() Returns the oplog of the replica set member that  mongosh  is\nconnected to. rs.printReplicationInfo() Returns the oplog of the replica set member that  mongosh  is\nconnected to. db.printSecondaryReplicationInfo Returns the status of the secondary members of the replica set. This is identical to the  rs.printSecondaryReplicationInfo()  method.\nThis method's output is similar to the\n db.printSlaveReplicationInfo()  method. The  db.printSlaveReplicationInfo()  method is deprecated in  mongosh . Use\n db.printSecondaryReplicationInfo()  instead. The following is an example output from the\n rs.printSecondaryReplicationInfo()  method issued on a replica set with two secondary members: rs.printSecondaryReplicationInfo Returns the status of the secondary members of the replica set. This is identical to the  db.printSecondaryReplicationInfo() \nmethod. This method's output is similar to the\n rs.printSlaveReplicationInfo()  method in the legacy\n mongo  shell. The  rs.printSlaveReplicationInfo()  method is deprecated in  mongosh . Use\n rs.printSecondaryReplicationInfo()  instead. The following is an example output from the\n rs.printSecondaryReplicationInfo()  method issued on a replica set with two secondary members: rs.reconfig() Modifies the configuration of an existing replica set. rs.remove() Removes the member specified by hostname from the replica set. rs.status() Returns the status of the replica set member that  mongosh  is\nconnected to. rs.stepDown() Makes the primary of the replica set a secondary. You must be\nconnected to the primary to run this method. rs.syncFrom() Resets the sync target to the replica set member specified\nby hostname for the replica set member that  mongosh  is\nconnected to. Method Description db.createRole() Creates a role and specifies its privileges. db.dropRole() Deletes a user-defined role. db.dropAllRoles() Deletes all user-defined roles associated with a database. db.getRole() Returns information for the specified role. db.getRoles() Returns information for all the user-defined roles in a\ndatabase. db.grantPrivilegesToRole() Assigns privileges to a user-defined role. db.revokePrivilegesFromRole() Removes the specified privileges from a user-defined role. db.grantRolesToRole() Specifies roles from which a user-defined role inherits\nprivileges. db.revokeRolesFromRole() Removes inherited roles from a role. db.updateRole() Updates a user-defined role. Method Description Mongo.startSession() Starts a session for the connection. Session.advanceOperationTime() Updates the operation time. Session.endSession() Ends the session. Session.getClusterTime() Returns the most recent cluster time as seen by the session. Session.getDatabase() Access the specified database from the session in the shell. Session.getOperationTime() Returns the timestamp of the last acknowledged operation for the\nsession. Session.getOptions() Returns the options for the session. Session.hasEnded() Returns a boolean that specifies whether the session has ended. SessionOptions() The options for a session in the shell. To access the\n SessionOptions()  object, use  Session.getOptions() . Method Description db.hello() Returns a document that describes the role of the\n mongod  instance. If the  mongod  is a member of a\nreplica set, then the  isWritablePrimary  and\n secondary  fields report if the instance is the\n primary  or if it is a  secondary  member of the\nreplica set. db.hostInfo() Returns a document with information about the system running\nthe MongoDB instance. db.collection.latencyStats() Returns latency statistics for a specified collection. db.printCollectionStats() Returns statistics from every collection. db.serverBuildInfo() Returns a document that displays the compilation parameters for\nthe  mongod  instance. db.serverCmdLineOpts() Returns a document with information about the runtime options\nused to start the MongoDB instance. db.serverStatus() Returns a document that provides an overview of the database\nprocess. db.stats() Returns a document that reports on the state of the current\ndatabase. db.version() Returns the version of the  mongod  instance. Method Description sh.addShard() Adds a shard to a sharded cluster. sh.addShardTag() Aliases to  sh.addShardToZone() . sh.addShardToZone() Associates a shard with a zone. Supports configuring zones in sharded\nclusters. sh.addTagRange() Aliases to  sh.updateZoneKeyRange() . sh.balancerCollectionStatus() Returns information on whether the chunks of a sharded collection are balanced. sh.disableAutoMerger() Disables automatic chunk merges for a namespace. sh.disableAutoSplit() Disables auto-splitting for the sharded cluster. sh.disableBalancing() Disables balancing on a single collection in a sharded\ndatabase. Does not affect balancing of other collections in a sharded cluster. sh.enableAutoMerger() Enables automatic chunk merges for a namespace. sh.enableAutoSplit() Enables auto-splitting for the sharded cluster. sh.enableBalancing() Activates the sharded collection balancer process if\npreviously disabled using  sh.disableBalancing() . sh.enableSharding() Enables sharding on a specific database. sh.getBalancerState() Returns a boolean to report if the  balancer  is currently\nenabled. sh.getShardedDataDistribution() Returns data distribution information for sharded collections.\n sh.getShardedDataDistribution()  is a shell helper method for\nthe  $shardedDataDistribution  aggregation pipeline\nstage. sh.isBalancerRunning() Returns a boolean to report if the  balancer  process is\ncurrently migrating chunks. sh.moveChunk() Migrates a  chunk  in a  sharded cluster . sh.removeRangeFromZone() Removes the association between a range of shard key values and a\n zone . sh.removeShardFromZone() Removes the association between a shard and a  zone . sh.removeShardTag() Removes the association between a tag and a shard. sh.removeTagRange() Removes a range of shard key values to a shard tag created using\nthe  sh.addShardTag()  method. This method aliases to\n sh.removeRangeFromZone()  in MongoDB 3.4. sh.setBalancerState() Enables or disables the  balancer  which migrates\n chunks  between  shards . sh.shardCollection() Enables sharding for a collection. sh.splitAt() Divides an existing  chunk  into two chunks using a\nspecific value of the  shard key  as the dividing point. sh.splitFind() Divides an existing  chunk  that contains a document\nmatching a query into two approximately equal chunks. sh.startAutoMerger() Enables the AutoMerger. sh.startBalancer() Enables the  balancer . sh.status() Reports on the status of a sharded cluster. sh.stopAutoMerger() Disables the AutoMerger. sh.stopBalancer() Disables the  balancer . This operation does not wait for\nthe balancer to complete any in progress operations, and may\nterminate ongoing operations. sh.updateZoneKeyRange() Associates a range of shard keys with a zone. Supports configuring\nzones in sharded clusters. These methods configure whether  mongosh  tracks anonymous telemetry\ndata. Telemetry is enabled by default. For more information on what data  mongosh  tracks with\ntelemetry, see  Configure Telemetry Options . Method Description disableTelemetry() Disable telemetry for  mongosh . enableTelemetry() Enable telemetry for  mongosh . Method Description Session.abortTransaction() Terminates a  multi-document transaction \nand rolls back any data changes made by the operations within the\ntransaction. Session.commitTransaction() Saves the changes made by the operations in a  multi-document\ntransaction  and ends the transaction. Session.startTransaction() Starts a  multi-document transaction \nassociated with the session. The  passwordPrompt()  method is currently not\nsupported in  mongosh . As a result, when using the following\nmethods you must specify the password as a parameter: db.auth() db.changeUserPassword() db.createUser() db.updateUser() Method Description db.auth() Authenticates a user to a database. db.changeUserPassword() Changes an existing user\u2019s password. db.createUser() Creates a new user. db.dropAllUsers() Deletes all users associated with a database. db.dropUser() Deletes a single user. db.getUser() Returns information about the specified user. db.getUsers() Returns information about all users associated with a database. db.updateUser() Updates a specified user's data. db.grantRolesToUser() Grants a role and its privileges to a user. db.revokeRolesFromUser() Removes a role from a user.",
            "code": [
                {
                    "lang": "sh",
                    "value": "db.myCollection.find().batchSize(100)"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  version: '1.10.1',\n  distributionKind: 'packaged',\n  buildArch: 'x64',\n  buildPlatform: 'linux',\n  buildTarget: 'unknown',\n  buildTime: '2023-06-21T09:49:37.225Z',\n  gitVersion: '05ad91b4dd40382a13f27abe1ae8c3f9f52a38f7',\n  nodeVersion: 'v16.20.1',\n  opensslVersion: '3.1.1',\n  sharedOpenssl: true,\n  runtimeArch: 'x64',\n  runtimePlatform: 'darwin',\n  deps: {\n     nodeDriverVersion: '5.6.0',\n     libmongocryptVersion: undefined,\n     libmongocryptNodeBindingsVersion: undefined\n   }\n}"
                },
                {
                    "lang": "code",
                    "value": "> print(\"hello world\")\nhello world\n\n> x = \"example text\"\n> print(x)\nexample text"
                },
                {
                    "lang": "sh",
                    "value": "source: rs2.example.net:27017\n{\n  syncedTo: 'Tue Oct 13 2020  09:37:28 GMT-0700 (Pacific Daylight Time)',\n  replLag: '0 secs (0 hrs) behind the primary '\n}\n---\nsource: rs3.example.net:27017\n{\n  syncedTo: 'Tue Oct 13 2020  09:37:28 GMT-0700 (Pacific Daylight Time)',\n  replLag: '0 secs (0 hrs) behind the primary '\n}"
                },
                {
                    "lang": "sh",
                    "value": "source: rs2.example.net:27017\n{\n  syncedTo: 'Tue Oct 13 2020 09:42:18 GMT-0700 (Pacific Daylight Time)',\n  replLag: '0 secs (0 hrs) behind the primary '\n}\n---\nsource: rs3.example.net:27017\n{\n  syncedTo: 'Tue Oct 13 2020 09:42:18 GMT-0700 (Pacific Daylight Time)',\n  replLag: '0 secs (0 hrs) behind the primary '\n}"
                }
            ],
            "preview": "The following document lists the available methods in the MongoDB Shell.\nClick a method to see its documentation in the\nMongoDB Manual, including syntax and examples.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/working-with-snippets",
            "title": "Use Snippets in the Console",
            "headings": [
                "Install Snippet Packages",
                "Run a Snippet",
                "Uninstall Snippets",
                "Find Available Snippet Packages",
                "Get Repository Information",
                "Get Help for a Snippet"
            ],
            "paragraphs": "This page is an overview of working with snippets in the\n mongosh  console. This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. You must install a snippet package before you use it. Once a snippet\npackage has been installed, it is loaded each time\n mongosh  starts. If you know the name of the snippet you want to install, enter: Otherwise, search the repository to get a list of available snippets. Once the snippet is installed, enter  y  to load it. If this is the first time you have used snippets you may see a\nwarning like the following: You must install npm to use snippets. Before running a new snippet, run  snippet help <SNIPPET NAME>  to\nlearn more about the snippet's functionality. For example,  snippet help analyze-schema  indicates that you can\nuse the the  analyze-schema  by passing it a collection name. Once you know how to call a snippet, you can use it as in the following\nexample. Consider the  reservations  collection: To analyze the collection,  install  the\n analyze-schema  snippet if it is not already present, pass in the\ncollection name to run it. The document with  \"_id\": 3  was misentered as a string. The analysis\nshows that the  reserved  field has string elements in addition to\nthe expected booleans. Use the  snippet uninstall  command to remove a snippet. If you are\nunsure of the name, the  snippet ls  command lists all installed\nsnippets. This code uninstalls the  analyze-schema  snippet. The  snippet ls  command returns a list of locally installed snippets\nalong with some version and source information. To see the snippets that are available in the registry, first\n refresh  the local metadata cache and then  search . snippet search  lists available snippets, their version, and gives a\nbrief description. This instance has a second, private registry configured. Since the\nprivate registry was listed first, those snippets precede the MongoDB\nsnippets in the list of available snippets. Display the homepage and URL for each snippet repository: The output lists each repository. Each snippet is unique and has its own interface. The best way to find\ninformation about how a particular snippet works is to view its\n README  file by running  snippet help : This command displays the  README  file for the  mongocompat \nsnippet in the  mongosh  console. When you  create your own  your own snippet\npackages, be sure to include a  README.md  file that provides useful\nhelp.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "snippet install <name>"
                },
                {
                    "lang": "javascript",
                    "value": "snippet search"
                },
                {
                    "lang": "javascript",
                    "value": " Running install...\n Installed new snippets analyze-schema. Do you want to load them now? [Y/n]: y\n Finished installing snippets: analyze-schema"
                },
                {
                    "lang": "javascript",
                    "value": "This operation requires downloading a recent release of npm. Do\nyou want to proceed? [Y/n]:"
                },
                {
                    "lang": "javascript",
                    "value": "testDB> snippet help analyze-schema\n # analyze-schema\n\n Analyze the schema of a collection or a cursor.\n\n```js\n> schema(db.coll);\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502   0   \u2502     1     \u2502     2      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    0    \u2502 '_id' \u2502 '100.0 %' \u2502 'ObjectID' \u2502\n\u2502    1    \u2502 'a  ' \u2502 '50.0 %'  \u2502  'Number'  \u2502\n\u2502    2    \u2502 'a  ' \u2502 '50.0 %'  \u2502  'String'  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"
                },
                {
                    "lang": "javascript",
                    "value": "db.reservations.insertMany( [\n   {\"_id\": 1001, \"roomNum\": 1, \"reserved\": true },\n   {\"_id\": 1002, \"roomNum\": 2, \"reserved\": true },\n   {\"_id\": 1003, \"roomNum\": 3, \"reserved\": \"false\" },\n   {\"_id\": 1004, \"roomNum\": 4, \"reserved\": true },\n] )"
                },
                {
                    "lang": "javascript",
                    "value": "snippet install analyze-schema\nschema(db.reservations)"
                },
                {
                    "lang": "none",
                    "value": "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502     0      \u2502     1     \u2502     2     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    0    \u2502 '_id     ' \u2502 '100.0 %' \u2502 'Number'  \u2502\n\u2502    1    \u2502 'reserved' \u2502 '75.0 %'  \u2502 'Boolean' \u2502\n\u2502    2    \u2502 'reserved' \u2502 '25.0 %'  \u2502 'String'  \u2502\n\u2502    3    \u2502 'roomNum ' \u2502 '100.0 %' \u2502 'Number'  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"
                },
                {
                    "lang": "javascript",
                    "value": "snippet uninstall analyze-schema"
                },
                {
                    "lang": "shell",
                    "value": "snippets@ /root/.mongodb/mongosh/snippets\n\u251c\u2500\u2500 mongosh:PRIVATE..DecryptCards@1.0.5\n\u251c\u2500\u2500 mongosh:analyze-schema@1.0.5\n\u2514\u2500\u2500 npm@7.23.0"
                },
                {
                    "lang": "javascript",
                    "value": "snippet refresh\nsnippet search"
                },
                {
                    "lang": "javascript",
                    "value": "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502              name               \u2502 version \u2502                          description                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    0    \u2502     'PRIVATE..DecryptCards'     \u2502 '1.0.5' \u2502                 'Decrypt credit card numbers'                  \u2502\n\u2502    1    \u2502 'PRIVATE..updateAuthentication' \u2502 '1.0.2' \u2502             'Update user pwds and authentication'              \u2502\n\u2502    2    \u2502          'resumetoken'          \u2502 '1.0.2' \u2502                 'Resume token decoder script'                  \u2502\n\u2502    3    \u2502          'mongocompat'          \u2502 '1.0.7' \u2502            'mongo compatibility script for mongosh'            \u2502\n\u2502    4    \u2502         'spawn-mongod'          \u2502 '1.0.1' \u2502                'Spin up a local mongod process'                \u2502\n\u2502    5    \u2502        'mock-collection'        \u2502 '1.0.2' \u2502 'mockCollection([{ a: 1 }, { a: 2 }]).find({ a: { $gt: 2 } })' \u2502\n\u2502    6    \u2502        'analyze-schema'         \u2502 '1.0.5' \u2502                       'schema(db.coll)'                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"
                },
                {
                    "lang": "javascript",
                    "value": "snippet info"
                },
                {
                    "lang": "javascript",
                    "value": "Snippet repository URL:      https://github.com/YOUR_COMPANY/YOUR_REPO_PATH/index.bson.br\n  -->  Homepage:             https://davemungo.github.io/mongosh-snippets/\n\nSnippet repository URL:      https://compass.mongodb.com/mongosh/snippets-index.bson.br\n  -->  Homepage:             https://github.com/mongodb-labs/mongosh-snippets"
                },
                {
                    "lang": "javascript",
                    "value": "snippet help mongocompat"
                },
                {
                    "lang": "javascript",
                    "value": "# mongocompat\n\nProvide `mongo` legacy shell compatibility APIs.\n\n```js\n> Array.sum([1, 2, 3])\n6\n> tojsononeline({a:1,b:2,c:3})\n{  \"a\" : 1,  \"b\" : 2,  \"c\" : 3 }\n```"
                }
            ],
            "preview": "This page is an overview of working with snippets in the\nmongosh console.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/commands",
            "title": "Snippet Commands",
            "headings": [
                "Commands"
            ],
            "paragraphs": "This document provides an overview of the commands that are available\nto work with  snippets . This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. Command Description help Show the help text or information about a specific snippet. See\nan  example . info Show information about configured snippet repositories. See an\n example . install Install a new snippet. See an  example . ls List name and version of installed snippets. See an\n example load-all Load all installed snippets into the current environment. outdated List snippets that have updated registry versions. refresh Clear and refresh the snippet metadata cache. See an\n example . search List available snippets, their version, and a brief description.\nSee an  example . uninstall Remove an installed snippet. See an  example . update Get the latest versions of installed snippets",
            "code": [
                {
                    "lang": "shell",
                    "value": "snippet help\nsnippet help <snippet-name>"
                },
                {
                    "lang": "shell",
                    "value": "snippet info"
                },
                {
                    "lang": "shell",
                    "value": "snippet install <snippet-name>"
                },
                {
                    "lang": "shell",
                    "value": "snippet ls"
                },
                {
                    "lang": "shell",
                    "value": "snippet load-all"
                },
                {
                    "lang": "shell",
                    "value": "snippet outdated"
                },
                {
                    "lang": "shell",
                    "value": "snippet refresh"
                },
                {
                    "lang": "shell",
                    "value": "snippet search"
                },
                {
                    "lang": "shell",
                    "value": "snippet uninstall <snippet-name>"
                },
                {
                    "lang": "shell",
                    "value": "snippet update"
                }
            ],
            "preview": "This document provides an overview of the commands that are available\nto work with snippets.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/reference",
            "title": "Snippets Reference",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/registries-config",
            "title": "Registries and Registry Configuration",
            "headings": [
                "Types of Registry Configuration",
                "Using the MongoDB Registry",
                "Using Private Snippet Registries",
                "Using Multiple Registries",
                "How to Configure a Registry",
                "Define a New Registry",
                "Create A GitHub Repository.",
                "Create An npm Registry.",
                "Update snippetIndexSourceURLs.",
                "Update snippetRegistryURL.",
                "Connecting to Registries"
            ],
            "paragraphs": "This page discusses different registries and how to configure your\nsystem to use them. This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. The snippets feature uses the\n npm package manager  to install\nsnippets from a pre-specified registry. You can configure your local\n mongosh  to use one or more registries: The  community registry \nthat is maintained by MongoDB A private registry that you maintain Multiple registries used together This is a public,  community registry \nthat is maintained by MongoDB. The community registry is the default registry. It provides several\nuseful snippets which can help you to get started. The snippets in the\ncommunity registry are also  good examples \nto use when you are ready to  create your own snippets . MongoDB users are encouraged to contribute to this public registry. To\nlearn how to share your code with other MongoDB users, see\n Contribute a Snippet Package to the MongoDB Community . You can share code internally using a private registry. If your snippets reveal proprietary or sensitive information, you can\nstore them in a private, local registry instead of the public\nregistry. To create a private registry, see  Define a New Registry . A private registry can also be used in conjunction with the\ncommunity registry and other private registries. Using multiple\nregistries allows you to benefit from snippets maintained by MongoDB or\nthird parties while also maintaining control over code you don't want\nto share externally. To configure multiple registries, see  Connecting to Registries . To use a private registry or multiple registries: Define a New Registry . Create a  registry index file . Update  snippetIndexSourceURLs  to contain a link to your registry\nindex file. Update  snippetRegistryURL  to point to your registry host\n(optional). The  npm public registry  hosts the\nMongoDB snippets community registry. You can use npm to host your own\npublic or private registry as well. You will push snippet packages from your GitHub repository to your\nnpm registry. Follow the  GitHub documentation \nto create a repository. Follow the  npm registry documentation  to create a\nregistry. To make the new registry available to your local\n mongosh  installation, update the\n snippetIndexSourceURLs  configuration settings. If you created a registry that is hosted outside npm, update\n snippetRegistryURL  to point to the new registry. You can use a private registry in addition to, or instead of, the\ncommunity MongoDB registry. snippetIndexSourceURLs  ia a list of URLs. Each URL defines a path\nto an index file that contains metadata for the snippets in that\nregistry. Configure an additional registry by adding a URL to\n snippetIndexSourceURLs . Restart  mongosh  for the update to take effect. If two snippets with the same name appear in multiple registries,\nlocal system updates will be based on the entry in the first\nregistry in the  snippetIndexSourceURLs  list. Do not reuse snippet names to avoid potential conflicts.",
            "code": [
                {
                    "lang": null,
                    "value": "config.set('snippetIndexSourceURLs',\n'https://github.com/YOUR_COMPANY/PATH_TO_YOUR_REPOSITORY/index.bson.br;'\n+ config.get('snippetIndexSourceURLs') )"
                },
                {
                    "lang": "shell",
                    "value": "config.set('snippetIndexSourceURLs',\n  'https://github.com/YOUR_COMPANY/PATH_TO_YOUR_REPOSITORY/index.bson.br;'\n  + config.get('snippetIndexSourceURLs')\n)"
                }
            ],
            "preview": "This page discusses different registries and how to configure your\nsystem to use them.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/configuration",
            "title": "Configuration Options",
            "headings": [
                "Configuration Options",
                "Examples",
                "Add a Second Registry",
                "Disable Snippets"
            ],
            "paragraphs": "These options control the interaction between  mongosh \nand the package manager that tracks individual snippet packages. For\nmore details about how a particular snippet works, see the\ndocumentation for that snippet. To modify the snippet configuration settings, use the following method: This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. Update the configuration options using the\n config  command, then restart\n mongosh  for the updates to take effect. Option Type Default Description snippetAutoload boolean true Automatically load installed snippets at startup. snippetIndexSourceURLs list MongoDB Repository Index File A semi-colon ( ; ) separated list of one or more URLs. Each\nURL links to metadata about available snippets. See\n multiple source URLs . To disable snippets, unset this value. See an\n example . snippetRegistryURL string MongoDB npm Registry The npm registry that the  mongosh  npm client\nuses to install snippets Configure a second, private registry for sensitive snippets by adding a\nURL to  snippetIndexSourceURLs . Restart  mongosh  for the update to take effect. The snippets feature requires an index source URL to function. Unset\nthis value then restart  mongosh  to disable snippets. Snippets can also be disabled from outside  mongosh . If\nyou cannot start  mongosh  because of a corrupt snippets\nconfiguration, disable snippets and restart  mongosh .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "config.set('<OPTION>', '<VALUE>')"
                },
                {
                    "lang": "shell",
                    "value": "config.set('snippetIndexSourceURLs',\n  'https://github.com/YOUR_COMPANY/PATH_TO_YOUR_REGISTRY/index.bson.br;'\n  + config.get('snippetIndexSourceURLs')\n)"
                },
                {
                    "lang": "javascript",
                    "value": "config.set('snippetIndexSourceURLs', '')"
                },
                {
                    "lang": "javascript",
                    "value": "mongosh --nodb --eval 'config.set(\"snippetIndexSourceURLs\", \"\")'"
                }
            ],
            "preview": "These options control the interaction between mongosh\nand the package manager that tracks individual snippet packages. For\nmore details about how a particular snippet works, see the\ndocumentation for that snippet.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "write-scripts/considerations",
            "title": "Script Considerations",
            "headings": [
                "Constructors",
                "Generator Functions",
                "Array Sort",
                "JavaScript Setters"
            ],
            "paragraphs": "The results of database queries cannot be passed inside the following\ncontexts: To access to the results of database calls, use  async functions ,\n async generator functions ,\nor  .map() . Class constructor functions Non-async generator functions Callbacks to  .sort()  on an array JavaScript setters in classes The following constructors do not work: Use an  async  function instead: You can also create a method that performs a database operation\ninside a class as an alternative to working with asynchronous\nJavaScript. To use this class, first construct a class instance then call the\n .init()  method. The following generator functions do not work: Use an  async generator function  instead: The following array sort does not work: Use  .map()  instead. This approach to array sort is often more performant than the\nequivalent unsupported code. The following JavaScript setter does not work:",
            "code": [
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nclass FindResults {\n   constructor() {\n      this.value = db.students.find();\n   }\n}\n\n// This code will fail\nfunction listEntries() { return db.students.find(); }\nclass FindResults {\n   constructor() {\n      this.value = listEntries();\n   }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "class FindResults {\n   constructor() {\n      this.value = ( async() => {\n         return db.students.find();\n      } )();\n   }\n}"
                },
                {
                    "lang": null,
                    "value": "class FindResults {\n   constructor() { }\n\n   init() { this.value = db.students.find(); }\n }"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nfunction* FindResults() {\n   yield db.students.findMany();\n}\n\n// This code will fail\nfunction listEntries() { return db.students.findMany(); }\nfunction* findResults() {\n   yield listEntries();\n}"
                },
                {
                    "lang": "javascript",
                    "value": "function listEntries() { return db.students.findMany(); }\nasync function* findResults() {\n   yield listEntries();\n}"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\ndb.getCollectionNames().sort( ( collectionOne, collectionTwo ) => {\n  return db[ collectionOne ].estimatedDocumentCount() - db[ collectionOne ].estimatedDocumentCount() )\n} );"
                },
                {
                    "lang": "javascript",
                    "value": "db.getCollectionNames().map( collectionName => {\n   return { collectionName, size: db[ collectionName ].estimatedDocumentCount() };\n} ).sort( ( collectionOne, collectionTwo ) => {\n   return collectionOne.size - collectionTwo.size;\n} ).map( collection => collection.collectionName);"
                },
                {
                    "lang": "javascript",
                    "value": "// This code will fail\nclass TestClass {\n  value = 1;\n\n  get property() {\n    return this.value;\n  }\n\n  // does not work:\n  set property(value) {\n    this.value = db.test.findOne({ value });\n  }\n}"
                }
            ],
            "preview": "The following constructors do not work:",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "snippets/packages",
            "title": "Create and Share Snippets",
            "headings": [
                "Create a Snippet Package",
                "Prepare the Files",
                "Fork the Community Repository.",
                "Create a Package Directory.",
                "Create README.md.",
                "Create LICENSE.",
                "Create index.js.",
                "Prepare the package.json File",
                "Publish a Snippet",
                "Create a registry index file.",
                "Commit Your Snippet",
                "Publish Changes",
                "Install the New Snippet Package",
                "Refresh Metadata.",
                "Install the Snippet.",
                "Contribute a Snippet Package to the MongoDB Community",
                "Complete the Contributor Agreement.",
                "Clone the Repository.",
                "Create Your Package Directory.",
                "Create Your Package.",
                "Commit your changes.",
                "Submit Your Snippet Code."
            ],
            "paragraphs": "You can  write scripts  to manipulate\ndata or carry out administrative tasks in  mongosh .\nPackaging a script as a snippet provides a way to easily share scripts\nwithin your organization or across the MongoDB user community. This page discusses: For examples of scripts and the metadata files in snippet packages,\nsee the snippets in the  community snippet registry  on GitHub. This feature is experimental. MongoDB does not provide support for\nSnippets. This feature may be changed or removed at any time without\nprior notice. Bugs are not expected, however should you encounter one, please open an\nissue in the\n GitHub repository \nfor this project. Preparing  a snippet package. Publishing  the snippet package to a registry. If you plan to submit your snippet to the  community registry , be sure\nto review the information in  Contribute a Snippet Package to the MongoDB Community . The steps in this section focus on packaging a script. For more details\non writing scripts see  Write Scripts . If you plan to contribute to the community repository, fork the\nsnippets  project repository . You do not have to fork the community repository if you want to\ncreate a private repo, but you should manually recreate a\nsimilar directory structure as you work through the following\nsteps. Create a directory for your snippet package under the  snippets \ndirectory in the forked repository. This directory will\ncontain the code for your script and several metadata files. This example shows directories for two snippet packages,\n decrypt-cards  and  update-auth . The contents of the\n community snippets \ndirectories are omitted for clarity. Create a  README.md . The  README.md  describes how to use your\ncode. This file is displayed when a user enters  snippet help  for\nyour snippet. Create a  LICENSE  file. You will need to enter a license\nidentifier string later, so try to chose a license from the\n SPDX license list . Create an  index.js  file. This file contains the entry point to your code that is exposed in\nthe  mongosh  console. The script is written in JavaScript and defines your new functions. The script can be in a single file or multiple files. The script can call other files and local or remote npm modules.\nTo  require()  a remote npm module use the construction: For an example, see\n index.js \nin the  resumetoken  snippet. index.js  is referenced in  package.json . The MongoDB repository has  example code . If you have an existing script, either rename it  index.js  or\ncreate an  index.js  file to load it. For an example of an\n index.js  file that loads other scripts, see  this one \nin the  community repository . package.json  contains metadata that the package registry uses to\nmanage snippets. A minimal  package.json  file looks like this: The parameters are: Use this code to create a skeleton  package.json  file. Edit the file\nand replace each  UPDATE  to insert the values for your snippet\npackage. There are several examples of  package.json  files in the MongoDB\nGitHub  repository . Field Description \"name\" The npm package that contains the snippet. \"snippetName\" The snippet name. This is the name used with commands like  install . \"version\" The package version. This should be incremented when you update\nyour snippet. \"description\" A brief note about what your snippet does. Caution, if the\ndescription is more than 50 or 60 characters long it may cause\ndisplay problems with some\n snippet commands . \"main\" This is the starting point for your code,  index.js . Note\nthat functions in other files can be scoped so that they are\nalso available in the the  mongosh  shell. \"license\" The license for users of your code. If you want to contribute to\nthe shared registry, the license should be from the\n SPDX license list . See\nalso the\n MongoDB Contributor Agreement . \"publishConfig\" This value is used to control access to your snippet package.\n public  is typical, but npm provides\n other options \nas well. MongoDB uses npm as a package registry. npm relies on the  package.json  file to manage packages. Refer to\nthe  npm package documentation  for\nmore information about  package.json . To share your snippet, you must publish you snippet package to a\nregistry. The package will contain: When the files are complete, follow these steps to create and publish\nyour snippet package. Your code README.md LICENSE  file package.json The registry index file is not the same as the  index.js  file\nthat contains your snippet code. The registry index file,\n index.bson.br , contains metadata for the snippet packages in\nyour registry. The registry index file must be compressed before it is uploaded for\nuse. The  make-index.js \nutility in the scripts directory walks through your snippet source\ndirectories gathering the information that is needed to create the\nregistry index file. After it creates the registry index file,\n make-index.js  script also compresses it. Run  make-index.js \nfrom the  mongo-snippets  directory create the index. The output of this script is a\n brotli-compressed  registry\nindex file,  index.bson.br . You can use  show-index.js \nto view the compressed registry index file. Using  make-index.js  is the preferred way to create a registry\nindex, but you can also  create a registry index manually . Commit your snippet and the registry index file to your GitHub\nrepository. Publish your changes to your npm registry. Follow these steps to install your new snippet package: Refresh the snippet metadata in your local  mongosh . Install the snippet. If you have written a code  snippet  that might be\nuseful for other MongoDB users, you are invited to contribute it to the\n community repository  hosted on GitHub. To submit a snippet to the shared MongoDB repository: MongoDB will review your pull request. If it is accepted, we will: Read and complete the\n MongoDB Contributor Agreement . Fork and clone the\n snippet project repository \nfrom GitHub. Add a new directory for your code under\n snippets/ .\nGive it a descriptive name. Create your snippet package. Be sure it contains the following files: You do not have to create a registry index file. If your snippet\npackage is accepted, MongoDB will update the registry index file. package.json index.js README.md LICENSE Commit your changes to your GitHub repository. Open a pull request against the  snippet project repository . Merge your code into our GitHub repository. Publish it to the npm registry. Add it to the snippet index.",
            "code": [
                {
                    "lang": "shell",
                    "value": "mongo-snippets\n|\n\u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make-index.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 show-index.js\n\u2514\u2500\u2500 snippets\n    \u251c\u2500\u2500 analyze-schema\n    \u251c\u2500\u2500 decrypt-cards\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 LICENSE-Community.txt\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 error-matchers.js\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 index.js\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n    \u251c\u2500\u2500 mock-collection\n    \u251c\u2500\u2500 mongocompat\n    \u251c\u2500\u2500 resumetoken\n    \u251c\u2500\u2500 spawn-mongod\n    \u2514\u2500\u2500 update-auth\n        \u251c\u2500\u2500 LICENSE\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 index.js\n        \u2514\u2500\u2500 package.json"
                },
                {
                    "lang": "javascript",
                    "value": "const localRequire = require('module').createRequire(__filename);)"
                },
                {
                    "lang": "typescript",
                    "value": "{\n    \"name\": \"@mongosh/snippet-resumetoken\",\n    \"snippetName\": \"resumetoken\",\n    \"version\": \"1.0.2\",\n    \"description\": \"Resume token decoder script\",\n    \"main\": \"index.js\",\n    \"license\": \"Apache-2.0\",\n    \"publishConfig\": {\n       \"access\": \"public\"\n    }\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n    \"name\": \"@UPDATE/UPDATE\",\n    \"snippetName\": \"UPDATE\",\n    \"version\": \"UPDATE\",\n    \"description\": \"UPDATE\",\n    \"main\": \"UPDATE\",\n    \"license\": \"UPDATE\",\n    \"publishConfig\": {\n       \"access\": \"UPDATE\"\n    }\n}"
                },
                {
                    "lang": "shell",
                    "value": "node ./scripts/make-index.js"
                },
                {
                    "lang": "shell",
                    "value": "npm publish --access public"
                },
                {
                    "lang": "shell",
                    "value": "snippet refresh"
                },
                {
                    "lang": "shell",
                    "value": "snippet install YOUR_NEW_SNIPPET"
                }
            ],
            "preview": "You can write scripts to manipulate\ndata or carry out administrative tasks in mongosh.\nPackaging a script as a snippet provides a way to easily share scripts\nwithin your organization or across the MongoDB user community.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "write-scripts/require-load-differences",
            "title": "Differences Between require() and load()",
            "headings": [
                "Types of Scripts in mongosh",
                "Availability of require() and load()",
                "File Paths for require() and load()",
                "Load External Code in a mongosh Script",
                "require() Packaging Considerations",
                "Access to the mongosh API"
            ],
            "paragraphs": "The  require()  and  load()  methods include files and modules in\nyour scripts for added functionality. However,  require()  and\n load()  differ in their behaviors and availability. You can use the following types of scripts with  mongosh : mongosh  scripts, which can be any of the following: Code entered directly into the REPL. The  mongoshrc.js  file. Code loaded with the  load()  method. Node.js scripts, which are any scripts loaded with  require() ,\nincluding npm packages. These scripts are always files. The  require()  and  load()  methods differ in availability\ndepending on the type of script you are using. In  mongosh  scripts, both  require()  and  load()  are available. In Node.js scripts, only  require()  is available. The type of script determines how you specify file paths with\n require()  or  load() . In  mongosh  scripts: require()  uses the standard\n Node.js module resolution algorithm , starting from the current\nworking directory of the shell. load()  takes either: An absolute path, or A relative path. When using a relative path, the path is always\ninterpreted as relative to the current working directory of the\nshell. In Node.js scripts,  require()  uses the standard\n Node.js module resolution algorithm , starting from the file\nwhere  require()  was called. To return the current working directory of the shell, run the\n pwd()  method from your script. To change the shell's working directory, use the  cd()  method in your script. You can load external code in a  mongosh  script file, such as an npm\npackage or a separate  mongosh  script. To load a  mongosh  script from another  mongosh  script, use\nthe  __dirname  environment variable. The  __dirname  environment\nvariable returns the absolute path of the directory containing the\nfile being executed. Using the  _dirname  variable to specify an absolute path ensures\nthat the separate script you are loading is not affected by external\nfactors such as where  mongosh  started. To load a  mongosh  script named  test-suite.js  from another\n mongosh  script, add the following line to your script: To load a Node.js script from a  mongosh  script, use the\n require()  method. To load the  date-fns \nmodule from a  mongosh  script called  test-suite2.js , add the\nfollowing lines to your script: There are two packaging standards for Node.js modules. You cannot  require()  an ES module in  mongosh . If you want to use\nfunctionality from an ES module, check to see if there is a CommonJS\nversion that you can use instead. For more information, see: Packaging Standard Works with require() CommonJS  (CJS) Yes ECMAScript Module  (ES Module) No Node.js module documentation Installing older versions of npm packages For example, the  db  global variable (used to display the current\ndatabase) is available inside of  mongosh  scripts. It is not\navailable inside of Node.js scripts. mongosh  scripts can use the  mongosh  API. Node.js scripts do not have access to the  mongosh  API. mongosh  scripts and Node.js scripts run in different  contexts .\nThey may exhibit different behaviors when the same command is run in\neach type of script, such as returning different data types.\nTherefore, you may observe unexpected results if you run  mongosh \ncode inside of a Node.js script. Generally, you should not keep mongosh-specific code inside Node.js\nscripts.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "load(__dirname + '/test-suite.js')"
                },
                {
                    "lang": "javascript",
                    "value": "const localRequire = require('date-fns').createRequire(__filename);\nconst fileExports = localRequire('./test-suite2.js'); }"
                }
            ],
            "preview": "The require() and load() methods include files and modules in\nyour scripts for added functionality. However, require() and\nload() differ in their behaviors and availability.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "write-scripts/scoping",
            "title": "Code Scoping",
            "headings": [
                "Example: Restricting Scope"
            ],
            "paragraphs": "When JavaScript is loaded into  mongosh , top-level\nfunctions and variables defined with  const ,  var , and  let \nare added to the global scope. Consider the following code: The variables,  SNIPPET_VERSION ,  loadedFlag , and  unloaded \nare added to the global scope along with the function,\n isSnippetLoaded() . To avoid collisions with functions and variables defined in other code,\nbe sure to consider scope as you write scripts. As a best practice,\nMongoDB recommends wrapping your code to limit scope. This guards\nagainst accidental scope collisions with similarly named elements in\nthe global scope. One way to keep functions and variables out of global scope is to wrap\nyour code like this: use strict;  is for use in scripts. If you enter  use strict; \nin the  mongosh  console directly,\n mongosh  will switch to a database called  strict . Compare the following code samples. They are very similar, but the\nsecond one is written in a way that restricts variable scope. Sample 1: Unrestricted scope. Sample 2: Restricted scope. In Sample 2, the following elements are all scoped within an anonymous\nfunction and they are all excluded from the global scope: The  globalThis.exposedYearlySales = function yearlySales() \nassignment statement adds  exposedYearlySales  to the global scope. When you, call  exposedYearlySales()  it calls the  yearlySales() \nfunction. The  yearlySales()  function is not directly accessible. The main function,  yearlySales() The helper function,  quarterlySales() The variables",
            "code": [
                {
                    "lang": "javascript",
                    "value": "const SNIPPET_VERSION = \"4.3.2\";\nvar loadedFlag = true;\nlet unloaded = false;\n\nfunction isSnippetLoaded(loadedFlag) {\n   return ( loadedFlag ? \"Snippet is loaded\" : \"Snippet is not loaded\" )\n}"
                },
                {
                    "lang": "javascript",
                    "value": "'use strict';\n(() => {\n   ...\n})()"
                },
                {
                    "lang": "javascript",
                    "value": "let averageGrossSales = [ 10000, 15000, 9000, 22000 ];\n\nconst Q1_DISCOUNT = .10;\nconst Q2_DISCOUNT = .15;\nconst Q3_DISCOUNT = .06;\nconst Q4_DISCOUNT = .23;\n\nfunction quarterlySales(grossAmount, discount ) {\n   return grossAmount * discount ;\n}\n\nfunction yearlySales() {\n   let annualTotal = 0;\n\n   annualTotal += quarterlySales(averageGrossSales[0], Q1_DISCOUNT );\n   annualTotal += quarterlySales(averageGrossSales[1], Q2_DISCOUNT );\n   annualTotal += quarterlySales(averageGrossSales[2], Q3_DISCOUNT );\n   annualTotal += quarterlySales(averageGrossSales[3], Q4_DISCOUNT );\n\n   return annualTotal ;\n}"
                },
                {
                    "lang": "javascript",
                    "value": "(() => {\n\n   let averageGrossSales = [ 10000, 15000, 9000, 22000 ];\n\n   const Q1_DISCOUNT = .10;\n   const Q2_DISCOUNT = .15;\n   const Q3_DISCOUNT = .06;\n   const Q4_DISCOUNT = .23;\n\n   function quarterlySales(grossAmount, discount ) {\n      return grossAmount * discount ;\n   }\n\n   globalThis.exposedYearlySales = function yearlySales() {\n      let annualTotal = 0;\n\n      annualTotal += quarterlySales(averageGrossSales[0], Q1_DISCOUNT );\n      annualTotal += quarterlySales(averageGrossSales[1], Q2_DISCOUNT );\n      annualTotal += quarterlySales(averageGrossSales[2], Q3_DISCOUNT );\n      annualTotal += quarterlySales(averageGrossSales[3], Q4_DISCOUNT );\n\n      return annualTotal ;\n   }\n} )()"
                }
            ],
            "preview": "When JavaScript is loaded into mongosh, top-level\nfunctions and variables defined with const, var, and let\nare added to the global scope.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        },
        {
            "slug": "write-scripts/require-external-modules",
            "title": "Include External Files and Modules in Scripts",
            "headings": [
                "Require a Local File",
                "Require a Built-In Module",
                "Require an npm Module"
            ],
            "paragraphs": "To use files and modules in your  mongosh  interactions, use the\n require() \nfunction. In your  mongosh  scripts, you can require: A complete description of Node.js, modules, and the\n require() \nfunction is out of scope for this tutorial. To learn more, see\nthe  Node.js Documentation . Local files Built-in Node.js modules External (npm) Node.js modules You can use JavaScript files in  mongosh  scripts without any\nadditional setup or configuration. mongosh  does not execute files imported with  require() .\nInstead,  mongosh  adds everything from an imported file to the\ncurrent execution scope. To include a file named  test.js  that is located in the current\nworking directory, use one of the following commands: You can require built-in Node.js modules (such as\n fs ) in  mongosh \nwithout any additional setup or configuration. The following example creates and executes a script that: Connects to a local deployment running on the default port. Populates the  myDatabase.employees  collection with sample data. Uses the  fs  module to write a document from the\n myDatabase.employees  collection to a file named\n employee.json . Create a file named  employee-to-text-file.js  with the\nfollowing contents: To load and execute the  employee-to-text-file.js  file, run the\nfollowing command from  mongosh : To confirm that the data was written to the file, open the\n employee.json  file. You can require Node.js modules (such as those downloaded from\n npm ). To use external modules, you must\ninstall the modules either: Globally In the  node_modules  directory in your current working directory. There are two packaging standards for Node.js modules. You cannot  require()  an ES module in  mongosh . If you want to use\nfunctionality from an ES module, check to see if there is a CommonJS\nversion that you can use instead. For more information, see: Packaging Standard Works with require() CommonJS  (CJS) Yes ECMAScript Module  (ES Module) No Node.js module documentation Installing older versions of npm packages You can require remote npm modules using this construction: For an example, see\n index.js \nin the  resumetoken  snippet. The following example creates and executes a script that: To run this example, you must install the  date-fns  module either\nglobally or in the  node_modules  directory in your\ncurrent working directory. Connects to a local deployment running on the default port. Populates the  myDatabase.cakeSales  collection with sample data. Uses the  date-fns \nmodule to format dates. Create a file named  date-fns-formatting.js  with the following\ncontents: To load and execute the  date-fns-formatting.js  file, run the\nfollowing command from  mongosh : mongosh  outputs something like the following: Your output may vary depending on the date that you run the example.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "require('./tests.js')"
                },
                {
                    "lang": "javascript",
                    "value": "var tests = require('./tests.js')"
                },
                {
                    "lang": "javascript",
                    "value": "const fs = require('fs');\n\ndb = connect('mongodb://localhost/myDatabase');\n\ndb.employees.insertMany( [\n   { \"name\": \"Alice\", \"department\": \"engineering\" },\n   { \"name\": \"Bob\", \"department\": \"sales\" },\n   { \"name\": \"Carol\", \"department\": \"finance\" }\n] )\n\nconst document = db.employees.findOne();\n\nfs.writeFileSync('employee.json', JSON.stringify(document));"
                },
                {
                    "lang": "javascript",
                    "value": "load(\"employee-to-text-file.js\")"
                },
                {
                    "lang": "javascript",
                    "value": "const localRequire = require('module').createRequire(__filename);)"
                },
                {
                    "lang": "javascript",
                    "value": "const formatDistance = require('date-fns/formatDistance')\n\ndb = connect('mongodb://localhost/myDatabase');\n\ndb.cakeSales.insertMany( [\n   { _id: 0, type: \"chocolate\", orderDate: new Date(\"2020-05-18T14:10:30Z\"),\n   state: \"CA\", price: 13, quantity: 120 },\n   { _id: 1, type: \"chocolate\", orderDate: new Date(\"2021-03-20T11:30:05Z\"),\n   state: \"WA\", price: 14, quantity: 140 },\n   { _id: 2, type: \"vanilla\", orderDate: new Date(\"2021-01-11T06:31:15Z\"),\n   state: \"CA\", price: 12, quantity: 145 },\n   { _id: 3, type: \"vanilla\", orderDate: new Date(\"2020-02-08T13:13:23Z\"),\n   state: \"WA\", price: 13, quantity: 104 },\n   { _id: 4, type: \"strawberry\", orderDate: new Date(\"2019-05-18T16:09:01Z\"),\n   state: \"CA\", price: 41, quantity: 162 },\n   { _id: 5, type: \"strawberry\", orderDate: new Date(\"2019-01-08T06:12:03Z\"),\n   state: \"WA\", price: 43, quantity: 134 }\n] )\n\nconst saleDate0 = db.cakeSales.findOne( { _id: 0 } ).orderDate\nconst saleDate1 = db.cakeSales.findOne( { _id: 1 } ).orderDate\n\nconst saleDateDistance0 = formatDistance(saleDate0, new Date(), { addSuffix: true })\nconst saleDateDistance1 = formatDistance(saleDate1, new Date(), { addSuffix: true })\n\nprint(\"{ _id: 0 } orderDate was \" + saleDateDistance0)\nprint(\"{ _id: 1 } orderDate was \" + saleDateDistance1)"
                },
                {
                    "lang": "javascript",
                    "value": "load(\"date-fns-formatting.js\")"
                },
                {
                    "lang": "none",
                    "value": "{ _id: 0 } orderDate was over 1 year ago\n{ _id: 1 } orderDate was 7 months ago"
                }
            ],
            "preview": "To use files and modules in your mongosh interactions, use the\nrequire()\nfunction.",
            "tags": null,
            "facets": {
                "genre": [
                    "reference"
                ],
                "target_product": [
                    "mongodb-shell"
                ],
                "programming_language": [
                    "shell"
                ]
            }
        }
    ]
}