{
    "url": "http://mongodb.com/docs/charts",
    "includeInGlobalSearch": true,
    "documents": [
        {
            "slug": "apply-suggested-charts",
            "title": "Apply a Suggested Chart",
            "headings": [
                "Overview",
                "Procedure",
                "Log in to Atlas Charts and navigate to your dashboard.",
                "Click one of the following buttons to apply a suggested chart.",
                "View suggested charts.",
                "Apply a suggested chart."
            ],
            "paragraphs": "Atlas Charts  displays up to six prebuilt charts based on the data\nsource that you selected. You can use any one of the suggested charts\nwhen you create a new chart or when you modify an existing chart. After\napplying a suggested chart, you can make changes to the chart type and\nadd or remove fields if you wish to customize the prebuilt chart. To learn more, see  Dashboards . Add Chart  to create a new chart based on a suggested\nchart. Edit  button for the chart you wish to replace with a\nsuggested chart. If you are creating a new chart, MongoDB suggests prebuilt charts\nin the page. If you wish to replace the current chart with a\ndifferent prebuilt chart, click the  Suggestions  button\nnext to the ellipses ( ... ) to view all suggested prebuilt\ncharts for the data source. Click the  Apply  button associated with a suggested\nchart to replace the current chart with the suggested prebuilt\nchart. After applying a suggested chart, you can make changes to the\nchart type and add or remove fields if you wish to customize the\nprebuilt chart.",
            "code": [],
            "preview": "Atlas Charts displays up to six prebuilt charts based on the data\nsource that you selected. You can use any one of the suggested charts\nwhen you create a new chart or when you modify an existing chart. After\napplying a suggested chart, you can make changes to the chart type and\nadd or remove fields if you wish to customize the prebuilt chart.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "manage-embedded-items",
            "title": "Manage Embedded Items",
            "headings": [
                "View Embedded Items",
                "Go to the Items view.",
                "(Optional) Filter the list of embedded items.",
                "Modify an Embedded Item",
                "Go to the Items view.",
                "Go to the embedding settings.",
                "Modify the embedded item."
            ],
            "paragraphs": "You can view, filter, and modify  embedded charts  and  embedded dashboards  in the  Items  view. The\n Items  view includes a list of all the embedded items that\nyou created or that someone shared with you. Each embedded item appears\nalong with its  Emdedding ID  and details about whether the\nitem has authetication enabled at the dashboard or charts level.\nOptions to filter the list appear at the top of the view. You can click\nthe name of a dashboard to go to the associated dashboard page. You must be a dashboard  Author  to: If you added a  sample dashboard , it\ndoesn't appear in this list of embedded items. View the dashboard list. View the  Emdedding ID . Modify an embedded item. If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Items  tab. Do one or all of the following steps: Enter a dashboard or chart name. Toggle  Dashboards only . If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Items  tab. Click  Settings  next to the embedded item that you\nwant to modify. Modify the  embedded chart options  or the\n embedded dashboard options \nas desired. Click  Close .",
            "code": [],
            "preview": "You can view, filter, and modify embedded charts and embedded dashboards in the Items view. The\nItems view includes a list of all the embedded items that\nyou created or that someone shared with you. Each embedded item appears\nalong with its Emdedding ID and details about whether the\nitem has authetication enabled at the dashboard or charts level.\nOptions to filter the list appear at the top of the view. You can click\nthe name of a dashboard to go to the associated dashboard page.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "convert-field-data-types",
            "title": "Convert Field Data Types",
            "headings": [
                "Requirements & Limitations",
                "Convert a Field's Data Type",
                "Convert Data Types in an Array",
                "Revert a Field's Data Type Conversion"
            ],
            "paragraphs": "You can convert the data type of the fields returned from your data\nsource in the Chart Builder to a different data type. For example, you\ncan convert numbers stored as strings to numbers, convert dates stored\nas strings or Unix timestamps to dates, or treat ObjectId fields as\ndates. Your deployment must use MongoDB 4.0 or later. You cannot convert GeoJSON fields. You cannot convert arrays nested more than one level deep. To convert a field's data type, click on that field and select\n Convert type  from the  Ellipsis (...)  menu. Atlas Charts  supports converting data into the following types: Data types are converted by an\n aggregation pipeline .\nFor each type conversion you select, you can find the underlying\naggregation stage by\n viewing your aggregation pipeline . To see the effects of your conversion on a sample document,\n view a sample source document . Your conversions are saved with your chart definition. Label BSON Type String String Date Date Number Double Boolean Bool You can convert arrays of primitive data and fields of primitive data\nfrom arrays of documents. Each item in the array is converted to the\nnew type. However, if the conversion is invalid or if the original\nvalue of the item is  null , the item converts to  null . You\ncannot convert arrays nested more than one level deep. You have an array of strings: Applying the  Number  data type conversion returns the\nfollowing array: You have an array of documents with fields  foo  and  bar : Applying the  Number  data type conversion to the  foo \nfield returns the following array of documents: A converted field's icon reflects the new data type and turns green.\nTo remove a conversion and return the field to its original data type,\nselect  Auto Detect  from the  Ellipses (...) \n   Convert Type  menu.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "[\"1\", \"fish\", \"42\"]"
                },
                {
                    "lang": "javascript",
                    "value": "[1, null, 45]"
                },
                {
                    "lang": "javascript",
                    "value": "[{foo: \"1\", bar: \"2\"}, {foo: \"fish\", bar: \"tacos\"}, {foo: \"45\",\nbar: \"46\"}]"
                },
                {
                    "lang": "javascript",
                    "value": "[{foo: 1, bar: \"2\"}, {foo: null, bar: \"tacos\"}, {foo: 45, bar:\n\"46\"}]"
                }
            ],
            "preview": "You can convert the data type of the fields returned from your data\nsource in the Chart Builder to a different data type. For example, you\ncan convert numbers stored as strings to numbers, convert dates stored\nas strings or Unix timestamps to dates, or treat ObjectId fields as\ndates.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "charts-embedding-sdk",
            "title": "Embed Charts with the Embedding SDK",
            "headings": [],
            "paragraphs": "You can embed a chart into a web application with the  Embedding\nSDK , which allows you to make more flexible\nadjustments to chart settings and rendering. You can use the embedding SDK to do the following tasks: To embed a chart with the SDK, you need to: To learn more, see  Get Started with the Embedding SDK . Add filters dynamically Change the size, style, and axes of the chart Change the legend position and legend angle Change the chart elements, table options and general customization options Refresh on demand Save a chart as an image View chart channels Override the number formatting options Retrieve the values of your options prior to an override Enable embedding for the chart. Allow  embedded chart filtering  on\ncertain fields by  specifying filterable fields . Don't include fields that may reveal\nsensitive data. Have the chart ID and base URL strings.",
            "code": [],
            "preview": "You can embed a chart into a web application with the Embedding\nSDK, which allows you to make more flexible\nadjustments to chart settings and rendering.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "filter-embedded-charts",
            "title": "Filter Embedded Charts",
            "headings": [
                "Specify Filterable Fields",
                "Filters for Embedded Documents",
                "Filter Data on Charts Embedded in an iframe",
                "Filter Syntax",
                "Example",
                "Example",
                "Filter Data on Charts Embedded with the SDK",
                "Inject User-Specific Filters"
            ],
            "paragraphs": "You can customize your embedded charts by appending various\nquery parameters to their iframe URLs or using the  filter  option\nwith the  Charts  Embedding SDK. To embed charts from your dashboards, you must configure embedding\noptions on your data sources. For instructions, see: You can filter embedded charts and charts on\n embedded dashboards . Embed Charts in Your Web Application A chart  Author  specifies the fields that can be\nincluded in filters set by the embedding application code or added by\nchart viewers. A chart author can limit access to data by allowing only\ncertain fields to be filtered. By default, no fields are allowed,\nmeaning the chart cannot be filtered until you explicitly allow at\nleast one field. To define filterable fields: Chart  viewers  and applications which render\nthe chart can now use filters based on the specified fields to\ndisplay subsets of the original chart data. If a viewer attempts to\nuse a filter for a field not included in the  Allowed filter fields  list,  Atlas Charts  returns an  error . Navigate to the  dashboard  that contains the chart\nwhere you wish to define filterable fields. For the desired chart, click the   button and\nselect  Embed Chart  from the dropdown. In the  Allowed filter fields  section, use the\ndropdown to select which fields chart viewers can use filter data\nin the chart. You can also manually type values to add fields not\nlisted in the dropdown. You can specify on which fields chart viewers can filter data by: This option only appears if you already have  Unauthenticated \nor  Authenticated  embedding access enabled. Using the dropdown to select the fields Manually typing values to add fields not listed in the dropdown Selecting  Allow all fields in the data source used in\nthis chart When you have selected all desired fields, click  Save \nbelow the dropdown. When you add a field to the  Allowed filter fields  list\nwhose value is an embedded document, you must also specify each\nindividual sub-field you want to allow. Consider the following document: If you only add the  favorites  field to the list of allowed fields, it does\n not  grant viewers permission to filter upon any of the sub-fields\nof  favorites . Instead, you may add one or more of the sub-fields\nto the list individually by specifying  favorites.color ,\n favorites.animal , or  favorites.season . Use the  filter  query parameter to only display data that matches a\nspecified  MQL (MongoDB Query Language)  filter in your\nchart embedded in an iframe. You can use the  filter  query parameter on both\n Unauthenticated \nand  Verified Signature  charts. The filtering\nbehavior differs with each authentication setting: With unauthenticated charts, the chart\n Author  specifies the fields that can be\nincluded in filters set by the embedding application code or added by\nchart viewers. To learn how to specify filterable fields, see\n Specify Filterable Fields . With charts which require a Verified Signature, all document\nfields can be filtered upon, however you must generate\nthe filter in the server-side code and include the filter as part of\nyour signed payload. Select the appropriate tab to see an example of how to filter data in\nan  Unauthenticated  chart and a\n Verified Signature  chart: You can specify an MQL document as your  filter  query\nparameter provided that the fields used in your filter are in\nthe  list of allowed filterable fields . Your filter must match the format used in a\n $match  query and\nbe either a: Top level query Or within boolean expressions (\n $and ,\n $nor ,\n $or ) You must URL-encode special characters of the filter\nparameter. The following iframe  src  URL renders a chart which only\ndisplays documents with an  imdb.rating  greater than or\nequal to  8 : The URL uses an encoded  filter  parameter of\n {\"imdb.rating\":%20{$gte:%208}} . Decoded,\nthis filter is: Specify an MQL document as your  filter  query parameter. When using filters in a Verified Signature, MQL queries contain\ncharacters that must be URL-encoded before your server-side\ncode calculates the signature. When  Charts  verifies the\nsignature, it URL-encodes the filter again using the JavaScript\n encodeURIComponent \nfunction. You must use the same encoding algorithm to encode\nyour filter. To see how correctly encode an MQL filter using different server-side\nprogramming languages, see  Atlas Charts Embedding Examples  on GitHub. Your filter must match the format used in a\n $match  query as\nshown in the following examples: You must encode spaces in your filter as  %20 , rather than  + \nor a raw space. The following iframe  src  URL renders a chart which only\ndisplays documents with an  imdb.rating  greater than or\nequal to  8 : The URL uses an encoded  filter  parameter of\n %7B%22imdb.rating%22%3A%20%7B%24gte%3A%208%7D%7D . Decoded,\nthis filter is: You can add a  filter  to an embedded chart\nwith the  filter  option. Filtering allows the chart author to only display\ndata in the embedded chart which matches a specified  MQL (MongoDB\nQuery Language)  filter. In the  Embed Chart  modal, you must specify any fields\nincluded in the filter. The  Embed Chart  modal contains a\ndropdown menu of fields on which to allow filtering. The following uses the  filter  option to represent only documents in\nwhich the  total  field is greater than  100 : When you embed a chart that requires  Authenticated  access,\nyou can use the  Injected function  setting to inject a\nMongoDB filter document specific to each user who views\nthe chart. The function has access to your Embedding Authentication\nProvider's token via  context.token , and can filter the chart data\nbased on the token. This filter ensures that viewers of an embedded chart see only their\nown data, which is useful when embedding charts with potentially\nsensitive information. To inject a filter specific to each user, in the\n Authenticated  tab of the  Embed Chart \ndialog, set the  Injected function \nsetting to  On . Specify a function and click\n Save . If you use an Atlas App Services authentication provider,  context.token \ncontains the App Services\n user object  to\nfilter. For example, if you enable\n Custom User Data \nfor App Services users, the user object is available in\n context.token.custom_data . The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field:",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n  \"name\": \"Alice\",\n  \"favorites\" :\n  {\n    \"color\": \"green\",\n    \"animal\": \"turtle\",\n    \"season\": \"autumn\"\n  }\n}"
                },
                {
                    "lang": "json",
                    "value": "{ \"quantity\": { $gte: 20 } }"
                },
                {
                    "lang": "json",
                    "value": "{ $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] }"
                },
                {
                    "lang": "none",
                    "value": "https://charts.mongodb.com/charts-atlasproject1-piocy/embed/charts?\nid=93584ddb-1115-4a12-afd9-5129e47bbb0d&\nfilter={\"imdb.rating\":%20{$gte:%208}}&\nautoRefresh=60"
                },
                {
                    "lang": "json",
                    "value": "{\"imdb.rating\": {$gte: 8}}"
                },
                {
                    "lang": "json",
                    "value": "{ \"quantity\": { $gte: 20 } }"
                },
                {
                    "lang": "json",
                    "value": "{ $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] }"
                },
                {
                    "lang": "none",
                    "value": "https://charts.mongodb.com/charts-atlasproject1-piocy/embed/charts?\nid=93584ddb-1115-4a12-afd9-5129e47bbb0d&\ntimestamp=1564156636&\nexpires-in=300&\nfilter=%7B%22imdb.rating%22%3A%20%7B%24gte%3A%208%7D%7D&\nautoRefresh=60&\nsignature=8e0d92b33934c928f6c6974e2f0102ace77f56d851cb0d33893e84c359ab1043"
                },
                {
                    "lang": "json",
                    "value": "{\"imdb.rating\": {$gte: 8}}"
                },
                {
                    "lang": "javascript",
                    "value": "createChart({\n  baseUrl: '<your-base-url>',\n  chartId: '<your-chart-id>',\n  width: 500,\n  height: 500,\n  filter: { \"total\": { \"$gt\": 100 } }\n})"
                },
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                }
            ],
            "preview": "You can customize your embedded charts by appending various\nquery parameters to their iframe URLs or using the filter option\nwith the Charts Embedding SDK.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-types",
            "title": "Chart Types",
            "headings": [
                "Column and Bar Charts",
                "Line and Area Charts",
                "Combo Charts",
                "Grid Charts",
                "Heatmaps",
                "Scatter Charts",
                "Circular Charts",
                "Donut Charts",
                "Gauge Charts",
                "Text Charts",
                "Tables",
                "Number Charts",
                "Word Clouds",
                "Top Item Charts",
                "Geospatial Charts",
                "Maximum Document Limit"
            ],
            "paragraphs": "Column and Bar Charts  provide high-level\noverviews of data trends by comparing values within a specific category. Line and Area Charts  display information\nas a series of data points connected by straight line segments. Combo Charts  offer a combined column and line\nview. Heatmaps  represent aggregated data in a\ntabular format as a range of colors. Scatter Charts  plot data with individual\ndata points placed along the X and Y axes. Donut Charts  display data in a series of\nsegments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the sum of all data values, and each segment\nindicates the proportion of each category in the data to the total. Gauge Charts  display data as a percentage of a\nsemicircle, with customizable minimum and maximum values. Optionally\nyou may also specify a Target value, which renders as a heavy line\nwithin the gauge's range. Tables  represent data in a tabular view,\nsimilar to a  spreadsheet . Number Charts  display a single aggregated\nvalue from a data field. Word Clouds  visually represent text data,\nhighlighting prevalent keywords and phrases. Top Item Charts  display information from the\ndocument with the greatest or smallest value for a specified field. Geospatial Charts  combine geospatial data with\nother forms of data to create map-based charts. The maximum number of documents a chart displays data from differs\nbased on the chart type. The limit is enforced on the server using a\n $limit  stage at the end of the pipeline. Once this maximum limit is reached, there is no way to determine which\ndocuments from the total data set comprise the chart data. A warning\nmessage is displayed that specifies the query response limit for that\nparticular chart type.",
            "code": [],
            "preview": "Column and Bar Charts provide high-level\noverviews of data trends by comparing values within a specific category.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "view-export-chart-data",
            "title": "View and Export Chart Data",
            "headings": [
                "View Sample Documents",
                "View Aggregation Pipeline",
                "View Chart Data"
            ],
            "paragraphs": "While editing a chart in the Chart Builder, you can view underlying\ndata from the  Ellipses (...)  dropdown menu. Access to\nunderlying data is intended to help you build meaningful charts as well\nas export that data for use with third-party tools. Once you have selected a  data source  for your\nchart, you can view up to 20 sample documents from that data source by\nclicking  View sample documents  from the\n  menu. The sample documents are intended for reference to help you build a\nchart. The documents do not reflect any groupings or projections\napplied to an existing chart (i.e. any  Encode  panel options\nin the Chart Builder). The documents are produced with a query on your\ndata source that considers: The  Source Documents  modal displays the number of documents\nfrom your data source that match your query conditions, although only\n20 of the documents are viewable as samples. If you want to explore your data source beyond 20 sample documents,\nyou can use  Compass  or the\n Atlas Data Explorer . Pipelines applied to the data source Queries  or\n pipelines specified in the Chart Builder Filters applied in the  Filter Tab After you have configured a valid chart, you can view the source query\nfor the chart.  Atlas Charts  uses a special type of query to create a\nchart called an\n aggregation pipeline . To view\nthe query, click  View Aggregation Pipeline  from the\n  menu. This aggregation pipeline includes the\nstages that both the data source and the Chart Builder apply. To use the pipeline in other MongoDB tools, such as\n Compass  or the  mongo shell , click\n  next to the pipeline in the\n Aggregation Pipeline  modal. To learn how Charts constructs aggregation pipelines,\nsee  Backing Aggregation Pipeline . Some Chart Builder  configuration options \ndon't apply aggregation stages. These options are applied to a\nchart's visualization and do not affect the underlying data. After you have configured a valid chart, you can view and export the\nunderlying data as a table. To view the chart data, click\n View chart data  from the   menu. Each\nrow in the table represents a data point. If you want to analyze your underlying data with a third-party tool,\nyou can download your data from the  Chart Data  modal. To\ndownload your data, click  Download - CSV  or\n Download - JSON . Some configuration options you see reflected on a chart\nvisualization are not applied to the table. The\n Chart Data  table displays underlying data retrieved\nwith your full aggregation pipeline, and not all Chart Builder\nconfiguration options apply aggregation stages. Review your data to\nverify its contents. You can also retrieve chart data using the\n Embedding SDK \n getData()  method. To learn more about SDK API methods, see the\n Embedding SDK Reference .",
            "code": [],
            "preview": "While editing a chart in the Chart Builder, you can view underlying\ndata from the Ellipses (...) dropdown menu. Access to\nunderlying data is intended to help you build meaningful charts as well\nas export that data for use with third-party tools.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embed-chart-google-auth",
            "title": "Embed a Chart Authenticated with Google Sign-In",
            "headings": [
                "Prerequisites",
                "Procedures",
                "Enable Authenticated Embedding for your Chart",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source",
                "Select the Authenticated tab in the dialog window.",
                "Toggle Enable authenticated access to On.",
                "(Optional) Specify a filter function to inject per user.",
                "(Optional) Specify filterable fields for your chart.",
                "Copy the Chart Base URL and Chart ID",
                "Create a Google Client ID",
                "Configure Charts to use Google Sign-In",
                "Go to the Authentication Settings view.",
                "From the Authentication providers section, click Add.",
                "In the Name field, enter a descriptive name for the provider.",
                "From the Provider list, select Google.",
                "In the Google Client Id field, enter the Google Client ID you created.",
                "Click Save.",
                "Create a Web App to Display Your Chart",
                "Customize the Node.js App",
                "Open the file index.html in a text editor.",
                "Enter your Google Client ID",
                "Enter your Charts Base URL",
                "Enter your chart ID"
            ],
            "paragraphs": "This tutorial shows you how to configure a sample application to render\nan embedded, Google-authenticated chart on a web page. Users must sign in with their Google account to view the chart. If a\nuser doesn't sign in with Google,  Charts  doesn't render the\nauthenticated chart view. You must be an  Atlas \n Project Owner  to\nconfigure embedding authentication providers for your linked\n Charts  instance. Create a New Dashboard Create a Chart Enable authenticated embedding to generate a  Charts  Base URL and\na chart ID. You will need your  Charts  Base URL and chart ID to\ndisplay your chart on a web page. From your dashboard page, select the dashboard containing the chart\nyou wish to embed. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. You can specify a function to inject a MongoDB filter document for\neach user who views the chart. This is useful for rendering\nuser-specific charts. The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field: To learn more about injecting filters per user, see\n Inject User-Specific Filters . Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. To learn more about filterable fields, see\n Specify Filterable Fields . Use these values in your application code together with your\nEmbedded Authentication Provider attributes to embed your chart. Create a Google API Console project to generate a Google Client ID.\nYou will need your Google Client ID to configure  Charts  to use\nGoogle Sign-In. To create a Google API Console project,\nsee  Integrating Google Sign-In into your web app . If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. MongoDB offers a pre-built example app that shows how to use the\nEmbedding SDK to display an embedded chart using Google authentication. To run the example app, clone the\n Atlas Charts Embedding Example - Google Authentication \nrepository from GitHub and follow the instructions in the  Readme \nfile to begin using the app. You can run the app as-is with a sample\nchart, or you can customize it to use an existing chart. All the lines you need to edit are marked with a comment containing\n ~REPLACE~ . After you finish customizing the app, it's ready to run. The file  index.html  is located in the root directory of the\n authenticated-google  project. Replace the existing Google Client ID with your Google Client ID. Your Google Client ID is visible after creating a Google API Console\nproject. See  Create a Google Client ID  for instructions on creating a\nGoogle Client ID. Replace the existing  baseUrl  with the Base URL of the\nchart you want to display. Your  Charts  Base URL is visible in the embedding options\nmodal window. See  Embedding SDK  for detailed\ninstructions on enabling embedding for a chart. Replace the existing  chartId  with the ID of the chart you want to\ndisplay. Your chart ID is visible in the embedding options modal window. See\n Embedding SDK  for detailed instructions on enabling\nembedding for a chart.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                },
                {
                    "lang": "html",
                    "value": "<!-- Optional: ~REPLACE~ content with your Google Client ID -->\n<meta\n  name=\"google-signin-client_id\"\n  content=\"012345678910-ifpoccch8js9srh9obfdn683h1iss2ag.apps.googleusercontent.com\"\n/>"
                },
                {
                    "lang": "javascript",
                    "value": "const sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://charts-dev.mongodb.com/charts-exampleproject-fjotk\", // Optional: ~REPLACE~ with your Charts URL\n  getUserToken: () => id_token\n});"
                },
                {
                    "lang": "javascript",
                    "value": "const chart = sdk.createChart({\n  chartId: \"example-acaf-4af0-8320-5099bfebd1bd\", // Optional: ~REPLACE~ with your Chart ID\n});"
                }
            ],
            "preview": "This tutorial shows you how to configure a sample application to render\nan embedded, Google-authenticated chart on a web page.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "multi-series-charts",
            "title": "Create a Multi-Series Chart",
            "headings": [
                "Map Multiple Fields to a Single Axis",
                "Use a Secondary Y Axis",
                "Series Field",
                "count by value Aggregation Option"
            ],
            "paragraphs": "Atlas Charts  supports building  multi-series  charts, which split your\nchart data into groups, or  series , to compare additional\nfields within your schema. There are two ways to create multi-series\ncharts: Map Multiple Fields to a Single Axis . Use this method to compare or aggregate\nupon multiple non-categorical fields in the schema. Using the Series field in the chart builder . Use this method when grouping data based\non a discrete list of items. Atlas Charts  allows you to map multiple  Aggregation  or  Value  fields to a single\nchart property (such as the  X Axis  or  Y Axis ).\nThis allows you to compare additional fields by creating new series\nbased on the encoding channels added. After dragging a field to an  aggregation \nor  value   encoding channel , an\nadditional optional encoding channel of the same type appears below the\none which was just added, allowing you to add additional series to your\nvisualization. This process repeats with each channel you add, so\nyou can map as many fields as desired to your chart. The following multi-series column chart shows average movie ratings\nby genre from two different sources:  IMDB \nand  Rotten Tomatoes : There are two  aggregation  encoding channels on\nthe chart's  Y Axis , one for each of the site's rating\nfields. By selecting the  mean  aggregation option, the\nchart aggregates these two fields using the\n $avg  operator to\nprovide a comparison of the average of two fields in the same\ncolumn. Use multiple field mappings to create a multi-series chart when\nthe values being compared in the visualization come from two or more\nseparate fields in the schema. In the example above, there is one series for Rotten Tomato ratings\nand one series for IMDB ratings. Since these are separate fields\nwithin the schema, adding multiple  aggregation  encoding\nchannels to map the data is the best choice to compare the fields. If you omit the  Category  field, you can create\na single-series chart based on your selected aggregated fields.\nTo learn more, see  Create a Single-Series Chart with Multiple Aggregations . If you map multiple  Aggregation  or  Value  fields\nto the  Y axis , you can plot one set of values on a  secondary\nY axis . You can also create multi-series charts by using the  Series \nfield in the chart builder. The  Series  field differs from\n aggregation   encoding channels \nbecause it instead utilizes a  Category \n encoding channel  instead of a\n Value  or  Aggregation  channel. When creating a\nseries using the  Category  encoding channel, each unique\nvalue from the data field becomes a series in the visualization. The following multi-series column chart shows order data from an\noffice supply store, showing the most common items sold by\nstore location: By using the  item.name  in the  Series  encoding\nchannel, a series within each location group is added for each\nitem name. The  Series  field is useful when you are grouping data\nbased on a discrete list of items. This approach should be used when\nthe values for all series are stored in a single field, with a\nseparate field used to establish the discrete categories. When you drag a field onto an  aggregation channel , you can select the  count by\nvalue  option to create a multi-series chart based on the values contained\nin the field. A series is automatically created for each unique value from\nthe field, with the chart value representing the number of occurrences. Your chart can display multiple  count by value  fields with\nadditional aggregations, as long as there is no field mapped to the\ncategory axis. You can also create a multi-series chart with a  count by\nvalue  aggregation channel and a category axis channel. If any field in the  X  or  Y  axis channel has the\n count by value  aggregation selected, the  Series \nchannel is disabled, and any field previously mapped to that channel is\nremoved. The following multi-series bar chart uses the  sample_airbnb \ndatabase. It groups listings by the number of beds and the number of\nbedrooms they have, showing the total number of listings for each\nvalue. The following multi-series stacked column chart uses the  sample_airbnb \ndatabase. It shows all the different suburbs of Turkey with the number of\neach distinct type of property located there. The  address.suburb  field populates the  X axis , while\nthe stacked columns represent all the different property types and the\ntotal number of each.",
            "code": [],
            "preview": "Atlas Charts supports building multi-series charts, which split your\nchart data into groups, or series, to compare additional\nfields within your schema. There are two ways to create multi-series\ncharts:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "subset-mode",
            "title": "Subset Mode",
            "headings": [
                "Use Case"
            ],
            "paragraphs": "You can enable subset mode in  Atlas Charts  to restrict the input\ncollection to  1000  randomly selected documents. To enable subset\nmode, use the  Subset  toggle in the  Preview \nsection. The  Subset  toggle for a chart doesn't persist when\nthe chart renders on a dashboard. So, if you enable subset mode when\nyou build a chart, the data that renders in the dashboard isn't sampled. When you enable subset mode and you specify a  filter ,  Atlas Charts  takes the sample of  1000 \ndocuments  before  it applies the filter. So,  Atlas Charts  might use\nfewer than  1000  documents to plot the chart. Consider using subset mode when you draft a chart and heavily modify\nchart options. In this situation, subset mode lets the chart render\nquickly during the building process. When you feel satisfied with your\nchart, save it as soon as possible. Due to the random nature of sampling, when you have subset mode\nenabled, your visualizations might change each time the chart loads\nin the chart builder.",
            "code": [],
            "preview": "You can enable subset mode in Atlas Charts to restrict the input\ncollection to 1000 randomly selected documents. To enable subset\nmode, use the Subset toggle in the Preview\nsection. The Subset toggle for a chart doesn't persist when\nthe chart renders on a dashboard. So, if you enable subset mode when\nyou build a chart, the data that renders in the dashboard isn't sampled.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "title-description",
            "title": "Title and Description",
            "headings": [],
            "paragraphs": "You can give a chart a title and/or a description at any time when the\nchart is open for editing. The title and description appear above the\nchart wherever the chart is rendered. To create a title for a chart: To create a description for a chart: Descriptions are limited to a single line of text. If the text exceeds\nthe space available on one line, it is truncated. Both title and description are blank by default. If you don't create a\ntitle or description for a chart, the chart expands to occupy the space\na title or description would otherwise occupy. Click  Enter a title  above the chart. Enter your desired title. Click the check mark below the text box to save your title. Click  Enter a description  above the chart. Enter your desired text. Select one or more words to format the\nhighlighted text. Formatting options include: Bold Italic Hyperlink Click the check mark below the text box to save your description.",
            "code": [],
            "preview": "You can give a chart a title and/or a description at any time when the\nchart is open for editing. The title and description appear above the\nchart wherever the chart is rendered.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "reshape-data",
            "title": "Reshape Your Data",
            "headings": [],
            "paragraphs": "Refer to the following pages for ways to reshape your original\ndata into a form that works best for your charts: Combine data from one or more fields in your collection into\na single calculated field. Convert the data type of the fields in your collection to a different\ntype. For example, convert numbers stored as strings to the number\ndata type. Use  $lookup  functionality\nto add a field based on a query across multiple data sources. Transform your collection's documents with an aggregation\npipeline. Save and reuse your aggregation pipeline queries.",
            "code": [],
            "preview": "Refer to the following pages for ways to reshape your original\ndata into a form that works best for your charts:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "pricing",
            "title": "Charts on Atlas Pricing",
            "headings": [
                "Overview",
                "Sample Pricing Scenarios"
            ],
            "paragraphs": "Atlas Charts  is metered based on the volume of data\ntransferred from the  Charts  web server to web browser clients.\nMongoDB provides each  Charts  instance with a free  1 GB  of\ndata transfers per month. You can view your  Charts  instance's\nmonthly data usage in the  Data Transfer  page.\nTo visualize your  Charts  usage, you can create a\n Billing Dashboard . The free usage tier provides approximately 500,000 chart\nrenders over a month. However, this number may vary based on the types\nof charts being rendered. A number chart or a bar chart with few bars\ntypically consumes less data, while a scatter chart with many\ndata points or a large table could consume more. Once the  1 GB  of free data usage has been consumed, MongoDB bills\nCharts data transfers at a fixed rate of  $1.00 per GB . In addition, any applicable  Atlas  data transfer fees apply, as per\nthe  Data Transfer Fees  section of the\n Atlas Pricing  page.\n Charts  is hosted on  AWS (Amazon Web Services)   us-east-1  region, and\nuses this region to calculate the fees. The following examples show the expected monthly charge for different\nusage scenarios. Consider: A  Charts  instance with 5 users, each of whom refreshes a\n10-chart  dashboard  once an hour during business\nhours. This results in about 8,000 renders over\nthe month, and easily falls within the  1 GB  free tier. A dashboard on a large-screen display with 20 charts set to refresh\nevery 5 minutes, all 24 hours of the day. This results in about\n300,000 renders over the month. Assuming these charts are not\nabnormally large, this scenario also falls entirely within the\n 1 GB  free tier. A  large  chart embedded on a web page that receives 10,000 views\nper day, resulting in 300,000 renders over the month. This chart\ntakes roughly five times as much data to render compared to a\ntypical chart, and consumes  3 GB  of data over the month. The first  1 GB  is free, and the remaining  2 GB  is billed at\n$1.00 per GB, resulting in a total cost of $2.00 for the month.",
            "code": [],
            "preview": "Atlas Charts is metered based on the volume of data\ntransferred from the Charts web server to web browser clients.\nMongoDB provides each Charts instance with a free 1 GB of\ndata transfers per month. You can view your Charts instance's\nmonthly data usage in the Data Transfer page.\nTo visualize your Charts usage, you can create a\nBilling Dashboard.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embed-chart-jwt-auth",
            "title": "Embed an Authenticated Chart using a Custom JWT Provider",
            "headings": [
                "Prerequisites",
                "Procedures",
                "Enable Authenticated Embedding for a Chart",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source",
                "Select the Authenticated tab in the dialog window.",
                "Toggle Enable authenticated access to On.",
                "(Optional) Specify a filter function to inject per user.",
                "(Optional) Specify filterable fields for your chart.",
                "Copy the Chart Base URL and Chart ID",
                "Configure Charts to use your Custom JWT Provider",
                "Go to the Authentication Settings view.",
                "From the Authentication providers section, click Add.",
                "Provide the following values to configure Charts to validate the JWT (JSON Web Token) for the tutorial.",
                "Click Save.",
                "Create a Web App to Display your Chart",
                "Customize the Node.js App",
                "In your application server code, generate and return a JWT (JSON Web Token). The implementation varies based on your authentication provider.",
                "Embed a chart.",
                "Render the chart.",
                "Deploy and test your application."
            ],
            "paragraphs": "Many websites use authentication systems that generate  JWT (JSON Web Token) s to\nrepresent a signed-in user. If your website produces  JWT (JSON Web Token) s, you can\nconfigure  Charts  to validate the existing tokens to authorize\nthe rendering of embedded charts. Alternatively, if your site does not\nalready use  JWT (JSON Web Token) s as a part of the authentication process, you can\nwrite code to generate  JWT (JSON Web Token) s explicitly for the purpose of authorizing\nchart renders. This tutorial shows the latter approach. The example shows you how to\ngenerate a simple  JWT (JSON Web Token)  for a logged in user and send it to\n Charts . Charts  uses the details you provided when you configure a\nprovider to validate  JWT (JSON Web Token) s it receives with requests to render\nembedded charts. If the token is invalid or does not conform to the\ndetails you provided,  Charts  doesn't render the authenticated\nchart view. You must be an  Atlas \n Project Owner  to\nconfigure embedding authentication providers for your linked\n Charts  instance. Create a New Dashboard Create a Chart Enable authenticated embedding to generate a  Charts  Base URL and\na chart ID. You will need your  Charts  Base URL and chart ID to\ndisplay your chart on a web page. From your dashboard page, select the dashboard containing the chart\nyou wish to embed. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. You can specify a function to inject a MongoDB filter document for\neach user who views the chart. This is useful for rendering\nuser-specific charts. The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field: To learn more about injecting filters per user, see\n Inject User-Specific Filters . Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. To learn more about filterable fields, see\n Specify Filterable Fields . Use these values in your application code together with your\nEmbedded Authentication Provider attributes to embed your chart. When you configure authentication using a custom JWT provider, you can choose\nthe signing algorithm. This tutorial uses the HS256 signing algorithm. If you select\nthe RS256 signing algorithm, you can also choose one of the following signing keys: JSON web key ( JWK ) or\nJSON web key set (JWKS) URL:  Charts  retrieves the key from the JWK\nor JWKS file at the specified URL.  Charts  then uses\nthe key to validate the JSON web token. If there are multiple keys in the\nfile,  Charts  tries each key until it finds a match. PEM public key:  Charts  uses the specified public key to verify the\nJSON web token. If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. Field Value Name Enter  charts-jwt-tutorial . Provider Select  Custom JSON Web Token . Signing Algorithm Select  HS256 . Signing Key Enter  topsecret . If you already have an app in which to display your chart, you're all\nset. If not, proceed with the remaining steps. MongoDB offers a pre-built sample that shows you how to use the\nEmbedding SDK to authenticate an embedded chart using a  JWT (JSON Web Token) . Clone the  GitHub repository \nand follow the instructions in the  Readme  file to begin using the\napp. You can customize it to use the chart you created earlier. The  app.js  file in the sample application uses a simple web\nservice and the  jsonwebtoken  package to generate and return a\n JWT (JSON Web Token)  signed using the  HS256  algorithm when a user logs in to the\napplication with these credentials: In the sample application, the signing key  topsecret  is defined in a file\nin your application named  config.js : Generate  JWT (JSON Web Token) s server-side to protect your signing keys from\nexposure. User name:  admin Password:  password Your application must handle refreshing or issuing new tokens\nbefore they expire. Create a new object from the  ChartsEmbedSDK  class. Provide: In the  src/index.js  file in the sample application, the\n login  function in the  getUserToken  property calls the web\nservice you created to generate a  JWT (JSON Web Token) . If login is successful,\nthat function returns a valid  JWT (JSON Web Token)  to the  getUserToken \nproperty. The value of the  baseUrl  property with the URL that points to\nyour  Charts  instance. To embed one of your charts in the\nsample application, replace this value with the\n:guilabel: Base URL  from your Embed Chart dialog. The  chartId  property to specify the unique identifier of the\nchart you want to embed. To embed one of your charts in the\nsample application, replace this value with the\n:guilabel: Chart ID  from your Embed Chart dialog. The  getUserToken  property to specify the function that\ngenerates and returns a  JWT (JSON Web Token)  from your authentication provider. Any optional properties you want to provide. For a list of all\nproperties you can use when you embed charts using the SDK, see\n SDK option reference . For each chart that you want to embed, invoke the  CreateChart \nmethod of the object you just created. To embed one of your charts\nin the sample application, replace the value of the  id  property\nwith the :guilabel: Chart ID  from your Embed Chart dialog. The following example shows an invocation of the  CreateChart \nmethod in the  src/index.js  file in the sample application. Use the  render  method of your chart object to render it in your\napplication. The following example shows an invocation of the  render \nmethod in the  src/index.js  file in the sample application. Charts  renders the chart if it can validate the token it\nreceived with the request to render the chart. If the token isn't\nvalid,  Charts  doesn't render the chart and displays an error\ncode. For more information on the  Charts  embedding error codes, see\n Embedded Error Codes .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                },
                {
                    "lang": "js",
                    "value": "const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst jwt = require(\"jsonwebtoken\");\nconst config = require(\"./config.js\");\n\nconst app = express();\nconst port = 8000;\n\n// Configuring body parser middleware\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(cors());\n\napp.post(\"/login\", (req, res) => {\n  const loginDetails = req.body;\n  // mock a check against the database\n  let mockedUsername = \"admin\";\n  let mockedPassword = \"password\";\n\n  if (\n    loginDetails &&\n    loginDetails.username === mockedUsername &&\n    loginDetails.password === mockedPassword\n  ) {\n    let token = jwt.sign({ username: loginDetails.username }, config.secret, {\n      expiresIn: \"24h\" // expires in 24 hours\n    });\n    res.json({ bearerToken: token });\n  } else {\n    res.status(401).send(false);\n  }\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));"
                },
                {
                    "lang": "js",
                    "value": "module.exports = {\n  secret: \"topsecret\"\n};"
                },
                {
                    "lang": "js",
                    "value": "import ChartsEmbedSDK from \"@mongodb-js/charts-embed-dom\";\nimport \"regenerator-runtime/runtime\";\n\ndocument\n  .getElementById(\"loginButton\")\n  .addEventListener(\"click\", async () => await tryLogin());\n\nfunction getUser() {\nreturn document.getElementById(\"username\").value;\n}\n\nfunction getPass() {\nreturn document.getElementById(\"password\").value;\n}\n\nasync function tryLogin() {\nif (await login(getUser(), getPass())) {\n  document.body.classList.toggle(\"logged-in\", true);\n  await renderChart();\n}\n}\n\nasync function login(username, password) {\nconst rawResponse = await fetch(\"http://localhost:8000/login\", {\n  method: \"POST\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({ username: username, password: password })\n});\nconst content = await rawResponse.json();\n\nreturn content.bearerToken;\n}\n\nasync function renderChart() {\nconst sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://localhost/mongodb-charts-iwfxn\", // ~REPLACE~ with the Base URL from your Embed Chart dialog\n  chartId: \"d98f67cf-374b-4823-a2a8-f86e9d480065\", // ~REPLACE~ with the Chart ID from your Embed Chart dialog\n  getUserToken: async function() {\n    return await login(getUser(), getPass());\n  }\n});"
                },
                {
                    "lang": "js",
                    "value": "const chart = sdk.createChart({ chartId: \"d98f67cf-374b-4823-a2a8-f86e9d480065\" }); // ~REPLACE~ with the Chart ID from your Embed Chart dialog"
                },
                {
                    "lang": "json",
                    "value": "chart.render(document.getElementById(\"chart\"));"
                }
            ],
            "preview": "Many websites use authentication systems that generate JWT (JSON Web Token)s to\nrepresent a signed-in user. If your website produces JWT (JSON Web Token)s, you can\nconfigure Charts to validate the existing tokens to authorize\nthe rendering of embedded charts. Alternatively, if your site does not\nalready use JWT (JSON Web Token)s as a part of the authentication process, you can\nwrite code to generate JWT (JSON Web Token)s explicitly for the purpose of authorizing\nchart renders.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "encoding-channels",
            "title": "Understand Encoding Channels",
            "headings": [
                "Encoding Channel Types",
                "Aggregation",
                "Geopoint Channel Type",
                "Assign Non-GeoJSON Fields to a Geopoint Channel Type",
                "Add Missing Fields in the Chart Builder"
            ],
            "paragraphs": "Encoding channels are the building blocks of your visualizations.\nThese channels are the means by which  Charts  translates data\nfrom your  collection  to\nthe visualization. The encoding process dictates how that data\nappears in the chart based on the  channel type  selected. Each encoding channel type provides different capabilities for\nprocessing and visualizing your data. Each channel type accepts\ndistinct data types (e.g.,  string  versus  numeric \ndata). The following table describes each encoding channel type in\n Atlas Charts : Charts  shows required encoding channels in green, and\noptional encoding channels in blue. Encoding Channel Type Description Value A point on the chart is created from the chosen field for each\ndocument in the collection. You may only assign fields with a\n numeric  or  date  type to a  Value  channel. Category Each  unique  value from this field in the collection is used\nas a chart category. The  Category  encoding channel\nprovides the following additional visualization options: For fields with a  string  data type, you can specify a\nfield to  sort  on and the sort order. For fields with a  numeric  data type, you can toggle\n data binning  and select the bin size. For fields with a  date  data type, you can toggle date\ngrouping and select the grouping period. Aggregation A point on the chart is created by applying an\n aggregation  function over the values of\nthis field from multiple documents. For more\ninformation on using aggregation functions in  Charts , see\n Aggregation Options . Geopoint When you create a chart using a geopoint channel type,  Atlas Charts \nrenders a map to visualize your data. A mark is plotted on the\nmap for each document containing the selected field based on\nthe field's latitude and longitude values. Geopoint channel\ntypes are used in the  Coordinates  channel on\n Geospatial Scatter  and\n Geospatial Heatmap  chart types. For more information on the geopoint encoding channel type,\nrefer to the  Geopoint Channel Type \nsection. Dragging a field onto an  aggregation \n encoding channel  allows you to use an\n aggregation pipeline operator \non that field. For a list of the available aggregation pipeline operators in\n Charts , see  Aggregation Options . Donut charts provide two encoding channels: The following donut chart examines NASA's Landslide data source to\nshow the frequency of various landslide triggers by performing a\n $count  aggregation\non the  trigger  field: We see from the chart that the most common landslide trigger is\n Downpour  followed by  Rain . A  category  channel called  Label  dictating\nwhich field to use when dividing the sections of the chart. An  aggregation  channel called  Arc  dictating\nthe aggregation operation to perform on the  Label \ncategory. Geopoint channel types are used in the  Coordinates  channel\non  Geospatial Scatter  and  Geospatial Heatmap \nchart types. Geospatial charts visualize data that references specific\ngeographic locations. Atlas Charts  automatically determines which fields in your dataset, if\nany, are  GeoJSON Points .\n Charts  signifies these fields with a  \nicon. You can map these fields directly to a geopoint channel type\nby dragging them onto an appropriate geopoint channel type in\nthe chart builder.  Charts  automatically determines the latitude\nand longitude values from the field and adds a point to the map for\neach document. You can also assign numeric coordinates or arrays to a\ngeopoint channel type to specify latitude and\nlongitude not stored as  GeoJSON Points . For details on this process, see the\nfollowing section. This section describes how to use fields not stored as\n GeoJSON Points  in a\ngeopoint channel type. For additional information and examples on  Geospatial \n Scatter  and  Heatmap  charts which utilize\ngeopoint channel types, refer to the relevant chart type pages. You can drag numeric fields onto a geopoint channel type to\nspecify latitude and longitude. When you drag a numeric field onto a\ngeopoint channel type, the channel updates to use the selected field\nas either  Latitude  or  Longitude .\n Charts  prompts you for a second numeric field to fill in the\nother value. Alternatively, you can drag a numeric array onto a\ngeopoint channel type to specify location coordinates\nfrom a field. When you use this approach, you can specify which\nindexes of the array to use for latitude and longitude components. Atlas Charts  populates the  Fields  pane of the\nchart builder by randomly sampling documents from the selected\ndata source. As a result,  Charts  might not display all fields\nfrom documents in the data source if the field is not present on all\ndocuments. To add a specific field in the chart builder: After  Atlas Charts  locates the missed field, the field appears in italics\nthe  Fields  pane. If  Atlas Charts  discovers other missed\nfields in the same subdocument,  Atlas Charts  also adds those fields in\nitalics. Once you add a field, you can include it in your chart,\n convert its data type , or\n remove it . In the corner of the  Fields  pane, click\n Add Field . Make sure that the default  Missed  field type is selected. Enter the  Field Name  of the field you want to\nadd. You can specify a nested field by using dot notation. For\nexample, you can specify  address.neighborhood . Click  Save Field .",
            "code": [],
            "preview": "Encoding channels are the building blocks of your visualizations.\nThese channels are the means by which Charts translates data\nfrom your collection to\nthe visualization. The encoding process dictates how that data\nappears in the chart based on the channel type selected.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "filter-embedded-dashboards",
            "title": "Filter Embedded Dashboards",
            "headings": [
                "Specify Filterable Fields",
                "Filters for Embedded Documents",
                "Filter Data on Dashboards Embedded in an iframe",
                "Filter Syntax",
                "Example",
                "Filter Data on Dashboards Embedded with the SDK",
                "Inject User-Specific Filters"
            ],
            "paragraphs": "You can customize your embedded dashboards by appending various\nquery parameters to their iframe URLs or using the  filter  option\nwith the  Charts  Embedding SDK. A dashboard  Author  specifies the fields that can be\nincluded in filters set by the embedding application code or added by\ndashboard viewers. A dashboard author can limit access to data by allowing only\ncertain fields to be filtered. By default, no fields are allowed,\nmeaning the dashboard cannot be filtered until you explicitly allow at\nleast one field. To define filterable fields: Dashboard  viewers  and applications which render\nthe dashboard can now use filters based on the specified fields to\ndisplay subsets of the original dashboard data. If a viewer attempts to\nuse a filter for a field not included in the  Allowed filter fields  list,  Atlas Charts  returns an\n error . For the desired  dashboard , click the\n  button and select  Embed  from the\ndropdown. In the  Allowed filter fields  section, click the\n  button. You can specify on which fields dashboard viewers can filter data by: This option only appears if you already have  Unauthenticated \nor  Authenticated  embedding access enabled. Using the dropdown to select the fields Manually typing values to add fields not listed in the dropdown Selecting  Allow all fields in the data source used in\nthis dashboard When you have selected all desired fields, click  Save \nbelow the dropdown. When you add a field to the  Allowed filter fields  list\nwhose value is an embedded document, you must also specify each\nindividual sub-field you want to allow. Consider the following document: If you only add the  favorites  field to the list of allowed fields,\nit does  not  grant viewers permission to filter upon any of the\nsub-fields of  favorites . Instead, you may add one or more of the\nsub-fields to the list individually by specifying  favorites.color ,\n favorites.animal , or  favorites.season . Use the  filter  query parameter to only display data that matches a\nspecified  MQL (MongoDB Query Language)  filter in your\ndashboard embedded in an iframe. You can only use the  filter  query parameter on the\n Unauthenticated  dashboard. With unauthenticated dashboards,\nthe dashboard  Author  specifies the fields that\ncan be included in filters set by the embedding application code or\nadded by  dashboard viewers. To learn how to specify filterable fields,\nsee  Specify Filterable Fields . You can specify an MQL document as your  filter  query\nparameter provided that the fields used in your filter are in\nthe  list of allowed filterable fields . Your filter must match the format used in a\n $match  query and\nbe either a: Top level query Or within boolean expressions (\n $and ,\n $nor ,\n $or ) You must URL-encode special characters of the filter\nparameter. The following iframe  src  URL renders a dashboard which only displays\ndocuments with an  imdb.rating  greater than or equal to  8 : The URL uses an encoded  filter  parameter of\n {\"imdb.rating\":%20{$gte:%208}} . Decoded,\nthis filter is: You can add a  filter  to an\nembedded dashboard with the  filter  option. Filtering allows the\ndashboard author to only display data in the embedded dashboard which\nmatches a specified  MQL (MongoDB Query Language)  filter. In the  Embed  modal, you must specify any fields included in\nthe filter. The  Embed  modal contains a dropdown menu of\nfields on which to allow filtering. The following uses the  filter  option to represent only documents in\nwhich the  total  field is greater than  100 : When you embed a dashboard that requires  Authenticated \naccess,  you can use the  Injected function  setting to inject\na MongoDB filter document specific to each user who views the dashboard.\nThe function has access to your Embedding Authentication Provider's\ntoken via  context.token , and can filter the dashboard data based on\nthe token. This filter ensures that viewers of an embedded dashboard only see their\nown data, which is useful when embedding dashboard with potentially\nsensitive information. To inject a filter specific to each user, in the\n Authenticated  tab of the  Embed  dialog, set the\n Injected function`setting to :guilabel:`On . Specify a\nfunction and click  Save . If you use an Atlas App Services authentication provider,  context.token \ncontains the App Services\n user object  to\nfilter. For example, if you enable\n Custom User Data \nfor App Services users, the user object is available in\n context.token.custom_data . The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field:",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n  \"name\": \"Alice\",\n  \"favorites\" :\n  {\n    \"color\": \"green\",\n    \"animal\": \"turtle\",\n    \"season\": \"autumn\"\n  }\n}"
                },
                {
                    "lang": "json",
                    "value": "{ \"quantity\": { $gte: 20 } }"
                },
                {
                    "lang": "json",
                    "value": "{ $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] }"
                },
                {
                    "lang": "none",
                    "value": "https://charts.mongodb.com/charts-atlasproject1-piocy/embed/dashboards?\nid=93584ddb-1115-4a12-afd9-5129e47bbb0d&\nfilter={\"imdb.rating\":%20{$gte:%208}}"
                },
                {
                    "lang": "json",
                    "value": "{\"imdb.rating\": {$gte: 8}}"
                },
                {
                    "lang": "javascript",
                    "value": "createDashboard({\n  baseUrl: '<your-base-url>',\n  dashboardId: '<your-dashboard-id>',\n  width: 500,\n  height: 500,\n  filter: { \"total\": { \"$gt\": 100 } }\n})"
                },
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                }
            ],
            "preview": "You can customize your embedded dashboards by appending various\nquery parameters to their iframe URLs or using the filter option\nwith the Charts Embedding SDK.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "get-started-embedding-sdk",
            "title": "Get Started with the Embedding SDK",
            "headings": [
                "Prerequisites",
                "Procedures",
                "Enable Embedding",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source.",
                "Select the Unauthenticated tab in the dialog window.",
                "Toggle Enable unauthenticated access to On.",
                "(Optional) Specify filterable fields for your chart.",
                "Select the Javascript SDK panel.",
                "Copy the Charts Base URL and Chart ID.",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source",
                "Select the Authenticated tab in the dialog window.",
                "Toggle Enable authenticated access to On.",
                "(Optional) Specify a filter function to inject per user.",
                "(Optional) Specify filterable fields for your chart.",
                "Copy the Chart Base URL and Chart ID",
                "Select a dashboard.",
                "Select Embed.",
                "Enable external sharing on the data source.",
                "Select the Unauthenticated tab in the dialog window.",
                "Toggle Enable unauthenticated access to On.",
                "(Optional) Specify filterable fields for your dashboard.",
                "Select the Javascript SDK panel.",
                "Copy and save the base URL.",
                "Copy and save the dashboard ID.",
                "Select a dashboard.",
                "Select Embed.",
                "Enable external sharing on the data source.",
                "Select the Authenticated tab in the dialog window.",
                "Toggle Enable authenticated access to On.",
                "Add authentication providers.",
                "(Optional) Specify a filter function to inject per user.",
                "(Optional) Specify filterable fields for your dashboard.",
                "Copy and save the base URL.",
                "Copy and save the dashboard ID.",
                "Create a Web App",
                "Add Embedding Code to Your App"
            ],
            "paragraphs": "You can embed a chart or dashboard into a web application with the\n Embedding SDK , allowing more flexible\nadjustments of settings and rendering. You must be a dashboard  Author  to\nenable embedding for a chart. Create a New Dashboard Create a Chart From your dashboard page, select the dashboard containing the chart\nyou wish to make embeddable. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your chart by\nselecting  Allow all fields in the data source used in this\nchart . To learn more about filterable fields, see\n Specify Filterable Fields . You'll need the Charts Base URl and Chart ID values in your web application\ncode. From your dashboard page, select the dashboard containing the chart\nyou wish to embed. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. You can specify a function to inject a MongoDB filter document for\neach user who views the chart. This is useful for rendering\nuser-specific charts. The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field: To learn more about injecting filters per user, see\n Inject User-Specific Filters . Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. To learn more about filterable fields, see\n Specify Filterable Fields . Use these values in your application code together with your\nEmbedded Authentication Provider attributes to embed your chart. From your dashboard page, select the dashboard to embed. From the dashboard, click   at the top-right of\nthe dashboard to access its embedding information. Select\n Embed  from the dropdown menu. If you have already enabled external sharing on the data source that\nthis dashboard uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure  link. Specify the fields on which dashboard viewers can filter data. By\ndefault, no fields are specified, meaning the dashboard cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your dashboard by\nselecting  Allow all fields in the data source used in this\ndashboard . To learn more about filterable fields, see\n Specify Filterable Fields . From your dashboard page, select the dashboard to embed. From the dashboard, click   at the top-right of\nthe dashboard to access its embedding information. Select\n Embed  from the dropdown menu. If you have already enabled external sharing on the data source that\nthis dashboard uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure  link. If you have already set up authentication providers, skip this step.\nIf you haven't yet set up authentication providers, you can do\nso now. To learn more, see  Configure Embedding Authentication Providers . Click  Add . Specify a name for the authentication integration. Select a provider and specify the provider settings. Click  Save . Click  Back to Embed Dashboard . You can specify a function to inject a MongoDB filter document for\neach user who views the dashboard. This is useful for rendering\nuser-specific dashboards. The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field: To learn more about injecting filters per user, see\n Inject User-Specific Filters . Specify the fields on which dashboard viewers can filter data. By\ndefault, no fields are specified, meaning the dashboard cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your dashboard by\nselecting  Allow all fields in the data source used in this\ndashboard . To learn more about filterable fields, see\n Specify Filterable Fields . Proceed with the remaining steps to create a new app in\nwhich to display your chart. MongoDB offers a pre-built example app in the\n GitHub repository  that shows how to use the\nEmbedding SDK to display an unauthenticated embedded chart. Proceed with the remaining steps to create a new app in\nwhich to display your chart. MongoDB offers a pre-built example in the\n GitHub repository  that shows you how to\nuse the Embedding SDK to authenticate an embedded chart\nusing your authentication provider. Proceed with the remaining steps to create a new app in\nwhich to display your dashboard. MongoDB offers a  pre-built example of an unauthenticated embedded dashboard \nin the GitHub Repository. This example shows how to use the\nEmbedding SDK to display an unauthenticated embedded dashboard. Proceed with the remaining steps to create a new app in\nwhich to display your dasbhoard. MongoDB offers  examples of authenticated embedded dashboards \nin the GitHub Repository. These examples show you how to use\nthe Embedding SDK to authenticate an embedded dashboard using\n Atlas App Services , Google, or  JWT (JSON Web Token)  authentication\nproviders. To learn how to install the Embedding SDK into your app, see\n Install the Embedding SDK . Add the following code to your web app to execute where you\nwant your chart to render: Replace the existing Charts Base URL and chart\nID with the values for the chart that you want to\ndisplay. Your Charts Base URL and chart ID are visible\nin the embedding options modal window. Add the following code to your web app to execute where you\nwant your chart to render. The following example\n authenticates  with\n Atlas App Services . Replace the existing App ID with your App\nID, which you can find in the Atlas App Services UI. Replace the existing Charts Base URL and chart\nID with the values for the chart that you want to\ndisplay. Your Charts Base URL and chart ID are visible\nin the embedding options modal window. Add the following code to your web app to execute where you\nwant your dashboard to render. Replace the existing  Dashboards Base URL \nand dashboard ID with the values for the dashboard that\nyou want to display. Your  Dashboards Base URL \nand dashboard ID are visible in the embedding options\nmodal window. Add the following code to your web app to run it where you\nwant your dashboard to render. The following example\n authenticates  with\n Atlas App Services . Replace the existing App ID with your\nApp ID. You can find your App ID in the Atlas App Services UI. Replace the existing  Dashboards\nBase URL  and dashboard ID with the values for the\ndashboard that you want to display. Your  Dashboards Base URL \nand dashboard ID are visible in the embedding options\nmodal window.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                },
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                },
                {
                    "lang": "javascript",
                    "value": "import ChartsEmbedSDK from \"@mongodb-js/charts-embed-dom\";\n\nconst sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\", // ~REPLACE~ with the Base URL from your Embed Chart dialog.\n});\n\nconst chart = sdk.createChart({\n  chartId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // ~REPLACE~ with the Chart ID from your Embed Chart dialog.\n  height: \"700px\",\n  // Additional options go here\n});\n\nchart.render(document.getElementById(\"chart\"));"
                },
                {
                    "lang": "javascript",
                    "value": "import ChartsEmbedSDK from \"@mongodb-js/charts-embed-dom\";\n\n// Needed only if you are using the Atlas App Services authentication provider\nconst client = Stitch.initializeAppClient(\n  'authentication-sample-eibkj', // ~REPLACE~ with your App ID\n});\n\nconst sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\", // ~REPLACE~ with the Base URL from your Embed Chart dialog.\n  getUserToken: () => getRealmUserToken(client),\n  // getUserToken is a callback to provide the auth token to the SDK.\n  // Use the getRealmUserToken helper when using the Atlas App Services auth provider.\n  // If using Custom JWT or Google providers, provide your own code to retrieve the JWT\n});\n\nconst chart = sdk.createChart({\n  chartId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // ~REPLACE~ with the Chart ID from your Embed Chart dialog.\n  height: \"700px\",\n  // Additional options go here\n});\n\nchart.render(document.getElementById(\"chart\"));"
                },
                {
                    "lang": "javascript",
                    "value": "import ChartsEmbedSDK from \"@mongodb-js/charts-embed-dom\";\n\nconst sdk = new ChartsEmbedSDK({\n   baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\", // ~REPLACE~ with the Base URL from your Embed Dashboard dialog.\n});\n\nconst dashboard = sdk.createDashboard({\n   dashboardId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // ~REPLACE~ with the Dashboard ID from your Embed Dashboard dialog.\n   height: \"700px\",\n   widthMode: \"scale\",\n   heightMode: \"fixed\"\n   // Additional options go here\n});\n\ndashboard.render(document.getElementById(\"dashboard\"));"
                },
                {
                    "lang": "javascript",
                    "value": "import ChartsEmbedSDK from \"@mongodb-js/charts-embed-dom\";\n\n// Needed only if you are using the Atlas App Services authentication provider\nconst client = Stitch.initializeAppClient(\n   'authentication-sample-eibkj', // ~REPLACE~ with your App ID\n});\n\nconst sdk = new ChartsEmbedSDK({\n   baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\", // ~REPLACE~ with the Base URL from your Embed Dashboard dialog.\n   getUserToken: () => getRealmUserToken(client),\n   // getUserToken is a callback to provide the auth token to the SDK.\n   // Use the getRealmUserToken helper when using the Atlas App Services auth provider.\n   // If using Custom JWT or Google providers, provide your own code to retrieve the JWT\n});\n\nconst dashboard = sdk.createDashboard({\n  dashboardId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // ~REPLACE~ with the Dashboard ID from your Embed Dashboard dialog.\n  height: \"700px\",\n  widthMode: \"scale\",\n  heightMode: \"fixed\"\n  // Additional options go here\n});\n\ndashboard.render(document.getElementById(\"dashboard\"));"
                }
            ],
            "preview": "You can embed a chart or dashboard into a web application with the\nEmbedding SDK, allowing more flexible\nadjustments of settings and rendering.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-charts",
            "title": "Embed Charts in Your Web Application",
            "headings": [],
            "paragraphs": "You can control embedded charts programmatically with the\n Embedding SDK , or use static HTML\nwith an  iframe . To learn how to embed charts in a web application, see the\n Embedding Tutorials . To learn more, see  Embedded Chart Options  and\n Filter Embedded Charts . As a dashboard  Author , you can embed\nyour charts and dashboards in external websites or\nshare them through links. You can embed the following charts or\ndashboards: Embed a  chart or dashboard that doesn't require authentication  (unauthenticated), which anyone can view. Embed a chart or dashboard that requires users to authenticate\nthrough an  Embedding Authentication Provider . If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled.",
            "code": [],
            "preview": "You can control embedded charts programmatically with the\nEmbedding SDK, or use static HTML\nwith an iframe.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts",
            "title": "Customize Charts",
            "headings": [],
            "paragraphs": "Atlas Charts  provides various options to customize the format and display\nof your visualizations. You can use these options to display your data\nin the proper format, show data labels to relay precise measurements,\nand many other formatting techniques. The documentation for specific chart types covers additional\ncustomization options pretaining to those charts. See the  Chart\nTypes  page to learn more about customizing a\nparticular chart type. Atlas Charts  provides the following types of customization options: To customize a chart, click the  Customize  tab above the\n encoding channels  in the\n Chart Builder : Your chart automatically updates as you modify customization options. General Customization Options  modify\nhigh-level aspects of the chart such as its colors and data labels.\nThese options affect the overall look and format of your data. Value Axis Options  modify the\nchart's axes, such as their scale and their minimum and maximum\nvalues. These options only affect the chart's axes, and not how\n Charts  formats data points in the visualization. Field-Level Options  modify how\n Charts  renders data fields, such as specific formatting\nfor numbers and dates. These options apply to individual data fields\n encoded  into your chart, rather than the\nchart as a whole. The field-level customization options available\ndepend on the data type and\n channel type  of the field you are\ncustomizing. Conditional Formatting Options  modify\nthe styling of chart values that meet conditions you define. These\noptions affect the look of your chart dynamically:\nif a value changes to meet or stop meeting your conditions,\nits styling updates to reflect that.",
            "code": [],
            "preview": "Atlas Charts provides various options to customize the format and display\nof your visualizations. You can use these options to display your data\nin the proper format, show data labels to relay precise measurements,\nand many other formatting techniques.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-tutorials",
            "title": "Embedding Tutorials",
            "headings": [
                "Authenticated Embedding",
                "Unauthenticated Embedding"
            ],
            "paragraphs": "The following tutorials walk you through several scenarios for embedding\ncharts in your application. The following tutorials provide detailed instructions for embedding\nauthenticated charts in a web application with the  Atlas Charts  Embedding SDK.\nAuthenticated embedded charts are viewable only by users who first provide\nlogin credentials through an SSO provider. Configure  Charts  to use Google Sign-In to authorize\nthe rendering of embedded charts in an application. Configure  Charts  to use  Atlas App Services  to authorize\nthe rendering of embedded charts in an application. Configure  Charts  to validate  JWT (JSON Web Token)  to authorize the rendering\nof embedded charts in an application. Configure  Charts  to allow unrestricted access to an embedded\nchart.",
            "code": [],
            "preview": "The following tutorials walk you through several scenarios for embedding\ncharts in your application.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-dashboard-options",
            "title": "Embedded Dashboard Options",
            "headings": [
                "Options",
                "Refresh and Data Caching Behavior"
            ],
            "paragraphs": "You can customize the appearance and behavior of your embedded\ndashboards with a variety of options. Options are available to\ndashboards embedded with the  Embedding SDK  and embedded within  iframes . To embed dashboards, you must configure embedding\noptions on your data sources. For instructions, see\n Embed Dashboards in Your Web Application . The following options are available for embedded dashboards: Option Purpose Embedded Dashboard Options Provides the JavaScript  createDashboard()  method for rendering a\ndashboard within a web page. You can control properties such as the\nheight and width of the dashboard. To learn more, see\n Embedded Dashboard Options . Iframe Options You can set dashboard options within an iframe by adding inline style\ntags and query parameters to the chart URL. The following table describes how  Atlas Charts  loads data from the cache\nwhen loading or refreshing the dashboard based on the\n autoRefresh  and   maxDataAge  values. autoRefresh  Value maxDataAge  Value Atlas Charts  Behavior omitted or  false omitted The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard with data\nfrom the cache if the data is less than one hour old. If the\ndata from the cache is more than one hour old,  Charts \nqueries the data source for the latest data, refreshes the\ncache, and renders the chart or dashboard using this data. omitted or  false -1 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard using data\nfrom the cache.  Charts  queries the data source for\nthe latest data only if the cache has no data for the chart or\ndashboard. omitted or  false 0 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  queries the data source for the latest data,\nand renders the chart or dashboard using this data.\n Charts  doesn't read data from the\ncache. omitted or  false Number greater than  0 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard with data\nfrom the cache if the age of the data is less than the\n maxDataAge  value, in seconds. If the age of the data from\nthe cache is older than the  maxDataAge  value, in seconds,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the chart or dashboard using\nthis data. true omitted The chart or dashboard automatically refreshes every hour. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than one hour old. If the age of the data from the cache is\nmore than one hour old,  Charts  queries the data source\nfor the latest data, refreshes the cache, and renders the chart\nor dashboard using this data. true Number greater than or equal to  60 The chart or dashboard automatically refreshes at the\n maxDataAge  interval you specify, in seconds. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than the  maxDataAge  value, in seconds. If the age of\nthe data from the cache is older than the  maxDataAge  value,\nin seconds,  Charts  queries the data source for the\nlatest data, refreshes the cache, and renders the chart or\ndashboard using this data. true Number less than  60 The chart or dashboard automatically refreshes at the minimum\nperiod of 60 seconds. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than the minimum  maxDataAge  value of 60 seconds. If\nthe age of the data from the cache is older than 60\nseconds,  Charts  queries the data source for the latest\ndata, refreshes the cache, and renders the chart or dashboard\nusing this data.",
            "code": [],
            "preview": "You can customize the appearance and behavior of your embedded\ndashboards with a variety of options. Options are available to\ndashboards embedded with the Embedding SDK and embedded within iframes.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "configure-auth-providers",
            "title": "Configure Embedding Authentication Providers",
            "headings": [
                "Considerations",
                "Atlas App Services Providers",
                "Google Providers",
                "JWT Providers",
                "Procedures",
                "View Authentication Providers",
                "Go to the Authentication Settings view.",
                "View the configured authentication providers in the Authentication providers section.",
                "Add an Authentication Provider",
                "Go to the Authentication Settings view.",
                "From the Authentication providers section, click Add.",
                "In the Name field, enter a descriptive name for the provider.",
                "From the Provider list, select the type of provider you want to add.",
                "Configure Charts to verify tokens from the provider.",
                "Click Save.",
                "Modify an Authentication Provider",
                "Go to the Authentication Settings view.",
                "From the Embedding providers section, click Edit next to the provider you want to modify.",
                "Modify the values that Charts uses to verify tokens from the provider.",
                "Click Save.",
                "Delete an Authentication Provider",
                "Go to the Authentication Settings view.",
                "From the Embedding providers section, click Delete next to the provider you want to delete.",
                "Click Delete to confirm.",
                "Generate an Embedding Key"
            ],
            "paragraphs": "Atlas Charts  uses tokens passed with the Embedding SDK to authenticate users\nwho want to view embedded charts or dashboards that require\nauthentication. Charts  doesn't render the chart or dashboard in any of the\nfollowing scenarios: The details in the token don't match criteria you specify. The token is invalid. A token isn't present. You must be an  Atlas \n Project Owner  to\nconfigure embedding authentication providers for your linked\n Charts  instance. Charts  supports these authentication providers: Atlas App Services Google Custom  JWT (JSON Web Token) Charts  considers tokens from App Services providers valid if\nthey: Are syntactically valid  JWT (JSON Web Token) s. Are issued by the relevant authority. Match the App Services App ID you configure the provider to accept. Charts  considers tokens from Google providers valid if they: Are syntactically valid  JWT (JSON Web Token) s. Are issued by the relevant authority. Match the Google Client ID you configure the provider to accept. Charts  considers tokens from  JWT (JSON Web Token)  providers valid if they: Contain an expiration time claim with a time and date in the future. Your application must handle refreshing tokens before they expire. Contain an issued at time claim with a time and date in the past. Have a token lifetime of less than or equal to one hour. The token\nlifetime is the difference between the issued at time claim and the\nexpiration time claim. Charts  rejects a token containing the following claims\nbecause the token lifetime of one year is too long: Charts  can accept a token containing the following claims\nbecause the token lifetime of one hour is acceptable: Are signed using either the  HS256  or  RS256  signing\nalgorithm. Are signed with a key that can be verified by the secret you provide\nwhen you configure the custom  JWT (JSON Web Token)  authentication provider. Contain an audience claim that matches the one you specified when\nyou configure the provider, if applicable. To view the embedding authentication providers you have configured: If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. To add an embedding authentication provider: If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. The values you must enter differ based on the provider you\nselected: Provider Fields Custom  JWT (JSON Web Token) Provide the following values: Field Value Signing Algorithm Encryption algorithm with which the  JWT (JSON Web Token)  signature is encoded. Must be one of: HS256 RS256 Signing Key Secret or key used to validate the  JWT (JSON Web Token)  signature. If tokens\nare not signed,  Charts  considers them invalid. If you\nprovide an incorrect key,  Charts  is unable to verify token\nsignatures and considers them invalid. The value you must provide depends on the\n Signing Algorithm : HS256 : enter the secret key used to sign the  JWT (JSON Web Token) . RS256 : Select either  JWK or JWKS URL  or\n PEM Public Key . If you select  JWK or JWKS URL ,  Charts \nretrieves the key from the  JWK \nor JWKS file at the specified URL.  Charts \nthen uses the key to validate the JSON web token. If there are\nmultiple keys in the file,  Charts  tries each key until\nit finds a match. Enter the URL that contains the JWK or JWKS file. If you choose  PEM Public Key ,\n Charts  uses the specified public key to verify the JSON web\ntoken. Enter the public key of the key pair used to sign the  JWT (JSON Web Token) . The\npublic key must be in  PEM format , as shown in the\nfollowing example: Audience ( Optional ) Audience claim  that must\nbe present in the  JWT (JSON Web Token)  for  Charts  to consider it valid. Google In the  Client ID  field, enter your application's\nGoogle Client ID, in the following format: Atlas App Services Provide the following values: Field Value Project Project that contains your app service. App Service App service that's issuing the user token. Fetch data using Atlas App Services ( Optional ) Toggle to enable  Charts  to fetch user data and rules from\nan app service. If enabled,  Charts  retrieves data from the service you\nspecify in the  App Service Name  field. Enabling this option allows you to define rules in Atlas App Services to\ncontrol the data that  Charts  displays for specific\ncollections or users. For more information, see  Filter Incoming Queries  in the App Services\ndocumentation. App Service Name The name of the service in your app service that  Charts \nuses to retrieve the data for your chart. mongodb-atlas To modify an embedding authentication provider: If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. See  Add an Authentication Provider  for the values you can modify for\nthe provider type you configured. To delete an embedding authentication provider: If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. After you delete a provider, all embedded charts that the deleted\nprovider authenticated no longer render. Embedding keys are necessary for generating and verifying digital\nsignatures of charts embedded using the  Verified Signature` \nmode. To generate a new embedding key, click the  Generate New Key \nbutton on the right side of the page. Only users with the  Project Owner  role can see this section. Embedding keys are deprecated and will be removed in a future\nrelease. Use  Embedding Authentication Providers  and the  Embedding SDK  instead. If you generate a new key, any previous keys become invalid. Ensure\nthat all the existing embedded charts that use an old key are\nupdated to use the new key.",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n  \"iat\": \"1587497399\",\n  \"exp\": \"1617305399\"\n}"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"iat\": \"1585769399\",\n  \"exp\": \"1585772999\"\n}"
                },
                {
                    "lang": "none",
                    "value": " -----BEGIN CERTIFICATE-----\n MIIDfjCCAmagAwIBAgIBBzANBgkqhkiG9w0BAQUFADB0MRcwFQYDVQQDEw5LZXJu\n ZWwgVGVzdCBDQTEPMA0GA1UECxMGS2VybmVsMRAwDgYDVQQKEwdNb25nb0RCMRYw\n FAYDVQQHEw1OZXcgWW9yayBDaXR5MREwDwYDVQQIEwhOZXcgWW9yazELMAkGA1UE\n BhMCVVMwHhcNMTQwNzE3MTYwMDAwWhcNMjAwNzE3MTYwMDAwWjBsMQ8wDQYDVQQD\n EwZzZXJ2ZXIxDzANBgNVBAsTBktlcm5lbDEQMA4GA1UEChMHTW9uZ29EQjEWMBQG\n A1UEBxMNTmV3IFlvcmsgQ2l0eTERMA8GA1UECBMITmV3IFlvcmsxCzAJBgNVBAYT\n AlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp76KJeDczBqjSPJj\n 5f8DHdtrWpQDK9AWNDlslWpi6+pL8hMqwbX0D7hC2r3kAgccMyFoNIudPqIXfXVd\n 1LOh6vyY+jveRvqjKW/UZVzZeiL4Gy4bhke6R8JRC3O5aMKIAbaiQUAI1Nd8LxIt\n LGvH+ia/DFza1whgB8ym/uzVQB6igOifJ1qHWJbTtIhDKaW8gvjOhv5R3jzjfLEb\n R9r5Q0ZyE0lrO27kTkqgBnHKPmu54GSzU/r0HM3B+Sc/6UN+xNhNbuR+LZ+EvJHm\n r4de8jhW8wivmjTIvte33jlLibQ5nYIHrlpDLEwlzvDGaIio+OfWcgs2WuPk98MU\n tht0IQIDAQABoyMwITAfBgNVHREEGDAWgglsb2NhbGhvc3SCCTEyNy4wLjAuMTAN\n BgkqhkiG9w0BAQUFAAOCAQEANoYxvVFsIol09BQA0fwryAye/Z4dYItvKhmwB9VS\n t99DsmJcyx0P5meB3Ed8SnwkD0NGCm5TkUY/YLacPP9uJ4SkbPkNZ1fRISyShCCn\n SGgQUJWHbCbcIEj+vssFb91c5RFJbvnenDkQokRvD2VJWspwioeLzuwtARUoMH3Y\n qg0k0Mn7Bx1bW1Y6xQJHeVlnZtzxfeueoFO55ZRkZ0ceAD/q7q1ohTXi0vMydYgu\n 1CB6VkDuibGlv56NdjbttPJm2iQoPaez8tZGpBo76N/Z1ydan0ow2pVjDXVOR84Y\n 2HSZgbHOGBiycNw2W3vfw7uK0OmiPRTFpJCmewDjYwZ/6w==\n -----END CERTIFICATE-----"
                },
                {
                    "lang": "none",
                    "value": "<prefix>.apps.googleusercontent.com"
                }
            ],
            "preview": "Atlas Charts uses tokens passed with the Embedding SDK to authenticate users\nwho want to view embedded charts or dashboards that require\nauthentication.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "bin-data",
            "title": "Bin, Sort, and Limit Your Data",
            "headings": [
                "Bin Data",
                "Compare Periods",
                "Empty Bins",
                "Empty Bins",
                "Use Cases",
                "Create a Bin from String Values",
                "Edit and Remove Existing Bins",
                "Examples",
                "Behavior",
                "Sort Data",
                "Sort Multi-Series Charts by Series Value",
                "Limit Data"
            ],
            "paragraphs": "You can bin, sort, and limit data in your charts to highlight key\naspects in your data. Atlas Charts  supports binning date, numeric, and string fields in your\ndata. Binning breaks continuous data into discrete groups called\n bins , with each bin containing a contiguous subset of the original\nvalues. For example, you might group users into bins by the decade they\nwere born, or group timestamped calendar events by the month of their\nstart date. Continuous data can occupy any value over a continuous range.\nSome examples of continuous data include height, temperature, or\nthe time a person was born. Alternatively, discrete data is data which can only take certain\nvalues, categorized into a classification. Examples of discrete\ndata include eye color and the number of students in a class. When handling dates, this data often comes in a continuous form.\nIt can be useful to split this data into a specific windows of\ntime to uncover additional trends and patterns.  Atlas Charts  supports\nthe following bins for dates: To use binning for dates: To disable binning, toggle the  Binning  setting\nto off. In this case, each date from the field is added to the\nvisualization with no grouping performed. Year Month Week of Year Date of the Month Day of the Week Hour Minute Second Drag a date field (signified by a calendar icon in the\n Fields  section of the Chart Builder) to a\n category \n encoding channel . By default, binning is enabled as indicated by the\n Binning On  toggle. Use the dropdown to select the bin size for your dates. Toggle the  Periodic  setting as desired. If enabled,  Atlas Charts  creates bins relative to the next\nhighest time period and repeats each bin to cover the\ntimeframe spanned in the data field. If disabled, the bins  Charts  creates do not repeat. Consider a date field containing data spanning 5 years, and\na bin selection of  Month . If\n Periodic  is disabled,  Charts  adds the 60\nmonths in the dataset to the visualization. Alternatively, if  Periodic  is enabled,\n Charts  only plots the 12 calendar months, and\nvisualizes the total aggregated results from each calendar\nmonth. The  Periodic  setting is always enabled when\nselecting a bin size of  Day of the Week . The  Periodic  setting is always disabled when\nselecting a bin size of  Year , because year is\nthe largest time period available in  Charts . The following chart visualizes historical sales data for an\noffice supply store. Every sale is represented by a document in\nthe  supplySales  collection. Each document in the collection\nincludes the date of the sale as  salesDate  and a list of\nitems included in the sale as the  items  array. The  saleDate  field contains  continuous  timestamp data. The field\nis binned by  Date of the Month  with the\n Periodic  setting enabled. This means that over the\ncourse of the several years the data spans,  Atlas Charts  plots the\n mean  value of sales from each individual date of\nthe\nmonth: When you use binned date data, you have the option to compare data\nacross periods of time. You can display cumulative totals or\nchanges in value. To use the compare periods feature, a chart must have: If the conditions are met, the aggregation card has a toggle\nswitch labeled  Compare Periods . When toggled on, a\ndropdown menu appears with options for  Cumulative\nTotal  and  Change in Value . On a  Cumulative Total  chart, each successive data\npoint is calculated by adding its own value added to the preceding\nchronological data point. You can also specify a baseline value to\nserve as the initial value of the cumulative total. The default\nbaseline value is  0 . On a  Change in Value  chart, each successive data point\nshows the difference between it and the preceding chronological\ndata point. The first data point in the chart will always be\nblank, because there is no previous period to compare against. The following types of charts can use the compare periods feature: A  category channel  with a\n binned, non-periodic date field \nencoded. An  aggregation  channel. Bar and Column Discrete Line and Area The cumulative data option is not available with\n multi-series charts . The following column chart visualizes yearly sales for an\noffice supply store as a cumulative total across five years.\nEach document in the collection includes the date of the sale\nas  salesDate  and a  quantity  field with a count of items\nincluded in the sale. The  saleDate  field is binned by year. The  items  field\nis an array in which each item has a  quantity  field, which\nis added to the cumulative total with a  SUM  aggregation\noperation. When binning is enabled,  Charts  displays entries for\nempty bins within the minimum and maximum data range a chart displays. The value  Charts  uses for empty bins depends on the\naggregation function you choose: Charts  displays bins with  null  values differently based on\nchart type: Charts  doesn't display empty bins if including them results\nin more than 5000 unique bins on a chart. Aggregation Function Inferred Value count  or  distinct 0 All Other Functions null Chart Type How  Charts  Displays  null  Bins Column and Bar Charts Bars with a height of  0 .  Charts  doesn't display data\nlabels for  null  bins, even if enabled. Line and Area Charts Linear interpolation, with no data marker on the  null  bins.\n Charts  doesn't display data labels for  null  bins,\neven if enabled. Atlas Charts  can bin numeric fields from a continuous set into\ngroups of a specified size. To use binning for numeric fields: To disable binning, toggle the  Binning  setting to off.\nIn this case, each individual value from the field is added to the\nvisualization, rather than being grouped into bins. Drag a numeric field (signified by the number sign icon in the\n Fields  section of the Chart Builder) to a\n category   encoding channel . By default, binning is enabled as indicated by the toggle\nstating  Binning On . Enter the desired bin size in the  Bin Size  input. The following chart visualizes historical sales data for an\noffice supply store. Every sale is represented by a document in\nthe  supplySales  collection. Each sale document contains a\n customer  object, which contains information on the customer\npurchasing the item(s). The following chart applies binning to the  customer.age \nfield. The  age  field contains continuous numeric data and\nis binned by decade. Each  age  value is placed into the\nappropriate bin and  Charts  counts the number of ages in\neach bin to provide a high-level overview of the age\ndistribution of store customers. When binning is enabled,  Charts  displays entries for\nempty bins within the minimum and maximum data range a chart displays. The value  Charts  uses for empty bins depends on the\naggregation function you choose: Charts  displays bins with  null  values differently based on\nchart type: Charts  doesn't display empty bins if including them results\nin more than 5000 unique bins on a chart. Aggregation Function Inferred Value count  or  distinct 0 All Other Functions null Chart Type How  Charts  Displays  null  Bins Column and Bar Charts Bars with a height of  0 .  Charts  doesn't display data\nlabels for  null  bins, even if enabled. Line and Area Charts Linear interpolation, with no data marker on the  null  bins.\n Charts  doesn't display data labels for  null  bins,\neven if enabled. You can select and bin string categories for greater flexibility\nover how data is grouped in your chart. When you add categories to\na bin,  Atlas Charts  aggregates data from each selected category to\nrender the data for that bin. By binning selected categorical strings together, you can group\nitems with a common theme without needing to change your\nunderlying data. You can consolidate a fixed, large set of values\ninto a smaller, more manageable set. Consider: A dataset with information pertaining to countries throughout\nthe world, and you want to group countries by continent. A dataset on various artists throughout history that you want to\ngroup by artistic period (for example, Renaissance, Romantic, Modern). A dataset containing fine-grained version numbers (e.g.  2.3.0 ,\n 2.3.1 ,  2.3.2-rc1 ,  2.4.0 ) which you'd like to analyze\nin coarser-grained groups (e.g.  2.3 ,  2.4 ). At this point you can either create a bin from a list of category\nstrings or define a regular expression to match string values.\nYou can use the list of category strings if you want to choose the\nexact values for each bin. A regular expression is a better choice\nif you want to pattern-match a larger range of potential values. To create a bin from selected category strings: To create a bin from a regular expression: You can add another bin by clicking the  Add Bin  link,\nor close the  Bins  window by clicking the  X \nin the upper right corner. Drag a string field to a  Category  encoding channel. Toggle  Binning  for the field to  On . Click  Add Bin . In the  Add Bin  window, give your bin a title. Click the  Select  radio button. Select the categories to include in your bin. Click  Save . The  Bins  window shows the\nbins you have created and how many categories belong to each\nbin. Each value can only be added to one bin. Any values that have\nalready been added to other bins show as disabled, and are\nappended with the name of the bin they have been added to. The list of checkboxes and values comes from a sample of the\ndata and may not include every value that exists in the data.\nYou can manually add additional values to the list. Click the  Regex  radio button. Enter a regular expression in the  Insert regex  text\nbox. Select any desired flags from the dropdown menu to the right of\nthe text box. You can use any combination of the four available\nflags: Flag Description i Case insensitive search m Multiline mode x Extended mode s Single line mode A sample of matching documents appears. If there are no matching\ndocuments, you can still save the bin. Click  Save . The  Bins  window shows the\nbins you have created. Bins created from a regular expression\nare noted with a  .*  icon. To edit existing category bins, click the  Edit  button\nnext to the  Binning  toggle. The  Bins \nwindow appears. The badge next to each bin shows how many\ncategories belong in that bin. To edit a bin, click the  Pencil Icon . You can rename\nthe bin and change the categories belonging in that bin. To remove a bin, click the  Trash  icon. The following chart groups genres from the\n Movies Sample Data  into broader bins: Movies of a genre not included in these bins are grouped into the\n Other Values  bin. The chart shows the mean  imdb.rating  rating for movies\nbelonging to each bin. The chart is sorted alphabetically by\ncategory name. The following chart looks through the  description  field of the\n sample_airbnb.listingsAndReviews  collection for certain words\nand compares the mean prices. It uses bins to group documents based\non whether the  description  field contains a string matching the\npattern specified by the regular expression. Historical Movies , which includes the genres\nDocumentary, Biography, History, and War. Light-Hearted Movies , which includes the genres\nComedy, Romance, and Family. Scary Movies , which includes the genres Drama,\nThriller, Horror, and Mystery. Values can only belong to only one category bin, but they can belong\nto any number of regex bins. Any values shown on the chart that have not been added to any\nbins are automatically added to a default bin called\n Other Values . The order in which bins appear in the  Bins  window is\nsignificant. Each value is rendered in the chart as part of the\nhighest-ranked bin it appears in. You can reorder your bins by dragging and dropping them in the\n Bins  window. Use the  Sort By  dropdown in the Chart Builder to sort\nchart data by either: If you sort a multi-series chart generically by  Value \nwithout sorting by a specific series,  Atlas Charts  sorts your data based on\nthe sum of all values in your series. To toggle between ascending or descending sort order, click the  a-z \nbutton to the right of the  Sort By  dropdown. By default,  Charts  sorts data based on  Value \nin descending order. Category Value Series field (for  multi-series charts ) If you create a  multi-series chart  using a\ndifferent field per series, you can sort the chart by a specific series\nfield. The following charts use the\n Sample Data: Movies \ndata source to compare the mean number of  fresh  and  rotten \nRotten Tomato ratings for movies in each genre. This chart is sorted by the mean  fresh  value in descending\norder: This chart is sorted by the mean  rotten  value in ascending\norder: You can apply a limit to the  Category  encoding channel\nto only include a specified number of categories in your visualization.\nThe categories included are the  first  matching categories based on\nthe  sort order  specified. Limiting data can\nbe useful when visualizing data with so many categories it becomes\ndifficult to create a meaningful chart. When you limit your data, you may additionally enable\n Show \"All Others\"  to create a new category called\n\"All others\" that combines the values of categories omitted by your\nlimit. The following chart shows the average\n IMDb  rating of movies from a\nparticular country: The dataset contains movies from many different countries, but it\nwould be most interesting to see which countries produce the\nhighest-rated movies. We can accomplish this by applying a limit to\nonly show countries with the 10 highest average ratings for movies. Switch the  Limit Results  toggle to  On  and leave the\n Show  input at the default value of 10. Check  Show \"All Others\"  to create an 11th column\nrepresenting the average rating of movies from countries that aren't\nin the top 10. The chart is now\nmuch easier to understand, and we have a clear view of the countries\nwith the highest-rated movies:",
            "code": [],
            "preview": "You can bin, sort, and limit data in your charts to highlight key\naspects in your data.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "calculated-fields",
            "title": "Calculate New Data Fields",
            "headings": [
                "Considerations",
                "Create a Calculated Field",
                "Simple Expressions",
                "Operator Expressions",
                "Literal Strings",
                "Edit a Calculated Field",
                "Remove a Calculated Field"
            ],
            "paragraphs": "You can combine data from one or more fields in your collection into\na single calculated field. For example, you can: Convert a field in hours to seconds or in degrees Farenheit to Celsius Multiply a price field by a quantity field to create a total Combine multiple line items within an array to calculate a total You can only create calculated fields from data within the same\ndocument. You can't  convert the type  of a\ncalculated field through the  Atlas Charts  interface. However, you can use\n Type Expression Operators  in a\ncalculated field's definition. Once you create a calculated field, you can  modify  its definition but not its name. However, you\ncan  remove  and recreate the field if\nyou need to rename it. You create a calculated field by combining the data of existing fields\nthrough simple expressions or  MQL (MongoDB Query Language) \n Expression Operators . To create a calculated field: The calculated field appears in italics in the  Fields  pane. The definition of a calculated field can contain either simple\nexpression language or operator expression language. You can't use\nboth simple and operator expression language in the same definition. In the corner of the  Fields  pane, click\n Add Field . Select  Calculated . Enter the  Field Name  of the calculated field you want to\ndefine. You can specify a nested field by using dot notation. For\nexample,  metadata.target . Enter the  Value Expression  using  simple expression  language or\n Expression Operators . Click  Save Field . You can use the following simple expression language in a calculated\nfield. Whitespace that is outside of quoted strings is not included in the\nexpression. Expression Language Example Field names Literal numbers Mathematical operators Brackets ( ) The following examples are valid simple expressions to define a\ncalculated field. Add the  bathrooms  field to the  bedrooms  field: Multiply the  total amount  field by 1.1: Subtract  32  from the  sensor.temp  field, then multiply by\n 5  and divide by  9 : You can use  Expression Operators  to define more\ncomplex calculated fields. The following examples are valid operator expressions to define a\ncalculated field. Multiply the  price  field by  0.075 : Combine multiple line items fields in an array to calculate a\ntotal: You can use a calculated field in the definition of another\ncalculated field. For example, if you create a  salesTax  calculated field with the\nfollowing definition: You can then create a  totalCost  calculated field that uses the\n salesTax  field in its definition: You can set a calculated field's value to a string using the  $literal \noperator. The following field definition assigns a value of  my string : You can modify the definition of a calculated field. If you are using the calculated field in a chart, the chart refreshes to\nreflect the new calculated field definition. In the  Fields  pane, click the  Ellipsis (...) \nnext to the name of the calculated field you want to modify. Select  Modify field . Update the  Value Expression . Click  Save Field . When you remove a calculated field,  Atlas Charts  resamples the data source,\nupdates the  Fields  pane, and refreshes your chart. If the\ncalculated field was used in encodings or filters, it remains in the\nchart even after the field is removed from the  Fields  pane. To remove a calculated field: In the  Fields  pane, click the  Ellipsis (...) \nnext to the name of the calculated field you want to remove. Select  Remove field .",
            "code": [
                {
                    "lang": "json",
                    "value": "bathrooms + bedrooms"
                },
                {
                    "lang": "json",
                    "value": "'total amount' * 1.1"
                },
                {
                    "lang": "json",
                    "value": "(sensor.temp - 32)*5/9"
                },
                {
                    "lang": "json",
                    "value": "{ $multiply: [ \"$price\", 0.075 ] }"
                },
                {
                    "lang": "json",
                    "value": "{ $reduce: {\n  input: '$items', initialValue: 0,\n  in: { $sum : [\"$$value\",\n    { $multiply: [\"$$this.price\",\n      \"$$this.quantity\"] }\n  ] } } }"
                },
                {
                    "lang": "json",
                    "value": "{ $multiply: [ \"$price\", 0.075 ] }"
                },
                {
                    "lang": "json",
                    "value": "{ $sum: [\"$price\", \"$salesTax\"] }"
                },
                {
                    "lang": "json",
                    "value": "{ $literal: \"my string\" }"
                }
            ],
            "preview": "You can combine data from one or more fields in your collection into\na single calculated field. For example, you can:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "experimental-features",
            "title": "Experimental Features",
            "headings": [
                "Natural Language Charts",
                "Procedure",
                "Add a natural language chart.",
                "Click the Add Chart button.",
                "Toggle the switch on the top navigation from Classic to Natural Language.",
                "Describe the chart you want to create.",
                "Click Generate chart.",
                "(Optional) Customize your chart.",
                "(Optional) Give feedback about your generated chart.",
                "Click Save and Close.",
                "Disable AI Features",
                "In your left navigation menu, click AI features.",
                "Set the toggle to off."
            ],
            "paragraphs": "This page lists  Atlas Charts  current preview features. A preview feature is\nwhen a  Atlas Charts  feature is available for evaluation purpose and not\nrecommended for production deployments. The feature and its\ncorresponding documentation can change at any time. Natural language charts simplifies the chart creation process.\nIt supports the following chart types built with  series  and  aggregation   encoding channels : The chart types above support boolean, date, string, and number\n filtering ,  sorting ,  binning , and\n limiting . After you enter a prompt about a chart you would like to see, the AI\nmodel creates the chart. Grouped Bar Stacked Bar Stacked 100% Bar Grouped Column Stacked Column Stacked 100% Column Discrete Line Discrete Area Stacked 100% Area Number Table Donut From the  Dashboards  page, select the dashboard\nwhere you want to add a new chart. For instructions on setting\nup a dashboard, see  Dashboards . In the  Select Data Source  modal, click the\n Project  tab. In the cluster where you loaded the\nsample data, select the  listingsAndReviews  collection\nin the  sample_airbnb  database. When you toggle this, you must click the  Use\nNatural Language Mode  button in the  Natural\nLanguage Mode  modal to accept the  MongoDB Acceptable\nUse Policy  and\n Privacy Policy . If you click  Back to Classic Mode ,  Atlas Charts \nswitches you back to  Classic  mode. You can seamlessly switch between   Classic \nand  Natural Language  mode.  Atlas Charts  retains\nthe prompts and suggestions when you change modes as long\nas you keep the encoding and filter tabs the same in the\nchart builder. In the  Prompt  box, specify the chart you want  Atlas Charts \nto create. We recommend that you write clear prompts and tag the fields from\nyour collection with  @ . The following list provides examples\nof clear prompts: If you're unsure of what chart you would like to see, you can\nchoose one of the  Suggested Prompts  and click\n Select . Use a line chart to display trends in quarterly sales data. Display monthly sales revenue for the last year. Visualize weekly sales data in year 2022 using a discrete line chart. Show the age distribution of our customers. Show me the top 3 property_type and all other properties grouped together with the highest price. Your prompt cannot exceed 500 characters. If your  Suggested Prompts  section does not load,\nclick  Retry . Atlas Charts  displays your chart and also generates a title based\non your prompt. To  customize your chart , toggle the\nswitch on the top navigation from  Natural Language \nto  Classic . On the bottom-left corner of your generated chart, click the\nthumbs up or thumbs down button. If you want to prevent users in your project from using AI features,\ndisable the AI feature: To learn more, see  New Intelligent Developer Experiences\nCompass Atlas Charts Relational Migrator \nand  AI and Data Usage Information .",
            "code": [],
            "preview": "This page lists Atlas Charts current preview features. A preview feature is\nwhen a Atlas Charts feature is available for evaluation purpose and not\nrecommended for production deployments. The feature and its\ncorresponding documentation can change at any time.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "query-library",
            "title": "Save and Reuse Queries",
            "headings": [
                "Save Aggregation Pipeline Queries",
                "In the Query bar for a chart, input a find() query or an aggregation pipeline and click Apply.",
                "Click the Library dropdown next to the Query bar.",
                "Choose Save Query to display the confirmation window.",
                "Enter a name for your query.",
                "Click Save to save the query to the query library.",
                "Load Saved Queries",
                "Create a new chart, or click the Edit button for the chart.",
                "Click the Library dropdown next to the query bar.",
                "Choose Load Query from the dropdown to display the Load Query pane.",
                "Choose the saved query to run against your data.",
                "Browse the list of saved queries.",
                "Click Load for the query you wish to load in the query bar.",
                "Modify or Disconnect Saved Queries",
                "Manage Saved Queries",
                "Create a new chart, or click the Edit button for the chart.",
                "Click the Library dropdown next to the query bar.",
                "Choose Load Query from the dropdown to display the Load Query pane.",
                "Rename a Query",
                "Delete a Query"
            ],
            "paragraphs": "The   Query Library  allows you to reuse a query across\nmultiple charts. If you save a query to the library, any user on your\ncharts project can apply the same query on their own charts. Any\nchanges to a query stored in the library impact all charts thar are\nconnected to that query. After you apply an aggregation pipeline query to a chart, you can save\nit to the  Query Library . This makes the query available\nfor use on other charts created by you and other users on the same\ncharts project. To save a query: To learn more, see  Run Aggregation Pipelines on Your Data  and  Filter Your Data Using the Query Bar . The   Query Library  menu contains options for saving and\nloading queries. The  Query title  field shows the names of each existing\nquery and the number of charts that use the query. You can enter a\nnew name for your query or select an eisting query name to overwrite\nthe existing query with your new query. If you enter a new name, you must also click  Create\n<your-query-title>  to create a named query in the library. If you select an existing query from the list, the field is\npre-populated with the selected query name. If you save an existing\nquery, all charts connected to that query will inherit the new query\ntext. To use a previously saved query from the  Query Library  on\na chart, use the  Library  dropdown to load the saved query.\nYou can access queries saved by any user in the project. To load saved queries: The   Query Library  menu contains options for loading and\nsaving queries. By default, the current data source is selected. It contains the list\nof queries applied to charts using the current data source only. You can choose  Any data source  to select from all saved\nqueries in the library. In the  Load Query  pane, the queries are listed in\nalphabetical order and are case insensitive. For each query, you can\nsee the name of the query, the start of the query, and the number of\ncharts that use the query. Also, you can do the following: To learn more about all other actions that you can perform on the\nsaved queries, see  Manage Saved Queries . Hover over the tooltip icon to see the query owner and when the\nquery was last modified. Click  x  to close the library pane. After loading a query, you can run the query against the data in the\nchart. Also, you can modify or disconnect the query from the library.\nTo learn more, see  Modify or Disconnect Saved Queries . After you  load a saved query , you\ncan modify or disconnect the query from the library. To modify , make changes to the query in the query bar and save the\nquery under its original name, only if you created the query or have\nthe  Project Owner  role, or save the query under a new name. If you save the modified query under the same name, all other charts\nusing the same named query will inherit the modified query for reuse. If you save the modified query in the library under a new name, the\nmodified query, although unused by other charts initially, will be\navailable for reuse in the future. To disconnect , modify the query in the query bar and click\n Apply  after changing the query. The query is disconnected\nfrom the library, which makes the modified query  private  to this\nchart. You must save the query to the library if you wish to reuse this\nquery on other charts in the future. If you save the query under the\nsame name in the library, all charts connected to it will inherit the\nnew query. Alternatively, click  Revert  before applying the query to\nthe chart to undo the changes. When you  load a saved query , the\nquery author or user with the  Project Owner  role can\nrename or delete the queries in the library. The   Query Library  menu contains options for loading and\nsaving queries. In the  Load Query  pane, the queries are listed in\nalphabetical order and are case insensitive. You can do the following\nif you created the query or if you have the  Project Owner \nrole: Click the pencil icon next to the name of the query that you wish\nto rename. Enter the new name for the query. Each query name must be unique. Click the check mark to save the query under the new name. Rename or delete the query from the library. Click the trash icon for the query you wish to delete from the\nlibrary. Choose one of the following options: Delete the query from the library, and keep the\ncontents of the query on the connected chart. If you choose this option, the query will continue to be\navailable to any charts that used the query, but the query will\nbe disconnected from the library and unavailable for any new\ncharts. Delete query from the library, and remove the\ncontents of the query on the connected chart. If you choose this option, the query will be removed from the\nlibrary and unavailable for any new or existing charts that used\nthe query.",
            "code": [],
            "preview": "The  Query Library allows you to reuse a query across\nmultiple charts. If you save a query to the library, any user on your\ncharts project can apply the same query on their own charts. Any\nchanges to a query stored in the library impact all charts thar are\nconnected to that query.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embed-chart-stitch-auth",
            "title": "Embed a Chart Authenticated with Atlas App Services",
            "headings": [
                "Prerequisites",
                "Procedures",
                "Enable Authenticated Embedding for a Chart",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source",
                "Select the Authenticated tab in the dialog window.",
                "Toggle Enable authenticated access to On.",
                "(Optional) Specify a filter function to inject per user.",
                "(Optional) Specify filterable fields for your chart.",
                "Copy the Chart Base URL and Chart ID",
                "Configure Charts to use your Custom Atlas App Services Provider",
                "Go to the Authentication Settings view.",
                "From the Authentication providers section, click Add.",
                "In the Name field, enter a descriptive name for the provider.",
                "From the Provider list, select Atlas App Services.",
                "From the Atlas Project list, select the Cloud project that contains your app service.",
                "From the App ID list, select the app service to use for authentication.",
                "Set toggle switch for using Atlas App Services rules for data access.",
                "Enter service name.",
                "Click the Save button.",
                "Create a Web App to Display Your Chart",
                "Customize the Node.js App",
                "Open the file index.js in a text editor.",
                "Enter your App ID",
                "Enter your Charts Base URL",
                "Enter your chart ID"
            ],
            "paragraphs": "Atlas App Services  is a serverless platform that enables developers\nto quickly build applications without having to set up server infrastructure.\nApp Services offers several authentication options, including  Google OAuth ,  Facebook Login , and email/password.\nYou can use the authentication mechanism from an app service to control\ndata access for an embedded chart. This tutorial shows you how to: Enable authenticated embedding for a chart. Use the Embedding SDK to embed a chart authenticated by a custom\n Atlas App Services  provider. Use your app service to control the data in your embedded chart. This tutorial does not cover creating an app service with authentication.\nSee the  Atlas App Services documentation  for\napp creation tutorials. You must be an  Atlas \n Project Owner  to\nconfigure embedding authentication providers for your linked\n Charts  instance. You must have a chart which uses your app's backing database as\nits  data source . For more information about creating\na chart, see  Build Charts . Enable authenticated embedding to generate a  Charts  Base URL and\na chart ID. You will need your  Charts  Base URL and chart ID to\ndisplay your chart on a web page. From your dashboard page, select the dashboard containing the chart\nyou wish to embed. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. You can specify a function to inject a MongoDB filter document for\neach user who views the chart. This is useful for rendering\nuser-specific charts. The following filter function only renders data where the\n ownerId  field of a document matches the value of\nthe Embedding Authentication Provider's token's  sub  field: To learn more about injecting filters per user, see\n Inject User-Specific Filters . Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. To learn more about filterable fields, see\n Specify Filterable Fields . Use these values in your application code together with your\nEmbedded Authentication Provider attributes to embed your chart. If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. In addition to authenticating users for embedded chart access, you can\nperform fine-grained data access control with your app service  service\nrules . Set the toggle switch to\n On  if you want to enable rule enforcement. When this option is enabled, any App Services rules defined on collections will\nbe observed by  Charts  when retrieving chart data. You can use this\nfeature to restrict access to the data shown on your chart, including\nshowing different subsets of data to different users, depending on their\n role . This option assumes that the  data source  for\nthis chart uses the same MongoDB database and collection as your\napp service. Using this option may have a performance impact, so you should leave\nit off if you do not need to restrict data access based on\nApp Services rules. Enter the name of the service that fetches data from\nMongoDB. To find the name of your data service: Navigate to your app service. Click  Clusters  in the sidebar navigation. The service name is listed under  App Service Name . If you already have an app in which to display your chart, you're ready\nto add an  embedded chart .\nIf not, proceed with the remaining steps to create a new app. MongoDB offers a pre-built example app that shows how to use the\nEmbedding SDK to display an embedded chart using App Services authentication. Clone the  GitHub repository  and\nfollow the instructions in the  Readme  file to begin using the app.\nYou can run the app as-is, or you can customize it to use the chart you\ncreated earlier. The example app assumes that your app service uses email/password\nauthentication. If your app service uses another authentication mechanism,\nthe example app will require additional customization. All the lines you need to edit are marked with a comment containing\n ~REPLACE~ . After you finish customizing the app, it's ready to run. The file  index.js  is located in the  src  directory. Replace the existing App ID with your App ID, which you can\nfind on the left side of your app service UI. Replace the existing  Charts  Base URL with the Base URL of the\nchart you want to display. Your  Charts  Base URL is visible in\nthe embedding options modal window. See\n Embedding SDK  for detailed instructions on enabling\nembedding for a chart. Note the  getRealmUserToken()  function in the code snippet above, which\nreturns the  JWT (JSON Web Token)  from the existing Atlas App Services authentication session.\n getRealmUserToken()  must be imported from the Embedding SDK, as you can\nsee in the  import  statement on line 2 of the example app: You can also include the Embedding SDK with inline Javascript in an HTML\npage, as shown in the following code snippet: To use the  getRealmUserToken()  function in this scenario, import it\nfrom the SDK: Replace the existing chart ID with the ID of the chart you want to display.\nYour chart ID is visible in the embedding options modal window. See\n Embedding SDK  for detailed instructions on enabling\nembedding for a chart.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "function getFilter(context) {\n  return { ownerId: context.token.sub };\n}"
                },
                {
                    "lang": "javascript",
                    "value": "const client = Stitch.initializeAppClient(\n  'authentication-sample-eibkj', // Optional: ~REPLACE~ with your  App ID\n{"
                },
                {
                    "lang": "javascript",
                    "value": "const sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://charts-dev.mongodb.com/charts-test2-pebbp\", // Optional: ~REPLACE~ with your Charts URL\n  getUserToken: () => getRealmUserToken(client),\n});"
                },
                {
                    "lang": "javascript",
                    "value": "import ChartsEmbedSDK, { getRealmUserToken } from \"@mongodb-js/charts-embed-dom\";"
                },
                {
                    "lang": "javascript",
                    "value": "<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.6.0/stitch.js\"></script>\n<script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script>"
                },
                {
                    "lang": "javascript",
                    "value": "ChartsEmbedSDK.getRealmUserToken()"
                },
                {
                    "lang": "javascript",
                    "value": "const chart = sdk.createChart({\n  chartId: \"a2e775e6-f267-4c2c-a65d-fbf3fad4a4f2\", // Optional: ~REPLACE~ with your Chart ID\n});"
                }
            ],
            "preview": "Atlas App Services is a serverless platform that enables developers\nto quickly build applications without having to set up server infrastructure.\nApp Services offers several authentication options, including Google OAuth, Facebook Login, and email/password.\nYou can use the authentication mechanism from an app service to control\ndata access for an embedded chart.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-chart-options",
            "title": "Embedded Chart Options",
            "headings": [
                "Options",
                "Refresh and Data Caching Behavior"
            ],
            "paragraphs": "You can customize the appearance and behavior your embedded charts with\na variety of options. Options are available to charts embedded with the\n Embedding SDK  and embedded within\n iframes . To embed charts from your dashboards, you must configure embedding\noptions on your data sources. For instructions, see\n Embed Charts in Your Web Application . The following options are available for embedded charts: Option Purpose Embedded Charts SDK Options Provides the JavaScript  createChart()  method for rendering a\nchart within a web page. You can control properties such as the\nheight and width of the chart. To learn more, see\n Embedded Chart Options . Iframe Options You can set chart options within an iframe by adding inline style\ntags and query parameters to the chart URL. The following table describes how  Atlas Charts  loads data from the cache\nwhen loading or refreshing the chart based on the\n autoRefresh  and   maxDataAge  values. autoRefresh  Value maxDataAge  Value Atlas Charts  Behavior omitted or  false omitted The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard with data\nfrom the cache if the data is less than one hour old. If the\ndata from the cache is more than one hour old,  Charts \nqueries the data source for the latest data, refreshes the\ncache, and renders the chart or dashboard using this data. omitted or  false -1 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard using data\nfrom the cache.  Charts  queries the data source for\nthe latest data only if the cache has no data for the chart or\ndashboard. omitted or  false 0 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  queries the data source for the latest data,\nand renders the chart or dashboard using this data.\n Charts  doesn't read data from the\ncache. omitted or  false Number greater than  0 The chart or dashboard does not automatically refresh. When you initially load or manually refresh the chart or\ndashboard,  Atlas Charts  renders the chart or dashboard with data\nfrom the cache if the age of the data is less than the\n maxDataAge  value, in seconds. If the age of the data from\nthe cache is older than the  maxDataAge  value, in seconds,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the chart or dashboard using\nthis data. true omitted The chart or dashboard automatically refreshes every hour. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than one hour old. If the age of the data from the cache is\nmore than one hour old,  Charts  queries the data source\nfor the latest data, refreshes the cache, and renders the chart\nor dashboard using this data. true Number greater than or equal to  60 The chart or dashboard automatically refreshes at the\n maxDataAge  interval you specify, in seconds. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than the  maxDataAge  value, in seconds. If the age of\nthe data from the cache is older than the  maxDataAge  value,\nin seconds,  Charts  queries the data source for the\nlatest data, refreshes the cache, and renders the chart or\ndashboard using this data. true Number less than  60 The chart or dashboard automatically refreshes at the minimum\nperiod of 60 seconds. When you initially load, manually refresh, or automatically\nrefresh the chart or dashboard,  Atlas Charts  renders the chart or\ndashboard with data from the cache if the age of the data is\nless than the minimum  maxDataAge  value of 60 seconds. If\nthe age of the data from the cache is older than 60\nseconds,  Charts  queries the data source for the latest\ndata, refreshes the cache, and renders the chart or dashboard\nusing this data.",
            "code": [],
            "preview": "You can customize the appearance and behavior your embedded charts with\na variety of options. Options are available to charts embedded with the\nEmbedding SDK and embedded within\niframes.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "admin-settings",
            "title": "Data Transfer",
            "headings": [
                "Monthly Data Transfer"
            ],
            "paragraphs": "The  Data Transfer  link appears in the sidebar of the\n Charts  UI. Only users with the  Project Owner  role can see this section. The  Data Tranfer by Month  panel of the\n Data Transfer  page shows the data usage of your  Atlas Charts \ninstance over the current month. The panel displays the following metrics: MongoDB provides a free  1 GB  of data transfers per month. Nearly\nall  Charts  use cases should fall within this  1 GB  free\ntier. For more information on  Atlas Charts  pricing and sample pricing\nscenarios, see  Charts on Atlas Pricing . Metric Description Total Data Transfer Total data usage in  GB  that your  Charts  instance has\nconsumed over the current month. Free Tier Remaining Amount of data in  GB  that your  Charts  instance can\nstill use this month for free. If you exceed this amount, your\n Charts  instance starts\n incurring charges . Days Remaining Days remaining in the current month, after which the usage cycle\nresets.",
            "code": [],
            "preview": "The Data Transfer link appears in the sidebar of the\nCharts UI.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "rich-schema-support",
            "title": "Visualize Embedded Objects and Arrays",
            "headings": [
                "Embedded Objects",
                "Array Fields",
                "General Array Reduction Options",
                "String Accumulates",
                "Numeric Accumulates",
                "Fields within an Array"
            ],
            "paragraphs": "Atlas Charts  can visualize fields from rich data structures. You can\ndirectly access fields in embedded objects and flexibly process array\nfields according to your use case. Embedded objects in the  Fields  section of the Chart Builder\nare indicated by curly brackets ( {} ) next to their name. To expand\nan object field, click the arrow to the left of the field name. You can\ndrag embedded object fields onto the desired\n encoding channels  just like any other field\nto visualize those fields in your chart. The  video.movieDetails  data source in the following example\ncontains embedded objects named  awards  and  imdb . We expand the\nobjects by clicking the arrows to the left of their names, then in\nthe bar chart we compare the\nmean  imdb.rating  in the  Y-axis  with\n awards.wins  in the  X-axis . Notice the  filter  provided above the chart of\n {'awards.wins': {$gt: 0}} , meaning only movies which have won\nat least one award are included in the visualization. For more\ninformation on filtering documents in  Atlas Charts , see the\n Filter Documents  page. Array fields in the  Fields  section of the Chart Builder\npage are indicated by square brackets ( [] ) next to their name. When\nadding an array field to an  encoding channel , select an  array reduction  option to\nprocess the data in the best way for your visualization. The following\narray reduction options are available: You can apply these array reduction options to any array: Array Reduction Option Description Unwind array Deconstructs the array field from the input documents to\noutput a document for  each  element. Each output document is\na copy of the input document with the value of the array field\nreplaced by the element. Array length Counts and returns the total number of items in the array. Array element by index Returns the array element at the specified zero-based index position. You can apply these accumulates to arrays of String values: Accumulate Description concat Concatenates the values of the array into a a single string.\nIn the  Delimiter  field, enter characters that you\nwant  Charts  to display between each array element. The\ndefault delimiter is  , . Consider the following array that describes movie genres: Charts  concatenates the array to produce the following\nstring when you enter  /  in the  Delimiter \nfield: min length Returns the length of the shortest string in the array. max length Returns the length of the longest string in the array. longest Returns the longest string in the array. shortest Returns the shortest string in the array. existence of value Returns  true  if the specified string exists in the array,\nand  false  if the string does not exist in the array. count of occurrences Returns the number of times the specified string occurs in the\narray. You can apply these accumulates to arrays of Numeric values: Accumulate Description min Returns the minimum value in the array. max Returns the maximum value in the array. mean Returns the mean of all values in the array. sum Returns the sum of all values in the array. Atlas Charts  only displays accumulate options which match the data\ntype of the field used in the visualization (i.e., only showing\nstring accumulate options for string data and numeric accumulate\noptions for numeric data). As with array-valued fields,  encoding channels  require an array reduction option to be specified\nwhen handling fields  within  an array. In this case, the selected\nreduction is applied to the array containing the target field.\nAdditionally, in the case of embedded arrays, you must select a reduction\noption for the top-level array and all sub-arrays. Note that different\nreduction options may be used for each embedded array.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "\"genres\": [\"Action\", \"Horror\", \"Sci-Fi\"]"
                },
                {
                    "lang": "none",
                    "value": "Action/Horror/Sci-Fi"
                }
            ],
            "preview": "Atlas Charts can visualize fields from rich data structures. You can\ndirectly access fields in embedded objects and flexibly process array\nfields according to your use case.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "add-lookup-field",
            "title": "Add a Lookup Field",
            "headings": [
                "Create a New Lookup Field",
                "Example"
            ],
            "paragraphs": "Lookup fields allow you to create a chart that joins data from multiple\ncollections in the same database. A lookup field brings in documents from a\nsecond collection whose values correspond to a field in your chart's main\ndata source. Lookup fields are useful for leveraging parent/child and primary key/foreign\nkey relationships between collections, or any situation in which a field\nin one collection references a field in another collection. Lookup fields\nuse  $lookup  to retrieve\nmatching documents from a remote collection. You can create a lookup field from any field in your chart's data source\nwhich is not an  embedded object  and which\ncontains matching data with a field in another collection. The remote\ncollection must be: To add a lookup field, mouse over an existing field and click on the\n ellipsis (...)  to the right of the field name. Select\n Lookup field  from the dropdown menu. A modal window appears: Select the desired collection and field from the dropdown menus. The remote\nfield must contain at least one document with data that matches the local\nfield, or the lookup field will be empty. You have the option to either return all matching documents from the foreign\ncollection or only the first matching document. Returning all matching\ndocuments is recommended for one-to-many relationships, such as parent/child\nand primary key relationships. Returning only the first document is recommended\nfor one-to-one and many-to-one relationships, such as reference data codes.\nIf you want to return only the first matching document, check the\n Return only first matching document  radio button. Charts  suggests a name for the new field, but you can enter a name\nof your choosing if you prefer. Click  Save  to create the new\nfield. The new field appears with a  binoculars  icon, indicating that\nit is a lookup field. To remove a lookup field from your field panel, mouse over the lookup\nfield and click on the  ellipsis (...)  to the right of the\nfield name. Select  Remove field  from the dropdown menu. An existing  Charts  data source. Part of the same database as the local collection. You can also use the local collection as a lookup field source. Be sure that any field you use as a lookup field is appropriately\n indexed . Lookup operations on an\nunindexed field in a large collection can cause significant performance\nissues or timeouts. The following example uses two data sources, one called  product_catalog \nand one called  orders . The  product_catalog  collection contains the following documents: The  orders  collection contains the following documents: Records in the  orders  collection use the  sku  field to reference\nthe  _id  field in the  product_catalog  collection. The goal is to create a  column chart  showing\nthe number of ordered items. The following chart uses  orders  as its\ndata source. The lookup field  sku_lookup_product_catalog  is created\nfrom the  orders.sku  field. It uses the  product_catalog  collection\nas its remote data source and  product_catalog._id  as its remote field. The chart uses  product_catalog.item  as its X axis and  orders.quantity \nas its Y axis.",
            "code": [
                {
                    "lang": "json",
                    "value": "{ \"_id\" : 76234, \"item\" : \"21 inch monitor\" }\n{ \"_id\" : 38921, \"item\" : \"USB C cable\" }\n{ \"_id\" : 21167, \"item\" : \"keyboard\" }\n{ \"_id\" : 90252, \"item\" : \"60 GB external hard drive\" }"
                },
                {
                    "lang": "json",
                    "value": "{ \"_id\" : 1, \"sku\": 38921, \"quantity\": 50 }\n{ \"_id\" : 2, \"sku\": 21167, \"quantity\": 75 }\n{ \"_id\" : 3, \"sku\": 76234, \"quantity\": 15 }\n{ \"_id\" : 4, \"sku\": 21167, \"quantity\": 20 }"
                }
            ],
            "preview": "Lookup fields allow you to create a chart that joins data from multiple\ncollections in the same database. A lookup field brings in documents from a\nsecond collection whose values correspond to a field in your chart's main\ndata source.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards-embedding-sdk",
            "title": "Embed Dashboards with the Embedding SDK",
            "headings": [],
            "paragraphs": "You can embed a dashboard into a web application with the\n Embedding SDK , which allows you to make\nmore flexible adjustments to dashboard settings and rendering. You can use the embedding SDK to do the following tasks: To embed a dashboard with the SDK, you need to: To learn more, see  Get Started with the Embedding SDK . Change the size and style of the dashboard Refresh on demand Save dashboards as an image Enable embedding for the dashboard. Have the dashboard ID and base URL strings.",
            "code": [],
            "preview": "You can embed a dashboard into a web application with the\nEmbedding SDK, which allows you to make\nmore flexible adjustments to dashboard settings and rendering.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "aggregation-pipeline-generation",
            "title": "Backing Aggregation Pipeline",
            "headings": [
                "Example",
                "Encoding",
                "Adding Queries",
                "Adding Calculated Fields",
                "Adding Filters"
            ],
            "paragraphs": "To get the data needed to render a chart,  Charts  creates a\nMongoDB Aggregation Pipeline which is executed on the MongoDB database\nserver. The pipeline consists of multiple stages, each of which is\ngenerated based on different settings specified by the chart's author.\nThis document explains how the various Chart Builder settings are used\nto construct the Aggregation Pipeline. You can view the pipeline used to\ncreate a chart by choosing the  View Aggregation Pipeline \noption in the Chart Builder's ellipsis dropdown on the top right. The pipeline constructed by  Atlas Charts  consists of the following segments in the following order: Charts views Dashboard filters Chart query Lookup fields Calculated fields Embedding filters Chart filters Encoded fields Sorting Maximum document limit You do not need to configure all of the above settings when creating\na chart. Unspecified settings are skipped when generating the\naggregation pipeline. The following chart shows the total sale amounts from an office supply\ncompany, categorized by purchase method. Each document in the data\ncollection represents a single sale. Using this chart as an example, we will explore how the specifications\nfor each of the above settings change the aggregation pipeline generated\nby  Atlas Charts . Without any  Data Source  pipeline,  Query  bar\nqueries, calculated fields, and filters added in the  Filter \npane,  Atlas Charts  generates the following aggregation pipeline: The pipeline at this point consists of groups from the\n Encode  panel, stages for the default sort order, and the\nmaximum document limit, which is set to 5000 by  Atlas Charts . The query below restricts the documents shown to only those with\na  saleDate  equal to or more recent than  January 1, 2017  with at\nleast 5 elements in the  items  array.  items  is\nan array where each element is an item purchased during a sale. Query: Applying the above query in the  Query  bar generates the\nfollowing chart and aggregation pipeline: Aggregation Pipeline: The aggregation pipeline now starts with the query applied, and is\nfollowed by the groups selected in the  Encode  panel and the\nmax document limit. We can also change the chart to show the total revenue generated\ncategorized by purchase method. To accomplish this task, we will create\na calculated field that calculates the total revenue by multiplying\nprice by quantity. Adding this new calculated field, in addition to the\nquery above, produces the following chart and pipeline: Calculated Field Expression: Aggregation Pipeline: The updated pipeline now includes the calculated field right below the\nquery applied in the  Query  bar while the order of the rest\nof the components remains unchanged. This chart can be further refined by adding a filter in the\n Filter  pane to only select in-store sales made in the New\nYork location. Adding this filter produces the following chart and\naggregation pipeline: Aggregation Pipeline: The pipeline now includes the  storeLocation  filter right below the\ncalculated field while the order of the rest of the components remains\nunchanged.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{\n  \"$addFields\": {              // Encoding\n    \"__alias_0\": {\n      \"$sum\": \"$items.price\"\n    }\n  }\n},\n{\n  \"$group\": {\n    \"_id\": {\n      \"__alias_1\": \"$purchaseMethod\"\n    },\n    \"__alias_0\": {\n      \"$sum\": \"$__alias_0\"\n    }\n  }\n},\n{\n  \"$project\": {\n    \"_id\": 0,\n    \"__alias_1\": \"$_id.__alias_1\",\n    \"__alias_0\": 1\n  }\n},\n{\n  \"$project\": {\n    \"x\": \"$__alias_1\",\n    \"y\": \"$__alias_0\",\n    \"_id\": 0\n  }\n},\n\n{\n  \"$addFields\": {              // Sorting\n    \"__agg_sum\": {\n      \"$sum\": [\n        \"$y\"\n      ]\n    }\n  }\n},\n{\n  \"$sort\": {\n    \"__agg_sum\": -1\n  }\n},\n{\n  \"$project\": {\n    \"__agg_sum\": 0\n  }\n},\n{\n  \"$limit\": 5000\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  $and: [\n  {\n    saleDate: { $gte: new Date(\"2017-01-01\") }\n  },\n  {\n    'items.4': { $exists: true }\n  } ]\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  \"$match\": {              // Query\n    \"$and\": [\n      {\n        \"saleDate\": {\n          \"$gte\": {\n            \"$date\": \"2017-01-01T00:00:00Z\"\n          }\n        }\n      },\n      {\n        \"items.4\": {\n          \"$exists\": true\n        }\n      }\n    ]\n  }\n},\n{\n  \"$addFields\": {\n    \"__alias_0\": {\n      \"$sum\": \"$items.price\"\n    }\n  }\n},\n{\n  \"$group\": {\n    \"_id\": {\n      \"__alias_1\": \"$purchaseMethod\"\n    },\n    \"__alias_0\": {\n      \"$sum\": \"$__alias_0\"\n    }\n  }\n},\n{\n  \"$project\": {\n    \"_id\": 0,\n    \"__alias_1\": \"$_id.__alias_1\",\n    \"__alias_0\": 1\n  }\n},\n{\n  \"$project\": {\n    \"x\": \"$__alias_1\",\n    \"y\": \"$__alias_0\",\n    \"_id\": 0\n  }\n},\n{\n  \"$addFields\": {\n    \"__agg_sum\": {\n      \"$sum\": [\n        \"$y\"\n      ]\n    }\n  }\n},\n{\n  \"$sort\": {\n    \"__agg_sum\": -1\n  }\n},\n{\n  \"$project\": {\n    \"__agg_sum\": 0\n  }\n},\n{\n  \"$limit\": 5000\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  \"$match\": {\n    \"$and\": [\n      {\n        \"saleDate\": {\n          \"$gte\": {\n            \"$date\": \"2017-01-01T00:00:00Z\"\n          }\n        }\n      },\n      {\n        \"items.4\": {\n          \"$exists\": true\n        }\n      }\n    ]\n  }\n},\n{\n  \"$addFields\": {              // Calculated Field\n    \"revenue\": {\n      \"$reduce\": {\n        \"input\": \"$items\",\n        \"initialValue\": 0,\n        \"in\": {\n          \"$sum\": [\n            \"$$value\",\n            {\n              \"$multiply\": [\n                \"$$this.price\",\n                \"$$this.quantity\"\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n},\n{\n  \"$group\": {\n    \"_id\": {\n      \"__alias_0\": \"$purchaseMethod\"\n    },\n    \"__alias_1\": {\n      \"$sum\": \"$revenue\"\n    }\n  }\n},\n{\n  \"$project\": {\n    \"_id\": 0,\n    \"__alias_0\": \"$_id.__alias_0\",\n    \"__alias_1\": 1\n  }\n},\n{\n  \"$project\": {\n    \"x\": \"$__alias_0\",\n    \"y\": \"$__alias_1\",\n    \"_id\": 0\n  }\n},\n{\n  \"$addFields\": {\n    \"__agg_sum\": {\n      \"$sum\": [\n        \"$y\"\n      ]\n    }\n  }\n},\n{\n  \"$sort\": {\n    \"__agg_sum\": -1\n  }\n},\n{\n  \"$project\": {\n    \"__agg_sum\": 0\n  }\n},\n{\n  \"$limit\": 5000\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  \"$match\": {\n    \"$and\": [\n      {\n        \"saleDate\": {\n          \"$gte\": {\n            \"$date\": \"2017-01-01T00:00:00Z\"\n          }\n        }\n      },\n      {\n        \"items.4\": {\n          \"$exists\": true\n        }\n      }\n    ]\n  }\n},\n{\n  \"$addFields\": {\n    \"revenue\": {\n      \"$reduce\": {\n        \"input\": \"$items\",\n        \"initialValue\": 0,\n        \"in\": {\n          \"$sum\": [\n            \"$$value\",\n            {\n              \"$multiply\": [\n                \"$$this.price\",\n                \"$$this.quantity\"\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n},\n{\n  \"$match\": {             // Filter\n    \"storeLocation\": {\n      \"$in\": [\n        \"New York\"\n      ]\n    }\n  }\n},\n{\n  \"$group\": {\n    \"_id\": {\n      \"__alias_0\": \"$purchaseMethod\"\n    },\n    \"__alias_1\": {\n      \"$sum\": \"$revenue\"\n    }\n  }\n},\n{\n  \"$project\": {\n    \"_id\": 0,\n    \"__alias_0\": \"$_id.__alias_0\",\n    \"__alias_1\": 1\n  }\n},\n{\n  \"$project\": {\n    \"x\": \"$__alias_0\",\n    \"y\": \"$__alias_1\",\n    \"_id\": 0\n  }\n},\n{\n  \"$addFields\": {\n    \"__agg_sum\": {\n      \"$sum\": [\n        \"$y\"\n      ]\n    }\n  }\n},\n{\n  \"$sort\": {\n    \"__agg_sum\": -1\n  }\n},\n{\n  \"$project\": {\n    \"__agg_sum\": 0\n  }\n},\n{\n  \"$limit\": 5000\n}"
                }
            ],
            "preview": "To get the data needed to render a chart, Charts creates a\nMongoDB Aggregation Pipeline which is executed on the MongoDB database\nserver. The pipeline consists of multiple stages, each of which is\ngenerated based on different settings specified by the chart's author.\nThis document explains how the various Chart Builder settings are used\nto construct the Aggregation Pipeline. You can view the pipeline used to\ncreate a chart by choosing the View Aggregation Pipeline\noption in the Chart Builder's ellipsis dropdown on the top right.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "manage-deployment",
            "title": "Manage Deployments",
            "headings": [
                "Connect a Deployment to Charts",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "Check the connection status and connect the deployment.",
                "Disconnect a Deployment from Charts",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "Check the connection status and disconnect the deployment.",
                "Access Deployment Settings",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "Check the connection status and connect the deployment.",
                "Enable Organization-Wide Sharing for a Deployment",
                "Considerations",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "Turn on organization-wide sharing.",
                "Deployment Read Preference"
            ],
            "paragraphs": "On the  Data Sources  page, an  Atlas \n Project Owner  can: To manage data source settings, see  Manage Data Sources . Connect a deployment  to  Atlas Charts . Disconnect a deployment  from\n Atlas Charts . Modify  deployment settings . You can connect a deployment to  Charts  to access the\ndata for the collections within the deployment in  Charts . To connect a deployment to  Charts : Charts  connects to all deployments and data sources in your\nproject by default. The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. If the deployment connection status is  Connected , the\ndeployment is already connected to  Charts . The\n Data Access  section displays all of the collections\nwithin the selected  Atlas  deployment. If the deployment connection status is  Disconnected : The deployment connects and the  Data Access  section\ndisplays all of the databases for the selected  Atlas \ndeployment. Click the connect icon   next to the deployment\nconnection status. Click  Reconnect  on the modal that appears. Disconnect a deployment to disconnect all data sources within the\ndeployment from  Charts . If you disconnect a deployment, you can  reconnect  it later to resume rendering charts that use the\ndeployment's data sources. To disconnect a deployment: The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. If the deployment connection status is  Disconnected ,\nthe deployment is already disconnected from  Charts . If the deployment connection status is  Connected : The deployment disconnects from  Charts . Click the disconnect icon   next to the deployment connection\nstatus. The  Disconnect Deployment  modal appears. Click  Check for connected charts  to\nlearn whether any charts use the deployment's collections as a\ndata source. Click  Disconnect . To manage a deployment in  Charts : You can manage the following deployment settings. The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. If the deployment connection status is  Connected , the\ndeployment is already connected to  Charts . The\n Data Access  section displays all of the collections\nwithin the selected  Atlas  deployment. If the deployment connection status is  Disconnected : The deployment connects and the  Data Access  section\ndisplays all of the databases for the selected  Atlas \ndeployment. Click the connect icon   next to the deployment\nconnection status. Click  Reconnect  on the modal that appears. Organization-wide sharing grants users in your organization, including\nusers who are not members of your project, permission to view data in a\ndeployment that is used for dashboards shared with your organization. You can enable organization-wide sharing\n for an entire deployment  or\n for a specific data source . To enable organization-wide sharing for a deployment: Check that you can access the  Atlas  UI for the organization that contains\nyour  Atlas  project. If your organization's owners enable\n IP access list for the Atlas UI for an organization ,\nthis restricts access to the  Atlas  UI only to those users whose\nIP addresses are included in the organization's IP access list. If you\ndon't have access to an organization,  Atlas Charts  displays a banner at the\ntop of the page notifying you of the restriction. Contact your organization's\nowners so that they can include your IP address in the access list for\nthe  Atlas  UI for this organization. This restriction doesn't apply\nto embedded charts applications and to the public dashboard. If you enable organization-wide sharing for a deployment, it applies\nto all existing data sources and to any new data source you add to\nthat deployment in the future. The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. In the  Organization  subsection of the\n Data Access  section, toggle\n All users in the organization can view data in this data source  to  ON . Each  deployment  has a read preference, which\ndetermines the  replica set member \nthat the data source reads data from. By default, a newly-added  Atlas  cluster has a read\npreference of  Secondary , which means that it reads from a\n secondary node \nwithin the  Atlas  cluster. You can change the read preference of\na cluster using the  Read preference  dropdown. You can't change the read preference of a\nfederated database instance. Federated database instances have a read preference\nof  Nearest  by default, which means that they read from the\nreplica set member whose network latency falls\nwithin the acceptable latency window. To learn more, see\n Read Preference Modes . The  Read preference  dropdown contains the following read\npreference options for clusters: Read Preference Description Primary Reads from the  primary node  within the cluster. To learn\nmore, see\n Read Preference Modes . Secondary Reads from the  secondary node  within the cluster. To learn\nmore, see\n Read Preference Modes . Nearest Reads from the replica set member whose network latency falls\nwithin the acceptable latency window. To learn more, see\n Read Preference Modes . Analytics Node Reads from an  analytics node .",
            "code": [],
            "preview": "On the Data Sources page, an Atlas\nProject Owner can:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "",
            "title": "Atlas Charts",
            "headings": [
                "Features",
                "Concepts",
                "Chart Types",
                "Tutorials"
            ],
            "paragraphs": "Atlas Charts  is a tool to create visual representations of\nyour MongoDB data. Data visualization is a key component to providing a\nclear understanding of your data, highlighting correlations between\nvariables and making it easy to discern patterns and trends within your\ndataset.  Atlas Charts  makes communicating your data a straightforward\nprocess by providing built-in tools to easily share and collaborate on\nvisualizations. Atlas Charts  provides built-in\n aggregation  functionality. Aggregation\nallows you to process your collection data by a variety of metrics\nand perform calculations such as mean and standard deviation to\nprovide further insight into your data. Charts  provides seamless integration with\n MongoDB Atlas . You can link  Atlas Charts  to\n Atlas  projects and quickly get started visualizing your  Atlas \ncluster data. Charts  handles document-based data, including\n embedded objects and arrays .\nUtilizing a nested data structure provides the flexibility to\nstructure your data as it best fits for your application while still\nretaining powerful visualization capabilities. The following elements of  Atlas Charts  provide the flow of data from its\nsource to a visual representation: Dashboards are the cornerstone of  Atlas Charts  as they are where you create\nand view your data visualizations. For details on how to create,\nmanage, and share dashboards, see  Dashboards . Element Description Data Source A MongoDB collection or  charts view  that\ncontains the data you want to visualize. For information on\nconnecting to and managing a data source, see\n Data Sources . Chart A visualization which maps to a  single  data source. Dashboard A group of one or more charts. Since a chart can only display data from a single collection,\ndashboards which combine multiple charts are not only useful, but\nnecessary for visualizing data from multiple collections in a single\nview. This can lead to new insights into your data which may not be\nimmediately apparent. Atlas Charts  provides a wide variety of chart types to visualize your data\nincluding bar charts, scatter plots, geospatial charts, and more. For a complete list of available chart types, see\n Chart Types . After you  launch Atlas Charts , the following\ntutorials will help you get started building visualizations with your\ndata and explore key features offered by  Atlas Charts : Visualize a data set containing details on movies, such as cast,\ncritic reviews, and release. Visualize a data set containing sales data from a mock office supply\nstore. The tutorial illustrates how to visualize inventory, customer\nanalytics, and total sales.",
            "code": [],
            "preview": "Atlas Charts is a tool to create visual representations of\nyour MongoDB data. Data visualization is a key component to providing a\nclear understanding of your data, highlighting correlations between\nvariables and making it easy to discern patterns and trends within your\ndataset. Atlas Charts makes communicating your data a straightforward\nprocess by providing built-in tools to easily share and collaborate on\nvisualizations.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embed-chart-anon-auth",
            "title": "Embed an Unauthenticated Chart",
            "headings": [
                "Prerequisites",
                "Procedures",
                "Enable Unauthenticated Embedding for a Chart",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source.",
                "Select the Unauthenticated tab in the dialog window.",
                "Toggle Enable unauthenticated access to On.",
                "(Optional) Specify filterable fields for your chart.",
                "Select the Javascript SDK panel.",
                "Copy the Charts Base URL and Chart ID.",
                "Create a Web App to Display Your Chart",
                "Customize the Node.js App",
                "Open the file index.js in a text editor.",
                "Enter your Charts Base URL",
                "Enter your chart ID"
            ],
            "paragraphs": "You can embed a chart in a web application and not require authentication\nto view chart data. To restrict access to your embedded chart, see the\n authenticated embedded chart tutorials . You must be a dashboard  Author  to enable\nunauthenticated embedding for a chart. Create a New Dashboard Create a Chart Enable unauthenticated embedding to generate a chart ID and  Charts \nBase URL. You will need your chart ID and  Charts  Base URL to\ndisplay your chart on a web page. From your dashboard page, select the dashboard containing the chart\nyou wish to make embeddable. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your chart by\nselecting  Allow all fields in the data source used in this\nchart . To learn more about filterable fields, see\n Specify Filterable Fields . You'll need the Charts Base URl and Chart ID values in your web application\ncode. If you already have an app in which to display your chart, you're ready\nto add an unauthenticated embedded chart. If not, proceed with the\nremaining steps to create a new app. Clone the  GitHub repository \nto get all the example apps. Instructions for running the\nunauthenticated example are in the  Readme  file in the  unauthenticated  directory. You can\nrun the app as-is, or you can customize it to use a chart of your own. MongoDB offers a pre-built example app in the\n GitHub repository  that shows how to use the\nEmbedding SDK to display an unauthenticated embedded chart. All the lines you need to edit are marked with a comment containing\n ~REPLACE~ . After you finish customizing the app, it's ready to run. The file  index.js  is located in the  src  directory. Replace the existing  Charts  Base URL with the Base URL of the\nchart you want to display. Your  Charts  Base URL is visible in\nthe embedding options modal window. See\n Embedding SDK  for detailed instructions on enabling\nembedding for a chart. You can also include the Embedding SDK with inline Javascript in an HTML\npage, as shown in the following code snippet: Replace the existing chart ID with the ID of the chart you want to\ndisplay. Your chart ID is visible in the embedding options modal\nwindow. See  Embedding SDK  for detailed instructions\non enabling embedding for a chart.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "const sdk = new ChartsEmbedSDK({\n  baseUrl: \"https://charts.mongodb.com/charts-embedding-examples-wgffp\" // Optional: ~REPLACE~ with the Base URL from your Embed Chart dialog\n});"
                },
                {
                    "lang": "javascript",
                    "value": "<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.6.0/stitch.js\"></script>\n<script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script>"
                },
                {
                    "lang": "javascript",
                    "value": "const chart = sdk.createChart({\n  chartId: \"735cfa75-15b8-483a-bc2e-7c6659511c7c\", // Optional: ~REPLACE~ with the Chart ID from your Embed Chart dialog\n  height: \"700px\"\n  // Additional options go here\n});"
                }
            ],
            "preview": "You can embed a chart in a web application and not require authentication\nto view chart data. To restrict access to your embedded chart, see the\nauthenticated embedded chart tutorials.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "data-sources",
            "title": "Data Sources",
            "headings": [
                "Connect or Disconnect Data Sources and Deployments",
                "Manage Data Sources",
                "Manage Deployments",
                "Edit a Chart's Data Source",
                "Select your dashboard.",
                "Click Edit on the chart you want to edit.",
                "Click the button under Data Source on the top left of the chart builder.",
                "Click the Project tab.",
                "Click the name of the deployment that contains the data source.",
                "Click the name of the database that contains the data source.",
                "Click Select on the data source.",
                "Try Out Charts with the Sample Data Source"
            ],
            "paragraphs": "A data source in  Atlas Charts  references one of the following: You can use the fields in the data source to construct a chart. When you build a chart, you must specify the data source that the chart uses. A  collection  or database\n view  in your MongoDB deployment. A  charts view  that you create using a\ncollection. Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . An  Atlas   Project Owner  can connect or disconnect data\nsources and deployments. To learn more, see\n Manage Data Sources . Charts  connects to all deployments and data sources in your\nproject by default. To manage settings for a data source, see\n Manage Data Sources . To manage pipelines, see  Create and Manage Charts Views . To apply a pipeline, use a charts view. You can't apply\npipelines to an entire collection. To manage settings for the  Atlas  deployments that contain your data\nsources, see  Manage Deployments . To edit the data source for an existing chart: To learn how to set the data source for a new chart,\nsee  Build Charts . From the  Dashboards  page, select the dashboard that\ncontains the chart. The button says  Select  if you have not selected a\ndata source, or it says the name of the currently selected data\nsource. All of your connected deployments appear. A deployment and its data sources won't display on the\n Select Data Source \nmodal unless they are connected to  Charts . Only a\n Project Owner  can  connect or disconnect  deployments and data sources.\nAll deployments and data sources in the project connect to\n Charts  by default. The database's data sources appear. You can click on a data source's\nname to view a preview of its data. Charts  automatically includes the\n Sample Data: Movies  data source in all  Charts \ntenants. The  Sample Dashboard  uses\nthis data source to show the charts you can create. You can\naccess the sample data source from all dashboards. You can't: Add, edit, or delete the data in the  Sample Data: Movies \ndata source. Remove the sample data source. Externally share or  embed  charts\nthat use the sample data.",
            "code": [],
            "preview": "An Atlas Project Owner can connect or disconnect data\nsources and deployments. To learn more, see\nManage Data Sources.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "handle-click-events",
            "title": "Handle Click Events",
            "headings": [
                "Prerequisites",
                "Click Event Syntax",
                "Payload",
                "event Element",
                "data Element",
                "selectionFilter Element",
                "target Element",
                "Examples",
                "Basic Handling of Click Events",
                "Interactive Filtering for Click Events"
            ],
            "paragraphs": "The Charts Embedding JavaScript SDK includes a click event handler that\nallows you to subscribe to click events. When you click on a particular\nelement on your chart, the click event handler captures details of the\nelement that you clicked. Use this feature to build interactive\nexperiences similar to the following in your application: Click Events in the  Charts Embedding SDK \nis available in version 2.1.0 and later. Click on an element on a chart and open a pane with more details on\nthe clicked element. Create a filter for another chart. Before you begin,  install  version 2.1.0\nor later of the Charts Embedding JavaScript SDK. The event handler takes an event type,  click , and a callback\nfunction that contains information about the click event and the\nclicked element as a single  payload \nobject. The click event handler syntax looks similar to the following: The event handler also allows you to define the mark roles for which\nyou want to receive event information, thus eliminating the need to\ncheck the payload. The click event handler syntax for defining the mark\nroles to filter by looks similar to the following: The click event handler must be added after the chart has finished\nrendering, as shown in the following example: If you specify the  options  parameter, the click event handler\ncaptures events only if the clicked mark's role matches one of the\nvalues specified in the parameter. If you omit this parameter, the\nclick event handler captures all click events on the chart. You can use the click event payload to construct a custom filter that\nyou can apply on other charts in your application. The syntax of the\npayload object for the callback function looks similar to the\nfollowing: The following example payload object shows the elements inside the\npayload: To learn more about the elements inside the payload object, see: event  Element data  Element selectionFilter  Element target  Element The  event  element of the  payload \ncontains information about the mouse event including: The type of mouse event, which must be  click The modifier keys used to trigger a click event such as  altKey ,\n ctrlKey ,  shiftKey ,  metaKey The  X  and  Y  coordinates: Relative to the canvas element of the chart From the application viewpoint Relative to the page Relative to the screen The  data  element of the  payload \ncontains information about the clicked chart element. For each encoded\ndata field ( x ,  y ,  series ,  intensity ,  color ,\n shape ,  size ,  label ,  arc ,  value ,  target ,\n number ,  display ,  text ,  location ), the  data  element\ncontains: For  tables , the Charts Embedding\nJavaScript SDK click event handler captures click events for fields\nthat represent the channel data for the clicked element: For  geospatial charts , the Charts Embedding\nJavaScript SDK click event handler captures click events for the\nfollowing elements: The channel  label The  value  of the clicked element The lower bound for numeric or date binning only groups  field, which contains all Groups channels including\nlabel and value cell  field, which contains the column header label and value of\nthe clicked cell For  choropleth charts , the click event\nhandler captures the fields that represent the channel data for the\nclicked element: lat  field, which contains latitude lng  field, which contains longitude location  field, which contains the field label and value of the\nclicked geospatial area For  geospatial scatter charts , the click event\nhandler captures the fields that represent the channel data for the\nclicked element: geopoint  field, which contains the field\nname, value in GeoJSON format, and the coordinates of the clicked\npoint The  selectionFilter  element of the  payload  must contain a valid  MQL (MongoDB Query\nLanguage)  filter document, which represents the filter that\ncorresponds to the clicked mark's category channels or  x  value\nchannel on a continuous chart. You can modify or implement your own\n selectionFilter . The filter object represents a single clicked item: The  selectionFilter  document can have several key and value\nfilters. For example, if a mark of a multi-series chart is clicked, the\nfilter document contains both the category and series filter pairs.\nEach filter must reference the actual data source fields used and not\ntheir labels. You can enable highlighting for clicked events using the\n setHighlight  method. To learn more, see  Highlight Chart Elements . On an embedded chart that includes event handlers with a filter for\nelement roles, the chart shows: If the event handler doesn't include filter for element roles, the\n  appears when you hover over any chart\nelement. A string or unbinned number or date, which becomes an equality match\nquery  ({field: value})  or a query using  $eq ,  $ne ,  $in , or  $nin  operators. A binned number or date, which becomes a query using  gt ,\n $gte ,  $lt , or  lte  operators. Periodic dates are ignored. The   when you hover over an element that\ntriggers a filtered click event The   when you hover over an element that\ndoesn't trigger a click event The  target  element of the  payload \ncontains information about the clicked target including: For  tables , the Charts Embedding\nJavaScript SDK click event handler payload captures the following: For  geospatial charts , the Charts Embedding\nJavaScript SDK click event handler payload captures the following: The Charts Embedding JavaScript SDK click event handler does not\ncapture click events on column headers. The type of mark, such as  rect ,  line ,  arc ,  symbol ,\n group , or  area The role of mark, such as  mark ,  legend ,  axis-label ,\n axis-title ,  tick-label ,  legend-entry ,  legend-title ,\nor  frame The fill color of the mark Mark type, which is  text Mark role, such as  group-cell ,  value-cell ,\n dynamic-value-cell ,  row-total-cell ,\n column-total-cell ,  header-column-total-cell , and\n grand-total-cell The type of mark, such as  polygon ,  map , or  symbol The role of mark, such as  mark  or  map The fill color of the mark The Charts Embedding JavaScript SDK includes examples that demonstrate\ncommon uses for click events in an application. The first example shows\nbasic click events and payload handling. The second example shows\ninteractive filtering of clicked chart elements. To learn more about installing the Embedding SDK and running the\nexample app with your own data or sample data, see  Atlas Charts\nEmbedding Example for Click Events on GitHub .\nEach example app is configured with a chart ID and base URL which are\nparticular to the app. Be sure to configure your own apps with the\ncorrect chart ID and base URL. In the  example app \nfor basic handling of click events, when you click on an element on the\n Movie Genres  chart, the click event handler displays data based on\nthe clicked element. In this example application, the chart shows the\n  on all chart elements because the chart\ndoesn't include a filter for mark roles. Each time you click on an element in the chart, the click event\nlistener refreshes the  payload  to reflect data from the  x  and\n y  axis. When you click on an element that represents a specific\ngenre and decade in the  Movie Genres  chart, the  Clicked Element \nand  Full Event Payload  displays details on that movie genre and\ndecade including: Refer to the example app to view the full event payload. Fields that represent data for the clicked element. Mark type, role, and fill color. In the  example app \nfor interactive filtering, when you click on an element on the  Movie\nGenres  chart, the embedding SDK generates a filter based on the\nelement on which you clicked and then applies the filter to a second\nchart. In this example application, the chart shows: The click event listener triggers events only for the mark roles\nspecified through the  options  parameter. The payload defines a\nfilter based on the  y  axis, which represents the movie genres, and\nthe lower and upper bound range, which represents the decade. Each time\nyou click on an element that represents a specific genre and decade on\nthe  Movie Genres  chart, the  Movie Details  table is\nfiltered by the clicked element and changes to display the movies\navailable in that genre and decade. Refer to the example app to view the full a sample event handler\ncallback function. The   when you hover over an interactive\nelement The   when you hover over an element which\ndoesn't trigger a click event",
            "code": [
                {
                    "lang": "sh",
                    "value": "chart.addEventListener(\"click\", callback);"
                },
                {
                    "lang": "sh",
                    "value": "const options = { includes: [{ roles: ['mark', 'axis-label'] }] };\nchart.addEventListener(\"click\", callback, options);"
                },
                {
                    "lang": "sh",
                    "value": "chart.render(document.getElementById(\"chart\")).then(\n     () => chart.addEventListener('click',\n       (payload) => alert(JSON.stringify(payload)),\n       options)\n   );"
                },
                {
                    "lang": "sh",
                    "value": "chart.addEventListener(\"click\", (payload) => {\n    // handle events\n}"
                },
                {
                    "lang": "sh",
                    "value": "{\n  \"chartId\": \"xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n  \"chartTitle\": \"This is my chart's title\",\n  \"chartDescription\": \"This is my chart's description\",\n  \"event\": { // information about the mouse event. For example:\n    \"type\": \"click\", // event type\n\n    \"altKey\": false, // modifier keys\n    \"ctrlKey\": false,\n    \"shiftKey\": false,\n    \"metaKey\": false,\n\n    \"offsetX\": 152, // element coordinates\n    \"offsetY\": 176,\n\n    \"clientX\": 172, // coordinates from application viewpoint\n    \"clientY\": 241,\n\n    \"pageX\": 172, // coordinates relative to the page\n    \"pageY\": 241,\n\n    \"screenX\": 172, // coordinates relative to screen\n    \"screenY\": 312\n  },\n  \"data\": { // information about the clicked chart element. For example:\n    \"y\": {\n      \"label\": \"unwind array 'genres'\",\n      \"value\": \"Adventure\"\n    },\n    \"x\": {\n      \"label\": \"count ( _id )\",\n      \"value\": 659\n    },\n    \"color\": {\n      \"label\": \"year\",\n      \"value\": \"2000 - 2010\",\n      \"lowerBound\": 2000,\n      \"upperBound\": 2010\n    }\n  },\n  selectionFilter: {\n    // category data expressed as MQL filter query that\n    // interactive filters would output to filter other charts.\n    // For example:\n\n    genres: 'Adventure',\n    year: {\n      $gte: 2000,\n      $lt: 2010,\n    },\n  },\n  \"target\": { // information about the clicked target. For example:\n    \"type\": \"rect\", // type of mark, such as rect, line, etc.\n    \"role\": \"mark\", // role of mark, such as mark, legend, etc.\n    \"fill\": \"#8CB6F2\" // fill color of the mark\n  },\n  \"apiVersion\": 1 // API version of event payload\n}"
                },
                {
                    "lang": "sh",
                    "value": "{ field: 'value' }\n{ field1: 'value1', field2: 'value2' }\n{ field: { $in: [ 'a', 'b', 'c' ] } }\n{ field: { $nin: [ 'x', 'y', 'z' ] } }\n{ field: { $gt: 10 } }\n{ field: { $gt: 13, $lte: 30 } }\n{ field: { $gt: Date(\"2020-01-01\"), $lt: Date(\"2020-03-31\") } }"
                },
                {
                    "lang": "sh",
                    "value": "const eventHandler = (payload) => {\n  chart.setHighlight(payload.selectionFilter);\n};\n\nchart.render(container).then(() => {\n  chart.addEventListener('click', eventHandler);\n});"
                }
            ],
            "preview": "The Charts Embedding JavaScript SDK includes a click event handler that\nallows you to subscribe to click events. When you click on a particular\nelement on your chart, the click event handler captures details of the\nelement that you clicked. Use this feature to build interactive\nexperiences similar to the following in your application:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-charts-sdk",
            "title": "Embedding SDK",
            "headings": [
                "Install the Embedding SDK",
                "Examples"
            ],
            "paragraphs": "You can embed a chart or dashboard into a web application with the\nEmbedding SDK, allowing more flexible adjustments of settings and\nrendering. To learn more, see  Get Started with the Embedding SDK . If you have a simple web app, you can reference the Embedding SDK from a\nscript tag, and no installation is needed. You can use the  UMD\n(Universal Module Definition)  to run  @mongodb-js/charts-embed-sdk \ndirectly in the browser. If you are building a more complex web app and are using  npm  or\n yarn , you can install the Embedding SDK so that it can be used\ndirectly from your script files. To install the embedding SDK with  npm , use the following command: To install with  yarn : An  example app  using\nthe embedding SDK can be found at  codesandbox.io . The example app\ndemonstrates some of the interactive features available to the embedding\nSDK, including an interactive filter and a manual refresh button. The example app is configured with a chart ID and base URL which are\nparticular to the app. Be sure to configure your own apps with the\ncorrect chart ID or dashboard ID and base URL. The example app uses two SDK methods: Other examples are available in the  MongoDB Embedding SDK\nExamples  GitHub repository. Method Description Args Returns refresh() Reloads the chart with the latest data from its\n data source . none Promise<void> setFilter() Filters your embedded chart based on a specified MQL\n filter document . Any fields included in the filter must be specified in the Embed\nChart modal. See  Filter Embedded Charts with the SDK . filter  object Promise<void>",
            "code": [
                {
                    "lang": "none",
                    "value": "<script src=\"https://unpkg.com/@mongodb-js/charts-embed-dom\"></script>"
                },
                {
                    "lang": "none",
                    "value": "npm install @mongodb-js/charts-embed-dom"
                },
                {
                    "lang": "none",
                    "value": "yarn add @mongodb-js/charts-embed-dom"
                }
            ],
            "preview": "You can embed a chart or dashboard into a web application with the\nEmbedding SDK, allowing more flexible adjustments of settings and\nrendering.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "build-charts",
            "title": "Build Charts",
            "headings": [
                "Create a Chart",
                "Select a dashboard for your chart.",
                "Click the Add Chart button.",
                "Choose your chart's data source.",
                "Optional: Apply a suggested chart.",
                "Choose your chart type.",
                "Add fields to your chart.",
                "Title your chart.",
                "Save your chart.",
                "Select a data source in Atlas.",
                "Click the Visualize Your Data button.",
                "Optional: Apply a suggested chart.",
                "Choose your chart type.",
                "Add fields to your chart.",
                "Title your chart.",
                "Save your chart.",
                "Learn More"
            ],
            "paragraphs": "Charts provide visual representations of the data in your\n data source . A chart maps to a  single \ndata source, and it can display correlations between several fields in the\ndata. Charts reside inside  dashboards . Unless\nyou create a chart  from the Atlas UI ,\nyou must create a dashboard before you can begin building\ncharts. For a complete list of available chart types and how to build specific\ncharts, refer to the  Chart Types  page. You can create a chart from the  Dashboards  page\nin  Charts  or from the Atlas UI. If the preview for a chart of the full dataset takes a while to\nload, you can  preview a subset of the data  with the  Subset  toggle. From the  Dashboards  page, select the dashboard where you\nwish to add a new chart. For instructions on setting up a dashboard,\nsee  Dashboards . In the  Select Data Source  modal that appears: If you close the  Select Data Source  modal, you can reopen\nit using the button under  Data Source  on the top left of\nthe chart builder. The button says  Select  if you have not\nselected a data source, or it says the name of the currently selected\ndata source. Select a tab: The  Suggested  tab shows suggestions based on the data\nsources you use in this dashboard. The  Project  tab shows all of your connected\ndeployments.\nClick on a deployment to expand it and show its data sources. You can search for a collection to narrow the results. The  Sample  tab shows the sample data source and a\npreview of its data. Click the name of the deployment that contains the data source. Click the name of the database that contains the data source.\nThe database's data sources appear. You can click on a data source's name to view a preview of its\ndata. A data source won't display on the  Select Data Source  modal unless it is connected to\n Charts . Only a  Project Owner  can  connect  and\n disconnect  data sources. All\ndata sources in the project connect to  Charts  by default. Click  Select  on the data source. In the Chart Builder,  Charts  displays prebuilt charts based on\nthe data source that you selected. You can use any one of the suggested\ncharts to get started by clicking the associated  Apply  button.\nAfter applying a suggested chart, you can make changes to the chart\ntype and add or remove fields if you wish to customize the prebuilt\nchart. In the  Chart Type  dropdown, select the type for this\nchart. Each chart type provides different visualization options\nfor the fields in your data, reflected by various\n encoding channels . These channels dictate how your data is\nvisualized and enable powerful\n aggregations  for\nyour data. For details on the different encoding channel types,\nrefer to the  Encoding Channels \npage. Drag fields from the  Fields  section to the desired\n encoding channels  below the\n Chart Type  dropdown. The fields listed correspond to the\nfields in your data source. You can search for a specific field in\nyour data source by using the  Filter  search bar at the\ntop of the  Fields  section. For details on how  Atlas Charts  handles embedded objects and\nembedded arrays in fields, see the\n Embedded Objects and Arrays \npage. Click the  Enter a title  text and give your\nchart a title. To save the title, click the check mark. Once you're satisfied with your chart, click\n Save and close  in the top right corner.\nThis saves your chart to your dashboard\nand redirects you to the dashboard view. In the left navigation pane in  Atlas , click  Database \nto display the  Database Deployments  view. Click the  Browse Collections  button for the deployment\nthat contains the data source. Select the collection that you want to use to build\nyour chart. Charts  automatically loads the data source in the Chart Builder. If you selected a database as your data source,  Charts  prompts\nyou to select a specific collection before you can continue building\nyour chart. In the Chart Builder,  Charts  displays prebuilt charts based on\nthe data source that you selected. You can use any one of the suggested\ncharts to get started by clicking the associated  Apply  button.\nAfter applying a suggested chart, you can make changes to the chart\ntype and add or remove fields if you wish to customize the prebuilt\nchart. In the  Chart Type  dropdown, select the type for this\nchart. Each chart type provides different visualization options\nfor the fields in your data, reflected by various\n encoding channels . These channels dictate how your data is\nvisualized and enable powerful\n aggregations  for\nyour data. For details on the different encoding channel types,\nrefer to the  Encoding Channels \npage. Drag fields from the  Fields  section to the desired\n encoding channels  below the\n Chart Type  dropdown. The fields listed correspond to the\nfields in your data source. You can search for a specific field in\nyour data source by using the  Filter  search bar at the\ntop of the  Fields  section. For details on how  Atlas Charts  handles embedded objects and\nembedded arrays in fields, see the\n Embedded Objects and Arrays \npage. Click the  Enter a title  text and give your\nchart a title. To save the title, click the check mark. Once you're satisfied with your chart: Click  Save and close  in the top right corner. Save the chart to a dashboard: To save to a new dashboard, click  New  and\nspecify a  Dashboard title . To save to an existing dashboard, click  Existing \nand select a dashboard from the drop-down menu. Click  Save . This saves your chart to the specified dashboard and\nredirects you to the dashboard view. Understand the building blocks of Atlas Charts. Visualize multiple data series in a single chart. Use a wide variety of built-in methods for handling embedded objects\nand arrays. Reshape and pre-process your data for greater flexibility over\navailable fields. Filter your chart based on criteria you choose. Bin, sort, and limit data in your chart. Customize aspects of your chart such as color, axis labels, and\nnumber formatting. View and export the data backing your chart in either CSV or\nJSON format. Supplemental reference material for building charts.",
            "code": [],
            "preview": "Charts provide visual representations of the data in your\ndata source. A chart maps to a single\ndata source, and it can display correlations between several fields in the\ndata. Charts reside inside dashboards. Unless\nyou create a chart from the Atlas UI,\nyou must create a dashboard before you can begin building\ncharts.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "manage-data-sources",
            "title": "Manage Data Sources",
            "headings": [
                "Connect a Data Source to Charts",
                "Connect your deployment.",
                "In the Data Access section, select the database that contains the data source.",
                "Click Manage next to the data source's information.",
                "Check the connection status and connect the data source.",
                "Disconnect a Data Source from Atlas Charts",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "In the Data Access section, select the database that contains the data source.",
                "Click Manage next to the data source's information.",
                "Check the connection status and disconnect the data source.",
                "Access Data Source Settings",
                "In the left navigation menu, click Data Sources.",
                "In the Deployment dropdown, select the deployment that contains your data source.",
                "In the Data Access section, under Deployment, click the name of the database that contains the data source.",
                "Click Manage next to the data source's information.",
                "Check the connection status and connect the data source.",
                "Modify Data Source Permissions",
                "Enable Organization-Wide Sharing for a Data Source",
                "Access the data source's settings page.",
                "Turn on organization-wide sharing.",
                "Enable External Sharing for a Data Source",
                "Access the data source's settings page.",
                "Turn on external sharing.",
                "Select your authentication settings.",
                "Disable External Sharing for a Data Source",
                "Access the data source's settings page.",
                "Turn off external sharing.",
                "Modify Role Permissions for Data Sources",
                "Access the data source's settings page.",
                "Select or clear boxes in the project role's row.",
                "Modify Data Source Read Preference",
                "Modify Data Source Pipeline"
            ],
            "paragraphs": "On the  Data Sources  page, an  Atlas \n Project Owner  can: Connect a data source  to  Atlas Charts . Disconnect a data source  from\n Atlas Charts . Modify  data source settings . Connect to a specific data source to  Charts  to use its data\nin your charts. When you connect a data source,  Charts  grants the default\n permissions  to  Charts  users. To\ncustomize the permissions for a data source, see\n Modify Data Source Permissions . Charts  connects to all deployments and data sources by default.\nTo learn about data sources and deployments, see  Data Sources .\nTo learn how to connect or disconnect a deployment, see  Manage Deployments . To connect a data source to  Charts : To learn more, see  Connect a Deployment to  Charts . Select the database that contains the data source you want to\nconnect. The database's data sources display, including\n charts views . Charts  displays the following information about the data source: Column Description Data Source Human-readable label that identifies the data source and\nits chart views. Organization Label that indicates whether you've enabled\n organization-wide sharing \nat the deployment level. External Users Label that indicates whether: You enabled external user access. The external user connection method is\n Authenticated  or  Unauthenticated . Status Label that indicates whether you connected the\ndata source to  Atlas Charts . The data source's details page displays the following\ninformation: To learn more about the other information that displays on the\ndata source's details page, see\n Manage Data Sources . Field Description Data Source Name Human-readable label that identifies the data source in\n Atlas . Data Source Connection Status Label that indicates whether you connected the\ndata source to  Atlas Charts . If the data source connection status is  Connected ,\nyou already connected this data source to  Atlas Charts . The\n Data Access  section displays. If the data source connection status is  Disconnected : The data source connects and the  Data Access \nsection displays. To learn more about the other information that displays in the\ndata source's  Data Access  section, see\n Manage Data Sources . Click the connect icon   next to the data\nsource connection status. Click  Reconnect  on the modal that displays. Disconnect a data source from  Charts  to remove its data from\nyour charts. If you disconnect a data source: You can also  disconnect a deployment .\nTo delete a charts view, see  Create and Manage Charts Views . If you disconnect a data source, you can  reconnect  it later to resume rendering charts that\nuse its data. To disconnect a data source from  Charts : Any charts you built that use the data source no longer\nrender and display an error. Any charts that use  $lookup  to access data in the data\nsource no longer render and display an error. You can't use the data source to build new charts. Charts  automatically includes the\n Sample Data: Movies  data source in all  Charts \ntenants. The  Sample Dashboard  uses\nthis data source to show the charts you can create. You can\naccess the sample data source from all dashboards. You can't: Add, edit, or delete the data in the  Sample Data: Movies \ndata source. Remove the sample data source. Externally share or  embed  charts\nthat use the sample data. The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. Select the database that contains the data source you want to\ndisconnect. The database's data sources display. The data source's details page displays. If the data source connection status is  Disconnected ,\nthe data source is already disconnected from  Atlas Charts . If the data source connection status is  Connected : The data source disconnects from  Charts . Click the disconnect icon   next to the data\nsource connection\nstatus. The  Disconnect Data Source  modal appears. Click  Check for connected charts  to\nlearn whether any charts use the\ndata source. Click  Disconnect . To access the data source's settings page: The  Data Sources  page displays. After you select a deployment, the following\ninformation displays: Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . Field Description Deployment Name Human-readable label that identifies the deployment in\n Atlas . Deployment Connection Status Label that indicates whether you connected the\ndeployment to  Atlas Charts . Type Label that identifies the deployment as a replica set,\nserverless instance, or federated database instance. Status Label that indicates the current operating\ncondition of the deployment. Version Label that indicates the MongoDB\nversion on which the deployment runs.  Charts  doesn't\ndisplay  Version  for federated database instances. Region Label that indicates the cloud provider and region where\nMongoDB provisions the deployment.  Charts \ndoesn't display  Region  for\nserverless instances. Tier Label that indicates the  Atlas   cluster tier  for the deployment.  Charts \ndoesn't display  Tier  for federated database instances and\nserverless instances. A list of the database's data sources appears. The data source's details page displays. If the data source connection status is  Connected ,\nyou already connected this data source to  Atlas Charts . The\n Data Access  section displays. If the data source connection status is  Disconnected : The data source connects and the  Data Access \nsection displays. Click the connect icon   next to the data\nsource connection status. Click  Reconnect  on the modal that displays. If you have the  Project Owner  role, you can control who can see charts that use the data source. To enable organization-wide sharing for a specific data source: Organization-wide sharing grants users in your organization, including\nusers who are not members of your project, permission to view data in a\ndeployment that is used for dashboards shared with your organization. You can enable organization-wide sharing\n for an entire deployment  or\n for a specific data source . To learn more, see  Access Data Source Settings . In the  Organization  subsection of the\n Data Access  section, toggle\n All users in the organization can view data in this data source  to  ON . External sharing grants others the ability to either: To share a chart externally via embed or link, you must enable external\nsharing both on the data source and the individual chart. Charts  disables external sharing by default for all data\nsources. To enable external sharing for a data source: After you enable external sharing for a data source, you can enable external sharing for individual charts that use that data source. Embed charts  to use the data source in\nexternal web pages. View charts when given a link to that chart. To learn more, see  Access Data Source Settings . In the  External Users  subsection of the  Data Access  section, toggle\n External users can view data in this data source  to\n ON . Select either: Allow authenticated external data access . Any chart that uses this data source requires authentication through an\n SSO (Single Sign-On)  provider for external viewing. Authentication\nproviders add an extra layer of security to your data. To learn how to configure an embedding authentication provider,\nsee  Configure Embedding Authentication Providers . Users can view charts that use this data source on dashboards when they are logged into  Atlas Charts . They can't view the charts on dashboards shared via a public link. Allow unauthenticated external data access . Any chart that uses this data source does  not  require authentication for external viewing. Though less\ndifficult to implement, allowing unauthenticated external data access is less secure. Use this option only for charts\nthat display non-sensitive data. Embedded charts can render using both unauthenticated and\nauthenticated requests. Any charts using this data source can be viewed on\n dashboards shared via a link . If you turn off external sharing for a data source, all charts which\nuse that data source stop rendering immediately. To disable external sharing for a data source: To learn more, see  Access Data Source Settings . In the  External Users  subsection of the  Data Access  section, toggle\n External users can view data in this data source  to\n OFF . If you have the  Project Owner  role, you can modify data source permissions for each project role. Data source permissions determine whether a user can view charts created using data in this data source. To modify permissions for a project role: Charts  automatically assigns project roles to users based on\ntheir  Atlas   user role . To learn more, see  Access Data Source Settings . For each project role, you can select more than one option: Hover over a project role to learn which  Atlas user roles  correspond to that project role. To prevent users with a project role from creating and viewing charts for the data source, clear both boxes in the project role's row. To allow all users to create and view charts for the data source, select all of the boxes in all of the rows. Can view charts with data in this data source . Can create charts with data in this data source . To modify a data source's read preference, you must modify the read preference for its deployment. To learn more, see\n Manage Deployments . You can modify a chart view's pipeline by\n accessing the data source's settings page  and clicking the\n Pipeline  tab. To learn more, see\n Create and Manage Charts Views . The  Pipeline  is dimmed for collections. To create a\npipeline based on a collection,  create a charts view .",
            "code": [],
            "preview": "On the Data Sources page, an Atlas\nProject Owner can:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "highlight-chart-elements",
            "title": "Highlight Chart Elements",
            "headings": [
                "Prerequisites",
                "Syntax",
                "Chart Types"
            ],
            "paragraphs": "The Charts Embedding JavaScript SDK enables you to programmatically\nhighlight specific elements and  clicked events  on embedded charts and charts within  embedded\ndashboards . Before you begin,  install  version 2.1.0\nor later of the Charts Embedding JavaScript SDK. The Charts Embedding JavaScript SDK method for enabling highlighting\nhas the following syntax: The  setHighlight  method takes an  MQL (MongoDB Query\nLanguage  filter. You can provide the MQL filter directly to the\n setHighlight  method as shown in the example below or through the\n click event payload \n selectionFilter  to highlight specific elements and click events. The  selectionFilter  must match on values used on the chart's\ncategory or series channel. The Charts Embedding JavaScript SDK also includes the  highlight \noption for retrieving the highlight query: The  highlight  option takes a parameter of a Javascript object\nthat represents an  MQL (MongoDB Query Language  filter. You can\nset the  highlight  option when you create a chart or after a chart\nrenders. You can include the following query elements: If you want to highlight charts within an embedded dashboard,\nfirst run the following method to retrieve a specific chart\nfrom the Dashboard instance: $eq (equality)  match for\nall  supported chart types . $in  for all  supported\nchart types . $nin  check for\n Line and Area Charts ,  Column and Bar Charts , and non-geo\n Heatmap . $gte  and  $lt  closed range to match number or date\nbins within the specified range for  Line and Area Charts ,\n Column and Bar Charts , and non-geo  Heatmap . Any combination of  $gt ,\n $gte ,  $lt , and  $lte  open range on the X-axis for\ncontinuous  Line and Area Charts . The following chart types support programmatic highlighting: Choropleth Chart Column and Bar Charts Table Donut Chart Line and Area Charts Non-geo  Heatmap",
            "code": [
                {
                    "lang": "javascript",
                    "value": "charts.setHighlight(selectionFilter);"
                },
                {
                    "lang": "javascript",
                    "value": "const highlight = chart.getHighlight();"
                },
                {
                    "lang": "javascript",
                    "value": "dashboard.getChart('<chartID>');"
                },
                {
                    "lang": null,
                    "value": "chart.setHighlight(\n  {\n    city: { $nin: ['New York', 'London', 'Paris'] }\n  }\n)"
                }
            ],
            "preview": "The Charts Embedding JavaScript SDK enables you to programmatically\nhighlight specific elements and clicked events on embedded charts and charts within embedded\ndashboards.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "ai-and-data-usage-information",
            "title": "AI and Data Usage Information",
            "headings": [
                "Third Party Providers",
                "How Your Data is Used",
                "Disable Natural Language Charts"
            ],
            "paragraphs": "Natural Language Charts  is powered by Generative AI\n(Gen AI) and might give inaccurate responses. For more information about\nGen AI in MongoDB products, see  Generative AI FAQ . Natural Language Charts currently uses the  Azure OpenAI Service \nhosted by Microsoft. This is subject to change in the future. When you use Natural Language Charts,  Atlas Charts  sends the following information\nto MongoDB's backend and/or the third-party AI provider: The information sent will not be shared with any other third parties\nor stored by the AI provider. We do not share database connection\nstrings or credentials from your databases. By default, your original\nquery text will be stored by MongoDB for up to one year to help us\nprovide support to customers and improve the service. The full text of your natural language prompt. The schema of the collection used to generate the chart,\nincluding collection names, field names, and field data types. Sample field values to improve the quality of chart recommendations. Charts  enables Natural Language Charts once you click the\n Use Natural Language Mode  button. For details on enabling\nthis feature, see  Experimental Features . If you no longer want to use Natural Language Charts, you can ignore this button and\n Charts  will not send data to the Generative AI models. If you are a\n Project Owner , you can disable access to Natural Language Charts\nby navigating to the  AI features  page in the\nleft navigation menu and setting the toggle to off.",
            "code": [],
            "preview": "Natural Language Charts is powered by Generative AI\n(Gen AI) and might give inaccurate responses. For more information about\nGen AI in MongoDB products, see Generative AI FAQ.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embed-charts-and-dashboards",
            "title": "Embed Charts and Dashboards",
            "headings": [],
            "paragraphs": "You can control embedded  charts  and\n dashboards  programmatically with\nthe  Embedding SDK , or use static HTML\nwith a  charts iframe  or a\n dashboards iframe . Charts  offers a  Getting Started  UI to help you\nlearn how to embed charts and dashboards with an iFrame or JavaScript\nSDK. To learn more, see  Get Started with Embedding . To learn how to embed charts and dashboards in a web application, see\nthe  Embedding Tutorials . As a dashboard  Author , you can embed\nyour charts and dashboards in external websites or\nshare them through links. You can embed the following charts or\ndashboards: Embed a  chart or dashboard that doesn't require authentication  (unauthenticated), which anyone can view. Embed a chart or dashboard that requires users to authenticate\nthrough an  Embedding Authentication Provider .",
            "code": [],
            "preview": "You can control embedded charts and\ndashboards programmatically with\nthe Embedding SDK, or use static HTML\nwith a charts iframe or a\ndashboards iframe.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "welcome-experience",
            "title": "Getting Started Tutorial",
            "headings": [
                "Connect Your Data Sources",
                "Requirements & Limitations",
                "Procedure",
                "Select a cluster.",
                "Select one or more collections to add as Data Sources.",
                "Charts directs you to the Data Sources page.",
                "You are free to explore Dashboards and create charts.",
                "Explore with Sample Data",
                "Procedure",
                "Select the Explore with Sample Data option in the Getting Started tutorial.",
                "Atlas Charts redirects you to the Dashboards page where you will find the Sample Dashboard.",
                "Skip to Shared Data Sources or Dashboards"
            ],
            "paragraphs": "This tutorial guides you through possible ways of getting started with  Atlas Charts .\nIf you're new to  Charts , or haven't used dashboards, this tutorial\nwalks you through the process. Using this tutorial, you can: Connect Your Data Sources Explore with Sample Data Skip to Shared Data Sources or Dashboards To connect your existing  Atlas  deployments to  Atlas Charts  and visualize\nyour data, use the  Connect Your Data  path. You must have an existing  Atlas  deployment. If you don't have an existing  Atlas  deployment, you can\n explore charts with sample data . Deployments in  Atlas Charts  reference  Atlas  deployments that contain\nvalid  Charts  data sources, including: All  clusters and serverless instances  in your  Atlas \nproject for which you have the\n Project Data Access Read Only  role or higher. All  federated database instances  in your project, including\n Online Archives . To connect  Charts  to your data, you must have: Access to the  Atlas  UI for the organization that contains your\nproject. To learn more, see  Require IP Access List for the Atlas UI . Read access in your project role. To learn more, see  Atlas Project Roles . Once you select  Connect Your Data : Connect a deployment from your list of available deployments and click  Next . A data source in  Atlas Charts  references one of the following: You can use the fields in the data source to construct a chart. When you build a chart, you must specify the data source that the chart uses. A  collection  or database\n view  in your MongoDB deployment. A  charts view  that you create using a\ncollection. From there, you can\n add pipelines  and adjust\n access permissions  for your data sources. Atlas Charts  provides a  Sample Dashboard  that uses movie data to show\nexamples of possible charts you can create. You can also use the\n sample data source  to create your own charts on\nother dashboards. Click the  Sample Dashboard  to see the example charts\ncreated from the sample movie data. You have  Owner \n permissions  on your sample dashboard,\nmeaning you can add, edit, and delete the charts it contains. If you remove the  Sample Dashboard , you can add it back\nthrough the  Dashboards  page. If you have access to data sources or dashboards before completing this\nGetting Started tutorial, you can bypass the tutorial and begin viewing\nyour shared data sources and dashboards. To exit the Getting Started tutorial and begin exploring your shared\ndata sources and dashboards, click\n Skip selection and view  at the bottom of the tutorial view.",
            "code": [],
            "preview": "This tutorial guides you through possible ways of getting started with Atlas Charts.\nIf you're new to Charts, or haven't used dashboards, this tutorial\nwalks you through the process. Using this tutorial, you can:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "create-manage-charts-view",
            "title": "Create and Manage Charts Views",
            "headings": [
                "Use Cases",
                "Create a Charts View from a Collection",
                "Connect your deployment.",
                "Select a database and collection.",
                "Click Charts View next to the collection's information.",
                "Specify a Name for your charts view.",
                "Add an aggregation pipeline.",
                "(Optional) Click Test Pipeline.",
                "Click Save.",
                "Example Pipelines",
                "Join Data from Two Collections",
                "Hide Sensitive Data",
                "Convert the Type of a Data Field",
                "Modify a Charts View's Pipeline",
                "Connect your deployment.",
                "Select the database and collection.",
                "Click Manage next to the chart view's information.",
                "Click Pipeline tab to edit the charts view's pipeline.",
                "Edit the aggregation pipeline.",
                "(Optiona) Click Test Pipeline.",
                "Click Save.",
                "Disconnect a Charts View",
                "Delete a Charts View",
                "Connect your deployment.",
                "Select the database and collection.",
                "Click Manage next to the chart view's information.",
                "Click the ellipsis () and click Delete."
            ],
            "paragraphs": "If you are the  Project Owner , you can create and modify\na charts view. A charts view is a data source that applies an\n aggregation pipeline \nto a collection to pre-process data before it is used for\n Charts . You can create multiple charts views from a single\ncollection. After you create a charts view, you can select the charts view as a\ndata source when you create a chart. Pre-processing a data source with a pipeline is useful when your\ncollection data is not optimized for data visualization. Pre-processing your data can help accomplish the following tasks: Join data from multiple collections into a single data source using\n $lookup .  See example . Hide fields which may contain sensitive data from  Charts  users\nusing  $project .  See example . Convert data types, such as a string field to a date.\n See example . To learn more, see  Connect a Deployment to  Charts . In the deployment's  Data Access  section, click the\nname of the database that contains the collection to use for\nthe charts view. The collections list appears. Click the collection to use for the charts view.\n Charts  also displays any existing charts views that\nuse the collection. Charts  opens the  Add Charts View  modal. Your pipeline must be an array. Specify each\nstage of your pipeline as an object within the array. Atlas Charts  validates your pipeline.  Charts  reports any\nerrors in your pipeline below the editor. If the pipeline is\nvalid,  Charts  shows a sample document from the results or\ndisplays  No documents returned . For help creating your pipeline, you can utilize the\n Aggregation Pipeline Builder  in the  Atlas  Data\nExplorer. You can create your pipeline using the  Atlas  pipeline\nbuilder and paste it into the  Atlas Charts  pipeline editor. After you save the charts view, it displays in the\n Data Access  section for the collection it uses. The following example adds a pipeline to a data source pointing to\nthe  sample_mflix.movies  collection from the\n Sample Mflix Dataset  provided by\n Atlas . The pipeline performs a  $lookup  to join data\nfrom the  comments  collection based on  movie_id . The result is\na new field in this data source called  comments  containing data\nfrom a separate collection. The following example adds a pipeline to a data source pointing to the\n sample_supplies.sales  collection from the\n Sample Supply Store Dataset \nprovided by  Atlas . The pipeline hides the  customer.email  field,\nmaking that field unavailable to charts using this data source: To learn more about the  $project  aggregation stage,\nsee  $project . The following example adds a pipeline to a data source containing a\nstring field that we want to convert to a date. The pipeline adds a new\nfield to the data source with the string field  saleDate  converted to\na date field called  saleDateAsDate : To learn more, see  Connect a Deployment to  Charts . In the deployment's  Data Access  section, click the\nname of the database that contains the collection associated\nwith the charts view. Click the name of the collection associated with the charts\nview.  Charts  displays information for all existing\ncharts view that use the collection. To learn about other settings on this page, see\n Manage Data Sources . Charts  reports any errors in your pipeline next to the\neditor. If the pipeline is valid,  Charts  shows a sample\ndocument from the results or displays\n No documents returned . Charts  validates your pipeline when you save your changes. To disconnect a charts view, see\n disconnect a data source . If you are the  Project Owner , you can permanently delete a\ncharts view. To delete a charts view: To learn more, see  Connect a Deployment to  Charts . In the deployment's  Data Access  section, click the\nname of the database that contains the collection associated\nwith the charts view. Click the name of the collection associated with the charts\nview.  Charts  displays information for all existing\ncharts views based upon the collection. On the modal that appears: Click  Check for connected charts  to\nlearn whether any charts use the charts view as a\ndata source. Click  Delete .",
            "code": [
                {
                    "lang": "js",
                    "value": "[\n {\n   $lookup:\n     {\n       from: 'comments',\n       localField: '_id',\n       foreignField: 'movie_id',\n       as: 'comments'\n     }\n }\n]"
                },
                {
                    "lang": "js",
                    "value": "[\n  {\n    $project: { \"customer.email\": 0 }\n  }\n]"
                },
                {
                    "lang": "js",
                    "value": "[\n  {\n    $addFields: {\n      saleDateAsDate: { $toDate: '$saleDate' }\n    }\n  }\n]"
                }
            ],
            "preview": "If you are the Project Owner, you can create and modify\na charts view. A charts view is a data source that applies an\naggregation pipeline\nto a collection to pre-process data before it is used for\nCharts. You can create multiple charts views from a single\ncollection.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "release-notes",
            "title": "Atlas Charts Release Notes",
            "headings": [
                "Atlas Charts v1.43.0",
                "Atlas Charts v1.42.0",
                "Atlas Charts v1.41.0",
                "Atlas Charts v1.40.0",
                "Atlas Charts v1.39.0",
                "Atlas Charts v1.38.1",
                "Atlas Charts v1.37",
                "Atlas Charts v1.36.1",
                "Atlas Charts v1.35",
                "Atlas Charts v1.34",
                "Atlas Charts v1.33.2",
                "Atlas Charts v1.33.1",
                "Atlas Charts v1.32.1",
                "Atlas Charts v1.31.1",
                "Atlas Charts v1.31",
                "Atlas Charts v1.30.1",
                "Atlas Charts v1.30",
                "Atlas Charts v1.29",
                "Atlas Charts v1.27.0",
                "Atlas Charts v1.26.1",
                "Atlas Charts v1.26.0",
                "Atlas Charts v1.25.1",
                "Atlas Charts v1.25.0",
                "Atlas Charts v1.24.2",
                "Atlas Charts v1.23.0",
                "Atlas Charts v1.22.0",
                "Atlas Charts v1.21.0",
                "Atlas Charts v1.20.2",
                "Atlas Charts v1.20.1",
                "Atlas Charts v1.20.0",
                "Atlas Charts v1.19.0",
                "Atlas Charts v1.18.0",
                "Atlas Charts v1.17.0",
                "Atlas Charts v1.16.0",
                "Atlas Charts v1.15.0",
                "Atlas Charts v1.14.0",
                "Atlas Charts v1.13.0",
                "Atlas Charts v1.12.0",
                "Atlas Charts v1.11.0",
                "Atlas Charts v1.10.0",
                "Atlas Charts v1.9.1",
                "Atlas Charts v1.9.0",
                "Atlas Charts v1.8.0",
                "Atlas Charts v1.7.1",
                "Atlas Charts v1.7.0",
                "Atlas Charts v1.6.0",
                "Atlas Charts v1.5.0",
                "Atlas Charts v1.4.0",
                "Atlas Charts v1.3.0",
                "Atlas Charts v1.2.0",
                "Atlas Charts v1.1.1",
                "Atlas Charts v1.0.0"
            ],
            "paragraphs": "Released March 11th, 2024 Improvements in this release: Bug fixes in this release: Natural Language Charts  is in public preview. Fixes an issue where users could get a Charts failed to initialize error. Released January 29th, 2024 Improvements in this release: Bug fixes in this release: Project Owners can  add and remove dashboard owners  from dashboards on the Owners page. Fixes an issue where users could incorrectly open the chart builder using a URL. Conditional formatting now works correctly for dashboards you duplicate and export. Released December 10th, 2023 Improvements in this release: Bug fixes in this release: Adds support for the  $median  aggregation pipeline stage. You can expand the field panel in the chart builder to show fields with long names. Fixes an issue where  Charts  could not create reports in some\nbrowsers. Released October 24th, 2023 Improvements in this release: Bug fixes in this release: Supports  Natural Language Charts  during private preview period. Label override now work correctly for multi-series charts using charts\nembedding. Fixes an issue where the filter icon was disabled on a chart when\nviewing a dashboard. Fixes incorrect documentation links in the embedding and share\ndashboard pages. Conditional formatting now works correctly for decimal fields and\nstrings in table charts. Fixes an issue where you could not login to  Charts  from a\ndifferent project. Embed Chart render function no longer returns an error when chart data\ntakes longer than 30 seconds to load. Released August 22th, 2023 Improvements in this release: Bug fixes in this release: Charts  now supports a new chart type:  Candlestick Charts . Dashboard viewers can save a dashboard as a  PNG (Portable Network Graphic) . Charts  now supports  visualizing your Atlas billing data  directly inside the  Atlas Charts  application. You can programmatically customize your embedded charts using the  new\nrendering specifications . The  Charts  timeout limit increased to 10 minutes for\nexperimentation. Please contact  MongoDB Support  to set up the timeout limit increase. Dashboard filters now work correctly when displaying heterogeneous fields. Released May 26th, 2023 Improvements in this release: Bug fixes in this release: Dashboard viewers can save a dashboard as a  PNG (Portable Network Graphic) . Email reports now display properly. Dashboard refreshes now work correctly when you select the infinity\noption. Charts  that use  ISODate()  queries in the query bar now render properly. Fixes an issue when using  ObjectId()  with injected filters in an embedded chart. Released April 6th, 2023 Improvements in this release: Dashboard owners can now\n schedule reports , sending\none-time or recurring  PDF (Portable Document Format)  or  PNG (Portable Network Graphic)  dashboard reports by email. Chart authors can now see and apply\n charts suggestions  in Chart Builder. Charts  authors now see a help button with links to documentation. Charts  can now be activated in two ways: Click the  Charts  tab in the  Atlas  UI, or Click  Visualize your Data   in the  Data Explorer .  Visualize your Data  now opens the Chart Builder with the collection you chose to visualize configured as a data source. Users with the  Atlas  permission  Project Data Access Read Only  and above may now activate  Charts . Developers using the embedded SDK can now: Download an embedded dashboard as a binary or base64 image. Use the  getData()  method to get data from charts in an embedded dashboard. Initialize the filters on an embedded dashboard when rendering the dashboard for the first time. Released February 22nd, 2023 Improvements in this release: Bug fixes in this release: Users can now load various\n sample dashboards  in  Atlas Charts ,\nincluding Product, Sales, Observability, and IoT\ndata dashboards. Developers can use the SDK to\n filter data in embedded dashboards  with embedded dashboard filters and\nuser injected filters. Developers can now use the SDK to download an embedded\nchart as a binary or base64 image. Charts and Dashboard authors can now enable the embedding setting\n Allow all fields in the data sources used in this dashboard \nto quickly allow all the fields in a data source to be used as\nfilters for embedded charts and dashboards. In the side navigation panel,  Data Usage  is now named\n Data Transfer . Improved the process for saving an imported dashboard. getFilter  and  getHighlight  SDK methods now return values in a\nconsistent format. Fixes an issue with bin sizes displaying incorrectly after using\narray reduction. Fixes an issue where applying dashboard filters would render charts\nblank. Fixes an issue where  Charts  returned a disk use error when\nrefreshing data sources. Fields now render correctly when lookup fields have an empty array. Nested fields now display correctly inside the dashboard filter pane. Arabic and Slovenian dates now display correctly. The background colors of charts in embedded dashboards now render\ncorrectly. Released December 13th, 2022 Improvements in this release: Bug fixes in this release: Project Owners can manage viewing permissions on a deployment from\nthe  Data Sources  page. Fixes an issue where opening a dashboard would update the time it was\nlast modified. Fixes an issue with dashboard filter data source details. Fixes an issue with replacing array fields in the chart builder. Fixes an issue with sorting by value for colored charts. Fixes an issue where latitude and longitude fields were lost when\nediting geospatial heatmap or scatter charts. Fixes an issue for Safari where number fields were not displayed\ncorrectly in the  Encode  tab. Fixes an issue with the  Wrap Text  and\n Column Total  rules on table charts. Fixes several issues with the query bar, including an overflowing\nerror on the tooltip. Fixes an issue with rendering chart titles. Dashboards are now correctly imported when  textSize  fields exist\nwith invalid data sources. You can now correctly add an embedding provider from the\n Chart Embedding Settings  dialog. Geospatial scatter charts now render correctly when using array\ncoordinates. Buttons on the  Refresh Settings  modal now display\ncorrectly on small screens. Long chart titles now display properly in the\n Import Dashboard  dialog. Multi-level lookups in the chart builder  Fields  list are\nnow displayed properly. Sample document details from a data source now display correctly. The Regex binning option is now enabled for MongoDB 4.2 and above. Released November 16th, 2022 Improvements in this release: Bug fixes in this release: You can now  share dashboards \nacross an  Atlas  organization. Fixes an issue with adding date filters inside the Chart Builder. Fixes an issue where filter selections were not saved\ncorrectly when building charts. Fixes an issue where non-binned dates with null values were not saved\ncorrectly when exported as CSV. Fixes an issue where the  Charts  homepage did not load. Released October 3rd, 2022 Improvements in this release: You can now use  Atlas \n Online Archives \nas  data sources . Released September 12, 2022 Improvements in this release: You can now use serverless instances as\n data sources . Improved data source integration in  Atlas Charts : Atlas  collections are automatically available to use in the\nchart builder. If you don't want a data source to be available, you\ncan  disconnect it . Updated the  Data Sources  page. You can now create and test pipelines when building  Charts \nviews. You can now click your data source collection name in the chart\nbuilder to see a sample list of fields in that collection. You can now programmatically highlight charts inside an embedded\ndashboard using the  Embedding SDK . Adds support for the  $searchMeta  and  $unionWith  aggregation\npipeline stages. Removes support for assigning individual users to the\n Viewer  role.\nThis does not affect users already using this feature. Released May 16, 2022 Improvements in this release: Bug fixes in this release: Adds a new  Embedding  page that includes guidance for\n getting started with embedding  and\n lists all your embedded charts and dashboards . Moves the  Authentication Settings  inside the\n Embedding  page. To learn more, see\n Configure Embedding Authentication Providers . Adds a new page to see  Charts   data usage . For developers, updates the  Charts   Embedding SDK  to v2.3.0-beta.1 to support programmatic\nfiltering of charts inside an embedded dashboard. Fixes an issue where  Charts  appended the  $regularExpression \noperator to an aggregation pipeline. Supports adding  $search  as the first stage in an aggregation\npipeline. Released April 1, 2022 Bug fixes in this release: Downloading a CSV file now works correctly for unbinned dates and\ndata that includes the \"#\" character. Released March 28, 2022 Improvements in this release: Bug fixes in this release: You can now create a sample dashboard from the\n Add Dashboard  menu. Fixes an issue where charts using aggregate functions would stop\nworking. Dropdown menus in the chart builder now display options correctly. Fixes a bug where a product tours were incorrectly triggered when\nthere were no dashboards on the  Dashboards  page. Released February 24, 2022 Bug fixes in this release: Fixes a bug where a lookup field was not added. Released February 21, 2022 Improvements in this release: Bug fixes in this release: Adds the  Dashboard Embedding  feature,\nwhich lets you embed an entire dashboard in your website or app. Adds the  Query Library  feature, which\nlets you reuse queries across multiple charts. Adds the ability to download chart data from a public dashboard. Fixes an issue where incorrect binned dates were selected when you\nused a filter. Fixes a bug where there was an issue applying empty queries in the\nquery bar. Fixes date filters in dashboard filters to correctly\ndisplay the timezone when charts refresh. Fixes the  Import Dashboard  dialog to correctly display\nwhen you have many data sources. Fixes  Ignore Filter  to work correctly for all charts in\nthe dashboard. Released December 6, 2021 Improvements in this release: Bug fixes in this release: Interactive Filtering  is now\navailable. Improves the query editor, including a new button to collapse\nthe editor. Fixes an issue where  importing a dashboard \ndid not work for some users. Fixes an issue where sharing a dashboard with\n Everyone  allowed them to make\nchanges to existing roles. Fixes an issue where negative numbers were incorrectly binned. The  Edit Chart  button is now disabled for viewers. Show Data  now correctly displays in table and JSON format. Data source names can now be 64 characters long. Fixes an issue with donut charts having boolean values. Click events now correctly pass event data when clicked in embedded\ncharts. Released September 13, 2021 Improvements in this release: Bug fixes in this release: Atlas Charts  now supports JWKs or JWKS URLs as an authentication\nprovider when embedding charts. Adds a new filter icon that indicates when dashboards are impacted by\ndashboard filters. Adds new dashboard share icons to indicate public and internal\nsharing statuses. Updates the dashboard and data source sharing screens. Fixes an issue with highlighting in bar and column charts when\nconverting the time zone of a date field. Axis labels are now correctly highlighted for binned dates. Improves performance when adding a missed field in the chart builder. The  Convert type  option is now correctly enabled in the\nchart builder for single-level arrays in documents. Fixes an issue where part of the chart builder tour for new users\nwas incorrectly positioned. Donut charts with  By Series  colors now display properly\nwith  null  values. Programmatic highlighting now works correctly with single quotes in\nvalues. The chart aggregation pipeline view is now accessible when a chart is\nloading. Released August 19, 2021 Bug fixes in this release: Fixes an issue with disabling interactive filters on some\ndashboards created before v1.26.0. Grouped column charts with secondary axes now render properly. Donut charts with  By Series  colors now display properly\nwhen data changes. Pressing the 'Enter' key to create a new dashboard now works\ncorrectly. Fixes an issue where data driven multi-series charts could not be\nembedded. Released August 2, 2021 Improvements in this release: Bug fixes in this release: Color swatches can now be rearranged in the custom color palette\nfor data-driven multi-series charts. Period   date filter  now\nallows adding custom past or future periods. Adds a new dashboard filter button to enable or disable\ndashboard-level filtering on a chart. Zoomed view now allows viewers to jump to a chart by\nclicking on the carousel indicators. Imported dashboards now show the  Just added  status\nwhen imported. Lookup fields can now be removed when sampling fields time out. Encoded fields now have inferred type icons. Type icons on encoding cards can now reflect the field's original type. Charts Embedding SDK \nhas been updated to v2.1.0 to support programmatic highlighting. Click Events  are no longer in Preview. Improves time series functionality by allowing  $setWindowFields . Fixes an issue where some dashboards were not able to be imported\nor exported. Line series in  Combo charts  now use the\ncorrect formatting. Fixes an issue where the editor for chart title and description\nhad incorrect heights. Improves  selectionFilter  on non-binned date fields by making\nthem timezone aware. Resized charts now display on their tiles correctly. Released June 25, 2021 Bug fixes in this release: Fixes an issue where data labels did not appear when enabled on some\ncharts. Released June 23, 2021 Improvements in this release: Bug fixes in this release: Dashboards can now be  exported  to a file. Dashboards can be  imported  from a\npreviously exported file. Single-series charts now only show a single color in the palette\ncustomization setting. Adds a new series-based color palette editing experience for\nmulti-series charts built from multiple fields. Number formatting can now be applied for every field used on a\nchart's axis. Adds a new tour showing how to customize field settings. Embedded charts now automatically repaint if their size or visibility\nchanges. Fixes an issue where the magnifier icon in search boxes was very\nsmall. Improves the behavior of  selectionFilter  in click event payloads\nfor binned date values, making them time-zone aware. Fixes an issue where charts did not render when series' names\ncontained single quotes. Released May 11, 2021 Improvements in this release: Bug fixes in this release: Conditional formatting  can now be\napplied to Table and Number charts. Adds the new  Combo chart  category with\nGrouped Combo and Stacked Combo chart types. Data sources can now be added for federated database instances and multi-cloud\n Atlas  clusters. Adds a new choropleth scheme for Dutch provinces. Updates the sample dashboard. Disables browser autocomplete in the  New Dashboard  dialog. Hides the Gauge charts  Target Label & Value  customization\noption when a  Target  is not set. Gauge charts with a value of  0  no longer show as blank. Top Item charts no longer show  undefined  while loading. The indicator on the chart builder  Filter  tab now\nshows the count for enabled filters only. A numeric bin size of  0  is now treated as invalid. Fixes an issue where charts would sometimes show two  null \ncategories. Binned string values are now sorted. Prevents reordering columns in the\n Data Sources  table. Changes the click event role for clicks on a Scatter chart background. Click event roles now differentiate between category and axis tick\nlabels. Calculated fields that are nested inside objects can now be modified\nor deleted. Swaps the order of colors 18 and 20 in the default color palette. Fixes an issue where filters sometimes couldn't be deleted from a\nchart. Text can now be copied from chart titles and descriptions using the\nbrowser context menu. Donut chart series now render in the same order in the legend and on\nthe chart. Charts  no longer returns an error if the  Show \"All Others\" \n limiting option  is on and the chart has no\ndata. Logarithmic scale  can now be enabled if an\naxis minimum or maximum is set. Fixes an issue where dashboards did not load if a user with\n dashboard permissions  was deleted from\nMongoDB Cloud. Released March 29, 2021 Improvements in this release: Bug fixes in this release: Adds the option to drill down into data on a chart by right-clicking\nchart elements and choosing \"show data for this mark.\" Adds the option to  pin Table columns  to prevent\nhorizontal scrolling. Adds the option to select the angle for labels on the X-axis of\ndiscrete charts. Extends the Embedding  Click Events  Preview\nto include Table chart types. Developers can now filter click events by role. Embedded charts with click events enabled now display the hand cursor\nover clickable elements. Adds a  choropleth shape scheme  for\nItalian Regions. Updates the default color palette for charts. Introduces performance improvements. Improves the chart title and description inline editing experience. Iframe embedded charts now accept the  autorefresh=false  parameter. Fixes an issue where some read-only users could access the\n Add Data Source  dialog. Fixes some corner cases where the embedding  selectionFilter  field\nreturned the wrong value. Released February 18, 2021 Improvements in this release: Bug fixes in this release: Adds new customization options to: Show data labels on\n donut charts  as a percentage. Enable various line smoothing options on\n line and area  charts. Tooltips for  donut  and\n 100% stacked charts  now show percentage\nas well as raw value. Extends embedding  Click Events  Preview to\nsupport geospatial chart types and to include  selectionFilter \nattribute. Adds a new on-chart context menu to save a chart to a file or copy a\nchart to the clipboard. Allows  authenticated embedding providers  to match Audience values where the  JWT (JSON Web Token) \ncontains an array of values. Improves messages when  $lookup  is used in the query bar. Geospatial scatter charts now use requested formatting for values in\nthe  Color  channel. Validation errors now properly appear when adding calculated fields. Charts built from multiple aggregation fields now show bars in the\nsame order that the fields are encoded. You can now select text in the  View Aggregation Pipeline \ndialog. Table row and total columns now respect the table text size\ncustomization option. Chart title and description fields can no longer be edited\nsimultaneously. Improved column sorting behavior in tables. Fixed some issues where the Top Item chart sometimes displayed incorrect\ndata. Data labels no longer appear in the wrong place for fields mapped to the\nsecondary Y axis. Released December 21, 2020 Improvements in this release: Bugs fixed in this release: Adds the ability to add a description to a chart. Charts no longer allocate space for chart titles or descriptions when they\nare not present. Refreshes the visual styling for  Table  and\n Area  charts. Adds the following new customization options: Wrap text in specific columns of a  Table  chart. Choose the font size in a  Table  chart. Enable Trend Lines in  Scatter ,\n Continuous Line and Continuous Area \ncharts. Adds the option to enable Data labels in  Stacked Bar\nand Stacked Column  charts. Improves rendering performance on embedded charts. Releases Click Events in the  Charts Embedding SDK  as a Preview feature. Fixes an issue where donut charts rendered with too many segments\nafter swapping from a different chart type. Fixes an issue where embedded charts did not render when the browser\nis configured to block third-party cookies. Fixes an issue where the  Get Chart Data  dialog was empty\nif a chart used the  Count By Value \naggregation. Fixes an issue where tables didn't sort correctly when binned dates\nwere used in the  Dynamic Columns  channel. Fixes an issue where values from the  Color  channel were\nnot always sorted correctly on  Scatter \ncharts. Released December 1, 2020 Bug fixes in this release: Fixes an issue where  donut charts  constructed\nfrom multiple fields failed to render. Fixes an issue where  series  could render in\nan unpredictable order when using  string binning . Fixes an issue where  area charts  showed\noverlapping segments when some series had no data for some categories. Released November 18, 2020 Bug fixes in this release: Fixes an issue where the  Convert Time Zone \ntoggle couldn't be enabled when customizing a field. Fixes an issue where charts wouldn't render if a  label  contains a single quote and the chart uses a\n secondary Y axis . Improves predictability around ordering of  multiple series  on a chart. Released November 12, 2020 Improvements in this release: Bug fixes in this release include: Introduces option to show  All others  when\n limiting results  on a chart. Introduces  Count by Value  aggregation\noption, which automatically generates series based on the values in a\nfield. Provides more detailed error messages in the tooltip when a chart on a\npublic dashboard fails to load. New option to use Regular Expressions to choose which string values to\nuse in a  bin . New chart  customization options : Plot one or more series on a Secondary Y axis on\ngrouped column, line and area charts. Reposition or hide the chart legend. Use different dash styles for each series on a line chart. Change the size, stroke width and fill opacity of marks on a scatter\nchart. System databases and collections can no longer be added as data\nsources, since they can't be used for charting. Popup dialogs in the chart builder no longer close when you click on the background. Error state is now properly cleared when the Lookup Field dialog is reopened. Improves the resolution of the  Countries  and\n Regions  choropleth shape scheme, ensuring small countries\nare visible. Charts now render correctly when  NaN  values are included in bins. Series now display in a consistent order when string\nbinning is enabled. Null and empty string values can now be used successfully in string\nbins. String bins are now retained when binning is\ndisabled and re-enabled. Fixes a styling issue where type converted fields were not showing\nwith a green icon in the field panel. Changes placement of product tours so they can be dismissed on low\nresolution displays. Binned numbers and dates are no longer infilled when used on a\nchart's Series channel. Null  category no longer displays when\nbinned numbers or dates are used on a Series chanel. Fixes an issue where charts were not always sorted correctly when\nbinned numbers or dates were used on a Series chanel. Fixes an issue where the data in the  Get Chart Data \ndialog was sometimes empty or didn't match the chart. Released October 13, 2020 Improvements in this release: Bug fixes in this release: Introduces  Lookup Fields  in the Chart\nBuilder. Introduces binning on string-typed fields in category channels.\nSee  Bin Data . Adds ability to limit the number of documents displayed on\n Table Charts . Adds new tour showing virtual and lookup fields. Field encodings are now correctly retained when swapping between\nGeo Scatter and Geo Heatmap chart types. Calculated fields that return objects can now be modified or deleted. Fixes a rendering issue for Area charts when some bins or categories\nhad no values. Geospatial charts can now be panned independently. Fixes an issue when scatter charts with log scales were panned with\nthe mouse. Changes to the  Filter Allow  list are now immediately\npicked up by embedded charts. Prevents some \"white screen\" errors from occurring in the Chart\nBuilder. Allows editing chart titles while a chart is loading. Empty arrays now show the  []  symbol in the Chart Builder field\npanel. Improves the refresh behavior for expired authentication sessions. Atlas Charts  no longer crashes when geospatial charts are rendered with\n NaN  coordinates. Released September 15, 2020 Improvements in this release: Bug fixes in this release: Adds new  Top Item  chart type, allowing you to\nsee details of a single item from a collection. Allows changing the size of text labels on a chart. Adds new  Period  option on\n date filters , allowing you to\nfilter by a current or previous period. Allows sorting a chart on a specific series when the chart uses\nmultiple series generated from different fields. Array reduction options no longer show on wrong cards after deleting\nfields. Improves performance of queries when absolute date filters are used. Improves rendering of multi-series charts containing empty bins. Embedded charts no longer blank out when refreshing. Zoomed dashboard view now fills the entire screen. Tables containing a mixture of unbinned dates and binned values no\nlonger show empty cells where dates should appear. Improves rendering consistency across different chart types. Charts no longer hang hang during rendering if the number of\nrequested bins was very large. Released August 20, 2020 Improvements in this release: Bug fixes in this release: Introduces product tours for new users. Allows users with the\n Project Read Only \nrole to create dashboards and charts using sample data. Introduces a new personal dashboard for new users. Introduces new customization option to show\n Gauge Charts  as a percentage of target. Improves autocomplete suggestions in the chart builder query bar to be\ncase-insensitive. Improves rendering of null values in charts. Improves performance of sorting and limiting of chart data by\nperforming sorting and limiting server-side. Improves performance of chart rendering and the accuracy of data in\nthe  Get Chart Data  dialog. Increases the number of legend entries that render on a multi-series\nchart. Embedded number charts no longer display as blank when a zero value\nwas expected. Supports adding calculated fields whose values are arrays. Chart titles can now be selected and copied from the dashboard view. The numeric binning textbox no longer shows non-integer values. The string filter card can still be used even if sampling of string\nvalues fails. Missed Fields  can now be added when\n Sample Mode  is enabled. Summary of user permissions now show on the\n Dashboard Overview  page. The Chart Builder no longer crashes when an empty array is dragged to\nthe filter panel. Collection statistics now display for databases that contain views. Error codes now display correctly after failures. Chart status bar no longer shows a tick if the chart data fails to\nload. Charts no longer render incorrectly when the only category is an\nempty string. Cluster names are no longer truncated in the\n Data Source Permissions  dialog. Multi-series charts with some empty date bins now render correctly. Blank screen no longer occurs after moving a chart to a different\ndashboard. Released July 24, 2020 Improvements in this release: Bug fixes in this release: Adds a welcome experience for new Charts users. Adds a sample data source of movie data available to all Charts users\nfor testing and experimentation. Enables  generating sample dashboards and charts . Adds an option to  show a running total or change in value \non a chart. For charts with no  category channel \nencoded, fields in  aggregation channels \nare now used as categories. Fixes an issue where a white screen was displayed when editing the time\ncomponent of a date filter. Fixes an issue where number charts displayed as blank when a zero value\nwas expected. Fixes an issue where the  Retry  option did not appear on charts with\nerrors on public dashboards. Fixes an issue where embedded charts using BSON types in filters did\nnot work when using the Atlas App Services authentication provider. Fixes an issue where some charts unexpectedly showed a blank entry in\nthe legend. Fixes an issue where chart queries did not work if they used the\n NumberInt ,  NumberLong  or  NumberDecimal  helpers. Improves the performance of rendering large dashboards. Released June 23, 2020 Improvements in this release: Bug fixes in this release: Enables downloading chart data from the dashboard view\nof a chart. Invalid queries now display detailed error messages in the chart\nbuilder. Enables setting a delimiter when using the  concat \n array reduction option . Adds new  Week of the Year  option when\n binning date values . Donut  charts can now be created from\nmultiple fields. Charts with binned numeric or date values now show gaps for empty\nbins. Collection information is now visible when adding data sources. Removes the step to set permissions when creating a data source. Updates visuals across the  Atlas Charts  application. Fixes an issue where injected embedding filters were not properly\nconsidered when retrieving chart data from the cache. Fixes an issue where errors that occurred while sampling fields did\nnot display in the chart builder. Fixes an issue where the chart builder query bar did not appear\ndimmed when a dialog was open. Changes the IFrame embedding parameter to  autoRefresh  to improve\nconsistency with SDK property (the previous  autorefresh  syntax\nstill works). Fixes an issue where embedded charts sometimes rendered with the\nincorrect font. Released May 28, 2020 Improvements in this release: Bug fixes in this release: Adds a new chart status bar that shows details about last and next\nrefresh time and any errors in the chart. Adds the ability to refresh a single chart on a dashboard. To learn more,\nsee  Refresh Dashboard Data . Improves server-side caching of chart data. Adds an option to add an authentication provider while embedding a chart. Adds new  Tooltip Detail  channel on\n Scatter  and\n Geospatial Scatter  charts. Embedded tables now have a transparent background. Prevents a failure when geospatial charts use decimal type fields for\ncoordinates. Fixes sorting of unbinned decimal typed values in chart category\nchannels. Fixes an issue where newly added dashboard filters wouldn't show\nsample string values. Released April 30, 2020 Improvements in this release: Bug fixes in this release: Embedding SDK now generally available. Adds support for\n authenticated embedding . Charts  supports Custom  JWT (JSON Web Token) , Atlas App Services, and Google\nauthentication providers. Adds more detailed  error information  for\nembedded charts. Embedding errors are now written to browser developer console. Includes server-side caching of chart data for improved performance. Updates UI for setting\n dashboard refresh behavior . Error messages no longer render incorrectly in Firefox. Field sampling in the chart builder no longer appears to hang if the\nsample returns no documents. Table charts now properly format unbinned dates. Queries using\n $date  and a\nstring date can now be used in the query bar. Improves the rendering of emphasized series in line, area and scatter\ncharts. Released March 31, 2020 Improvements in this release: Bug fixes in this release: Allows  dashboard filter cards  to be\nrenamed. Allows filter cards to be expanded and collapsed. Visual refresh across the  Atlas Charts  application. Legends on geospatial charts are no longer cut off. Error message no longer appears before an embedded chart is rendered. Use Smart Labels on Axis  customization option no longer\nshows on unsupported chart types. Unbinned dates used as dynamic columns on a table chart can now be\nformatted. Donut chart data labels are no longer rendered if they are likely to\noverlap with other labels. Users with Atlas organization-level roles now show in permissions\ndialogs. Intercom support widget no longer obscures charts and dashboard\nfilters. Sampling a collection in the chart builder no longer appears to hang\nif no documents are returned from the query. Removes excessive padding around table charts. Fixes an issue where calculated fields that produce no results could\nbe saved but not removed. Charts  now automatically reloads after a version upgrade. Embedded charts now show the correct error if the chart  id  is\nincorrect. Fixes rendering issues with dashboard filter cards on Firefox\nbrowsers. Fixes an issue where error messages on public dashboards were\nillegible in Firefox browsers. Released March 2, 2020 Improvements in this release: Bug fixes in this release: Allows setting the  theme  and  attribution  with the\n Embedding SDK . Adds the  Gauge Chart  type. Enables  Dashboard filters  on public\nlink-shared dashboards. Enables linking  Dashboard filter cards  to\nmultiple fields from different data sources. Adds  Smart Labels  for dates on the X axis\nof continuous line, area and scatter charts. Enables zooming and panning on\n Scatter Charts . Enables  highlighting individual data series \nby clicking the legend entries. Fixes an issue where  Verified Signature  embedded charts\nfailed to render when strings in filters contain space characters. Fixes an issue where embedded charts failed to render when field\nnames in filters were not quoted. Fixed an issue where embedded\n Choropleth Charts  did not render. Improved rendering of filter cards in the dashboard filter pane. Released February 5, 2020 Improvements in this release: Bug fixes in this release: Adds  dashboard filtering  for\nauthenticated dashboard users. Adds support for Embedding JavaScript SDK (Preview) for unauthenticated\nembedding. IFrame  embedded charts  no longer require\nTenant ID. Improves scaling of  Number Charts  to\nprevent the text from getting cut off. Tables  no longer show as blank when\ndynamic column fields have empty values. Improves reliability and performance when duplicating dashboards. Prevents stale error messages from appearing in\n Calculated Fields  editor. Released December 16, 2019 Bug fixes in this release: Removes extra padding around\n embedded charts . Released December 10, 2019 Improvements in this release: Bug fixes in this release: Improves dialog for unauthenticated  chart embedding . Supports dark mode in  embedded charts . Adds the ability to  filter \nunauthenticated charts based on allowed fields. Improves the attribution logo on  embedded charts \nand provides the ability to hide the logo. Improves the treatment of errors in the  Chart Builder ,\n Dashboards , and  embedded charts . 100% stacked charts now show a percentage scale on the axis. Fixes an issue with the  Retry  button for charts on publicly shared\ndashboards that were returning an error. Prevents multiple data source samples from running at once when quickly\nswitching data source in the Chart Builder. Grid columns in the  Get Chart Data  dialog are now in an expected\norder. Tables with a large number of dynamic columns now return an error instead of\nhanging the browser. Fields that include ellipsis button in the Chart Builder now behave as designed\non macOS. Dashboards can now be scrolled using devices that support touch-screen feature. The  existence of value  and  count of occurences   array\nreductions  now succeed even if some documents have null\nor missing values. Released November 11, 2019 Improvements in this release: Bug fixes in this release: Add  Missed Fields  and\n Calculated fields   while building a chart. Share dashboards via a  public link . New design for  Data Source Permissions  and\n Dashboard Permissions  dialogs. Legends on  donut charts  should no longer\noverlap with the donut. Long category names are now truncated, maximizing space for the chart. Improved error handling for queries with mismatched brackets. Embedded charts no longer go blank while refreshing. View Source Documents  and\n View Aggregation Pipeline  dialogs no longer take unapplied\nqueries into account. Prior to this fix, these dialogs would be\naffected by queries in the query bar regardless of whether the query\nwas applied to the chart. Released October 14, 2019 Bug fixes in this release: Fixed an issue that resulted in number formatting not being applied\nto decimal types in some charts. Charts containing type-converted fields now render correctly on\ndashboards and when embedded. Released October 2, 2019 Improvements in this release: Bug fixes in this release: New menu in the Chart Builder allows you to\n view and export chart data : View Source Documents  from the data source. View Aggregation Pipeline  used to query the data source. Get Chart Data  to see the data used on the chart and\nexport to CSV or JSON. Adds the ability to\n change the data type of fields \nwhile building a chart, when using MongoDB 4.0 or later. Charts can now be placed across the full width of a dashboard on a\nlarge monitor. A warning now appears when deleting a data source that is in use by\nat least one chart. Performing a new operation in the Chart Builder now cancels previous\noperations, preventing the chance of multiple responses coming back in\nan unexpected order. Table row totals correctly display at the far right of the table at\nall times. Encoding cards can now be more reliably swapped across chart channels. Singapore is now shown on  Choropleth  maps using the\n Countries and Regions  scheme. Choropleth  tooltips are now shown on the largest land\nmass of a region. String  Filter  card now correctly shows sample values from\narrays of documents. Null values in chart categories now show as  null , not 0. Improves rendering of dates on continuous chart axes. Ellipsis menu is now accessible for data sources at the bottom of the\ngrid. Miscellaneous performance, reliability and security improvements. Released September 3, 2019 Improvements in this release: Bug fixes in this release: New design for  Data Sources  list. New Data Source  Name  attribute replaces the\n Alias  attribute. Data Source owners can now add, edit, or remove an\n Aggregation Pipeline  on a data\nsource, including the ability to join multiple collections using\n $lookup . Version detection to detect unsupported MongoDB versions or disable\nunsupported chart features. Option to enable or disable thousands separators in numbers on\ncharts. Time zone conversions are now correct in Table chart types. Support for queries using  { $not: { $regex: \u2026 } }  structure. Miscellaneous performance, reliability and security improvements. Released August 7, 2019 Improvements in this release: Bug fixes in this release: Option to  specify refresh period \nin embedded charts. Option to  specify a custom filter  in\nembedded charts using Verified Signature authentication. Enabling and disabling of chart filters Set  preferred time zone  when using an absolute\ndate filter. Visual refresh of the Chart Builder. Addressed various issues when building and rendering geospatial\ncharts. Fixed an issue that could cause charts to appear blank when\nrefreshing large dashboards. String filter card shows a more complete set of sample values for\nlarge, indexed collections. Miscellaneous performance, reliability and security improvements. Released June 12, 2019 General Availability Release Improvements in this release: Bug fixes in this release: New  geospatial chart types : Choropleth Geospatial Scatter Geospatial Heatmap New Data Source  permissions model .\n Viewer  role allows users to be granted access to data for\nviewing but not authoring. UI improvements to the  chart builder . Prevented console errors from being written when embedded charts are\nrendered. Read Preference now shows correctly for newly created data sources. Prevented intermittent errors when adding data sources. Charts can now be edited or deleted when their data is loading. Released May 14, 2019 Improvements in this release: Bug fixes in this release: New  filtering experience  in the\nchart builder. Improved  Query Bar  in the chart builder, allowing\nthe chart author to specify custom aggregation pipeline stages. Charts  now runs against  secondary  replica set members\nby default, and allows  Data Source  owners to\nchange the read preference. Charts now remain visible when changing the dashboard layout and\nrefreshing charts. Duplicating a dashboard no longer breaks\n embedded charts . Tooltips on area charts now show on hover over any part of the area,\nnot just the data points. Released Apr 16, 2019 Improvements in this release: Bug fixes in this release: Ability to  embed charts  in external\napplications. Warning now appears if  Atlas  renders with incomplete data. Fixed bad rendering in some\n stacked area charts . Fixed some cases where  binned data  could\nappear in the wrong order. Automatic  dashboard refresh  should work\nmore reliably after resuming from sleep. Released Feb 14, 2019 Improvements in this release: Bug fixes in this release: New Chart Types: 100% Stacked Bar 100% Stacked Column 100% Stacked Area New default  sort behavior  in charts. New  filter bar  in the chart builder,\nwith increased performance and usability. Changes to  filter parsing  to better align with\nMongoDB Shell syntax and Javascript in general. Specifically, filters\nusing  Date()  to represent the current date or\n Date(\"2019-01-01\")  to represent a specific date will need to be\nchanged to  new Date()  or  ISODate()  and\n new Date(\"2019-01-01\")  or  ISODate(\"2019-01-01\") , since the\nDate() function now correctly  returns the date as a string\nrepresentation. Fixed rendering issues in certain browser versions relating to the\n continuous color picker . Miscellaneous performance, reliability and security improvements. Released Dec 11, 2018 Initial public release of the  Atlas Charts \n SaaS (Software as a Service)  application.",
            "code": [],
            "preview": "Released March 11th, 2024",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorials",
            "title": "Tutorials",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "launch-charts",
            "title": "Launch Atlas Charts",
            "headings": [
                "Prerequisites",
                "Required Access",
                "Procedure",
                "Log into MongoDB Atlas.",
                "Select your desired Atlas project, or create a new project.",
                "(Optional) Invite people to your Atlas project and shared Charts instance.",
                "(Optional) Create an Atlas cluster.",
                "Launch the Atlas Charts application.",
                "Moving Forward",
                "Delete Your Atlas Charts Instance"
            ],
            "paragraphs": "The following tutorial guides you through launching  Charts  on\nMongoDB Cloud. You can access  Charts  with any\n Organization Role \nor any  Project Role  that\ncan read data from  Atlas . In  Atlas , click  Charts  in the navigation bar. Atlas Charts  is accessible through MongoDB  Atlas . You will need a\n MongoDB Atlas user account \nto complete this tutorial. To learn more about creating an  Atlas \nuser, see the  Atlas   Getting Started \ndocumentation. You will also need an  Atlas  cluster to visualize data using\n Charts . The steps on this page guide you through creating an\n Atlas  cluster. Each instance of the  Atlas Charts  application is tied to a single\n Atlas   project .\nYou can only visualize data from  Atlas  clusters within the same\nproject. To read data from the clusters in your  Atlas  project, this tutorial\nrequires that: You can access the  Atlas  UI for the organization that contains\nyour  Atlas  project. If your organization's owners enable\n IP access list for the Atlas UI for an organization ,\nthis restricts access to the  Atlas  UI only to those users whose\nIP addresses are included in the organization's IP access list. If you\ndon't have access to an organization,  Atlas Charts  displays a banner at the\ntop of the page notifying you of the restriction. Contact your organization's\nowners so that they can include your IP address in the access list for\nthe  Atlas  UI for this organization. This restriction doesn't apply\nto embedded charts applications and to the public dashboard. Your  Atlas user \nhas any  Project Role  except\nthe  Project Read Only  role. When you register an  Atlas  account,  Atlas  grants you the\n Project Owner  role on your initial project. To learn more, see\n Atlas Access  in the  Atlas  documentation. To access the  Atlas Charts  application, you must be logged into\n Atlas . If you have an  Atlas   project \nwith clusters containing data you wish to visualize, select\nthe project from the  Context  dropdown in the left\nnavigation pane. If you do not have a suitable existing  Atlas  project, see\n Create a Project \nin the  Atlas  documentation for instructions on creating a\nnew project. All  Atlas   project users \nwith  Project Roles \nother than  Project Read Only \nhave access to the  Charts  instance associated with that\nproject. To add additional members to your  Atlas \nproject, see  Manage Project Users and Teams \nin the  Atlas  documentation. The  Atlas Charts  application makes it easy to connect collections in your\ncluster as  data sources . Data\nsources reference specific collections and\n charts views  that you can access in the\n Chart Builder  to visualize the data in those\ncollections or charts views. To create an  Atlas  cluster: You can skip this step if you already have an  Atlas  cluster in\nthe current  project . In the left navigation menu, click  Clusters . Click  Build a New Cluster . In the  Create New Cluster  page, choose your preferred\ncloud provider and region, cluster tier, and additional settings.\nAs you build your cluster,  Atlas  displays the associated\ncluster costs at the bottom of the page. Atlas  provides a Free Tier  M0  replica set as well as\npaid  M10+  clusters. Free Tier deployments have restrictions\nas compared to paid  M10+  deployments, but will work for the\npurposes of this setup and all  Charts  tutorials\noffered in this documentation. For complete documentation on\nthese restrictions, see\n Atlas M0 (Free Tier), M2, and M5 Limitations . The default cluster name is  Cluster0 . If you wish to\nchange your cluster name, do so now, as cluster names cannot be\nchanged once configured. Click the  Create Cluster  button to deploy\nyour cluster. Your new cluster connects to  Charts  automatically. For complete instructions on creating an  Atlas  cluster and\ndetails on all available configuration options, see\n Create a Cluster \nin the  Atlas  documentation. In  Atlas , click  Charts  in the navigation bar. To navigate back to the  Atlas   Clusters  view, click\n Data Services  at the top of the  Atlas Charts  application. When you first launch  Atlas Charts  in a project,  Charts \nautomatically creates a new\n user  named\n Charts User  with the  Project Charts Admin  role\nin your  Atlas  project to access your cluster data. If you have previously used  Charts , you will either\nsee your existing dashboards or be prompted to\n add a new dashboard . If you are a new  Charts  user,  Atlas Charts  directs you\nto the  Charts  Getting Started tutorial. The  Charts \n Getting Started Tutorial  provides two\npossible paths to begin using  Charts : Additionally,  Atlas Charts  automatically creates a new, empty\ndashboard named  <YOUR-NAME>'s Dashboard  of which you\nare the  Owner . This dashboard is private by default,\nbut you can  modify dashboard permissions  as you would any other\ndashboard. Connect Your Data Sources Explore with Sample Data Now that you have a data source, you are ready to begin\nvisualizing your data. The next steps are to\n create a dashboard  and\n build charts  to populate your dashboard. For complete walkthroughs of  Atlas Charts  and its features, including\ndownloadable data sets to visualize, see the following\n Tutorials . If you are an  Atlas   Project Owner , you can deactivate\nand delete a  Atlas Charts  instance linked to your  Atlas  project from\nyour  Atlas \n Project Settings . If you delete your linked  Atlas Charts  instance, you can create a new\n Atlas Charts  instance for your project at any time. The newly created\ninstance does not retain any data from previously deleted instances. Deleting a  Atlas Charts  instance deletes all data associated with\nthat instance including dashboards, data sources, and metadata. Once\nthe  Atlas Charts  instance is deleted, this data cannot be recovered.",
            "code": [],
            "preview": "The following tutorial guides you through launching Charts on\nMongoDB Cloud. You can access Charts with any\nOrganization Role\nor any Project Role that\ncan read data from Atlas.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-charts-iframe",
            "title": "Embed Charts with an iframe",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source.",
                "Select the Unauthenticated tab in the dialog window.",
                "Toggle Enable unauthenticated access to On.",
                "(Optional) Specify filterable fields for your chart.",
                "Select the panel labeled Iframe.",
                "Set options.",
                "Copy the iframe embedding code.",
                "(Optional) Set additional options.",
                "Select a dashboard.",
                "Select a chart.",
                "Enable external sharing on the data source.",
                "Select the Verified Signature tab in the dialog window.",
                "Toggle Enable signed authentication access to On.",
                "Toggle the switch marked Enable signed authentication access to On.",
                "Go to Authentication Settings to acquire an embedding key.",
                "Generate an embedding key.",
                "Create the server-side code necessary for a verified signature.",
                "(Optional) Set additional options."
            ],
            "paragraphs": "You can embed a chart into a web application with an iframe and specify\nsettings such as height, width, refresh interval, and display theme. Charts embedded within an iframe may be either: Unauthenticated, in which case they are viewable by anyone. Authenticated with a Verified Signature. Authentication with a Verified Signature is deprecated. The\n Embedding Charts SDK  offers authentication\nthrough several  authentication providers . You must be a dashboard  Author  to enable\nembedding for a chart. Create a New Dashboard Create a Chart After your iframe code is ready with any options you've set, you can place\nit in a web page to display your chart. From your dashboard page, select the dashboard containing the chart\nyou wish to make embeddable. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. Specify the fields on which chart viewers can filter data. By\ndefault, no fields are specified, meaning the chart cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your chart by\nselecting  Allow all fields in the data source used in this\nchart . To learn more about filterable fields, see\n Specify Filterable Fields . Selecting the  Iframe  panel reveals the iframe embedding code\nand allows you to set refresh and display theme options. The refresh interval determines how often your chart refreshes\nwith new data, if any, from your data source. You can select the  Light  or  Dark  display theme\nfor your chart. The iframe embedding code contains your chart's base URL and chart ID,\nas well as any options you have set. You can edit the iframe code manually to set several other chart options,\nincluding height, width, and border radius. See  Embedded Chart Options \nfor more information about chart options. Using a Verified Signature for authentication is deprecated.\nInstead, refer to the\n Authenticated Embedding  tab for\ninstructions on securing your charts. From your dashboard page, select the dashboard containing the chart\nyou wish to make embeddable. From the dashboard, click   at the top-right of\nthe chart to access its embedding information. Select\n Embed chart  from the dropdown menu. If a chart is on a dashboard that has embedding enabled, the\n Embed Chart  option is automatically enabled. Therefore,\nyou can't select the  Embed chart  option for charts\nwithin dashboards that have embedding enabled. If you have already enabled external sharing on the data source this\nchart uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure external sharing  link. The  HTML (HyperText Markup Language)  code which appears in the modal window shows the parameters\nwhich are required to share a chart with authentication enabled, but\nit is not usable as-is. Continue with the subsequent steps to\nenable authenticated access. If  Charts  is not already displayed, click\n Charts  in the navigation bar. Click  Embedding  in the sidebar. Click the  Authentication Settings  tab. You must be a  Project Owner  to\naccess the  Authentication Settings  page. As a\nnon-admin user, you can still use embedded charts, but you will\nneed to ask a Project Owner for a key. Click the  Generate New Key  button to create a new\nembedding key. Store the key in a safe place. If you generate a new key, any previous keys become invalid.\nEnsure that all the existing shared charts that use the old key\nare updated to use the new key. Generating a verified signature to accompany data requests from shared\ncharts with authentication enabled requires server-side code. The\nverified signature creates a payload by generating a\n HMAC  from your embedding key, a timestamp, and\nidentifying data from your chart. The verified signature is valid for\na limited time period specified in your server-side code. Code examples demonstrating how to generate a verified\nsignature are available for the following languages and platforms: Node.js C# Java Python MongoDB Stitch You can edit the iframe code manually to set several other chart options,\nincluding height, width, and border radius. See  Embedded Chart Options \nfor more information about chart options.",
            "code": [],
            "preview": "You can embed a chart into a web application with an iframe and specify\nsettings such as height, width, refresh interval, and display theme.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards",
            "title": "Dashboards",
            "headings": [
                "Dashboards Page",
                "Create a New Dashboard",
                "Add a Sample Dashboard",
                "Sample Dashboard Filters",
                "Add a Billing Dashboard"
            ],
            "paragraphs": "Dashboards are a collection of charts assembled to create a single\nunified display of your data. Each chart shows data from a\nsingle MongoDB collection or view, so dashboards are essential to\nattain insight into multiple focal points of your data in a single\ndisplay. Dashboards can be shared with other users. The  Dashboards  page shows all dashboards you have access to view.\nTo get to your project's  Dashboards  page, click  Charts  in the  Atlas  navigation bar. To learn more about dashboard permissions in  Atlas Charts , see  Dashboard Permissions . Each dashboard shows the following information: By default, the most recently modified dashboards are shown first in\nthe list. You can change the sort order by using the\n Sort By  dropdown menu. Title Description A preview of the first three charts in the dashboard, including the\nchart title and type When the dashboard was last modified To create a new dashboard: Create a New Dashboard From the  Dashboards  page,\nclick  Add Dashboard . In the  Add Dashboard  dialog,\nenter a  Title  for your dashboard. Optionally, enter a  Description . Click\n Save . Charts  opens your newly created dashboard and prompts you\nto add the first chart to your dashboard: Atlas Charts  provides several sample dashboards that use various sample\ndata sources. You can add a sample dashboard to explore different\nexamples of charts you can create. To add a sample dashboard: You can also create a  Sample Dashboard  by going through\nthe  Charts   Welcome Experience . You can add a new sample dashboard even if you have an existing\nsample dashboard in your  Charts  project. This can be useful\nif you have changed a sample dashboard and want a fresh copy. Create a Sample Dashboard From the  Dashboards  page,\nexpand the  Add Dashboard  dropdown menu and select  Add sample dashboard . In the  Add sample dashboard  modal,\nselect a category of sample data with which to create a sample dashboard.\nYou can choose from the following sample dashboards: Product event metadata Sales records System metrics for observability IoT (Internet of Things)   time series data Movie data Each of the above links provides a public preview version of\na sample dashboard where you can experiment with\n dashboard filtering \nand  interactive filtering . Click  Add and Open \nto create a new  Sample Dashboard  of which you are the  Owner . Sample dashboards come with preset example dashboard filters. You can\nadjust these filters to modify the data that appears on your dashboard.\nTo learn more about filtering dashboard data, see\n Filter Dashboards by Field Values . You can add a billing dashboard in  Charts \nto visualize your  Atlas  billing data. Billing dashboards\ncontain prebuilt charts with insights into your  Atlas \nusage. To learn more, see  Create and Manage Billing Dashboards .",
            "code": [],
            "preview": "Dashboards are a collection of charts assembled to create a single\nunified display of your data. Each chart shows data from a\nsingle MongoDB collection or view, so dashboards are essential to\nattain insight into multiple focal points of your data in a single\ndisplay. Dashboards can be shared with other users.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "build-charts-reference",
            "title": "Chart Building Reference",
            "headings": [],
            "paragraphs": "Learn how  Atlas Charts  samples data to improve rendering performance. Learn how  Atlas Charts  creates an aggregation pipeline based on your\nchart configuration to render data.",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "single-series-categories",
            "title": "Create a Single-Series Chart with Multiple Aggregations",
            "headings": [
                "Supported Chart Types",
                "Procedure",
                "In the Chart Builder, drag a field to the Aggregation encoding channel.",
                "Select the desired aggregation for your field.",
                "Drag an additional field to the empty Aggregation encoding channel that appears below the first.",
                "Select the desired aggregation for the next field.",
                "Drag any additional fields you want to include in your chart into an empty Aggregation encoding channel and select their aggregation method.",
                "Behavior",
                "Example"
            ],
            "paragraphs": "You can create a single-series chart that contains multiple aggregated\nvalues. These aggregated values can be from either the same field or\ndifferent fields in your  data source . Use this\nfunctionality to visualize multiple aggregated values without grouping\nyour data into categories. You can include multiple aggregations in your single-series chart on the\nfollowing chart types: Grouped and Stacked  Bar Charts Grouped and Stacked  Column Charts Discrete  Line Charts Discrete  Area Charts To create a single-series chart that contains multiple aggregated\nvalues: You can reuse the same field in multiple  Aggregation \nencoding channels to perform different aggregations on the same\nfield. When you encode multiple aggregation fields, the  Series \nencoding channel is disabled. When you create a single-series chart with only aggregated values,\neach aggregated value is treated as its own category. If you encode a\n Category  field in addition to your aggregation fields, the\naggregated values become series (instead of categories). To learn\nmore, see  Map Multiple Fields to a Single Axis . The following chart uses the  Sample Data: Movies \ndata source to show the mean IMDB and Rotten Tomatoes ratings\nacross all movies. The chart contains two aggregation encoding channels: Since no field is applied to the category encoding channel, the chart\nshows the mean ratings across all movies, irrespective of any\ncategorical grouping. Mean  imdb.rating Mean  tomatoes.rating",
            "code": [],
            "preview": "You can create a single-series chart that contains multiple aggregated\nvalues. These aggregated values can be from either the same field or\ndifferent fields in your data source. Use this\nfunctionality to visualize multiple aggregated values without grouping\nyour data into categories.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "get-started-embedding",
            "title": "Get Started with Embedding",
            "headings": [
                "Use the Getting Started UI",
                "Go to the Embedding page.",
                "Open the Getting Started view.",
                "Configure the How to embed section.",
                "Review the instructions.",
                "Review the embedding features.",
                "Review the available resources."
            ],
            "paragraphs": "Charts  offers a  Getting Started  UI to help you\nlearn how to embed  charts  and\n dashboards  with an iFrame or Javascript\nSDK. Click  Embedding  in the sidebar. Click the  Getting Started  tab. Click the  Item  that you want to embed. Click the  Method  that you want to use. Follow the instructions in the  How to embed \nsection to set up embedding in the  Charts  UI and your\napplication. Scroll to the  Embedding features  section to\nreview the available features and learn more. Scroll to the  Resources  section to try different\nexamples and explore different embedding scenarios.",
            "code": [],
            "preview": "Charts offers a Getting Started UI to help you\nlearn how to embed charts and\ndashboards with an iFrame or Javascript\nSDK.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-chart-error-codes",
            "title": "Embedded Error Codes",
            "headings": [],
            "paragraphs": "If an embedded chart or dashboard fails to render,  Charts \ndisplays an error code in place of the rendered chart or dashboard.\nRefer to the following table for more information on each error code. To see a more detailed description of your error, you can open your\nbrowser's development console. Error Code Error Cause More Information -1 Unknown error. 2 Chart not found. Check the  id  field in the iframe and make sure it\nmatches the  id  in the  Embed Chart  modal window. 3 Embedding not enabled. Check whether embedding is enabled in your chart's or dashboard's\n Embed Chart  or  Embed Dashboard  modal\nwindow. 4 Embedding not allowed. Check that embedding is enabled for your\nchart's or dashboard's backing\n data source . 5 Invalid payload. Your application server is not creating a\nusable  signature . Using verified signatures to authenticate your embedded chart\nis deprecated. Instead, use an\n embedding authentication provider . 6 Invalid  autoRefresh  value specified. The  autoRefresh  value must be an integer greater than 0. 7 Filter  not allowed. When you filter an embedded chart, the fields\nused in the filter must be present in the\n Allowed filter fields  list.\nAdditionally, filters embedded charts cannot use non-logical\noperators before a field name (e.g.,  $expr ,\n $where , or  $text ). 8 Filter  not valid. A  filter  parameter contains an invalid value. 9 Invalid  JWT (JSON Web Token) . Your application's  JWT (JSON Web Token)  is invalid or malformed. 10 JWT (JSON Web Token)  has no matching providers. Your application's  JWT (JSON Web Token)  is not associated with an\n Authenticated Embedding Provider . 11 No authentication providers are configured. You must configure an  Authenticated Embedding Provider  to support your  JWT (JSON Web Token) . 12 JWT (JSON Web Token)  was issued in the future. This error can occur if the time on the machine that issued the\n JWT (JSON Web Token)  is more than 5 minutes ahead of the actual time,. This\ncan occur if the machine's time has been manually adjusted. To resolve this error, ensure that the machine issuing the\n JWT (JSON Web Token)  is in sync with the actual time and is set to the correct\ntime zone. 13 JWT (JSON Web Token)  does not have an expiry date. To use your  JWT (JSON Web Token)  for authenticated embedding, it must have an\nexpiry date. A  JWT (JSON Web Token)  that never expires is dangerous because if\nthe token is compromised, someone can always access the data\nthat the token was securing. 14 JWT (JSON Web Token)  is expired. You need to reissue a  JWT (JSON Web Token)  with an expiration date in the\nfuture. 15 Token lifetime is greater than 24 hours. Your token cannot expire more than 24 hours from the time it\nwas created. Refreshing your tokens on a regular basis ensures\nthat the token holder still has expected access rights. 16 Audience tag on  JWT (JSON Web Token)  does not match with any provider. Your  JWT (JSON Web Token) 's audience claim must match the audience claim with\nthe token's associated authentication provider. 17 Injected filter failed to apply. Your injected filter function failed or returned an illegal\nresult. 18 Client ID doesn't match provider. This error occurs for Atlas App Services and Google authentication providers\nif the token is valid but was issued for a different application.",
            "code": [],
            "preview": "If an embedded chart or dashboard fails to render, Charts\ndisplays an error code in place of the rendered chart or dashboard.\nRefer to the following table for more information on each error code.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-dashboards",
            "title": "Embed Dashboards in Your Web Application",
            "headings": [],
            "paragraphs": "You can control embedded dashboards programmatically with the  Embedding\nSDK , or use static HTML with an  iframe . To learn how to embed dashboards in a web application, see the\n Embedding Tutorials . To learn more, see  Embedded Dashboard Options . As a dashboard  Author , you can embed\nyour charts and dashboards in external websites or\nshare them through links. You can embed the following charts or\ndashboards: Embed a  chart or dashboard that doesn't require authentication  (unauthenticated), which anyone can view. Embed a chart or dashboard that requires users to authenticate\nthrough an  Embedding Authentication Provider .",
            "code": [],
            "preview": "You can control embedded dashboards programmatically with the Embedding\nSDK, or use static HTML with an iframe.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "third-party-licenses",
            "title": "Third-Party Licenses",
            "headings": [
                "Choropleth Licenses"
            ],
            "paragraphs": "Atlas Charts  uses third-party resources that may\nbe distributed under licenses different than the MongoDB software. The following lists the third-party TopoJSON shape schemes used in\n Charts  for choropleths. Country Description Australia Australian map shape files based on  Australian Bureau of\nStatistics data ,\nlicensed under the\n Creative Commons Attribution 4.0 International \nlicense. We have transformed the source data into TopoJSON format. United Kingdom UK map shape files contain public sector information licensed\nunder the  Open Government Licence v3.0 . Canada Canadian map shape files adapted from Statistics Canada, 2011\nCensus Boundary files, referenced on February 21, 2019. This\ndoes not constitute an endorsement by Statistics Canada of this\nproduct. US, Germany, World MIT License Copyright (c) 2016 Permission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to\nthe following conditions: The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.",
            "code": [],
            "preview": "Atlas Charts uses third-party resources that may\nbe distributed under licenses different than the MongoDB software.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedding-dashboards-iframe",
            "title": "Embed Dashboards with an iframe",
            "headings": [
                "Prerequisites",
                "Procedure",
                "Select a dashboard.",
                "Select Embed.",
                "Enable external sharing on the data source.",
                "Select the Unauthenticated tab in the dialog window.",
                "Toggle Enable unauthenticated access to On.",
                "(Optional) Specify filterable fields for your dashboard.",
                "Select the panel labeled Iframe.",
                "Set options.",
                "Copy the iframe embedding code.",
                "(Optional) Set additional options."
            ],
            "paragraphs": "You can embed a dashboard into a web application with an iframe and\nspecify settings such as height, width, refresh interval, and display\ntheme. You can embed only dashboards that don't require authentication\n(unauthenticated) within an iframe. You must be a dashboard  Author  to\nenable embedding for a dashboard. Create a New Dashboard After your iframe code is ready with any options you've set, you can\nplace it in a web page to display your dashboard. From your dashboard page, select the dashboard to embed. From the dashboard, click   at the top-right of\nthe dashboard to access its embedding information. Select\n Embed  from the dropdown menu. If you have already enabled external sharing on the data source that\nthis dashboard uses, skip this step. If you haven't yet enabled\nembedding on the data source, you can do so now. Click the\n Configure  link. Specify the fields on which dashboard viewers can filter data. By\ndefault, no fields are specified, meaning the dashboard cannot be\nfiltered until you explicitly allow at least one field. Alternatively, you can specify all the fields in your dashboard by\nselecting  Allow all fields in the data source used in this\ndashboard . To learn more about filterable fields, see\n Specify Filterable Fields . Selecting the  Iframe  panel reveals the iframe embedding code\nand allows you to set refresh and display theme options. Specify the maximum age of data to load from the cache\nwhen loading or refreshing the embedded dashboard. Specify whether the embedded dashboard automatically refreshes. Select the  Light  or  Dark  display\ntheme for your embedded dashboard. Specify whether to fix the width of the charts within the\ndashboard or to scale the width of the charts to fit the embedded\ndashboard. Specify whether to fix the height of the charts within the\ndashboard or to scale the height of the charts to fit the embedded dashboard. Specify whether to display the title and description on the\nembedded dashboard. The iframe embedding code contains your dashboard's base URL and\ndasboard ID, as well as any options you have set. You can edit the iframe code manually to set several other dashboard\noptions, including height, width, and border radius. To learn more,\nsee  Embedded Dashboard Options .",
            "code": [],
            "preview": "You can embed a dashboard into a web application with an iframe and\nspecify settings such as height, width, refresh interval, and display\ntheme.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "aggregation-pipeline",
            "title": "Run Aggregation Pipelines on Your Data",
            "headings": [
                "Example",
                "Address Aggregation Pipeline Errors",
                "Limitations"
            ],
            "paragraphs": "Aggregation pipelines  transform\nyour documents into an aggregated set of results. In  Atlas Charts ,\naggregation pipelines are commonly used to visualize new fields created\nfrom calculated results of pre-existing fields, but also have many other\napplications. To create an aggregation pipeline: In the  Query  bar, input an aggregation pipeline. Your\npipeline must be in square brackets. (Optional) Select  Format  to arrange the query as\nfollows: Split the query across multiple lines Indent the query as per JSON conventions (Conditional) If you selected the  Format  option, click\n Close  when you finish. Click  Apply  to execute your pipeline. The following chart shows total sale amounts from an office supply\ncompany, categorized by store location. The chart uses the\nfollowing aggregation pipeline in the  Query  bar: This aggregation pipeline processes the collection data using\nthe following order: Once the data has been processed using the pipeline, the\nchart displays the  Sum  of all\n saleAmounts  categorized by store location. The  $unwind  stage unwinds the  items  array and\noutputs a new document for each item in the array. Each element\nin the  items  array contains a single item sold during a\ntransaction. The  $addFields  stage adds a new field to the\ndocuments called  saleAmount . The  $multiply \nexpression sets the value of  saleAmount  to the product of\n items.price  and  items.quantity . You can see this\nnew field highlighted in the following screenshot: If your aggregation is invalid,  Charts  displays the\n  icon in the  Query  bar. Click the  Query  bar if it is not already displayed to view\nerror details.  Charts  displays error details for: Review the error details, then adjust your aggregation pipeline\naccordingly. Client-side errors, such as malformed JSON, and Server-side errors, such as invalid  MQL (MongoDB Query\nLanguage)  or unsupported pipeline stages. Charts  doesn't support the  $lookup  operator in aggregation\nqueries. However, you can use this operator in Data Source pipelines.\nTo learn more about how to use pipelines to pre-process data before\nit reaches the Chart Builder, see  Create and Manage Charts Views . Charts  supports the  $function  operator only when\nyou define the function body in a single line and\nwrap it in double quotes. To use this operator in your aggregation\nqueries, you must use the following syntax:",
            "code": [
                {
                    "lang": "javascript",
                    "value": "[\n  {\n    $unwind: \"$items\"\n  },\n  {\n    $addFields: {\n      saleAmount: {\n        $multiply: [ \"$items.price\", \"$items.quantity\" ]\n      }\n    }\n  }\n]"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  $function: {\n    body: \"function(arg1, arg2, ...) { ... }\",\n    args: <array expression>,\n    lang: \"js\"\n  }\n}"
                }
            ],
            "preview": "Aggregation pipelines transform\nyour documents into an aggregated set of results. In Atlas Charts,\naggregation pipelines are commonly used to visualize new fields created\nfrom calculated results of pre-existing fields, but also have many other\napplications.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "encoding-channels/aggregation-options",
            "title": "Aggregation Options",
            "headings": [
                "Numbers",
                "Strings and Dates"
            ],
            "paragraphs": "Dragging a field onto an  aggregation \n encoding channel  allows you to use an\n aggregation pipeline operator \non that field. The aggregation pipeline operators available in the chart\nbuilder change based on the  data type \nof the selected field.  Atlas Charts  categorizes the field data type\nas either a  number ,  string , or  date  and displays\nappropriate aggregation options accordingly. The following tables list the available aggregation options for each\ndata type: Aggregation Option Description Pipeline Operation sum Sums all values in the field. $sum count Counts the number of documents with a value in the field. $count count by value Counts the number of distinct values in the field and creates a\n series  based on the values. $group  and\n $sum distinct Counts the number of unique values in the field. Applies\n $addToSet \nand counts the number of items in the result set with\n $size . mean Averages all values in the field. $avg median Approximates the median value in the field. Your deployment must use MongoDB 7.0 or later. $median min Returns the minimum value in the field. $min max Returns the minimum value in the field. $max variance Calculates the sample variance of values in the field. Applies\n $stdDevSamp \nand raises the result to the 2nd power with\n $pow . variance population Calculates the population variance of values in the field. Applies\n $stdDevPop \nand raises the result to the 2nd power with\n $pow . standard deviation Calculates the sample standard deviation of values in the field. $stdDevSamp standard deviation population Calculates the population standard deviation of values in the\nfield. $stdDevPop Aggregation Option Description Pipeline Operation count Counts the number of documents with a value in the field. $count count by value Counts the number of distinct values in the field and creates a\n series  based on the values. $group  and\n $sum distinct Counts the number of unique values in the field. Applies the\n $addToSet \noperator and counts the number of items in the result set with\n $size .",
            "code": [],
            "preview": "Dragging a field onto an aggregation\nencoding channel allows you to use an\naggregation pipeline operator\non that field.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "filter-chart-results",
            "title": "Filter Chart Results",
            "headings": [
                "Create Filters for Your Data",
                "Display Strings and ObjectIds Not in the List",
                "Specify a Time Zone",
                "Enable or Disable a Filter",
                "Expand or Collapse a Filter",
                "Filter Your Data Using the Query Bar",
                "Address Query Errors",
                "Considerations"
            ],
            "paragraphs": "Filters display a subset of results that match a given criteria.\n Atlas Charts  provides two ways to filter the data for a single chart. You can either use: To learn how to filter results across multiple charts on your dashboard, see\n Filter Dashboards by Field Values . The  Filter Tab's  numeric, string, date, or boolean fields to handle most of your data\nfiltering needs. The  Query Bar  to filter your data using more complex queries, such as logical operator\nqueries, or process raw data by using the aggregation pipeline. The chart builder contains a filter tab where you can drag and drop\nfields to specify filters for your data. To filter data using the filter tab: The data type of the selected field determines the available filtering\noptions. You can filter fields with the following data types: Click the center tab in the chart builder: Drag a field from the  Fields  on the left to the\n Chart Filters  section of the tab. When you drag a numeric field to the filter panel, you\ncan filter based on minimum and/or maximum values for that field. To specify a minimum value: To specify a maximum value: Toggle  Min  to  On . Specify the desired minimum value. Select whether this is an inclusive minimum value. Toggle  Max  to  On . Specify the desired maximum value. Select whether this is an inclusive maximum value. If you have a minimum value of  5  with the  Inclusive \nsetting on,  Atlas Charts  shows documents where the field is greater than\nor equal to  5 . Alternatively, if  Inclusive  is off,  Atlas Charts  shows\ndocuments where the field is greater than  5 . When you drag a string or\n ObjectId  field to the filter\npanel,  Atlas Charts  displays a list of up to 20 distinct field values. If\nmore than 20 distinct values exist,  Atlas Charts  displays 20 randomly\nselected values. The list also includes: Select the values to display in the chart. By default, all\nvalues are selected. NULL / MISSING  for documents with  null  values for\nthe field or are missing the field. Empty String  for documents with\n \"\"  values for the string field. ( String fields only. ) If all values are selected, you can click  Deselect All \nat the top of the list to hide all values. If not all values are selected, you can click  Select All \nto return to the default state of having all values displayed. To display a specific value not included in the list, add the value by\nclicking  Add Value . To display  all  other values not included in the list, check\n All other values . For  ObjectId  fields, the\nvalue you input must be a well-formed ObjectId, or else\n Atlas Charts  does not accept the value. If  All other values  is checked,  Atlas Charts  filters out\nany unchecked list items by using a  $nin  query. If  All other values  is unchecked,  Atlas Charts  only\nincludes the checked list items by using an  $in  query. When you drag a date field to the filter panel, you can filter based\non a specified date range. This range can either be: Select the appropriate tab for more information on the date filter: A relative date range, which specifies a range\nrelative to the time the chart is rendered (e.g., the last six\nmonths). A date range based on the current time when the chart is rendered,\nwith a choice of periods. An absolute date range, which is a range\nbetween specific begin and end dates. Relative date filters specify a range relative to the\ntime the chart is rendered. To define the date range, specify a period\nof time in the past and/or a period of time in the future relative to\nthe current date.  Relative  is the default date filtering\noption. To set a lower bound for the date filter: To set an upper bound for the date filter: Turn on the  From  toggle. Set the lower bound for your relative date. This\ntimespan is relative to the current date. Turn on the  Until  toggle. Set the upper bound for your relative date. This\ntimespan is relative to the current date. The following relative date filter only shows documents\nwith a  Workout Date (As Date)  field that is more recent than one year\nago from the current date: Period date filters specify a range relative to the current\ntime when the chart renders. To define a period date range,\nselect  Period  at the top of your date filter card. Period options include: The Period date filter also has usage options. Together with the\nperiod, the usage options let you define an exact window of time in\nthe past, present, or future. Period usage options include: Period usage options work together. The data that  Atlas Charts  displays\nfor the  Month  period depends on the direction, count,\nand  Include current period  selection. Atlas Charts  counts the number of periods you specify backwards (for  Previous ) or\nforwards (for  Next ). Counting starts at the beginning of\nthe current period (with  Include current period  selected),\nor the beginning of the last completed period (without\n Include current period  selected).  Atlas Charts  displays the\ndata from the beginning of the selected period(s) through the end of\nthe selected period(s). To set a Period date filter: Hour  from the top of the hour Day  from midnight Week  from midnight Sunday Month  from midnight on the 1st of the month Year  from midnight on the 1st of January Direction . You can select  Previous  to show past\nperiods or  Next  to show future periods. Count . You can set the number of periods to display. Include Current Period . You can include the current period in\nthe specified time window. If today is December 8 and you set a period date filter on\n released  with the following selections: Atlas Charts  would show documents with a released date from\nOctober  1 of this year to December 31 of this year, including\nthe start and end dates. However, if you set the same filter without selecting\n Include current period ,  Atlas Charts  would show documents\nwith a released date from\nSeptember 1 of this year to November 30 of this year, including\nthe start and end dates. Previous 3 Months , and Include current period  selected Select a period direction from the first dropdown\nmenu. Enter a numeric value for the period count in the text entry field. You\ncan enter whole numbers or decimal values. Choose a period the next dropdown menu. (Optional) Deselect  Include current period  to exclude the current\nperiod.  Include current period  is the default selection. Absolute date filters use absolute dates to define their upper and lower\nbounds. To define an absolute date range, select  Absolute \nat the top of your date filter card. By default, the dates specified in the filter\nare assumed to be in  UTC (Coordinated Universal Time) , matching\nthe raw data in the collection. You can\nspecify a timezone for your filter to adjust the date values as\ndesired. To set a lower bound for the date filter: To set an upper bound for the date filter: Turn on the  From  toggle. Enter a date for your lower bound, or\nselect a date from the calendar below the input field. Enter a time for your lower bound, or select a time\nfrom the list below the input field. Set  Inclusive  to determine whether to include\nthe specified date. Turn on the  To  toggle. Enter a date for your upper bound, or\nselect a date from the calendar below the input field. Enter a time for your upper bound, or select a time\nfrom the list below the input field. Set  Inclusive  to determine whether to include\nthe specified date. The date and time formats used in your bounds depend\non your location, as determined from your browser settings. The following absolute date filter only shows documents\nwith a  Workout Date (As Date)  field from the year\n 2018 : The filter returns all documents with a\n Workout Date (As Date)  field from  January 1, 2018 12:00:00\nAM  inclusively, to  January 1, 2019 12:00:00 AM  exclusively. Use the  Time Zone  dropdown at the bottom of the\nfilter card to specify a time zone for your absolute date filter. By default, MongoDB stores date values in\n UTC (Coordinated Universal Time) . When you change the\ntime zone,  Charts  modifies your date values with respect\nto the selected time zone. As a result, different documents may be\nreturned by your absolute date filter depending on the time\nzone selected. Consider an absolute date filter which spans from\nJanuary 1, 2018 12:00:00 AM inclusively to\nJanuary 1, 2019 12:00:00 AM exclusively. By default, a\ndocument with a UTC date of January 1, 2019 2:00:00 AM\nwould not be included in this date range. However, if we\nadjust the time zone to\n Central America (UTC-06:00) , this document\nwould be returned because the adjusted date is\nDecember 31, 2018 8:00:00 PM. You can filter the chart data based on the boolean value of a specific\nfield. Drag a boolean field to the filter panel to view the available\noptions: All options are selected by default. The chart preview updates as you\nmodify the selected options. Deselecting all options renders a blank\nchart. True  displays documents where the field value is  true . False  displays documents where the field value is\n false . NULL / MISSING  displays documents where the field is\n null  or does not exist. A chart using the following filter only displays documents where the\n passed  field is  true . The chart does not display documents\nwhere the  passed  field is  false ,  null , or does not\nexist. You cannot use the same field in multiple filters. You can toggle whether a filter in the  Filter  tab\nis enabled or disabled. Disabled filters do not affect the documents\nwhich appear in the chart. Disabled filters are grayed out and cannot\nbe edited until they are enabled. To toggle whether a filter is enabled, hover over a filter and\nset the toggle that appears at the top of the filter to the desired\nsetting. You can expand or collapse chart filter cards by clicking\n Show  or  Hide  on that card. Disabled filters are automatically collapsed. Enabled, collapsed filters are still applied to your charts. The  Query  bar above the chart display supports more complex queries than\nthe filter panel. Additionally, you can use the query bar to create\n aggregation pipelines  to\nprocess your data before it is rendered. To filter data using the  Query  bar: The following tabs show how to construct queries with the following operators: In the  Query  bar, input a filter document. Use the\nsame syntax used in the query portion of the\n db.collection.find()  method. Your filter document\nmust be in curly brackets. Click  Apply . $or  logical operator to match documents where at least one clause is true $exists  query operator to match documents with an element that exists $regex  query operator to match documents with a regular expression Date  field to match documents with specific dates The following chart shows the top 5 countries ( Limit Results  under the  X Axis  was enabled and set to 5) in terms of the\nnumber of directors who have made either a documentary  or  a biography film. The chart uses the following query: genres  is an array where each element is a film genre. This filter ensures that only directors who\nhave made either a documentary or a biography film are included in the total count of directors for a\nparticular country. The following chart shows the average Metacritic ratings of movies\nover time  binned  by 5 year periods. The chart uses the following query: writers  is an array where each element is a writer who\ncontributed to the movie. This filter ensures that only documents with\nat least two writers are factored into the mean Metacritic rating by\nchecking that the second array element exists. Use the  $regex  query operator to filter using a\nregular expression: For example, to find all documents where the  jobs  field begins with\nthe letter  A , you would write the following in the\n Query  bar: To find all documents where the  jobs  field begins with the\nletter  A  or  a , you would write the following in the\n Query  bar: The following chart shows total sale amounts from an office supply\ncompany, categorized by purchase method: The chart uses the following query: Each document in the collection represents a single sale.  items  is\nan array where each element is an item purchased during a sale. This query restricts the documents shown to only those with\na  saleDate  equal to or more recent than  January 1, 2017  with at\nleast 5 elements in the  items  array. If your query is invalid,  Charts  displays the\n  icon in the  Query  bar. Click the  Query  bar if it is not already displayed to view\nerror details.  Charts  displays error details for: Review the error details, then adjust your query accordingly. Client-side errors, such as malformed JSON, and Server-side errors, such as invalid  MQL (MongoDB Query\nLanguage) . Filters on large collections may encounter performance issues if\nthe collection is not appropriately  indexed . The date functions used in the  Atlas Charts  query bar are\nconsistent and compatible with the date functions used in the\n mongo shell . As a result, you can use: The  Date()  function (as opposed to the  new Date() \nconstructor) returns the current date as a string, so it cannot be\nused for querying dates in  Charts . new Date() , ISODate() , or new ISODate() .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{\n   $or: [\n   {\n     genres: \"Documentary\"\n   },\n   {\n     genres: \"Biography\"\n   } ]\n}"
                },
                {
                    "lang": "javascript",
                    "value": "{ 'writers.1': { $exists: true }}"
                },
                {
                    "lang": "javascript",
                    "value": "{ <field>: { $regex: \"pattern\", $options: \"<options>\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"jobs\" : { $regex : \"^A\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"jobs\" : { $regex : \"^A\", $options : \"i\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  $and: [\n  {\n    saleDate: { $gte: new Date(\"2017-01-01\") }\n  },\n  {\n    'items.4': { $exists: true }\n  } ]\n}"
                }
            ],
            "preview": "Filters display a subset of results that match a given criteria.\nAtlas Charts provides two ways to filter the data for a single chart. You can either use:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-dashboards-options/embedded-sdk",
            "title": "Embedded Dashboard Options",
            "headings": [
                "Embedded Dashboard Options",
                "Dashboard Configuration",
                "getChart('<chartID>')",
                "setAutoRefresh()",
                "setMaxDataAge()",
                "setTheme(theme: 'dark' | 'light')",
                "Dashboard Configuration Example"
            ],
            "paragraphs": "The Embedding SDK psrovides the JavaScript  createDashboard() \nmethod for rendering a dashboard within a web page. You can\nuse options to control many aspects of a dashboard (for\nexample, its height and width). The following example demonstrates how to use the\n createDashboard  method with options that specify the\nheight and width of the dashboard. The  createDashboard()  method takes the following options: After the dashboard is created, you can control the\nconfiguration of the dashboard by calling methods on the\n Dashboard  instance returned by\n DashboardsEmbedSDK.createDashboard({ ... }) . Option Type Description Required? autoRefresh boolean Flag that specifies whether the dashboard automatically\nrefreshes. If omitted, dashboards don't automatically\nrefresh. Use this option with the  maxDataAge  option to\nconfigure automatic dashboard refresh frequency. no background string Background color to apply to your dashboard instead\nof the  theme  background. You can specify: If omitted, the background color defaults to the current\n theme : A color hex code A  CSS (Cascading Style Sheets)  color name A transparent background using the value  transparent #F1F5F4  for the  light  theme, or #12212C  for the  dark  theme. no baseUrl string Base URL of the dashboard. yes dashboardId string Unique string that identifies the dashboard. yes getUserToken object Function that returns a  base64 -encoded  JWT (JSON Web Token)  token.\n Charts  validates this token to determine\nwhether to render an authenticated dashboard. If you enabled authenticated access,  Atlas Charts  renders\nthe authenticated dashboard view only if  Charts \ncan validate the token using the\n configured authentication providers . If the token is invalid,\n Charts  doesn't render the dashboard. If you enabled unauthenticated access,  Atlas Charts  always\nrenders the unauthenticated dashboard view. Embed an Authenticated Chart using a Custom JWT Provider no height number Height of the dashboard. If omitted, it defaults to the height of\nits container. If you provide a value without units, it defaults\nto pixels (px). no maxDataAge number Maximum age of data to load from the cache\nwhen loading or refreshing the dashbnoard. If omitted,  Atlas Charts \nrenders the dashboard with data from the cache only if the data\nis less than one hour old. If the data from the cache is more than one hour old,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the dashboard using this data. To learn how  Atlas Charts  loads data from the cache when\nloading or refreshing the dashboard based on the\n autoRefresh  and  maxDataAge  values, see\n Refresh and Data Caching Behavior . no showAttribution boolean Specifies whether to display the\n MongoDB  logo below the dashboard. Defaults\nto  true . no theme string Theme  to use on the\ndashboard. The following options are valid: If omitted, it defaults to  light . light  for a light background with dark text and\ndashboard elements, or dark  for a dark background with light text and\ndashboard elements. no width number Width of the dashboard. If omitted, it defaults to the width of\nits container. If you specify a value without units, it defaults\nto pixels (px). no After you create a dashboard, you can control the configuration\nof the dashboard by calling methods on the  Dashboard  instance returned\nby  DashboardsEmbedSDK.createDashboard({ ... }) . Retrieves a specific chart from the embedded dashboard\nusing the chart's  chartId  string. After calling this\nmethod, you can  highlight elements \nor  filter data  on the chart. Flag that specifies whether the dashboard refreshes\nautomatically. If omitted, dashboards don't\nrefresh automatically. Use this method with the  setMaxDataAge  method to\nconfigure how often the dashboard refreshes. Maximum age of data to load from the cache when loading or refreshing\nthe dashboard. If omitted,  Atlas Charts  renders the dashboard with data from\nthe cache only if the data is less than one hour old. If the data from the cache is more than one hour old,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the dashboard using this data. To learn how  Atlas Charts  loads data from the cache when\nloading or refreshing the dashboard based on the\n setAutoRefresh  and  setMaxDataAge  values, see\n Refresh and Data Caching Behavior . Current theme of the embedded dashboard. When\nsetting the theme to  dark , ensure that\nyour dashboard's background color has appropriate\ncontrast so that the information is visible. Embedding SDK API Documentation Embedding SDK examples The example code snippets configures the following\noptions for a Dashboard instance named  dashboard : The theme to  dark The automatic refresh rate to every 60 seconds",
            "code": [
                {
                    "lang": "javascript",
                    "value": "const dashboard = sdk.createDashboard({\n  dashboardId: \"8d4dff93-e7ca-4ccd-a622-e20e8a100197\",\n  baseUrl: \"https://charts.mongodb.com/dashboards-embedding-examples-hmewt\",\n  height: 300,\n  width: 400\n});"
                },
                {
                    "lang": "javascript",
                    "value": "dashboard.setTheme(\"dark\");\ndashboard.setAutoRefresh(true);\ndashboard.setMaxDataAge(60);"
                }
            ],
            "preview": "The Embedding SDK psrovides the JavaScript createDashboard()\nmethod for rendering a dashboard within a web page. You can\nuse options to control many aspects of a dashboard (for\nexample, its height and width).",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-dashboards-options/iframe",
            "title": "Iframe Options",
            "headings": [
                "Configure Refresh and Data Caching Behavior",
                "Refresh Example",
                "Considerations",
                "Specify a Display Theme",
                "Customize Display Options",
                "Background Color",
                "Dashboard Border",
                "Display Theme",
                "Display Theme Example",
                "Iframe Example",
                "Remove the MongoDB Logo"
            ],
            "paragraphs": "You can set dashboard options within an iframe by adding\ninline style tags and by adding query parameters to the\ndashboard URL. Inline style tags allow you to specify display\noptions such as height, width, background color, and border\nwidth. Query parameters allow you to specify  a light or dark\ndisplay theme. Use the  autoRefresh  query parameter to configure the\ndashboard to refresh automatically. Use the  maxDataAge  query parameter to: To learn how  Atlas Charts  loads data from the cache when loading\nor refreshing the dashboard based on the  autoRefresh  and\n maxDataAge  values, see\n Refresh and Data Caching Behavior . Use the options on the\n Unauthenticated  tab on the\n Embed dashboard  dialog to customize the\n autoRefresh  value in the iframe snippet. Determine the interval at which the dashboard refreshes if\n autoRefresh  is  true . Configure the maximum age of data to load from the cache when\nloading or manually refreshing the dashboard if\n autoRefresh  is  false  or omitted. The following iframe embeds a dashboard which automatically\nrefreshes every 60 seconds as defined by the\n autoRefresh=true  and the  maxDataAge=60  query\nparameters: The minimum cache duration is 60 seconds. If  autoRefresh \nis  true  and you specify a  maxDataAge  value that is\nless than  60 , the dashboard refreshes every  60 \nseconds. If you specify a  maxDataAge  value that isn't an\ninteger or is less than  -1 ,  Charts  returns an\n error . Use the  theme  query parameter to select a display theme: Choosing a  theme  value updates only the iframe snippet\nthat you use to embed the dashboard in your application. The\ndashboard isn't saved with a  theme  value. The dashboard\nrenders with the light theme by default. Embedded dashboards\nthat don't include the theme parameter also render with the\nlight theme. light : optimizes dashboard axes and text for\npresentation against a light or white background. dark : optimizes dashboard axes and text for\npresentation against a dark or black background. Choosing the  light  or   dark  theme doesn't change\nthe color palette that dashboard data elements use. All\nbars and marks display using the default palette or the\ncustom palette the dashboard author chooses. For example, if you choose a dashboard bar to render in\nblack, choosing the  dark  theme doesn't change the\ncolor of this bar to make it more visible against a dark\nbackground. Atlas Charts  adds inline style properties to the iframe snippet\nyou copy from the UI. These inline style properties add a\nbackground color and a border with a box shadow to the\nembedded dashboard based on the theme you select: Change the values of the inline style properties to change how\nthe embedded dashboard displays in your application. light  theme  background :  #F1F5F4 dark  theme  background :  #12212C border :  none border-radius :  2px box-shadow :  0 2px 10px 0 rgba(70, 76, 79, .2) width :  640 height :  480 Change the value of the  background  property to any value\nsupported by the  background  CSS property to display the\ndashboard against it. See  background \nin the MDN Web Docs for more information. Change the  background  property to  transparent  to\ndisplay the dashboard with a transparent background, allowing\nyour application's background to display through the\ndashboard. Remove the  background  property to use the default\nbackground color of the theme you choose: #F1F5F4  for the  light  theme (default), or #12212C  for the  dark  theme. Modify or remove the following properties to customize or\nremove the dashboard border: border border-radius box-shadow You can change the value of the  theme  query parameter in\nthe iframe snippet after you paste it into your application.\nIf you do, you must adjust the iframe's inline style\nproperties to match the theme you choose. If you change the  theme  from  light  to  dark ,\nadjust the value of the  background  property in the\niframe snippet to display the dashboard against a dark\nbackground. Dashboard using  light  theme with default  light \ntheme  background  of  #F1F5F4 : Dashboard using  dark  theme with default  dark \ntheme  background  of  #12212C : The following iframe embeds a dashboard with the  dark \ntheme with the default  dark  theme inline style properties.\nThe code is formatted for readability. Use the  attribution  query parameter with a value of\n false  to display your embedded dashboard without the\n MongoDB  logo. The following iframe snippet renders a dashboard that does not\ndisplay the  MongoDB  logo:",
            "code": [
                {
                    "lang": "html",
                    "value": "<iframe style=\"border: none;border-radius: 2px;box-shadow: 0 2px\n10px 0 rgba(70, 76, 79, .2);\" width=\"640\" height=\"480\" src=\"\n{charts-host}/embed/dashboards?id=b3ca720f-4b4a-40b4-a726-e7dc0c49aa1c&\nautoRefresh=true&maxDataAge=60\"></iframe>"
                },
                {
                    "lang": "html",
                    "value": "<iframe style=\"\nbackground: #21313C;border: none;border-radius: 2px;\nbox-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\"\nwidth=\"640\" height=\"480\" src=\"\nhttps://charts.mongodb.com/charts-crllr/embed/dashboards?id=a1b2c3d4-a1b2-c3d4-9766-47b0b2daaff3&\ntheme=dark\n\"></iframe>"
                },
                {
                    "lang": "html",
                    "value": "<iframe\nstyle=\"background: #FFFFFF;border: none;border-radius: 2px;\nbox-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\"\nwidth=\"640\" height=\"480\" src=\"\nhttps://charts.mongodb.com/mongodb-charts-twsqq/embed/dashboards\n?id=a1b2c3d4-a1b2-c3d4-9766-47b0b2daaff3&\ntheme=light&\nattribution=false\n\"></iframe>"
                }
            ],
            "preview": "You can set dashboard options within an iframe by adding\ninline style tags and by adding query parameters to the\ndashboard URL. Inline style tags allow you to specify display\noptions such as height, width, background color, and border\nwidth. Query parameters allow you to specify  a light or dark\ndisplay theme.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts/general-customization",
            "title": "General",
            "headings": [
                "Color Palette Customization",
                "Applicable Chart Types",
                "Resize Labels",
                "Applicable Chart Types",
                "Customize Legend",
                "Applicable Chart Types"
            ],
            "paragraphs": "Atlas Charts  provides general customization options which modify the\nvisualization at a high level, rather than individual pieces of the\nvisualization. To access the general customization options, expand the  General \nsection of the  Customize  tab. This page illustrates the general customization options which are\navailable for most  chart types . Some\nchart types have other customization options which are noted on their\nindividual documentation pages. Palette customization allows you to select custom colors for your\nchart. To enable color customization, select the\n Customize  tab of the  Chart Type  column.\nA toggle switch labeled  Custom Color Palette  appears in\nthe  General  section. You can also customize individual colors in your palette. Most chart types\nuse a custom color picker with color swatches that correspond to your data\nseries. Depending on the chart type, each color swatch has a corresponding\nnumber or a corresponding name: To change the color of the corresponding data series, click the color swatch.\nYou can select a new color with a color slider, by\nentering a hex value, by entering RGB values, or by choosing a\npredefined color. You can also drag and drop color swatches to\nrearrange the colors in your palette. Other chart types use a gradient color scale with a\nset of pre-defined gradients. The\n heatmap  and  colored bar\nand column  types use this method. To close the color customization tool, click somewhere outside it.\nTo revert the entire chart to its default colors, set the\n Custom Color Palette  toggle switch back to  Off . Single-series charts have a single numbered swatch. Multi-series charts built by\n mapping multiple fields \nhave color swatches with the names of your selected fields. Multi-series charts built with a numeric or date field in the\n Series channel  have numbered color\nswatches. Multi-series charts built with a string field in the\n Series channel  allow you to\nchoose how you want to assign color. For numbered color swatches, select\nthe  By Order  option. For swatches with\nfield names, select the  By Series  option. For multi-series charts with numbered color swatches,\nthe custom color palette shows swatches for 10\ndata series by default, and it can expand\nto show up to 20 data series. However, you can only modify as many\nswatches as you have data series. For example, if you have two\ndata series in your chart, only the swatches numbered  1  and\n 2  have an effect on your chart. If additional series appear\nwhile the chart is rendering, Charts assigns them a new color. This customization option is available for all chart types except\n Text . You can resize the text labels on a chart. Resizing text labels changes: To set this option: Axis labels Axis tick labels Data value labels Data category labels Legend caption and entries Navigate to the  Customize  tab in the\n Chart Builder . Expand the  General  section. In the  General  section, set the\n Label Size  slider to the desired text size. You can\nadjust label text to be between 50% and 200% of the default text\nsize. This customization option is available for all charts  except \n Gauge ,\n Number ,\n Table , and\n Word Cloud  charts. You can show or hide a chart legend. If you show the legend, you can\nspecify its position relative to your chart. To set this option: Navigate to the  Customize  tab in the\n Chart Builder . Expand the  General  section. In the  General  section, set the\n Legend  toggle switch to the desired setting. The\nlegend is shown by default. If you toggle  Legend  on, you may select a position for\nthe legend relative to the chart: The legend is positioned to the right of the chart by default. Right Bottom Top This customization option is available for all charts which may display\na legend. This includes any multi-series chart, as well as charts that\nhave a field mapped to a Color, Intensity, Shape or Size channel.",
            "code": [],
            "preview": "Atlas Charts provides general customization options which modify the\nvisualization at a high level, rather than individual pieces of the\nvisualization.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-charts-options/iframe",
            "title": "Iframe Options",
            "headings": [
                "Configure Refresh and Data Caching Behavior",
                "Example",
                "Considerations",
                "Specify a Display Theme",
                "Customize Display Options",
                "Background Color",
                "Chart Border",
                "Display Theme",
                "Iframe Example",
                "Remove the MongoDB Logo"
            ],
            "paragraphs": "You can set chart options within an iframe by adding inline style\ntags and query parameters to the chart URL. Inline style\ntags allow you to specify display options such as height, width,\nbackground color, and border width. Query parameters allow you to\nspecify a refresh interval for your chart, as well as a light or\ndark display theme. The  autoRefresh  query parameter is a boolean that allows you to\nconfigure the chart to refresh automatically. The  maxDataAge  query parameter is an integer that allows you to: Use the options on the  Unauthenticated  tab on the\n Embed Chart  dialog to customize the  autoRefresh  value in\nthe iframe snippet. Determine the interval at which the chart refreshes if\n autoRefresh  is  true . Configure the maximum age of data to load from the cache when\nloading or manually refreshing the chart if  autoRefresh \nis  false  or omitted. To learn how  Atlas Charts  loads data from the cache when loading\nor refreshing the chart based on the  autoRefresh  and\n maxDataAge  values, see  Refresh and Data Caching Behavior . The following iframe embeds a chart which automatically\nrefreshes every 60 seconds as defined by the\n autoRefresh=true  and the  maxDataAge=60  query\nparameters: The minimum cache duration is 60 seconds. If  autoRefresh \nis  true  and you specify a  maxDataAge  value less than\n60, the chart refreshes every 60 seconds. If you specify an  maxDataAge  value which is not an\ninteger or less than  -1 , an  error  is returned. If your data source requires a\n Verified Signature , the\nsignature validity (including the expiry date) is checked on\neach refresh. If the signature's expiry date passed, the host\nweb page must regenerate a new signature to continue\nrendering charts. For code examples using verified\nsignatures, see\n Atlas Charts Embedding Examples \non GitHub. If  autoRefresh  is  true , the cache duration is one\nminute ( maxDataAge=60 ), and the expiry date of the\nsignature is in one hour, the chart refreshes every minute\nfor an hour. Once one hour has elapsed, the chart will not\nand an error will be displayed as the signature is\nno longer valid. The host web page must regenerate a new\nsignature to resume rendering the chart. Use the  theme  query parameter to select a display theme: Choosing a  theme  value only updates the iframe snippet you use to\nembed the chart in your application. The chart is not saved with a  theme \nvalue. The chart renders with the light theme by default.\nEmbedded charts that do not include the theme parameter also render with\nthe light theme. light : chart axes and text are optimized for presentation against\na light or white background. dark : chart axes and text are optimized for presentation against a\ndark or black background. Choosing the  light  or   dark  theme does not change the color\npalette that chart data elements use. All bars and marks display\nusing the default palette or the custom palette the chart author\nchose. For example, if you choose a chart bar to render in black, choosing\nthe  dark  theme does not change the color of this bar to make it\nmore visible against a dark background. Atlas Charts  adds inline style properties to the iframe snippet you copy\nfrom the UI that add a background color and a border with a box shadow\nto the embedded chart based on the theme you selected: Change the values of the inline style properties to change how the\nembedded chart displays in your application. light  theme  background :  #FFFFFF dark  theme  background :  #21313C border :  none border-radius :  2px box-shadow :  0 2px 10px 0 rgba(70, 76, 79, .2) width :  640 height :  480 Change the value of the  background  property to any value\nsupported by the  background  CSS property to display the chart\nagainst it. See  background \nin the MDN Web Docs for more information. Change the  background  property to  transparent  to\ndisplay the chart with a transparent background, allowing\nyour application's background to\ndisplay through the chart. Remove the  background  property to use the default\nbackground color of the theme you choose: #FFFFFF  for the  light  theme (default), or #21313C  for the  dark  theme. Modify or remove the following properties to customize or remove the\nchart border: border border-radius box-shadow You can change the value of the  theme  query parameter in the\niframe snippet after you paste it into your application. If you do,\nmake sure you adjust the iframe's inline style properties to match the\ntheme you choose. If you change the  theme  from  light  to  dark , adjust the\nvalue of the  background  property in the iframe snippet\nto display the chart against a dark background. Chart using  light  theme with default  light  theme\n background  of  #FFFFFF : Chart using  dark  theme with default  light  theme\n background  of  #FFFFFF : Chart using  dark  theme with default  dark  theme  background \nof  #21313C : The following iframe embeds a chart with the  dark  theme with the\ndefault  dark  theme inline style properties. The code is formatted\nfor readability. Use the  attribution  query parameter with a value of  false  to\ndisplay your embedded chart without the  MongoDB  logo. The following iframe snippet renders a chart that does not display\nthe  MongoDB  logo:",
            "code": [
                {
                    "lang": "html",
                    "value": "<iframe style=\"border: none;border-radius: 2px;box-shadow: 0 2px\n10px 0 rgba(70, 76, 79, .2);\" width=\"640\" height=\"480\" src=\"\n{charts-host}/embed/charts?id=b3ca720f-4b4a-40b4-a726-e7dc0c49aa1c&\nautoRefresh=true&maxDataAge=60\"></iframe>"
                },
                {
                    "lang": "html",
                    "value": "<iframe style=\"\nbackground: #21313C;border: none;border-radius: 2px;\nbox-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\"\nwidth=\"640\" height=\"480\" src=\"\nhttps://charts.mongodb.com/charts-crllr/embed/charts?id=a1b2c3d4-a1b2-c3d4-9766-47b0b2daaff3&\ntheme=dark\n\"></iframe>"
                },
                {
                    "lang": "html",
                    "value": "<iframe\nstyle=\"background: #FFFFFF;border: none;border-radius: 2px;\nbox-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);\"\nwidth=\"640\" height=\"480\" src=\"\nhttps://charts.mongodb.com/mongodb-charts-twsqq/embed/charts\n?id=a1b2c3d4-a1b2-c3d4-9766-47b0b2daaff3&\ntheme=light&\nattribution=false\n\"></iframe>"
                }
            ],
            "preview": "You can set chart options within an iframe by adding inline style\ntags and query parameters to the chart URL. Inline style\ntags allow you to specify display options such as height, width,\nbackground color, and border width. Query parameters allow you to\nspecify a refresh interval for your chart, as well as a light or\ndark display theme.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts/conditional-formatting",
            "title": "Conditional Formatting",
            "headings": [
                "Applying Multiple Rules",
                "Use Case",
                "Add a Rule",
                "Navigate to the Customize tab in the Chart Builder.",
                "Expand the Conditional Formatting section.",
                "Click Add.",
                "Select Single Color or Color Scale.",
                "Configure conditions.",
                "Customize the styling of values that match your condition.",
                "Click Save.",
                "Reorder, Edit, or Delete a Rule",
                "Navigate to the Customize tab in the Chart Builder.",
                "Expand the Conditional Formatting section.",
                "Click Edit.",
                "Reorder, edit, or delete a rule."
            ],
            "paragraphs": "Atlas Charts  provides conditional formatting options which modify the\nstyling of individual chart values based on conditions you define.\nConditional formatting is available for  Table \nand  Number  charts. To view your existing rules or to add, edit, or delete a rule, expand\nthe  Conditional Formatting  section of the\n Customize  tab. Multiple conditional formatting rules can affect the\nstyling of the same value. Conditional formatting rules take precedence in the order you put\nthem in. Rule  1  overwrites rule  2  in cases where both\nrules affect the same styling of a value. The following conditional formatting rules both apply to a value: The value's text is white because rule  1  takes precedence. The\nbackground is green because both rules apply. White text Black text, green background Conditional formatting can help clarify the insights that your chart\nprovides. The following example uses conditional formatting to\nhighlight slight shifts in critical reception and runtime in movies\nof the 2000s. To add a conditional formatting rule: Single Color  sets styling options for values\nin a field that match specific conditions. Color Scale  applies a color gradient to\nthe entire range of values in a field, with the minimum\nvalue colored by one end of the gradient and the maximum value\ncolored by the opposite end of the gradient. To configure a condition for  Single Color  format rules: You can add any number of conditions to a rule. To add another\ncondition, click  Another . A value must match all\nconditions for the rule to apply. To configure a  Color Scale  format rule,\nselect a field to which you want to apply a color gradient from the\n Applies to  dropdown menu. The color gradient\napplies to values in that field. From the  Applies to  dropdown menu, select a field\nor an aspect of your chart to which you want to apply a condition. From the  Operator  dropdown menu, select a\ncondition. Depending on the type of field you selected, you can\nchoose from numeric, string or date operators. From the  Input  dropdown menu, specify a\nvalue to which to compare field values using the operator you\nselected. For more information on condition configuration options, see\n Conditions Reference . To customize the styling for  Single Color  format rules,\nuse the editor under  Styling . You can apply basic text\nstyling and change the color of value backgrounds and text. On a table chart, to apply that formatting to an entire row, select\n Format entire row . For  Color Scale  format rules, click the color gradient\nunder  Styling  to select a predefined color range. Click\nthe arrow icon to the right of the color gradient to invert the\ngradient. To create another rule, click  Save and add another \ninstead. To reorder, edit, or delete conditional formatting rules: To reorder a rule, drag it to your desired rank. Conditional\nformatting rules take precedence in the order that you put them in.\n Atlas Charts  saves the order of your rules automatically. To edit a rule, click the   icon on that rule. When\nyou are finished editing, click  Save . To abandon your\nchanges, click  Cancel . To delete a rule, click the   icon on that rule.\n Atlas Charts  deletes the rule immediately.",
            "code": [],
            "preview": "Atlas Charts provides conditional formatting options which modify the\nstyling of individual chart values based on conditions you define.\nConditional formatting is available for Table\nand Number charts.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts/conditional-formatting-reference",
            "title": "Conditions Reference",
            "headings": [
                "Applies to Field",
                "Operator Field",
                "Numeric Operators",
                "Date Operators",
                "Binned Numbers and Dates",
                "String Operators",
                "Matches Regex",
                "One of",
                "Input Field"
            ],
            "paragraphs": "The configuration options available for creating a condition vary\nbased on: The effective type of a value is its type after array reductions\nand aggregations. For example, a string field in a table's\n Values  channel with a  COUNT  aggregation becomes numeric. Chart type Effective type  of the value to which you you want to apply the\ncondition Use the  Applies to  menu to select the aspect of your chart\nto which to you want to apply formatting based on a condition. For  Number Charts , you can only apply\nconditions to the number. For  Data Tables , you can select: Applies to Description Groups Select a group  encoding channel  from\nyour chart. The effective type of the field you select\ndetermines the available  Operators . Charts  formats matching cells in that group field column. Values Select a value  encoding channel  from\nyour chart. The effective type of the field you select\ndetermines the available  Operators . Charts  formats matching cells in that value field column. Row Index Compare a number to 0-based row indexes (that is, the first\nrow of data is row  0 ). Charts  formats matching rows. Column Name Compare a string to column headings. Charts  formats matching columns. Cell Value Compare a number or string to any table cell value. Charts  formats any matching cell. Row Total Compare a number to\n row totals . Charts  formats matching row total cells. Column Total Compare a number to column totals. Charts  formats matching column total cells. Use the  Operator  menu to select the operator that the\ncondition uses to determine formatting. Depending on the type of\nvalue you selected from the  Applies to  menu, you can\nchoose from numeric, string, or date operators. Charts uses the selected operator to compare chart values\nincluded in the  Applies to  field to an\n input  you provide. You can only select numeric operators for\n Number Charts . For individual numeric values, the following operators are available: On Data Tables, the following ranking operators are also available: Equal to Not equal to Greater than Greater than or equal to Less than Less than or equal to Ranked in top Ranked in bottom Ranked in top percent Ranked in bottom percent If multiple, identical values extend outside of the specified\nranking,  Atlas Charts  formats all matching values. For example, if the\ntop 20 values in your table are identical and you choose to format\nthe top 10,  Charts  formats all 20 identical values. For individual date values, the following operators are available: On or after After Exactly Before On or before Binned  numbers and dates use\ndifferent operators that apply to the bin range. For binned number ranges, the following operators are available: For binned date ranges, the following operators are available: Includes Greater than Greater than or includes Less than Less than or includes Includes After After or includes Before Before or includes For string values, the following operators are available: Equal to Not equal to Empty Not empty Contains Does not contain Starts with Matches Regex One of If you select  Matches Regex , you can apply any number of the\nfollowing Regex flags: Use the  input  field to specify a\nregular expression. Case insensitive (i) Multiline (m) Extended (x) Single line (s) If you select  One of , use the\n input  field to list a series of\nstrings. Matching any string in that list applies your conditional\nformatting. The  Input  field specifies a value to use for evaluating\nyour  Operator  condition against the values from your\n Applies to  field. Type of Operator Type of Input Numeric double String string If you selected the  Matches Regex  string operator,\nenter a regular expression. If you selected the  One of  string operator,\nenter a comma-separated list of strings. Date Date and time.",
            "code": [],
            "preview": "The configuration options available for creating a condition vary\nbased on:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts/value-axis-options",
            "title": "Axes",
            "headings": [
                "Max and Min",
                "Logarithmic Scale",
                "Logarithmic Scale Considerations",
                "Label Override",
                "Secondary Y Axis",
                "Usage",
                "Example"
            ],
            "paragraphs": "Atlas Charts  offers several customization options which modify the\nrepresentation of a chart's X and Y value axes without affecting the\nformatting of the data points in the visualization. To access value axis customization options, expand the  Axes \nsection of the  Customize  tab. This page illustrates the value axis customization options which are\navailable for most  chart types . Some\nchart types have other customization options which are noted on their\nindividual documentation pages. A value axis shows a continuous scale of values. Charts such as\n Bar/Column  and\n Discrete Line/Area  have just one\nvalue axis.  Continuous line and area \nand  scatter  charts have two value\naxes. The  Max  and  Min  value axis options allow\nyou to specify maximum and minimum values to display on a chart.\nAny data points with values outside the specified limits appear at\nthe boundaries of the chart. Setting a maximum display value\nis useful for removing outlying data from the chart and\nallowing the viewer to focus on more relevant information. The following chart types can use max and min: Changing the minimum for bar and column charts from the default\nof zero is not recommended. Doing so means the length of the\nbars is no longer proportional to the data point values. all  Bar/Column  except 100% stacked Discrete and Continuous Line Discrete and Continuous Area Scatter Toggling the  Logarithmic Scale  switch to the\n On  position causes your chart\nto use a logarithmic scale instead of a linear scale for data\nvalues. Using a logarithmic scale is helpful for showing\nthe percentage change from one value to the next and for charts\nwith a large value differential from smallest to largest. Data sets\nsuch as stock market movements, earthquake strength measurements, and\nglobal population sizes are good use cases for a logarithmic scale\nchart. The following chart types can use logarithmic scale: Use the  Logarithmic Scale  option only with chart data\nthat consists of either all positive values or all negative values.\nIf the chart includes a mix of positive and negative values, or if\nit includes the value  0 , the chart will not render. Bar and column charts normally have a baseline of  0 , but\nlogarithmic scale charts have a baseline of  1  because\n log(0)  is undefined. As a result, charts with data points between\n 0  and  1  do not render well. You can mitigate this effect by\nsetting the  axis minimum  of the chart to\na value greater than zero but smaller than the lowest value in the\ndata set. Grouped and Colored Bar/Column Discrete and Continuous Line Scatter The  Label Override  field allows you to create a\ncustom axis label. Custom labels can be more descriptive\nthan the default labels and help chart viewers quickly grasp\nthe significance of chart data. The Label Override customization option is available on the  X \nor  Y  value axis for charts in which the author has encoded multiple\ndata series by mapping more than one field on a given axis.\nTo customize the axis label for charts that have a single field mapped,\nuse the Label Override option within that field's customization\noptions. The following chart types can use label override: Bar/Column Line Area Scatter If you map multiple  Aggregation  or  Value  fields\nto the  Y axis , you can plot one set of values on a secondary\nY axis. This customization option is useful for comparing two data series\nwith significantly different scales using the same chart. You can plot a secondary Y axis on the following chart types: To plot a field on a secondary Y axis: After the secondary Y axis is enabled, you can customize its  value\naxis options . When the secondary Y axis is used for at least one series, two separate\nlegends appear for the left Y axis and the right Y axis, each showing the\nseries mapped to that legend. Grouped column Discrete line Continuous line Continuous area Click the  Customize  tab above the  encoding channels  in the  Chart Builder . Expand the  Fields  section of the  Customize  tab. Select the field you want to plot on a secondary Y axis from the\ndropdown menu. Set the  Plot on Secondary Axis  toggle switch to\n On . The following chart uses the  movies  collection in the  sample_mflix \ndatabase. The  metacritic  field rates movies on a scale of 0-100, while\nthe  tomatoes.critic  field uses a scale of 0-10. This chart shows the\ntotal scores for all movies for ten directors, with the  metacritic \ntotals on the left Y axis and the  tomatoes.critic  totals on the right. The chart shows that Woody Allen gets better ratings from the Rotten Tomatoes\nreviewers, while Steven Soderbergh does better with the Metacritic reviewers.",
            "code": [],
            "preview": "Atlas Charts offers several customization options which modify the\nrepresentation of a chart's X and Y value axes without affecting the\nformatting of the data points in the visualization.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/dashboard-access",
            "title": "Dashboard Access",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/view-dashboard-data",
            "title": "View Dashboard Data",
            "headings": [
                "Refresh Dashboard Data",
                "View Chart Data",
                "Fullscreen Dashboard View"
            ],
            "paragraphs": "Atlas Charts  automatically refreshes chart data once it becomes out of\ndate with the backing data source. You can also manually refresh\ndashboard data at any time. To learn how to configure refresh settings and underlying\nrefresh behavior, see  Refresh Dashboard Data . You can export the data underlying a chart can as a table. All viewers of\npublic dashboards and authenticated users of non-public dashboards can\nview and export data. To view the chart data, click  View\nchart data  from the   menu. Each row in the table\nrepresents a data point. If you want to analyze your underlying data with a third-party tool,\nyou can download your data from the  Chart Data  modal. To\ndownload your data, click  Download - CSV  or\n Download - JSON . Some configuration options you see reflected on a chart\nvisualization are not applied to the table. The\n Chart Data  table displays underlying data retrieved\nwith your full aggregation pipeline, and not all Chart Builder\nconfiguration options apply aggregation stages. Review your data to\nverify its contents. You can also retrieve chart data using the\n Embedding SDK \n getData()  method. To learn more about SDK API methods, see the\n Embedding SDK Reference . Atlas Charts  provides a fullscreen view for dashboards. In this view,\n Atlas Charts  hides the main navigation bar and expands the dashboard to\nshow the title, description, time of last modification, and charts in\nthe entire space of the screen. To enter the fullscreen view for dashboards: To exit the fullscreen view for dashboards, do one of the following\ntasks: Import a Dashboard From a File Select a dashboard from the\n Dashboards  page. Click\n  at the top-right of the dashboard. In the fullscreen view for dashboards, you can still: Remove ,  resize ,  rearrange , and  edit  charts by hovering over the desired chart. Configure refresh settings and manually refresh chart data. Enter the  fullscreen charts view . Click   at\nthe top-right of the dashboard. Press the escape key.",
            "code": [],
            "preview": "Atlas Charts automatically refreshes chart data once it becomes out of\ndate with the backing data source. You can also manually refresh\ndashboard data at any time.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/manage-dashboards",
            "title": "Manage Dashboards",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/dashboard-import-export",
            "title": "Import and Export a Dashboard",
            "headings": [
                "Import a Dashboard From a File",
                "Click one of the following buttons:",
                "Export a Dashboard to a File"
            ],
            "paragraphs": "You can export a dashboard to a file, which you can then import. Use\nthis feature to: Import exported charts into the same or a different project Store your dashboard outside of  Atlas Charts You can import a dashboard from a file on the  Dashboards page . The file to import: To import a dashboard from a file: Can't be larger than 16 MBs Must be a valid  .charts  file that you downloaded from a\ndashboard Import a Dashboard From a File From the  Dashboards  page,\nexpand the  Add Dashboard  dropdown menu and select  Import Dashboard . In the  Import Dashboard  modal, drag and drop the file to import\nor click  Choose File  and select the file to import. Click\n Next . Click the pencil icon  \nunder  Data source at destination . Select the  Data source at destination \nfor each  Data source in file . The  Import Dashboard  modal displays a list of all of the data\nsources you are importing under the  Data source in\nfile  column. To connect each data source from your imported dashboard to a data source in your destination project,\nchoose one of the following options under the  Data Source at Destination  column: Option Description Connect later Option to choose the data source to use later.  Atlas Charts \nimports all charts using the  Data source in file ,\nbut no data source is selected. The charts don't render until\nyou edit each chart and choose a new data source. Connect now Option to select any data source in your project. The data\nsource you select is used instead of the  Data\nsource in file  for charts imported in to the dashboard. If  Atlas Charts  detects that a data source in your imported dashboard is the same\nas the data source in your destination project, that data source is selected by\ndefault. Otherwise,  Connect later  is selected by default. To select a data source: Select a deployment from the first dropdown. Select a database from the second dropdown. Select a data source from the third dropdown. Click  Save . Exclude charts using this data source Option to exclude charts that use the  Data source\nin file . Charts that use the  Data source in\nfile  won't be imported. Imported charts may not render properly if mapped to a data\nsource that the chart wasn't built to use. Save  to import the dashboard. Save and Import Another  to import this dashboard and\nimport another dashboard from a file. Cancel  to exit the modal without importing the\ndashboard. You can export a dashboard to a single file named\n <Dashboard-Title>.charts .\nYou can export a dashboard from the  Dashboards  page or from\nthe dashboard itself. To export a dashboard: The  <Dashboard-Title>.charts  file contains the metadata for the\ndashboard, including: The  <Dashboard-Title>.charts  file does  not  include: You must have  Viewer  or higher  permissions  to export a dashboard. If you are on the  Dashboards  page, click the ellipsis\n( ... ) for the dashboard you want to export. If you are already viewing a specific dashboard, click the ellipsis\n( ... ) in the top right corner. Click\n Export as .charts . Dashboard name and description Dashboard layout including location of the charts in the dashboard Chart definitions Dashboard filter definitions Details of the data sources used on the charts including: Cluster name Database name Collection name Embedding settings for each chart including: Whether each embedding type is enabled or disabled Filter allow list Injected filter code Dashboard  permissions External sharing settings for the data sources used Data source pipelines Chart embedding IDs",
            "code": [],
            "preview": "You can export a dashboard to a file, which you can then import. Use\nthis feature to:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/view-dashboard-data/scheduled-reports",
            "title": "Schedule Dashboard Reports",
            "headings": [
                "Required Permissions",
                "Limitations",
                "Create a Scheduled Report",
                "On the Dashboards page, select the dashboard for which you want to generate a report.",
                "Click Schedule in the top right corner.",
                "Configure your dashboard report.",
                "(Optional) Send a test email.",
                "Schedule or send your report.",
                "Edit a Scheduled Report",
                "Navigate to the Reports page, under Scheduling in the Charts sidebar.",
                "For the report that you want to edit, click Edit.",
                "Reconfigure your scheduled report information.",
                "Click Save.",
                "Delete a Scheduled Report",
                "Navigate to the Reports page, under Scheduling in the Charts sidebar.",
                "For the report that you want to delete, click .",
                "Click Delete."
            ],
            "paragraphs": "You can create, edit, and delete scheduled reports for your dashboard.\nA scheduled report automatically sends a snapshot of dashboard data to\na group of users at a regular frequency. To view your scheduled reports, click  Reports  in the\nsidebar of the  Charts  UI, under  Scheduling . To create, edit, and delete scheduled reports for a dashboard, you must\nhave: The  Owner \n dashboard permission \nrole for your  Charts  dashboard. Write access to your  Atlas  project through an  Atlas \n user role . If you have the  Project Owner  user role, you can view all of the\nscheduled reports in a project. To edit and delete reports for that dashboard,\nyou must also have the  Owner  dashboard role. For  M0  clusters, you can create one scheduled report per\nproject. For  M2  and higher tier clusters, you can create up to 100\nscheduled reports per project. At this time, scheduled reports can only be sent by email. To create a new scheduled report: A  New Report  dialog box opens. Provide the following information: Field Description Name The name of your report to show on the  Reports \npage. For email reports, this is also the subject line. To The list of recipients to whom to send your report. You\ncan specify any combination of the following: Individual project members All project members (by clicking  Add All \nfrom the dropdown) Individual external email addresses You can specify a maximum of 10 external email\naddresses. Message ( Optional ) A message to send with your report. For email\nreports, this is the email body. Attachment The type of file to use for the dashboard report. You\ncan select either  PNG (Portable Network Graphic)  or  PDF (Portable Document Format) . If you select PDF, you must also select an orientation for\nthe report document. To send a test email to yourself to view the output of a report\nbefore you send or schedule it, click  Send test email . Charts  sends a report to your email address immediately. You can create a schedule for a recurring report, or send a\nsingle report immediately. To schedule a recurring report: Charts  adds your new scheduled report to a list of\nreports for your project. To view this list and to edit your\nscheduled reports, see  Edit a Scheduled Report . To send a single report immediately: Charts  sends your report immediately. The report isn't\nadded to the list of scheduled reports for your project. Toggle the switch to  Schedule . Specify a start date and time. The first report will be sent at this time. Select a frequency from the  Frequency  dropdown. You can select: Once Daily Weekly Monthly Quarterly Select a timezone from the  Schedule  dropdown. Click  Schedule . Toggle the switch to  Send now . Click  Send now . To edit an existing scheduled report: Any dashboard owner of a particular dashboard can delete a report. To delete an existing scheduled report: Dashboard owners that have the  Project Read Only  role cannot create or delete\ndashboards. A  Delete Report  dialog box opens.",
            "code": [],
            "preview": "You can create, edit, and delete scheduled reports for your dashboard.\nA scheduled report automatically sends a snapshot of dashboard data to\na group of users at a regular frequency.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/view-dashboard-data/dashboard-refresh",
            "title": "Refresh Dashboard Data",
            "headings": [
                "Configure Refresh Settings",
                "Click Save.",
                "Manually Refresh Data",
                "Manually Refresh an Entire Dashboard",
                "Manually Refresh a Single Chart",
                "Refresh Behavior",
                "Caching Behavior",
                "Refresh Failures"
            ],
            "paragraphs": "Atlas Charts  automatically refreshes chart data once it becomes out of\ndate with the backing data source. You can also manually refresh\ndashboard data at any time. Charts on a dashboard automatically refresh once their data becomes out\nof date. You can specify how stale your charts' data can be before it is\nrefreshed. This is known as your staleness tolerance. The default\nbehavior is to refresh when data is one hour stale. To configure refresh settings for a dashboard: Select a dashboard from the\n Dashboards  page. Click the  Refresh  icon\nat the top of the dashboard. Click  Refresh Settings \nfrom the dropdown. Select your data staleness tolerance\nfrom the dropdown. Charts  supports the following staleness tolerances: An increment of time between 1 minute and 30 days, or Infinity. If you select infinity, your chart doesn't automatically refresh. You can manually refresh an entire dashboard or individual charts to\nrender your charts with the latest data. In a manual refresh,  Atlas Charts \nreloads data even if the current data is within your specified staleness\ntolerance. Atlas Charts  users of all  permission levels \ncan refresh dashboard data. Manually refresh an entire dashboard to requery all of the data sources\nbacking your charts and render your charts with the latest data. To manually refresh dashboard data: Select a dashboard from the\n Dashboards  page. Click the  Refresh \nicon. Select  Force Refresh \nfrom the dropdown. Manually refresh a single chart to only requery the data source for that\nchart and render that chart with the latest data. To manually refresh a single chart: Select a dashboard from the\n Dashboards  page. Hover over the upper right corner of the desired chart and click the\nellipsis button ( ). Click\n Force Refresh . When  Charts  refreshes dashboard data, only charts with data\nolder than your specified staleness tolerance are refreshed.\n Charts  does not refresh the entire dashboard at once. The refresh details displayed on your charts depend on your chart viewing method\nand the failure status of your last refresh: You can hover over the timer at the bottom of each chart to view information about refresh times: Refresh settings are stored in the local browser state. These\nsettings are not persisted with the dashboard or shared between users. Viewing Method Details You See Authenticated Dashboard The error code that describes why the refresh failed, if\napplicable. Time since the last refresh occurred. Time until the next automatic refresh occurs. Dashboard Accessed with a Public Link Time since the last refresh occurred. Time until the next automatic refresh occurs. Embedded using an iframe or the SDK The  embedding error code  that\ndescribes why the refresh failed, if applicable. If the chart is configured to automatically refresh:\n- Time since the last refresh occurred.\n- Time until the next automatic refresh occurs. When  Atlas Charts  loads charts on a dashboard, it does not consistently\nquery the data source for each chart. Instead,  Atlas Charts  queries the\ndata sources when the dashboard first loads, and that data is cached\non both the client and server. When you manually refresh an entire dashboard,  Charts  updates\nall chart data by querying the data source for the latest data even if\nthe chart data is within the specified staleness tolerance period. When a dashboard refreshes automatically: The data stored in the cache is encrypted with a key specific to\nyour  Atlas Charts  tenant. If a chart's data is within the staleness tolerance period,\n Charts  doesn't refresh the chart's data. If a chart's data is outside of the staleness tolerance period,\n Charts  returns the latest data from the server cache. If the\nserver cache contains stale data,  Charts  queries the data\nsource for the latest data, refreshes the chart, and updates the\ndata cached on both the client and server. If your chart is embedded using\n Atlas App Services Authentication \nand\n Fetch data using Atlas App Services  is enabled in your\n Authentication Provider Settings , your chart does not load data from\nthe server cache. Your  maxDataAge  embedding parameter still\ndictates how often the chart refreshes, but the data source is\nalways queried on each render. When an automatic or manual refresh fails,  Atlas Charts  displays the most recently rendered chart, including all of the chart's interactive elements,\nalong with an error message that reads  Last refresh failed . If  Atlas Charts  has never successfully rendered the chart, the error message instead reads  Unable to load data . If you're viewing a chart that is rendered on an Authenticated Dashboard or embedded using an iframe or the SDK,\nyou can click the  Refresh  link in the error message to manually refresh the chart. If you're viewing the chart on an Authenticated Dashboard,\nclick the  failed  link in the error message to view\nadditional error details. The  failed  link is not available when you view charts on a dashboard\nfrom a public link or embedded using an iframe or the SDK.",
            "code": [],
            "preview": "Atlas Charts automatically refreshes chart data once it becomes out of\ndate with the backing data source. You can also manually refresh\ndashboard data at any time.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "customize-charts/field-level-options",
            "title": "Fields",
            "headings": [
                "Field Label Override",
                "Number Formats",
                "Number Format Options",
                "Number Format Presets",
                "Date Format and Time Zone",
                "Date and Time Formatting",
                "Considerations",
                "Convert Time Zone"
            ],
            "paragraphs": "Within the customization tab, you can modify how  Atlas Charts  displays\ndata fields in your visualization. The customization options\navailable depend on the data type of the value you are customizing. To access field-level customization options, expand the  General \nsection of the  Customize  tab. Select the desired field from\nthe dropdown menu. This page illustrates the field-level customization options which are\navailable for most  chart types . Some\nchart types have other customization options which are noted on their\nindividual documentation pages. When you  encode  a field in the\n Chart Builder ,  Atlas Charts  automatically\ngenerates a label for the field in the visualization.  Charts \ngenerates the label based on the field name and the type of\naggregation applied to the field if appropriate. You can use this\ncustomization option to override the default label to provide more\ninsightful or descriptive field labels. To override a field label: This option affects all places in the chart the field label appears,\nincluding axis titles, legends, tooltips, etc. Your chart\nautomatically updates to show the new label. This option is available\non all chart types. Navigate to the  Customize  tab in the\n Chart Builder . Expand the  Fields  section. Select the field whose label you wish to modify from the dropdown menu\nto expand its customization options. Set the  Label Override  toggle switch to  On . Enter the new desired field label in the text box. You can use these customization options to specify how  Charts \nformats numbers in your data fields. These options are available on all\nchart types. Atlas Charts  provides the following options for formatting numbers. You can\nuse any combination of these options to customize your chart: Option Description Thousands Separators Show or hide commas as thousands separators for data values.\nBy default,  Charts  shows thousands separators. Decimals Specifies to how many decimal places  Charts  rounds each\ndata value or label. If you specify this option,  Charts \ndisplays all values with the specified number of decimal\nplaces, either by rounding decimals or adding zeroes to whole\nnumbers. If you do not specify this option,  Charts \ndisplays values in their original form with no modifications. Multiplier Specifies a number by which  Charts  multiplies each data\nvalue or label. This option is useful for scaling data, such\nas showing values in terms of thousands or millions. You can\nalso use this option to convert measurements or currencies to\ndifferent units by multiplying your values by the appropriate\nfactor. Prefix Specifies a string which  Charts  prepends to each data\nvalue or label. This option is useful for formatting currencies\nby prepending characters such as  $  or  \u20ac . Suffix Specifies a string which  Charts  appends to the end of\neach data value or label. This option is useful for providing\ncontext to your data by appending units, such as  \u00b0F  or\n km/h . Charts  provides the following preset customizations to format\nnumbers for common use cases: If you select a preset, you can modify any of its attributes to\nfurther refine your numeric displays. Once you modify a preset's\nattribute,  Charts  changes the preset selection in the dropdown\nto  Custom . Option Description Percentage Multiplies each value by 100 and appends a  %  sign to each\nvalue. Use this option to convert decimal values to percentages. Dollars Rounds each value to two decimal places and prepends a\n $  to each value. Thousands Divides each value by 1,000 and appends a  K  to each\nvalue. Millions Divides each value by 1,000,000 and appends an  M  to each\nvalue. You can customize how  Atlas Charts  displays date fields, as well\nas convert dates to a specified time zone. To customize date formats and configure time zones: Navigate to the  Customize  tab in the\n Chart Builder . Expand the  Fields  section. Select the field whose date format and time zone you wish to modify\nfrom the dropdown menu. Configure the  Date and Time Formatting  and\n Convert Time Zone  settings as desired. Use this option to specify how  Charts  formats\ndates and times. Click the dropdowns in this customization section to\nselect a preset format provided by  Charts .  Charts \nprovides one dropdown for selecting a date format and one dropdown for\nselecting a time format. You can also use the input box below the dropdowns to specify a custom\ndatetime format. The following table shows how to create custom datetime formats: Once you modify a preset's attribute,  Charts \nchanges the preset selection in the dropdown to  Custom . Depending on the  binning  type selected for\nthe field,  Charts  may not show both date formatting\ndropdowns. Also, the options in the dropdowns change depending on\nthe binning type selected. For more information, see the\n Considerations  section. Symbol Meaning Example YYYY Full year. 2018 YY Last two digits of year. 18 MMMM Full month as letters. November MMM Abbreviated month as letters. Nov MM Month as numbers, with leading a zero if applicable. 08 M Month as numbers with no leading zero. 8 [W]WW Week of the year preceded by a  W  and with a leading zero,\nif applicable. W01 W Week of the year as numbers with no leading zero. 1 DDDD Day of the year, with leading zeroes if applicable. 076 DDD Day of the year with no leading zeroes. 76 DD Day of the month with a leading zero if applicable. 05 D Day of the month with no leading zero. 5 HH Hour with a leading zero if applicable. Uses 24-hour time\nformat. 18 H Hour with no leading zero. 8 A Adds the applicable  AM  or  PM  period to the format. Uses\n12-hour time format. PM mm Minute with a leading zero if applicable. 03 m Minute with no leading zero. 3 ss Second with a leading zero if applicable. 09 s Second with no leading zero. 9 Consider a timestamp of November 8th, 2018 1:30:58 PM. The following table shows how various custom date filters would output\nthe date: Custom Format Output YYYY/MM/DD 2018/11/18 MMM YY Nov 18 DDD, YYYY HH:mm:ss 322, 2018 13:30:58 DD-MMM H:mm:ss A 08-Nov 1:30:58 PM If you  bin  your timeseries data, you\ncannot specify a unit of time in your custom format with smaller\ngranularity than your bin size. For example, if you bin data\nby  Month , you cannot specify days, hours, minutes, or\nseconds in your custom format because  Charts  does not show\nthese values in the visualization. If you enter an invalid custom\ndatetime format,  Charts  highlights the format input box in red. Specifying the  Periodic  option further limits valid\nformatting options. For example, if you bin data by  Month ,\nyou can only specify  year  in your date format if you disable the\n Periodic  option. If you enable the  Periodic \noption, you cannot specify  year  because  Charts  only\ndisplays the  month  in the field. By default,  Atlas Charts  displays timeseries data exactly how it appears\nin the original dataset, which is assumed to be in\n UTC (Coordinated Universal Time) . You can use this\ncustomization option to convert the time zone in which  Charts \ndisplays the data to best fit the location of the data or the\nviewers of the chart. To enable this option: You can search the dropdown to easily filter for the desired time zone.\nType into the search bar above the dropdown to see all matching time\nzones. Set the  Convert Time Zone  toggle switch to\n On . Use the dropdown below the toggle to select the desired time zone\nfor your data. When you convert time zones,  Charts  automatically accounts\nfor Daylight Savings Time when required.",
            "code": [],
            "preview": "Within the customization tab, you can modify how Atlas Charts displays\ndata fields in your visualization. The customization options\navailable depend on the data type of the value you are customizing.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "embedded-charts-options/embedded-sdk",
            "title": "Embedded Charts SDK Options",
            "headings": [
                "Embedded Chart Options",
                "Chart Configuration",
                "getCustomizableAxes()",
                "setAutoRefresh(boolean)",
                "setFilter(object)",
                "setMaxDataAge(number)",
                "setRenderingSpecOverride(object)",
                "setTheme(\"dark\" | \"light\")",
                "Example",
                "Rendering Specification Options",
                "Conditional Formatting Operators",
                "Channels Example",
                "Conditional Formatting Example"
            ],
            "paragraphs": "The Embedding SDK provides the Javascript  createChart() \nmethod for rendering a chart within a web page. You can use options to\ncontrol the height and width of the chart, as well as the refresh\ninterval and other aspects. The following example uses the  createChart()  method with\noptions. The  createChart()  method takes the following options: Option Type Description Required? autoRefresh boolean Flag that indicates whether the chart automatically refreshes. If\nomitted, charts don't automatically refresh. Use this option with the  maxDataAge  option to\nconfigure automatic dashboard refresh frequency. no background string Background color to apply to a chart instead of the\n theme  background. You can specify: If omitted, the background color defaults to the current\n theme : A color hex code A  CSS (Cascading Style Sheets)  color name A transparent background using the value  transparent #FFFFFF  for the  light  theme, or #21313C  for the  dark  theme. no baseUrl string Base URL of the chart. yes chartID string Unique identifier of the chart. yes filter object Filter  to apply to the chart. no getUserToken object Function that returns a  base64 -encoded  JWT (JSON Web Token)  token.\n Charts  validates this token to determine if\n Charts  renders an authenticated chart. If authenticated access is enabled,  Charts  renders the\nauthenticated chart view only if  Charts  can validate the\ntoken using the  configured authentication providers . If the token is invalid,  Atlas Charts  renders the unauthenticated\nchart if you enabled unauthenticated access. Otherwise,\n Charts  doesn't render the chart. Embed an Authenticated Chart using a Custom JWT Provider no height number Height of the chart. If omitted, the chart defaults to\nthe height of its container. If you provide a value without units,\nthe unit defaults to pixels (px). no maxDataAge number Specifies the maximum age of data to load from the cache\nwhen loading or refreshing the chart. If omitted,\n Atlas Charts  renders the chart with data from the cache if\nthe data is less than one hour old. If the data from the cache is more than one hour old,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the chart using this data. To learn how  Atlas Charts  loads data from the cache when\nloading or refreshing the chart based on the\n autoRefresh  and  maxDataAge  values, see\n Refresh and Data Caching Behavior . no renderingSpec object Rendering specification that specifies how to customize an\nembedded chart. For a list of available customizations, see\n Rendering Specification Options . no showAttribution boolean Flag that indicates whether to display the  MongoDB  logo\nbelow the chart. Defaults to  true . no theme string Theme  for the chart to use. Valid\noptions are: Defaults to  light . light  for a light background with dark text and chart\nelements, or dark  for a dark background with light text and chart\nelements. no width number Width of the chart. If omitted, the chart defaults to\nthe width of its container. If you provide a value without units,\nit defaults to pixels (px). no After you create a chart, you can control the configuration\nof the chart by calling methods on the  Chart  instance returned\nby  ChartsEmbedSDK.createChart({ ... }) . Returns the chart axes for the embedded chart. Specifies whether the chart automatically refreshes. If\nomitted, charts don't automatically refresh. Use this method with the  setMaxDataAge  method to\nconfigure how often the chart refreshes. Applies a  query filter \nto the embedded chart or chart within an\n embedded dashboard . This\nmethod takes an object with valid query\noperators. Any fields referenced in this filter must be\nadded to the  Allowed filter fields \nlist in the  Embed Chart  modal window.\nAn empty document  {}  is equivalent to no filter. See the  Embedding Tutorials  for\nmore information about enabling embedding for a chart\nand allowing fields for filter use. Specifies the maximum age of data to load from the cache\nwhen loading or refreshing the chart. If omitted,\n Atlas Charts  renders the chart with data from the cache if\nthe data is less than one hour old. If the data from the cache is more than one hour old,\n Charts  queries the data source for the latest data,\nrefreshes the cache, and renders the chart using this data. To learn how  Atlas Charts  loads data from the cache when\nloading or refreshing the chart based on the\n setAutoRefresh  and  setMaxDataAge  values, see\n Refresh and Data Caching Behavior . Specifies how to customize a chart. For a list of available customizations, see\n Rendering Specification Options . Sets the current theme of the embedded chart. When setting the\ntheme to  dark , you need to ensure that a chart's\nbackground color has appropriate contrast so that the information\nremains visible. Charts Embedding SDK API Documentation Charts Embedding SDK examples The following example configures a Chart instance named  chart  to\nuse the  dark  theme and to refresh every 60 seconds. You can specify the following options for the  renderingSpec  object: All options, except  version  are optional. Option Type Description axes object Object that describes how to customize the charts axes. string Value to replace the current axes label. To learn more, see  Label Override . enum Angle at which to display a label. Value can be one of the following:  'vertical' ,  'horizontal' ,\n 'diagonal' This applies to All Column, 100% Stacked Area, Area Discrete,\nLine Discrete, Grouped Combo, Stacked Combo, and Heatmap charts. To learn more, see  Adjust X-Axis Label Angle . boolean Flag that indicates whether to use the logorithmic scale for the data values on a chart. This only applies to Grouped Column, Colored Column, Grouped Bar,\nColored Bar, Line Continuous, Line Discrete, Grouped Combo, and\nScatter\ncharts. To learn more, see  Logarithmic Scale . number | false Maximum value to display on the chart.  false  makes this option behave\nin its default state. This only applies to Grouped Column, Colored Column, Stacked Column,\nGrouped Bar, Colored Bar, Stacked Bar, Area Continuous, Area Discrete,\nLine Continuous, Line Discrete, Scatter, Grouped Combo, Stacked Combo,\nand Gauge charts. To learn more, see  Max and Min . number | false Minimum value to display on the chart.  false  makes this option behave\nin its default state. This only applies to Grouped Column, Colored Column, Stacked Column,\nGrouped Bar, Colored Bar, Stacked Bar, Area Continuous, Area Discrete,\nLine Continuous, Line Discrete, Scatter, Grouped Combo, Stacked Combo,\nand Gauge charts. To learn more, see  Max and Min . channels object Object that describes how to customize the charts channels. string Value to replace the current channel label. To learn more, see  Field Label Override . number Amount of decimal places to round each numeric data value\nor label. To learn more, see  Number Formats . number Number to multiply each numeric data value or label by. To learn more, see  Number Formats . string String to prepend to each numeric data value or label. To learn more, see  Number Formats . string String to append to the end of each numeric data value or\nlabel. To learn more, see  Number Formats . boolean Flag that indicates whether to show commas as thousands\nseparators for numeric data values. To learn more, see  Number Formats . boolean Flag that indicates whether to plot a set a field that correspond\nto a channel on a secondary Y axis. This only applies to Area Continuous, Grouped Column, Grouped\nCombo, Stacked Combo, Line Continuous, and Line Discrete charts. To learn more, see  Secondary Y Axis . boolean Flag that indicates whether to wrap the text for  Table Charts . To learn more, see  Wrap Text . conditionalFormatting object Object that describes how to format a section of a chart. To learn more, see  Conditional Formatting . boolean Flag that indicates whether to apply the specified format\nto an entire row. enum | string Object that indicates how to customize the background color. Value can be one of the following: Conditional Rules Type Values 'continuous' enum 'discrete' string Resembles the RGB color model, hexidecimal color, or the name of\na color. If you specify  'transparent' , the previous color applies, if any. array This applies to both  'continuous'  and  'discrete' \nconditional rules. Conditional Rules Description 'continuous' Object that describes how to format the  targetChannel . This applies to Table charts. 'discrete' Object that describes how to format the  targetChannel . This applies to Table and Number charts. Operator to apply to your  'discrete'  conditional rules. This applies to Table and Number charts. To learn more about the valid operators, see  Conditional Formatting Operators . string Table column that receives the continuous color for\n 'continuous'  or  'discrete'  conditional rules. This applies to  'continuous'  and  'discrete'  Table\ncharts, and  'discrete'  Number charts. enum Part of the Table chart to apply the  operator  and  value \nfor  'discrete'  conditional rules. Value can be one of the following:  'CHANNEL' ,\n 'ROW_INDEX' ,  'COLUMN_NAME' ,  'CELL_VALUE' ,\n 'ROW_TOTAL' ,  'COLUMN_TOTAL' ,  'COLUMN_ID' Value to apply to the  operator  for  'discrete' \nconditional rules. The data type depends on the  operator  you\nselect. This applies to Table and Number charts. enum Font to use for  'discrete'  conditional rules. Value can be one of the following:  'italic' ,  'normal' This applies to Table and Number charts. enum Font weight for  'discrete'  conditional rules. Value can be one of the following:  'bold' ,  'normal' This applies to Table and Number charts. boolean Flag that indicates whether to reverse the chosen\ncontinuous color for  'continuous'  conditional rules. This only applies to Table charts. string Text color for  'discrete'  conditional rules. Value must be a string that resembles the RGB color model,\nhexidecimal color, or the name of a color. If you specify\n 'auto' , no color applies. enum Text decoration for  'discrete'  conditional rules. Value can be one of the following:  'underline' ,\n 'line-through' ,  'underline line-through' ,  'initial' This applies to Table and Number charts. enum Type of conditional rules your chart uses. Value can be one of the following:  'discrete' ,\n 'continuous' The  'discrete'  conditional rules applies to Table and Number\ncharts. The  'continuous'  conditional rules applies to Table charts. description string Description of the chart. options object Object that describes how to customize the chart's options. boolean Flag that indicates whether to show the category labels in a donut chart. To learn more, see  Show or Hide Category Labels . object | false Object that describes how to customize the color palette.\n false  unsets any custom color palette that you set from the\nChart Builder. To learn more, see  Color Palette Customization . array Names of the channels to receive a custom color. object Object that describes how to customize the color palette. This applies to all chart types that can have multiple fields in\nthe series channel: all Bar charts except Colored Bar, all Column\ncharts except Colored Column and Candlestick, Grouped Combo,\nStacked Combo, all Line charts, all Area charts, and Donut. array Encoded field values in the series channel to receive a custom\ncolor. This applies to all chart types that can have multiple series in a\nchannel. For array's that contain the values  positive  and\n negative , this only applies to candlestick charts. boolean Flag that indicates whether to reverse the continuous\ncontinuous color. enum Type of color palette your chart uses. Value can be one of the following:  'discrete' ,\n 'continuous' The  'discrete'  color palette applies to the following\nchart types: Grouped Bar, Stacked Bar, 100% Stacked Bar, Grouped\nColumn, Stacked Column, 100% Stacked Column, Area Continuous,\nArea Discrete, 100% Stacked Area, Line Continuous, Line Discrete,\nCandlestick, Scatter, Donut, Geo Scatter, Word Cloud, Gauge,\nGrouped Combo, and Stacked Combo. The  'continuous'  color palette applies to the\nfollowing chart types: Colored Column, Colored Bar, Geo\nHeatmap, Geo Choropleth, and Heatmap. array Color values to customize the colors for single series charts or\nthe  channels  and  marks  for multi-series charts. number | false Size to change a label to. The size should be between  50  and\n 200 .  false  is equivalent to setting the size to  100 ,\nand makes this option behave in its default state. To learn more, see  Resize Labels . enum Location to place a legend in relation to the chart. This\nonly applies to charts that support legends. Value can be one of the following:  'right' ,  'bottom' ,  'top' To learn more, see  Customize Legend . enum Method that  Charts  uses to draw a line on a chart. Value can be one of the following:  'linear' ,  'monotone' ,\n 'step-before' ,  'step-after' This only applies to Area Continuous, Area Discrete, 100% Stacked\nArea, Line Continuous,Line Discrete, Grouped Combo, and Stacked\nCombo charts. To learn more, see  Smooth Lines . boolean Flag that indicates whether to display visible data markers that represent individual data points. To learn more, see  Show or Hide Data Markers . number | false Size of the text on a chart.  false  makes this option behave\nin its default state. To learn more, see  Resize Table Text . boolean Flag that indicates whether to display the total sum of each column. To learn more, see  Toggle Table Row and Column Totals . boolean Flag that indicates whether to display the total sum of each row. To learn more, see  Toggle Table Row and Column Totals . enum Method that  Charts  uses to display the exact value of a data point. Value can be one of the following:  'value' ,  'percentage' This applies to all Bar charts except 100% Stacked Bar,\nAll Column charts except 100% Stacked Column, Area Continuous, Area\nDiscrete, 100% Stacked Area, Line Continuous, Line Discrete, Grouped\nCombo, and Stacked Combo charts. To learn more, see  Label Override . title string Title of the chart. version number Version of the rendering specification. The first and current\nversion is  1 . This is a required field. The following table shows the available operators to use with\nconditional formatting, the data type they apply to, and their possible values. Operator Type Values DateBinnedOperator object BINNED_DATE_AFTER ,  BINNED_DATE_AFTER_OR_INCLUDES ,\n BINNED_DATE_BEFORE ,  BINNED_DATE_BEFORE_OR_INCLUDES ,\n BINNED_DATE_INCLUDES The object must have the following keys: DateOperator object DATE_AFTER ,  DATE_BEFORE ,  DATE_EXACTLY ,\n DATE_ON_OR_AFTER ,  DATE_ON_OR_BEFORE The object must have the following keys: NumericBinnedOperator number BINNED_NUMBER_GREATER_THAN ,\n BINNED_NUMBER_GREATER_THAN_OR_INCLUDES ,\n BINNED_NUMBER_INCLUDES ,  BINNED_NUMBER_LESS_THAN ,\n BINNED_NUMBER_LESS_THAN_OR_INCLUDES NumericOperator number NUMBER_EQUAL_TO ,  NUMBER_GREATER_THAN ,\n NUMBER_GREATER_THAN_OR_EQUAL_TO ,  NUMBER_LESS_THAN ,\n NUMBER_LESS_THAN_OR_EQUAL_TO ,  NUMBER_NOT_EQUAL_TO ,\n NUMBER_RANKED_IN_BOTTOM ,  NUMBER_RANKED_IN_BOTTOM_PERCENT ,\n NUMBER_RANKED_IN_TOP ,  NUMBER_RANKED_IN_TOP_PERCENT StringOperator string | array of strings STRING_CONTAINS ,  STRING_EMPTY ,  STRING_EQUAL_TO ,\n STRING_NOT_CONTAINS ,  STRING_NOT_EMPTY ,  STRING_NOT_EQUAL_TO ,\n STRING_ONE_OF ,  STRING_STARTS_WITH StringRegexOperator object STRING_REGEX The object must have the following keys: The value for  flag  can be one of the following: Value Description 'i' Case insensitive. 'm' Multiline. 'x' Extended. 's' Single line. The following example configures a Chart instance named  chart  with\nthese options: Use version  1  of the rendering specification. Update the  x  encoding channel to: Not use commas for the thousand separator. Start all numeric values with a  $ . Update the  y  encoding channel to end all numeric values with a  % . Update the  color  encoding channel to: Round all decimal values to two decimal places. Multiply all numeric values by two. Use the  continuous  color palette type with the  rainbow  color,\nand to reverse the chosen continuous color. The following example configures a Chart instance named  chart  with\nthese options: Use version  1  of the rendering specification. Perform the following conditional formatting to a  CHANNEL  where\nthe value is greater than  200 : Use the  'discrete'  conditional formatting rules. Set the background color to an RGB color model where red is 240,\ngreen is 209, and blue is 117. Set the text color to  red . Set the font style to  'italic' . Decorate the text with  'underline' . For the  value_series_0  column: Use the  'continuous'  color palette. Set the background color to  redyellowgreen . Reverse the chosen continuous color.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "const chart = new ChartsEmbedSDK({}).createChart({\n  baseUrl: 'https://charts.mongodb.com/charts-rendering-spec-project-aygif',\n  chartId: '38de4b38-42ea-422a-b702-a0220c8885e8',\n  height: 300,\n  width: 400,\n  renderingSpec: {\n    version: 1,\n    title: 'Customized chart title',\n    description: 'Customized chart description',\n    axes: {\n      y: {\n        logScale: true\n      },\n    },\n    channels: {\n      x: {\n        labelOverride: \"New field label\"\n      },\n      y: {\n        numberSuffix: \"%\"\n      }\n    },\n    options: {\n      labelSize: 150,\n      lineSmoothing: 'monotone'\n    }\n  }\n});\nawait chart.render(embedContainer);"
                },
                {
                    "lang": "javascript",
                    "value": "chart.setTheme(\"dark\");\nchart.setAutoRefresh(true);\nchart.setMaxDataAge(60);"
                },
                {
                    "lang": null,
                    "value": "date: string\ntime: string"
                },
                {
                    "lang": null,
                    "value": "date: string\ntime: string"
                },
                {
                    "lang": null,
                    "value": "source: regex string\nflags: string"
                },
                {
                    "lang": "javascript",
                    "value": "await chart.setRenderingSpecOverride({\n  version: 1,\n  channels: {\n    x: {\n      numberThousandsSeparators: false,\n      numberPrefix: '$',\n    },\n    y: {\n      numberSuffix: '%',\n    },\n    color: {\n      numberDecimals: 2,\n      numberMultiplier: 2,\n    },\n  },\n  options: {\n    colorPalette: {\n      type: 'continuous',\n      color: 'rainbow',\n      reverseColor: true,\n    },\n  },\n});"
                },
                {
                    "lang": "javascript",
                    "value": "await chart.setRenderingSpecOverride({\n  version: 1,\n  conditionalFormatting: [{\n    type: 'discrete',\n    backgroundColor: 'rgb(240, 209, 117)',\n    textColor: 'red',\n    fontStyle: 'italic',\n    fontWeight: 'bold',\n    textDecoration: 'underline',\n    applyToEntireRow: false,\n    conditions: [{\n        operator: 'NUMBER_GREATER_THAN',\n        targetType: 'CHANNEL',\n        targetChannel: 'value',\n        value: 200,\n    }],\n  },{\n    type: 'continuous',\n    backgroundColor: 'redyellowgreen',\n    reverseColor: true,\n    conditions: [{ targetChannel: 'value_series_0' }],\n  }],\n});"
                }
            ],
            "preview": "The Embedding SDK provides the Javascript createChart()\nmethod for rendering a chart within a web page. You can use options to\ncontrol the height and width of the chart, as well as the refresh\ninterval and other aspects.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/view-dashboard-data/dashboard-filtering",
            "title": "Filter Dashboards by Field Values",
            "headings": [
                "Dashboard Filters",
                "Example Scenario",
                "Filter Persistence Per Dashboard Viewer",
                "The Dashboard Filters Pane",
                "Expand or Collapse Dashboard Filters",
                "Manage Dashboard Filters",
                "Add Dashboard Filters",
                "Edit Dashboard Filters",
                "Delete Dashboard Filters",
                "Disable Dashboard Filters for a Chart",
                "Use Dashboard Filters",
                "Filter Dashboards",
                "Revert Dashboard Filters to Default Values"
            ],
            "paragraphs": "Dashboard filters refine data across some or all of the charts in a dashboard.\nThey allow you to view a common subset of data across the dashboard's\ncharts. Dashboard  Authors  or  Owners  can: All dashboard users can filter based on values they specify and save their own\ndefault filter values. If one or more dashboard filters affect the data a chart displays, an\n  icon displays in the bottom left corner of that\nchart. Hover over the   icon for a list of the\nfiltered fields impacting that chart. Select the fields that all dashboard users can use to filter data. Set initial default values for each filter. Disable filtering for a specific chart. Disabling filtering\nexempts the chart from dashboard filters. Users who open a dashboard using a public link can't save their own\ndefault filter values.  Charts  reverts to the initial default\nfilter values after refreshing the page or starting a new session. Dashboard  Authors  or  Owners  define filters using specific\ndata sources and can  disable filtering on specific charts . A single filter might not refine all charts\nif: The dashboard contains charts mapped to data sources that the filter\ndoesn't use. A dashboard  Author  or  Owner   disables filtering  on some charts. A dashboard  Author  creates a dashboard with charts that contain\nsales data for all of a company's customers. The author creates a\nfilter allowing dashboard viewers to select which region(s) to\ndisplay data from. Members of a sales team use this filter to display\ncustomer data only for the region(s) that they cover. You can use a prebuilt\n sample dashboard \nto experiment with dashboard filters. Charts  persists the following states for each dashboard viewer\nacross reloads and user sessions: The changes that a dashboard viewer makes to filters don't affect other\n Charts  users. A viewer's saved filters are not affected when a\ndashboard  Author  or  Owner  modifies a filter's default values\nunless you  reset a filter . which filters are enabled or disabled field values chosen to filter dashboards whether the  Dashboard Filters  is expanded or collapsed. Charts  doesn't persist filter states or values for users who\nopen a dashboard using a public link.  Charts  reverts to the\ninitial default filter values after refreshing the page or starting\na new session. The  Dashboard Filters  icon indicates the number of active\nfilters. Click the icon to expand the  Dashboard Filters \npane. The  Dashboard Filters  pane displays a filter card for\neach field you can use to filter chart data. You can configure filter\ncards to use related fields from multiple data sources. When you update\na field value,  Charts  updates dashboard charts to display data\nthat matches the field values you provide from all configured data\nsources. In the following example, a dashboard  Author  creates filters on\nthe  genres  and  year  fields from two sample movie datasets. The\n Author  sets default values for these fields to only display Science\nFiction and History movies released in or after 1968. Dashboard\n Viewers  can provide their own values for the filterable fields to\nrefine chart data based on their interests. To learn about filtering options for each field data type, see\n Create Filters for Your Data . You can expand or collapse dashboard filter cards by clicking\n Show  or  Hide  on that card. Disabled filters are automatically collapsed. Enabled, collapsed filters are still applied to your charts. Dashboard  Authors  and  Owners  can: Add, edit, and delete dashboard filters. Disable dashboard filters on specific charts. You can specify fields that any dashboard users can filter data with.\nWhen you create a dashboard filter, you select related fields from the\ndata sources that a dashboard chart uses. You can add dashboard filters\nbased on any number of data sources that a dashboard chart uses. Filter cards that use multiple data sources query each chart using\nthe name of the field from the applicable data set. To add a dashboard filter: Chart  A  uses data set  A . Chart  B  uses data set  B .\nField  A  in data set  A  and field  B  in data set  B \ncontain related information. You add both fields to a single\nfilter card. When a filter affects chart  A , the query for that chart uses\nfield  A  only. When a filter affects chart  B , the query for\nthat chart uses field  B  only. Expand the  Dashboard Filters  pane on the desired\ndashboard. If a dashboard has no filers, click  Add Filters .\nOtherwise, click  Edit . Expand a data source that contains fields you want to add a filter\nfor. Drag a field from the data source to the  + filter  drop\nzone. The data source name appears below the field name in the filter card. To search for specific data fields, use the search bar at the\nupper left corner of the  Edit Dashboard Filters  pane. ( Optional ) You can stack fields from other data sources. This\nallows you to use a single filter to refine chart data from related\nfields from multiple data sources. To stack fields from other data sources: The data source name appears below the field name and the other data\nsources you selected fields from in the filter card. Click   next to a data source to remove its field\nfrom a filter card. Each field must be of the same  data type  as\nthe other fields on the filter card. The filter card must not have another field from the selected\ndata source on it. Expand another data source that contains a related field. Drag a field from the data source to the\n + another field  drop zone on the same filter card. The field names might differ from each data source. The filter\ncard lists the field name you used to create the filter. ( Optional ) Supply default values for the field in the filter card.\nAll dashboard viewers see chart data that matches the default field\nvalues you provide until they provide their own filter values or\ndisable the filter card. The filter card options are based on the data type of the field.\nTo learn about filtering options for each field data type, see\n Create Filters for Your Data . Use the toggle to disable or enable the filter card by default. If\ndisabled, each dashboard user must enable the filter card to display\ndata the filter refines. Repeat for each field you want users to filter data by. Click  Apply Filters . After you create a dashboard filter, you can: To edit a dashboard filter: Rename filter cards. Enable or disable filter cards. Add or remove fields. Stack fields from other data sources. Change the default field values. Expand the  Dashboard Filters  pane on the desired\ndashboard, then click  Edit . Make the changes you want to each filter card. Click  Apply Filters . Expand the  Dashboard Filters  pane on the desired\ndashboard, then click  Edit . Hover of the filter card you want to delete, then click\n . Click  Apply Filters . You can disable filtering for a specific chart if you create at least\none dashboard filter on the chart's data source. If you disable\nfiltering, the chart is exempted from all dashboard filters and\nhighlighting. The default selection for all charts is\n Filter or highlight . To disable dashboard filtering for a chart: Once you ignore filtering, the  Interactive Filters \nbutton icon on the chart changes for all users. Users with the\n Viewer  role can also see a tooltip if they click the\n Interactive Filters  button,\nwhich says \" The dashboard owner has not enabled filtering for\nthis chart .\" To reenable dashboard filtering for a chart: Hover over the chart on the dashboard to reveal four buttons in the\nupper right corner of the chart. Click the second button (for  Interactive Filters ) and\nselect  Ignore  from the dropdown. You can't change this setting until you've created at least one\ndashboard filter on the chart's data source. Click the  Interactive Filters  button. Select  Filter  from the dropdown. Any user with at least the  Viewer  role on a dashboard  and  the data\nsource backing a field can view the filter card and provide their own\nvalues for the filter. You can filter the dashboard data based on the filterable fields\nthat an  Author  or  Owner  configured.  Charts  filters\ndata based on default field values if the dashboard  Author  or\n Owner  configured them. Dashboard  Authors  or  Owners  can\nconfigure filter cards to use related fields from multiple data sources.\nYou can provide your own field values to customize the data the charts\ndisplay. To filter dashboard data based on filterable fields: The charts refresh immediately after you modify a field value. Expand the  Dashboard Filters  pane on the desired\ndashboard. If a filter card is disabled, click the toggle to enable it. Modify the values of the provided fields to update the dashboard's\ncharts based on the filter values you provided. The filter card options are based on the data type of the field.\nTo learn about filtering options for each field data type, see\n Create Filters for Your Data . Updating the filter value refines chart data based on all data\nsources linked to the filter card. If the filter card field is a  String  or  ObjectId ,\n Charts  only samples field values from the first data\nsource that was added to the filter. To revert a filter card to its default values, click  .",
            "code": [],
            "preview": "Dashboard filters refine data across some or all of the charts in a dashboard.\nThey allow you to view a common subset of data across the dashboard's\ncharts.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/manage-dashboards/existing-dashboards",
            "title": "Manage Existing Dashboards",
            "headings": [
                "Viewer Actions",
                "Duplicate a Dashboard",
                "Refresh Dashboard Data",
                "Enter Fullscreen Charts View",
                "Author Actions",
                "Add a Chart",
                "Edit a Chart",
                "Remove a Chart",
                "Duplicate a Chart",
                "Move a Chart to a Different Dashboard",
                "Resize a Chart",
                "Reposition Charts",
                "Rename a Dashboard and Edit its Description",
                "Owner Actions",
                "Delete a Dashboard",
                "Modify Dashboard Permissions"
            ],
            "paragraphs": "This page outlines various methods for modifying existing\n dashboards . The sections on this page outline the\nrequired  permissions  to perform the\nactions. To begin modifying a dashboard, enter the  dashboard view  by\nclicking the desired dashboard from the  Dashboards  page. You can search for dashboards by title by using the search bar\nin the top-right of the page. The following action can be performed by any user with at least\n Viewer   permissions  on the target\ndashboard, meaning any level of dashboard access is sufficient. You can duplicate any dashboard in your Dashboards page,\neven if you do not have editing permissions. You can duplicate a dashboard from the  Dashboards  page or\nfrom the dashboard itself. To duplicate a dashboard: If you are on the  Dashboards  page, click the ellipsis\n( ) for the dashboard you want to duplicate. If you are on a dashboard, click the ellipsis\n( ) in the top right corner. Select  Duplicate \nfrom the pop-up menu. In the  Dashboard Details  dialog, update the\n Title  and  Description  fields. Click  Save  to save\nthe duplicated dashboard. The user who duplicates a dashboard becomes the owner and only\nuser of the newly duplicated dashboard. To grant other users access,\nupdate the dashboard's  permissions . Atlas Charts  automatically refreshes chart data once it becomes out of\ndate with the backing data source. You can also manually refresh\ndashboard data at any time. To learn more, see  Refresh Dashboard Data . Atlas Charts  provides a fullscreen view for charts. In this view,  Atlas Charts \nhides the main navigation bar and expands the selected chart in\nthe entire space of the screen. To enter the fullscreen view for charts: To view another chart in the fullscreen view for charts, do one of the\nfollowing tasks: To automatically cycle through the charts, click the play icon ( ) at the\ntop-right of the chart. To stop, click the pause icon ( ). To exit the fullscreen view for charts, click the contracting box ( ) at the top-right of the dashboard. Select a dashboard from\nthe  Dashboards  page. Hover over the chart you wish to expand and click the expanding box ( )\nat the top-right of the chart. Click the arrows to the right and left of the chart or the arrow keys on your keyboard. Click the dots at the bottom of the chart. The following actions require either the  Author  or  Owner \n permission  on the target dashboard. To add a chart to your dashboard, click the  Add Chart \nbutton at the top-right of your dashboard. For detailed instructions on\ncreating charts, see  Build Charts . To edit a chart, hover over the desired chart and click the\n Edit  button. To learn how to edit a chart's data source, see\n Edit a Chart's Data Source . To learn how to set the data source for a new\nchart, see  Build Charts . To remove a chart from your dashboard, hover over the desired chart\nand click the ellipsis ( ) at the top-right of the\nchart. Select    Delete , then click the\n Delete  button in the dialog to confirm the chart\ndeletion. Removing a chart from a dashboard is a permanent operation. There\nis no way to recover a chart once it has been deleted, although\nthe underlying data in the collection the chart was created\nfrom will continue to exist. To quickly build multiple related charts without starting from scratch\neach time, you can duplicate any chart on a dashboard. To duplicate a chart: Hover over the chart you wish to duplicate and click\nthe ellipsis ( ) at the top-right of the chart. Select\n Duplicate . Make any desired changes, then click the green\n Save and Close  button to save the new chart. This saves\nthe chart on the same dashboard as the original copy. To move a chart to a different dashboard: Charts  reloads the current dashboard and the target chart is no\nlonger present. This action requires the  author  or  owner   role  role on both the origin and destination\ndashboards. Navigate to the dashboard that\ncontains the chart you want to move. Hover over the chart you wish to move and click the ellipsis ( )\nat the top-right of the chart. Click\n Move to . In the  Move to  dialog, use the dropdown to select the\ntarget dashboard for the chart. Click\n Move Chart . To resize a chart, hover over the chart and drag the bottom-right\ncorner until the appearing blue rectangle reaches the desired size. To rearrange charts in your dashboard, hover over the chart and drag\nthe top-left corner until the appearing blue rectangle is in the\ndesired location. You can also see how moving the chart will affect the\nposition of other charts in your dashboard, as illustrated in the\nfollowing example: You can rename a dashboard and edit its description either from the\n Dashboards page , which shows an overview of all\nyour dashboards, or from within an individual dashboard. To rename a dashboard from the Dashboards page: To rename a dashboard from within that dashboard: Click the ellipsis ( ) in the upper right corner\nof the dashboard you would like to rename. Select  Edit Title and Description \nfrom the pop-up menu. In the  Dashboard Details  dialog, update the\n Title  and  Description  of your dashboard. Click  Update \nto save your changes. In the upper left corner of the desired dashboard view, hover over\nthe dashboard title or description and click the\n pencil icon . In the  Dashboard Details  dialog, update the\n Title  and  Description  of your dashboard. Click\n Update  to save your changes. The following actions require  Owner   permission  on the target dashboard. You can delete a dashboard from the  Dashboards  page or\nfrom the dashboard itself. To delete a dashboard: Deleting a dashboard is a permanent operation. There is no way to\nrecover a dashboard once it has been deleted, although the\nunderlying data in the collections used in the dashboard will\ncontinue to exist. If you are on the  Dashboards  page, click the ellipsis\n( ) at the top right of the dashboard you wish to delete. If you are viewing a dashboard, click the ellipsis ( ) in the top right of the page. Click  \n Delete . Click  Delete  in the  Delete  dialog\nto confirm deletion. A dashboard  Owner  can modify which users can access the dashboard\nand their respective permission levels. For more information, refer to\nthe  Dashboard Permissions  page.",
            "code": [],
            "preview": "This page outlines various methods for modifying existing\ndashboards. The sections on this page outline the\nrequired permissions to perform the\nactions.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/view-dashboard-data/interact-with-charts",
            "title": "Interact with Charts on a Dashboard",
            "headings": [
                "Interactive Filtering",
                "Filter a Dashboard by a Chart Element",
                "Remove an Interactive Filter",
                "Click to Emphasize Series",
                "Emphasize a Single Series",
                "Emphasize Multiple Data Series",
                "Emphasize All Data Series",
                "Zoom and Pan a Scatter Chart",
                "Zoom",
                "Pan",
                "View the Percentage of the Whole",
                "Show Data for an Item",
                "Interact with Data in the Table View",
                "Interact with Data in the JSON View",
                "Copy and Save a Chart as an Image",
                "Copy",
                "Save"
            ],
            "paragraphs": "On a dashboard, you can interact with a chart that has\n Filter or highlight  enabled to filter data\nin other charts. With  Filter or highlight  enabled, clicking a chart element\nwith an associated   dashboard filter \ntemporarily reconfigures the scope of that dashboard filter to a single\nchart series, category or field value. Interactive filtering is useful for getting quick insights into\nsubcategories of your data on dashboards with multiple charts.\nInteractive filtering is temporary; you can revert to your original\ndashboard filter at any time. To enable  Filter or highlight : The chart upon which you set an interactive filter is highlighted,\n not  filtered. It  emphasizes  the element for\nwhich your other charts are filtered. You can\n clear the selection  from that\nhighlighted chart. A highlighted chart displays a status icon in the bottom left corner. Filtered charts display the   icon. You can apply an interactive filter to all chart types  except : Hover over the chart on the dashboard to reveal four buttons in the\nupper right corner of the chart. Click the second button for  Interactive Filters . Select  Filter or highlight  from the dropdown. By default, charts set  Interactive Filters  to\n Filter or highlight . Setting a chart's  Interactive Filters  to\n Filter  reflects dashboard filters\nand temporary interactive filters. That chart cannot be highlighted\nto set interactive filters on other charts. Setting a chart's  Interactive Filters  to\n Ignore  ignores any dashboard or interactive filters. On the  Atlas Charts   Sample Dashboard , movie\nstatistics are displayed across a range of chart types. If you create a dashboard filter for  rated , the content rating\nof a movie (e.g. G, PG-13, R), you can click a specific movie rating\non any one of your charts to temporarily reconfigure the scope of\nyour dashboard filter to that specific movie rating. If you click on the PG-13 rating section of the\n Movie Ratings  donut chart, the rest of the charts on\nyour dashboard update to display only data for PG-13 movies. When\nyou  clear the selection  of the\nPG-13 rating, your dashboard reverts to displaying charts according\nto the  rated  dashboard filter. Number Charts Gauge Charts Top Item Charts Geospatial Scatter Charts Geospatial Heatmaps To interactively filter a dashboard based on a chart element, you must\nfirst create a dashboard filter for the field that you want to filter\nby. To filter a dashboard by a chart element, you can click on: When you hover over a chart element with an associated dashboard\nfilter, your cursor displays the   icon. If a chart element isn't filterable, your cursor displays the\n  icon. You might be able to add a dashboard\nfilter for that value's field to make that element filterable. When you filter a dashboard by a chart element,  Charts  disables\nall other dashboard filters until you clear the selection. To filter the  Sample Dashboard  to only\nEnglish movies, you must have a dashboard filter on the  language \nfield. a legend entry a chart category, such as an X or Y series label a chart mark, such as a bar segment or line chart node If the dashboard filter card associated with a clicked element is\ndisabled,  Charts  enables it temporarily until you\n clear the selection  of that\nelement. You can remove an interactive dashboard filter by: Clicking the whitespace on the highlighted chart upon which you set\nthe interactive filter, or Changing the associated dashboard filter. Chart viewers can interact with a chart to highlight one or more series\nin a multi-series chart. This behavior applies to any chart type that\ndisplays a discrete color legend, except for geospatial charts. The\nfollowing chart types support emphasizing specific series: Grouped and Stacked Bar/Column charts Discrete and Continuous Line/Area charts Scatter charts Donut charts When you click a label in the chart legend at the top right,\n Charts  emphasizes the selected data series by reducing the\nopacity of all the other data series. To emphasize multiple data series at once,  shift-click  as many\nlabels in the legend as you would like. Charts adjusts the opacity of\nthe selected data series from de-emphasized to emphasized. To restore the opacity of all data series to the default emphasized\nstate, click the chart background. Chart viewers can zoom and pan a non-geospatial  scatter chart . To zoom in or out of the chart, scroll up or down.  Charts \nautomatically adjusts the axis bounds to change the viewport, while\nkeeping the plotted points the same size. The resulting view after zooming and panning is only visible to you and\ndoes not persist page reloads. To revert back to the original axis\nbounds, reload the chart page. To pan the chart, click and drag over the chart surface. Chart viewers can hover on each data point to view the value as a\npercentage of the whole. The part to whole relationship appears in the\ntooltip for the data point. This behavior applies to any chart type\nthat displays a part of the whole relationship, specifically: For stacked charts, the whole value is the total value of the\ncurrent category. For donut charts, the whole value is the total\nvalue of the entire chart. 100% Stacked Bar Charts 100% Stacked Column Charts 100% Stacked Area Charts Donut Charts Chart viewers with Author or Owner  data source permissions  can view the original data that contributed to a\nchart element. Chart viewers can show data for the following chart elements: To view the original data that contributed to a chart element,\nright-click on the chart element and select\n View data at point  from the context menu. You can\nswitch between the  Table  view and  JSON  view. Bar or mark on a chart plot area Chart legend entry Category axis label Table row Choropleth shape Some charts ( Geospatial Scatter Chart ,  Gauge Chart , and  Top Item Chart ) do not support this functionality. Chart viewers with Author or Owner  data source permissions  can resize and swap columns in the table view.\nChanges do not persist. Each column has a maximum width. The dialog for the  Table  view displays a maximum of\n1,000 rows. Chart viewers with Author or Owner  data source permissions  can expand or collapse sections of the  JSON (Javascript Object Notation) \ndocument. The dialog for the  JSON  view displays a maximum of\n100 documents only. Chart viewers can copy and save a chart as an image. The image file\nincludes the chart contents, including the title of the chart. To copy a chart to your clipboard as an image, right-click on the chart\nand select  Copy chart as image  from the context menu. You\ncan copy any chart type except tables. The copy feature is not available on Firefox. To save a chart as a  PNG (Portable Network Graphic)  file, right-click on the chart and select\n Save as PNG  from the context menu.",
            "code": [],
            "preview": "On a dashboard, you can interact with a chart that has\nFilter or highlight enabled to filter data\nin other charts.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/grouped-column-items-sold",
            "title": "Grouped Column Chart Showing Most Common Items Sold by Store Location",
            "headings": [
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "Select the sample_supplies.sales data source.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 5 minutes By visualizing which items are sold most commonly at each store, you\ncan help ensure each store is properly stocked with the items they\nare most likely to sell out of. A grouped\n column chart  creates a group within the\nchart for each store location and display columns within each group\nreflecting the relative sales of each item. In the  Select Data Source  modal that appears: Click the  Project  tab. Click the name of the deployment that contains the sample data\nsource. Click the  sample_supplies  database.\nThe database's data sources appear. Click  Select  on the  sales  data source. In the  Chart Type  dropdown, select\n Column . Click  Grouped  below the dropdown. Your chart should now look something like this: The item sales look to be fairly evenly distributed by store\nlocation. Notice based on this chart that  notepads  are\nthe most common item sold at all store locations, which is\nuseful information when stocking each store with its\ninventory. Drag the  storeLocation  field to the  X Axis \nencoding channel. The  X Axis  encoding channel\ndictates which field to use when creating the column groups. Using  storeLocation  for this encoding channel allows us\nto visualize a group of items per store location. In the  Fields  section click the  items  field to\nexpand the  items  object and view its properties. Drag the  items.name  field to the  Y Axis \nencoding channel. The  Y Axis  encoding channel\ndetermines which field to use for the chart's\n aggregation . Using  items.name  for this encoding channel allows us to\naggregate and count the items sold in each location. In the  Array Reductions  dropdown, select\n Unwind array . In the  Aggregate  dropdown, select  count . The  count  option counts the occurrences of each\nitem name after unwinding the  items  array and displays\nthem in the chart grouped by store location. For more information on the  $count  aggregation command,\nrefer to the\n count aggregation documentation . Drag the  items.name  field to the  Series  encoding\nchannel. The  Series  encoding channel dictates how to\nsplit each group of the chart. Each member of the series\nbecomes a column within the group, so each item name becomes a\ncolumn within the store location group. In the  Series Array Reductions  dropdown, select\n Unwind array . Hover over your chart title and click the\npencil icon. Copy the following into the title input: Click the check mark to save your title. Your dashboard should now look something like this: Now that we have a few charts the dashboard is starting to get a bit\ncrowded. Follow along to the next section of the tutorial to see how we\ncan  rearrange and resize  the\ncharts to make the dashboard easier to digest.",
            "code": [
                {
                    "lang": "none",
                    "value": "Most Common Items Sold by Store Location"
                }
            ],
            "preview": "Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/manage-dashboards/billing-dashboards",
            "title": "Create and Manage Billing Dashboards",
            "headings": [
                "Billing Dashboards",
                "Required Access",
                "Limitations",
                "Create a Billing Dashboard",
                "In the left navigation menu, click Ingestions.",
                "In the Atlas Billing card, click Add configuration.",
                "Configure the Atlas Billing Ingestion.",
                "Click Save.",
                "In the Atlas Billing card, click Add and Open.",
                "Manage Atlas Billing Ingestions",
                "Edit an Ingestion",
                "In the left navigation menu, click Ingestions.",
                "In the Atlas Billing card, click the Ellipses (...), and then click Edit Configuration.",
                "Reconfigure your data ingestion information.",
                "Click Save.",
                "Delete an Ingestion",
                "In the left navigation menu, click Ingestions.",
                "In the Atlas Billing card, click the Ellipses (...), and then click Delete Configuration.",
                "Click Delete to confirm your selection."
            ],
            "paragraphs": "You can visualize your  Atlas  billing data in  Atlas Charts  by\ncreating a billing dashboard. Billing dashboards are\n dashboards  with prebuilt charts that\nhelp you monitor your  Atlas  usage. After you ingest your\nbilling data, you can add a billing dashboard and customize\nit to suit your specific billing needs. To learn more about how  Atlas  bills your deployments,\nsee  Manage Billing . Billing dashboards provide metrics and detailed charts about the\nusage in your organization across different categories\nand periods of time. The insights from your dashboard\ncan help you optimize your  Atlas  spending. By default, billing dashboards include the following metrics\nand charts: Total spending across your organization Biggest spenders in your organization Total spending by instance size, project, cluster, product category, or SKU Total cost by product category To create a billing dashboard, you must have at least\n Project Data Access Read/Write  permissions. At any given time, billing dashboards use\nthe last twelve months of your organization's billing data. If you change an existing invoice,  Atlas  updates the\nbilling data in your ingestion only if you've incurred\nthe invoice within the last three months. Any invoice changes\nreflect in your dashboard after the next scheduled ingestion. To ingest your billing data and add a billing dashboard: The  New Configuration  dialog box displays. Enter your  Organization public API key  and  Organization private API key . Your key pair must have at least  Organization Billing Admin \nand  Organization Billing Viewer  access. To learn how to create and view an API key for your organization,\nsee  Grant Programmatic Access to Atlas . From the dropdown, select the  Target deployment  to\nstore your billing data. (Optional) Change the  Database name . Charts  uses the  Invoices API \nto ingest the last twelve months of your organization's billing\ndata into the specified deployment and database. After you create\nthe initial ingestion,  Atlas  ingests billing data daily. Charts  generates the billing dashboard and saves it to\nthe  Dashboards  page. All dashboard and chart\nfeatures, such as  dashboard filters \nand  interactive filtering , apply to\nbilling dashboards and its prebuilt charts. To edit an existing billing ingestion: To delete an existing billing ingestion:",
            "code": [],
            "preview": "You can visualize your Atlas billing data in Atlas Charts by\ncreating a billing dashboard. Billing dashboards are\ndashboards with prebuilt charts that\nhelp you monitor your Atlas usage. After you ingest your\nbilling data, you can add a billing dashboard and customize\nit to suit your specific billing needs.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/area-chart-age-distribution",
            "title": "Area Chart Showing Age Distribution of Customers",
            "headings": [
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "Select the sample_supplies.sales data source.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Wrapping Up"
            ],
            "paragraphs": "Time to Complete: 5 minutes In the final chart of the dashboard, highlight some of\nthe customer analytic information available in the schema using an\n area chart . By visualizing the age range\nand distribution of store customers, you can ensure that any advertising\nthe store performs is directed where it will be seen by the most\npotential buyers. In the  Select Data Source  modal that appears: Click the  Project  tab. Click the name of the deployment that contains the sample data\nsource. Click the  sample_supplies  database.\nThe database's data sources appear. Click  Select  on the  sales  data source. In the  Chart Type  dropdown, select\n Area . Click  Discrete  below the dropdown. An area chart is a good choice to easily visualize the ages where\ncustomers are the most concentrated. Since you are not concerned\nwith exact values in this scenario but rather general trends, an\narea chart makes more sense than a line chart because the filled-in\nvisualization allows us to more easily identify the most common age\nranges. We use a discrete area chart, rather than continuous,\nbecause we are ultimately looking for a count of the customers in\neach particular age bracket determined by the chart's\n bin size . Discrete charts allow us\nto perform aggregation operations on the data, whereas in a\ncontinuous chart each data point must come from a distinct\ndocument. Your chart should now look something like this: Customers appear to be mostly between the\nages  40-45 . This is where the largest area region in the\nchart occurs. Additionally, the rest of the ages appear to be\n normally distributed ,\nmeaning the average customer age is at the center of the area chart\nand there are the same number of younger and older customers. You can\nuse this information to direct advertising where the largest\ncustomer age group is most likely to see company advertisements. In the  Fields  section click the  customer  field to\nexpand the  customer  object and view its properties. Drag the  customer.age  field to the  X Axis \nencoding channel. The  X Axis  encoding channel\ndictates which field to display on the horizontal axis. Set the  Bin Size  to  5 . Binning data groups continuous data into bins of a\nspecified size. In this case, rather than plotting\npoints for each individual age in the dataset, the data\nis grouped into bins of  5  ages. This\nprovides a clearer look into the overall trend of\nthe age distribution. For more information on data binning, see the\n Data Binning  section. Drag the  _id  field to the  Y Axis \nencoding channel. The  Y Axis  encoding channel\ndetermines which field to use for the chart's\n aggregation . Because we will be performing a  $count  aggregation on the\ndocuments, it does not matter what field we use for this\nencoding channel because the chosen field does not affect the\nnumber of documents in each bin. In the  Y Axis Aggregate  dropdown, select\n count . This option counts the occurrence of each\ncustomer age from each sale and adds it to the visualization\nafter placing it in the appropriate bin. Hover over your chart title and click the\npencil icon. Copy the following into the title input: Click the check mark to save your title. After adding the last chart to your dashboard and performing\nsome final reorganizing, the finished dashboard should look\nsomething like this: You now have an effective orders dashboard which provides easily\naccessible insight into revenue data, sales details, and customer\nanalytics. However, with the information you have available in your\ndataset, there are several ways in which you might be able to\nadd additional charts and extend the dashboard even further. You may\nwant to depict: Try adding some of these additional charts to the dashboard and see\nwhat other interesting correlations between variables you can discover. Average customer satisfaction by store location The amount of money that customers in various age groups typically\nspend on a purchase Which items are most commonly bought in bulk, utilizing the\n items.quantity  field",
            "code": [
                {
                    "lang": "none",
                    "value": "Distribution of Customer Ages"
                }
            ],
            "preview": "Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/donut-chart-item-tags",
            "title": "Donut Chart Showing Most Common Tags for Items Sold",
            "headings": [
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "Select the sample_supplies.sales data source.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Copy the following filter into the Query input above the main chart display.",
                "Click Apply to the right of the filter.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 5 minutes Next we will add a chart where you can quickly see which types of items\nthe company is selling the most of. This information will be helpful\nfor the company marketing team to know how effectively direct\nadvertising. In this scenario, your manager has expressed interest specifically\nin items sold from the  Denver  and  New York  store locations.\nAdditionally, they have requested to only visualize sales which\ncontain an item costing  $1200  or more, in an effort to more closely\nexamine the new line of laptops being sold at these locations and what\ntypes of items are being bought with them. You can accomplish this\nusing a  filter  in your\n donut chart , as shown in the following\nprocedure. In the  Select Data Source  modal that appears: Click the  Project  tab. Click the name of the deployment that contains the sample data\nsource. Click the  sample_supplies  database.\nThe database's data sources appear. Click  Select  on the  sales  data source. In the  Chart Type  dropdown, select\n Circular . Click  Donut  below the dropdown. A donut chart is a good choice for this chart because donut charts\nshow the relationship of parts to a whole. Using this chart type you\ncan easily get an idea of which tags make up the greatest portion of\ntotal sales. Your chart should now look something like this: In the  Fields  section click the  items  field to\nexpand the  items  object and view its properties. Drag the  items.tags  field to the  Label \nencoding channel. The  Label  encoding channel\ndictates which field to use when dividing the sections of the\nchart. In the  array reduction  dropdown for the\n items  array select  Unwind array . In the  array reduction  dropdowns for the\n tags  select  Array element by index . Using this\noption you can specify which element of the  tags  array to\nvisualize. Enter  0  for the  Index  input to only visualize the\nfirst element of the  tags  array. The first item tag is the\nmost relevant tag to the item, so it should be the main concern\nin the visualiztion. This is the  primary  item tag. Selecting an array element by index also ensures the chart\ndoes not get overcrowded with less important tags as it would\nhad you chosen to unwind the  tags  array rather than select\na specific element. Drag the  id  field to the  Arc \nencoding channel. In the  Aggregate  dropdown, select  count .\nThis option counts the occurrences of the first tag of each item\nand adds them to the chart. This  filter  specifies that\n Charts  only visualizes item tags from items sold from either\nthe  Denver  or  New York  store location where there was an\nitem in the sale costing  $1200  or more. Your chart should now look something like this: Notice how the  electronics  tag now takes a larger slice of the\ndistribution compared to when not using the filter. Based on this\nchart, notice that  office  and  school  are the two most common\nprimary item tags from sales matching the filter. Hover over your chart title and click the\npencil icon. Copy the following into the chart title input: Click the check mark to save your title. Your dashboard should now look something like this: Now that we have a chart showing the tags of the items sold, it would\nbe helpful to know which specific items are most commonly sold at the\nvarious store locations. To do so, refer to the next section to see how\nto implement a  grouped column chart \nshowing the most common items sold by store location.",
            "code": [
                {
                    "lang": "json",
                    "value": "{ storeLocation: { $in: [ \"Denver\", \"New York\" ] }, 'items.price': {$gte: 1200} }"
                },
                {
                    "lang": "none",
                    "value": "Frequency of Item Tags from Sales in Denver and New York with Price Threshold"
                }
            ],
            "preview": "Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/dashboard-access/dashboard-ownership",
            "title": "Dashboard Ownership",
            "headings": [
                "Prerequisites",
                "View Dashboard Owners",
                "Click Charts in the navigation bar to navigate to Atlas Charts.",
                "Click Owners under Dashboards in the sidebar.",
                "Add a Dashboard Owner",
                "Navigate to view dashboard owners.",
                "Click the pencil icon  for the dashboard you want to add an owner to.",
                "Type the email of the person you want to make an owner of the dashboard.",
                "Click Save.",
                "Remove a Dashboard Owner",
                "Navigate to view dashboard owners.",
                "Click the pencil icon  for the dashboard you want to remove an owner from.",
                "Click the x next to the person's email that you want to remove.",
                "Click Save."
            ],
            "paragraphs": "You can  view ,  add , or  remove \ndashboard owners to any dashboard in your project. You must have the  Project Owner  role. To view the owners of any dashboard in your project: Atlas Charts  displays a table with the following columns: You can sort this table by the  Dashboard title  column.\nIf a dashboard owner omits the  Dashboard title ,\n Atlas Charts  sorts by the  Dashboard ID . Column Name Description Dashboard title Title of the dashboard. Dashboard ID ID  of the dashboard. Dashboard owners Email associated with each dashboard owner. If an existing dashboard owner was the only owner, and\nno longer has access to the project anymore, the\n Dashboard owners  column will say  No owners . To add a dashboard owner to a dashboard in your project: This person must have at least  Viewer   permissions  on the dashboard. To remove a dashboard owner from a dashboard in your project: There must be at least one dashboard owner.",
            "code": [],
            "preview": "You can view, add, or remove\ndashboard owners to any dashboard in your project.",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/create-new-dashboard",
            "title": "Create a New Dashboard",
            "headings": [
                "Instructions",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 3 minutes Now that you have created your data source, create a dashboard to hold\nall of your visualizations: After clicking create,  Charts  navigates you to your newly\ncreated dashboard and prompts you to add your first chart. In  Atlas Charts , click  Dashboards  in the sidebar. Click the  New Dashboard  button. Copy the following into the  Title  input: Copy the following into the  Description  input: Click  Create . The following sections of the tutorial walk through\n building each chart  for your dashboard. You\nwill be populating the dashboard with the following visualizations: To create each chart, you will populate the chart's\n encoding channels  with fields from your\nschema. Encoding channels represent the information passed to\n Atlas Charts  which allows  Charts  to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\n encoding channels section  of the\ndocumentation. Follow along to the next section of the tutorial to build a\n column chart  showing total sales by\nstore location. A  column chart  for total sales by\nstore location A  donut chart  showing the frequencies\nof tags occurring in each item sold A  grouped column chart  showing the\nmost common items sold in each store location An  area chart  showing a distribution\nof customer ages",
            "code": [
                {
                    "lang": "none",
                    "value": "Super Supply Store Orders"
                },
                {
                    "lang": "none",
                    "value": "Sales, Customer Analytics, and More."
                }
            ],
            "preview": "Time to Complete: 3 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/rearrange-resize",
            "title": "Rearrange and Resize Charts",
            "headings": [
                "Instructions",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 2 minutes The dashboard is starting to get crowded at the top row with plenty of\nempty space below. You can make the display easier to digest by\nrearranging and resizing some of the charts.  Charts  makes this\na straight-forward process by providing simple drag and drop\ncapabilities for reorganizing a dashboard. You can rearrange charts by dragging the top-left corner of the chart,\nand resize charts by dragging the bottom-right corner. For additional\ndetails on rearranging and resizing charts, see the\n Manage Existing Dashboards  section. Try reorganizing your dashboard to get something like this: In the last chart of the dashboard, we will explore some of the\ncustomer data available in the schema to create an\n area chart  showing the age distribution\nof customers.",
            "code": [],
            "preview": "Time to Complete: 2 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/column-chart-sales-by-store",
            "title": "Column Chart Showing Total Sales by Store Location",
            "headings": [
                "Construct the Chart",
                "Click Add Chart.",
                "Select the sample_supplies.sales data source.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top right of the chart builder view.",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 5 minutes Looking at the data fields available in the schema, some of the most\nvaluable information you can relay revolves around revenue. You may\nwant to know how various stores are performing, specifically if there\nare any stores significantly under or overperforming compared to\nothers. A  column chart  works well for this type of\nvisualization because you can easily compare individual store revenue\nbased on the size of each column. In the  Select Data Source  modal that appears: Click the  Project  tab. Click the name of the deployment that contains the sample data\nsource. Click the  sample_supplies  database.\nThe database's data sources appear. Click  Select  on the  sales  data source. In the  Chart Type  dropdown, select\n Stacked Column . To render a  stacked column  chart,\n Atlas Charts  creates a bar or column for each distinct value in the\n category   encoding channel \nfield. Drag the  storeLocation  property from the  Fields \nsection of the Chart Builder view to the  X Axis \nencoding channel. This tells  Atlas Charts  to create a column for each  storeLocation  value in the dataset. Atlas Charts  infers the data type of each field and\nprovides symbols to easily determine these data types when\nbuilding your chart. These symbols can help ensure your chart renders as\nexpected by using proper data types for each\n encoding channel .\nFor example, the calendar icon next to\nthe  saleDate  field signifies that this field is a\ntimestamp. In the  Fields  section click the  items  field to\nexpand the  items  object and view its properties. Drag the  items.price  field to the  Y Axis \nencoding channel. This tells  Atlas Charts  to use the  items.price  field\nfor the chart's  aggregation . In the  items  dropdown below  Array Reductions , select\n Unwind array . Array reductions dictate how to process an array so\nits elements can be visualized.\nThe  unwind array \noption creates a new document for each element in the array,\nso each item's price is added to the total for that store. In the  Aggregate  dropdown, select  sum . The  $sum aggregation operator \nadds the prices of all items per store together to\ndisplay the chart. Hover over your chart title above the center of the chart and\nclick the pencil icon. Copy the following into the chart title input: Click the check mark to save your title. Your chart should now look something like this: Notice that the stores generating the most revenue are the\n Denver  and  Seattle  locations. You will be navigated back to your  Super Supply Store\nOrders  dashboard and it should look something like this: Now that we have a visualization showing a high-level overview of store\nrevenue, one might wonder which type of item each store is selling the\nmost of. The following section of the tutorial illustrates how to build\na  donut chart  to analyze the tag names\nof items being sold.",
            "code": [
                {
                    "lang": "none",
                    "value": "Total Sales ($) by Store Location"
                }
            ],
            "preview": "Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/arrange-charts",
            "title": "Arrange the Charts on the Dashboard",
            "headings": [
                "Wrapping Up"
            ],
            "paragraphs": "Estimated Time to Complete: 2 minutes Now that you have two charts on your dashboard, you can arrange them\nfor maximum legibility. These two charts are horizontally oriented,\nso you may wish to make them wider and stack them one above the other.\nYou can change the shape of each chart by clicking and dragging on the\nlower right corner of the chart, and you can move them around the page\nby clicking and dragging on the upper left corner of the chart. Your finished dashboard should look similar to this: Manage Existing Dashboards You now have a dashboard which provides easily accessible insight into\naward winning directors and award nominated films. Try adding additional\ncharts to the dashboard and see what other interesting insights you can\ndiscover.",
            "code": [],
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "dashboards/dashboard-access/dashboard-permissions",
            "title": "Dashboard Permissions and Sharing",
            "headings": [
                "View Dashboard Permissions",
                "Modify Dashboard Permissions",
                "Specific User Permissions",
                "Access for All Users in a Project",
                "Access for All Users in an Organization",
                "Access for Users with a Link to the Dashboard"
            ],
            "paragraphs": "Dashboard permissions dictate which  Atlas Charts  users have access to the\ndashboard and the actions they can perform on the dashboard. The\nfollowing dashboard permissions are available: To view a chart on a dashboard, the user must have both: Permission Description Viewer Can perform the following actions: Open a dashboard and view charts that are backed by a data\nsource the user has permission to view. If the user doesn't\nhave the appropriate  project role  on a chart's\nbacking data source, the dashboard doesn't render the chart. Viewers  cannot make any modifications to the dashboard. Open a dashboard and view charts that have been shared with\nthe user's  Atlas  organization. To learn more about sharing\ndashboards with an entire organization, see\n Access for All Users in an Organization . Filter dashboards based on available fields. Configure refresh settings and manually refresh dashboard\ndata. Refresh settings are stored in the local browser state. These\nsettings are not persisted with the dashboard or shared between users. Author Has all privileges of  Viewer  and can also: Add, modify, and delete charts, Add ,\n edit ,\nand  delete  dashboard filters, Specify which fields can be used for\n Unauthenticated embedded chart filters , Change dashboard layout, Rename the dashboard. Owner Has all privileges of  Author  and can also: The creator of the dashboard automatically has the\n Owner  permission. The creator cannot be removed from the\nlist of dashboard users and their  Owner  permission cannot be\nmodified. Manage permissions  on the\ndashboard Delete the dashboard . A  project role \nthat grants access to the data source. To learn more about granting\naccess, see  Modify Role Permissions for Data Sources . Any role on the dashboard, or access to an  Atlas  organization's\ndashboard through\n organization-wide sharing . You can have no permissions on a dashboard. That dashboard won't\nappear on your  dashboards page . Newly-created\ndashboards aren't shared by default. Only the dashboard  Owner \ncan view the dashboard until they grant access to more users. To view permissions for a specific dashboard, hover over the icon\nnext to the dashboard's  Share  button. A tooltip appears\ndescribing what permission you have on the dashboard, who the owner\nof the dashboard is, and who else has access to the dashboard. The following table lists the possible icons and their associated\npermissions: Icon Description   Eye Icon You have  Viewer  permission.   Group Icon You have either  Author  or  Owner  permission and\n additional users  or\n Everyone in this project \nhave some level of access to the dashboard.   Office Icon You have either  Author  or  Owner  permission and  Everyone in this organization \nhas  Viewer  permission.   Globe Icon Everyone with the link  has  Viewer  permission.   Lock Icon You have  Owner  permission and no other user has access. If  Anyone with this link can view \nsharing is enabled and you have  Author  or  Owner  permission,\nthe icon doesn't change. To modify dashboard permissions, either click the click the\n permission icon  at the top-right of\nthe dashboard from the  Dashboards  page: Or click the  Share  button at the top-right of the\ndashboard within the specific dashboard view: With the  Share Dashboard  dialog open, read the\nfollowing sections to learn how to grant permissions to a dashboard to: To modify a dashboard's  permissions , you\nmust have the  Owner  role on that dashboard. A specific user All users in your project All users in your organization Any user with your link To give specific users permissions on the dashboard: To remove permissions for a user, click the trash can icon to the right\nof the user's name. Select the  Project  tab. Search for the desired user using the search bar. You can search for\nusers by their username or email address. Click the desired user to add them to the permissions list. Use the dropdown to the right of the user's name to assign the\nappropriate  permission . Atlas Charts  displays a warning banner when the desired user can't\naccess one or more data sources used on the dashboard. The user\ncan't see any charts that use that data source. A  Project Owner  can assign the user\na  project role \nwith the access you want the user to have. To learn more about\ngranting access, see  Modify Role Permissions for Data Sources . Repeat these steps for each user you would like to provide dashboard\npermissions for. Click  Close .  Atlas Charts  saves your changes automatically. To allow access to the dashboard for all users in your  Atlas \nproject: Select the  Project  tab. Toggle the switch to the right of the  <Project name>  user to    On . Select the  permission  to apply to all\n Atlas Charts  users. A user's own permissions override others that could come from the\n Everyone in this project  setting. If  Everyone in this project  has the  Author  permission and\n Alice  has the  Viewer  permission,  Alice 's\neffective permission is  Viewer . Atlas Charts  displays a warning banner when\n Everyone in <Project Name>  can't access one or more\ndata sources used on the dashboard. A user might not see a chart\nthat uses a data source to which the user wasn't granted\naccess. A  Project Owner  can assign the user\na  project role \nwith the access you want the user to have. To learn more about\ngranting access, see  Modify Role Permissions for Data Sources . Click  Close .  Atlas Charts  saves your changes automatically. To allow access to the dashboard for all users in your  Atlas \norganization: You can view all dashboards shared with your organization on the\n Organization  page. To open the  Organization \npage, click  Organization  under the  Dashboards \nheading on the left navigation menu. Select the  Organization  tab. Toggle the  Can view this dashboard  switch to the right the  <Organization name>  user to    On . Atlas Charts  provides a link with which users in your organization can\nview the dashboard. Click  Close .  Atlas Charts  saves your changes automatically. If your organization uses a  SSO (Single Sign-On)  provider,\nMongoDB Cloud prompts users in your organization sign to in through your\nprovider to view the dashboard. Users who authenticate through your\norganization's SSO provider don't need an  Atlas  account. If you want to view a dashboard using a public link, enable\n Unauthenticated External Data Access \non each data source in the charts in the dashboard. To allow access to the dashboard for users on your  Atlas Charts \ndeployment who have a direct link: Select the  Public  tab. Toggle the  Can view this dashboard  switch to the right of the  Public  user to    On . Atlas Charts  generates a public link with which anyone can\nview the dashboard. A user's permissions don't affect their ability\nto view a chart using a public link. Atlas Charts  displays a warning banner when a\n Project Owner  hasn't enabled\n Unauthenticated External Data Access .\nUsers with the link won't be able to see the charts with the\nspecified data source. A  Project Owner  can change the settings to allow\nviewers of all  project roles  to access the data. To\nlearn more about granting access, see  Modify Role Permissions for Data Sources . Click  Close .  Atlas Charts  saves your changes automatically. Don't share links to dashboards that display sensitive data. You\ncan't verify who has access to the link.",
            "code": [],
            "preview": "Dashboard permissions dictate which Atlas Charts users have access to the\ndashboard and the actions they can perform on the dashboard. The\nfollowing dashboard permissions are available:",
            "tags": null,
            "facets": {
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/prerequisites-setup",
            "title": "Load the Sample Data",
            "headings": [
                "Prerequisites",
                "Load the Sample Data into Your Atlas Cluster",
                "Log in to Atlas.",
                "Navigate to your Atlas Database Deployments view.",
                "Load the sample dataset.",
                "View your sample data.",
                "Next Steps"
            ],
            "paragraphs": "Time to Complete: 8 minutes To complete this tutorial you will need a\n MongoDB Atlas  cluster. Refer\nto the  Create a Cluster  documentation\nfor instructions on creating an  Atlas  cluster. Atlas  provides sample data you can load into your  Atlas \ncluster. To load sample data into your cluster: Charts  automatically connects to the supply store collection as\na  data source . Log in to your  Atlas  account at  https://cloud.mongodb.com . Click  Database  in the sidebar. Atlas  begins loading your sample data. This operation takes\napproximately 5 minutes to complete. Click the  Ellipses (...)  button for your cluster. Click  Load Sample Dataset . To view your sample data, click  Browse Collections . The\nsample data set that now appears in your database deployment includes\nthe follow databases: For details on the collections and documents included in these\ndatasets, see  Available Sample Datasets . sample_airbnb sample_analytics sample_geospatial sample_guides sample_mflix sample_restaurants sample_supplies sample_training sample_weatherdata Now that you have loaded the sample data, you\ncan  Create a New Dashboard  which will\nuse this data source to create visualizations.",
            "code": [],
            "preview": "Time to Complete: 8 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/order-data/order-data-tutorial-overview",
            "title": "Visualizing Order Data",
            "headings": [
                "Introduction",
                "Table of Contents"
            ],
            "paragraphs": "Total Estimated Time to Complete: 20-30 minutes This tutorial explores features and capabilities of  Atlas Charts  with\na  data source  containing the  Supply Store \n sample data provided by Atlas .\nThis sample data contains sales order data from a mock office supply\ncompany. This tutorial demonstrates how to create a\n dashboard  containing charts of various types and\nhow to effectively use each chart's respective properties to obtain\npowerful visualizations. You will also learn how to use multi-series\ncharts to gain further insight into the data. After completing the tutorial, you will have a dashboard which looks\nsimilar to the following: To get started, move ahead to the\n Setup and Import the Data  page. Step 1:  Load the Sample Data Step 2:  Create a New Dashboard Step 3:  Column Chart Showing Total Sales by Store Location Step 4:  Donut Chart Showing Most Common Tags for Items Sold Step 5:  Grouped Column Chart Showing Most Common Items Sold by Store Location Step 6:  Rearrange and Resize Charts Step 7:  Area Chart Showing Age Distribution of Customers",
            "code": [],
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/movie-details-tutorial-overview",
            "title": "Visualizing Movie Details",
            "headings": [
                "Introduction",
                "Table of Contents"
            ],
            "paragraphs": "Total Estimated Time to Complete: 15-20 minutes This tutorial explores features and capabilities of  Atlas Charts  with\na  data source  containing the  Mflix \n sample data provided by Atlas .\nThis sample data contains information on movies such as release year,\ncast, and reviews. The following is a sample document from the dataset: With this tutorial, you will learn how to use filters to refine a large\nresult set down to an easily understandable chart, and use multi-series\ncharts to gain further insight into the data. In this tutorial, you'll create two charts: a sorted column\nchart and a scatter chart. The  sorted column chart \ndisplays columns representing the number\nof awards won by directors with at least 50 total awards,\nsorted from highest to lowest and broken down by film genre. The  scatter chart  shows\na diagram of movies with at least one\naward win along with their TomatoMeter rating\nand their  MPAA (Motion Picture Association of America)  rating\n(G, PG, PG-13, or R). To get started, move ahead to the\n Create a New Dashboard  page. Step 1:  Create a New Dashboard Step 2:  Column Chart Showing Directors with the Most Awards Step 3:  Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating Step 4:  Arrange the Charts on the Dashboard",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n  \"_id\": {\n    \"$oid\": \"573a1391f29313caabcd9637\"\n  },\n  \"plot\": \"The ancient vampire Count Dracula arrives in\n    England and begins to prey upon the virtuous young Mina.\",\n  \"genres\": [\n    \"Horror\"\n  ],\n  \"runtime\": {\n    \"$numberInt\": \"85\"\n  },\n  \"rated\": \"APPROVED\",\n  \"cast\": [\n    \"Bela Lugosi\",\n    \"Helen Chandler\",\n    \"David Manners\",\n    \"Dwight Frye\"\n  ],\n  \"num_mflix_comments\": {\n   \"$numberInt\": \"1\"\n  },\n  \"poster\": \"https://m.media-amazon.com/images/M/MV5BZDY2ODZhZWQtNDk0ZS00OGE4LWE4NjAtZjE5MTJhMjExMTRjXkEyXkFqcGdeQXVyNjc1NTYyMjg@._V1_SY1000_SX677_AL_.jpg\",\n  \"title\": \"Dracula\",\n  \"fullplot\": \"After a harrowing ride through the Carpathian mountains in eastern Europe,\n    Renfield enters castle Dracula to finalize the transferral of Carfax Abbey in London to\n    Count Dracula, who is in actuality a vampire. Renfield is drugged by the eerily hypnotic\n    count, and turned into one of his thralls, protecting him during his sea voyage to London.\n    After sucking the blood and turning the young Lucy Weston into a vampire, Dracula turns his\n    attention to her friend Mina Seward, daughter of Dr. Seward who then calls in a specialist,\n    Dr. Van Helsing, to diagnose the sudden deterioration of Mina's health. Van Helsing,\n    realizing that Dracula is indeed a vampire, tries to prepare Mina's fiance, John Harker,\n    and Dr. Seward for what is to come and the measures that will have to be taken to prevent\n    Mina from becoming one of the undead.\",\n  \"languages\": [\n   \"English\",\n   \"Hungarian\",\n   \"Latin\"\n  ],\n  \"released\": {\n   \"$date\": {\n     \"$numberLong\": \"-1226966400000\"\n   }\n  },\n  \"directors\": [\n   \"Tod Browning\"\n  ],\n  \"writers\": [\n   \"Bram Stoker (by)\",\n   \"Hamilton Deane (from the play adapted by)\",\n   \"John L. Balderston (from the play adapted by)\",\n   \"Garrett Fort (play)\"\n  ],\n  \"awards\": {\n   \"wins\": {\n     \"$numberInt\": \"2\"\n   },\n   \"nominations\": {\n     \"$numberInt\": \"1\"\n   },\n   \"text\": {\n     \"2 wins & 1 nomination.\"\n   }\n  },\n  \"lastupdated\": \"2015-08-28 00:30:04.660000000\",\n  \"year\": {\n   \"$numberInt\": \"1931\"\n  },\n  \"imdb\": {\n   \"rating\": {\n     \"$numberDouble\": \"7.6\"\n   },\n   \"votes\": {\n     \"$numberInt\": \"30184\"\n   },\n   \"id\": {\n     \"$numberInt\": \"21814\"\n   }\n  },\n  \"countries\": [\n   \"USA\"\n  ],\n  \"type\": \"movie\",\n  \"tomatoes\": {\n   \"viewer\": {\n     \"rating\": {\n       \"$numberDouble\": \"3.7\"\n     },\n     \"numReviews\": {\n       \"$numberInt\": \"44035\"\n     },\n     \"meter\": {\n       \"$numberInt\": \"82\"\n     }\n   },\n   \"dvd\": {\n     \"$date\": {\n       \"$numberLong\": \"998956800000\"\n     }\n   },\n   \"critic\": {\n     \"rating\": {\n       \"$numberDouble\": \"7.9\"\n     },\n     \"numReviews\": {\n       \"$numberInt\": \"45\"\n     },\n     \"meter\": {\n       \"$numberInt\": \"91\"\n     }\n   },\n   \"lastUpdated\": {\n     \"$date\": {\n       \"$numberLong\": \"1442516384000\"\n     }\n   },\n   \"consensus\": \"Bela Lugosi's timeless portrayal of Dracula in this creepy and\n     atmospheric 1931 film has set the standard for major vampiric roles since.\",\n   \"rotten\": {\n     \"$numberInt\": \"4\"\n   },\n   \"production\": \"Universal Pictures\",\n   \"fresh\": {\n     \"$numberInt\": \"41\"\n   }\n  }\n}"
                }
            ],
            "preview": "Total Estimated Time to Complete: 15-20 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/create-dashboard",
            "title": "Create a New Dashboard",
            "headings": [
                "Prerequisites",
                "Instructions",
                "Next Steps"
            ],
            "paragraphs": "Estimated Time to Complete: 2 minutes To complete this tutorial you will need a\n MongoDB Atlas  cluster. Refer\nto the  Create a Cluster  documentation\nfor instructions on creating an  Atlas  cluster. Create a  dashboard  to hold your visualizations: After clicking create,  Charts  navigates you to your newly\ncreated dashboard and prompts you to add your first chart. To navigate to  Atlas Charts , click  Charts  in the navigation bar. If the  Dashboards  page not already displayed, click\n Project  under  Dashboards  in the sidebar. Click  Add Dashboard . In the  Add Dashboard  dialog, copy the following into\nthe  Title  input: Copy the following into the  Description  input: Click  Create . Follow along to the next section of the tutorial to build a\n column chart  showing directors who won the most\nawards.",
            "code": [
                {
                    "lang": "none",
                    "value": "Movie Details"
                },
                {
                    "lang": "none",
                    "value": "Insights from the Sample Mflix dataset."
                }
            ],
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/scatter-chart-movies-ratings",
            "title": "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating",
            "headings": [
                "Construct the Chart",
                "Click Add Chart.",
                "Select the sample_mflix.movies data source.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Add a query filter.",
                "Differentiate the chart by MPAA rating.",
                "Title your chart.",
                "Next Steps"
            ],
            "paragraphs": "Estimated Time to Complete: 5 minutes Next, add a chart to your dashboard showing the TomatoMeter rating\nand  MPAA (Motion Picture Association of America)  rating\nof movies with the most award nominations. A\n scatter chart  is a good choice for\nvisualizing how data points cluster together around certain values and\nallows the representation of several different data dimensions. The  Add Chart  button is in the top right corner of the\ndashboard. In the  Select Data Source  modal that appears: Click the  Sample  tab. Click  Select  on the  Sample Data: Movies  data source. In the  Chart Type  dropdown, select\n Scatter . In the  Fields  section, click the  tomatoes  field to\nexpand the  tomatoes  object and view its properties. Click the  tomatoes.critic  field to also expand that object. Drag the  tomatoes.critic.rating  field to the  X Axis \n encoding channel . In the  Fields  section click the  awards  field to\nexpand the  awards  object and view its properties. Drag the  awards.nominations  field to the  Y Axis \nencoding channel. You can see now that higher-rated movies have a higher density of\nawards, but the chart is rather noisy. Add a query filter to only\ninclude movies with at least 30 award nominations and marginal MPAA ratings. In the  Filters  box, add the\nfollowing query filter and click the  Apply  button: In the  Fields  section, drag the  rated  field\nto the  Color   encoding channel . There are three options for adding more data to your chart. You\ncan use any of your data fields to modify the size, color, and\nshape of the markers on the grid. The  rated  field works well\nhere because it has low cardinality; there are only four possible\nvalues ( G ,  PG ,  PG-13 , and  R ). Fields with higher\ncardinality may make the chart too noisy to read. (Optional) In the  Fields  section, drag the  title \nfield to the  Tooltip Detail  encoding channel. You can\nnow hover over each marker on your chart to view the title of the\nmovie it represents. Hover over your chart title above the center of the chart and\nclick the pencil icon. Copy the following into the chart title input: Click the check mark to save your title. Your chart should now look like this: Click  Save and Close  to return to your\ndashboard. Follow along to the next section of the tutorial to see how we can\n rearrange the charts on the dashboard .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{\"awards.nominations\": {$gte: 30}, rated: {$in: [\"G\", \"PG\", \"PG-13\", \"R\"]}}"
                },
                {
                    "lang": "none",
                    "value": "Movies with Most Awards Nominations, by MPAA Rating"
                }
            ],
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/text-charts",
            "title": "Text Charts",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/column-chart-director-awards",
            "title": "Column Chart Showing Directors with the Most Awards",
            "headings": [
                "Construct the Chart",
                "Click Add Chart.",
                "Select the sample_mflix.movies data source.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Apply a limit to the X axis.",
                "Group awards by genre.",
                "Title your chart.",
                "Next Steps"
            ],
            "paragraphs": "Estimated Time to Complete: 5 minutes To create each chart, you will populate the chart's\n encoding channels  with fields from your\nschema.  Encoding channels  represent the\ninformation passed to  Atlas Charts  which allows  Charts  to create\nthe visualization. To discover which directors of films represented in this dataset have\nwon the most awards, use the  directors  and  awards.wins  database\nfields in your chart. The  genres  field provides additional\ninsight into the specific genres of the films for which these directors have won awards. A  column chart  makes it easy to\nsort and compare fields with numerical values, so it is a good choice\nfor this use case. In the  Select Data Source  modal that appears: Click the  Sample  tab. Click  Select  on the  Sample Data: Movies  data source. In the  Chart Type  dropdown menu, select\n Stacked Column . Drag the  directors  field from the  Fields \nsection of the Chart Builder view to the  X Axis \nencoding channel. In the  directors   Array Reductions  dropdown,\nselect  Unwind Array . In the  Fields  section click the  awards  field to\nexpand the  awards  object and view its properties. Drag the  awards.wins  field to the  Y Axis \nencoding channel. The  Y Axis  encoding channel\ndetermines which field to use for the chart's\n aggregation . Leave the  Aggregate  dropdown menu for the\n Y Axis  encoding channel on its default\nvalue of  sum . This value directs the aggregation\noperation to return the total number of award wins for each\ndirector. Aggregation  processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total number of awards won by each\ndirector, we use the  awards.wins  field here and will use\nan aggregation operator which will allow us to add up the\ntotal wins for each director. At this point there are too many columns in our X axis to show any\nmeaningful results. To bring the number down to a manageable level,\nwe'll apply a  limit  to get the ten\ndirectors with the most award wins. The  directors  array is already sorted by the aggregated value\nof  wins  in descending order. To apply a limit to the number\nof columns in the  X Axis : Toggle  Limit Results  to  On . Set the value of the adjacent numeric field to  10 . Drag the  genres  field to the  Series  encoding\nchannel. In the  Array Reductions  dropdown menu, select\n unwind array . The X axis columns are now broken down by movie\ngenre. Some movies contain more than one genre, so the numbers\nshown in the columns may not be the exact number of awards\nfor each director. Hover over your chart title above the center of the chart and\nclick the pencil icon. Copy the following into the chart title input: Click the check mark to save your title. Your chart should now look like this: Click  Save and Close  to return to your\ndashboard. Follow along to the next section of the tutorial to build a\n scatter chart  of award-nominated movies and\ntheir respective TomatoMeter ratings.",
            "code": [
                {
                    "lang": "none",
                    "value": "Directors with Most Awards, Split by Genre"
                }
            ],
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/top-item",
            "title": "Top Item Chart",
            "headings": [
                "Top Item Chart Encoding Channels",
                "Use Cases",
                "Examples"
            ],
            "paragraphs": "Top Item charts show information from the document with the\ngreatest or smallest value for a specified field. When you create a Top Item chart, you specify: The field by which to sort your collection. Whether you want to sort in ascending or descending order. The fields you want to display from the first document returned by\nyour specified sort. Top Item charts utilize the following  encoding channels : Encoding Channel Description Sort The field by which to sort the collection. You can specify an\nascending or descending sort. Display The fields to display from the top item in the collection after\nsorting. You cannot perform aggregations on  Display \nfields. Use Top Item charts to show information about the most extreme or most\nrecent instance of a particular field value. For example, you can use\nTop Item charts to show information on: The most recent reading from a collection of sensor data, such as\ntemperature readings. The highest rated movie in a collection. The cheapest available room in a collection of available hotel\nlistings. The largest sale recorded in the past month (when combining a Top\nItem chart with  date filters ). The following chart uses a data source containing  Sample AirBnB\nListing  data and shows information on the\ndocument with the highest  monthly_price  in the collection: The chart sorts the documents based on  monthly_price  in\ndescending order, and returns the first document appearing in the sort. The chart displays the following fields: monthly_price property_type country suburb",
            "code": [],
            "preview": "Top Item charts show information from the document with the\ngreatest or smallest value for a specified field.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/word-cloud",
            "title": "Word Cloud",
            "headings": [
                "Word Cloud Encoding Channels",
                "Use Cases",
                "Examples",
                "Procedure",
                "Limitations"
            ],
            "paragraphs": "Word clouds visually represent text data, highlighting prevalent\nkeywords and phrases. The frequency at which each word appears is\nreflected by the word's size. Word clouds provide the following  encoding channels : Encoding Channel Channel Type Description Text Category The text values to add to the word cloud.  Charts  adds\neach unique value from the field applied to this channel to the\nword cloud. Word clouds can display a maximum of 100 values. If the field\napplied to this channel contains more than 100 unique values,\nthe chart shows a random sample of 100 values. To ensure that the\nchart only shows the most common words, you should apply a\n limit  and sort by\n Value . Size Aggregation Dictates the field to aggregate on and the type of\naggregation to perform. The results of the aggregation define\nthe size of each  Text  value, with larger aggregated\nvalues resulting in larger text sizes. If you set the  Text  and  Size \nchannels to the  genres  field from the\n Sample Data: Movies  collection,\n Charts  creates a word cloud where the most frequently\noccurring genres are largest. If you set the  Text  channel to the  genres \nfield and the  Size  channel to the  runtime \nfield,  Charts  creates a word cloud where the genres\nwith the longest aggregate runtimes are largest. Color Category ( Optional ) Colors each text value to indicate a corresponding\ndata value from the applied field. If you set the  Text ,  Size , and  Color  channels to the  genres  field from the\n Sample Data: Movies  collection,  Charts  creates a\nword cloud where the most frequently occurring genres are\nlargest and each genre is a different color. If you set the  Text  and  Size \nchannels to the  genres  field and you set the\n Color  channel to the  rated  field,\n Charts  creates a word cloud where\nthe most frequently occurring genre and rating combinations\nare largest. Each genre and rating combination is a different\ncolor, so the green text value for dramas rated R displays\nlarger than the blue text value for dramas rated G. Use word clouds to show the frequency of specific words or phrases\nin text fields. Word clouds provide a high-level view of common\nwords and themes across a series of text data. They can also\nhighlight the most common phrases from a known set of\nstrings, such as product categories or tags. Consider using a word cloud to: Show common words and phrases used in reviews of a product. Identify common terms in existing content to improve\n SEO (Search Engine Optimization) . Highlight specific customer pain points from aggregated user surveys. Word clouds are commonly used to show the frequency of words appearing\nwithin long text fields. By default, word clouds do not split text\nfields into words, and instead attempt to visualize the entire text\nfield as a single value. You can use an\n aggregation pipeline  to split a text\nfield into individual words. The following example creates a word cloud from a dataset containing\ninformation on AirBnB rental properties. Each property listing contains\na  description  field; a text field describing the property. First, we run an aggregation pipeline to pre-process the  description \nfield. The following aggregation pipeline: The dataset used in this tutorial is included in the\n sample_airbnb.listingsAndReviews \n dataset provided by Atlas . Splits  the  description  field into an array\nwhere each individual word is an array element. Unwinds  this array, creating a new document for\neach individual word from each  description  field. Adds a new field  called  words  to the\ncollection, where each unwound word from the  description  becomes\na value of  words . Performs a  $match  query such that only non-trivial words\nare added to the word cloud. Your word cloud should look something like this: The size of the words in the cloud represent their relative frequency. Paste the following aggregation pipeline into the  Query \nbar at the top of the Chart Builder: Click  Apply  to execute the pipeline. Now that we have a new field containing the individual words from\neach review, we can visualize those words in a word cloud. Apply the newly created  words  field to the  Text \nencoding channel to add each individual word to the word cloud. Apply a  limit  of 80 to only show\nthe 80 most common words from the reviews. Apply the  words  field to the  Size  encoding\nchannel and aggregate based on the count of each individual word. The maximum query response size for a word cloud is 5000 documents.",
            "code": [
                {
                    "lang": "json",
                    "value": "[\n  {\n    $addFields: {\n      words: {\n        $map: {\n          input: { $split: ['$description', ' '] },\n          as: 'str',\n          in: {\n            $trim: {\n              input: { $toLower: ['$$str'] },\n              chars: \" ,|(){}-<>.;\"\n            }\n          }\n        }\n      }\n    }\n  },\n  { $unwind: '$words' },\n  {\n    $match: {\n      words: {\n        $nin: [\"\", \"also\", \"i\", \"me\", \"my\", \"myself\", \"we\", \"us\",\n               \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\",\n               \"yourself\", \"yourselves\", \"he\", \"him\", \"his\",\n               \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\",\n               \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\",\n               \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"whose\",\n               \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\",\n               \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\",\n               \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"will\",\n               \"would\", \"should\", \"can\", \"could\", \"ought\", \"i'm\",\n               \"you're\", \"he's\", \"she's\", \"it's\", \"we're\", \"they're\",\n               \"i've\", \"you've\", \"we've\", \"they've\", \"i'd\", \"you'd\",\n               \"he'd\", \"she'd\", \"we'd\", \"they'd\", \"i'll\", \"you'll\",\n               \"he'll\", \"she'll\", \"we'll\", \"they'll\", \"isn't\",\n               \"aren't\", \"wasn't\", \"weren't\", \"hasn't\", \"haven't\",\n               \"hadn't\", \"doesn't\", \"don't\", \"didn't\", \"won't\",\n               \"wouldn't\", \"shan't\", \"shouldn't\", \"can't\", \"cannot\",\n               \"couldn't\", \"mustn't\", \"let's\", \"that's\", \"who's\",\n               \"what's\", \"here's\", \"there's\", \"when's\", \"where's\",\n               \"why's\", \"how's\", \"a\", \"an\", \"the\", \"and\", \"but\",\n               \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"of\",\n               \"at\", \"by\", \"for\", \"with\", \"about\", \"against\",\n               \"between\", \"into\", \"through\", \"during\", \"before\",\n               \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"upon\",\n               \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\",\n               \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\",\n               \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\",\n               \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n               \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\",\n               \"too\", \"very\", \"say\", \"says\", \"said\", \"shall\"]\n      }\n    }\n  }\n]"
                }
            ],
            "preview": "Word clouds visually represent text data, highlighting prevalent\nkeywords and phrases. The frequency at which each word appears is\nreflected by the word's size.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/geo-spatial",
            "title": "Geospatial Charts",
            "headings": [
                "Choropleth",
                "Scatter",
                "Heatmap"
            ],
            "paragraphs": "Geospatial data defines specific geographical\nlocations, either in the form of latitude and longitude\ncoordinates or text fields with names of geographical areas,\nsuch as countries or states. Geospatial charts combine\ngeospatial data with other forms of data to create map-based\ncharts. MongoDB collections can store geospatial data as\n GeoJSON objects \nor as  legacy coordinate pairs . Geospatial charts can visualize geospatial data in a variety\nof chart formats, including  choropleth ,  scatter ,\nand  heatmap . Geopoint encoding channel type Choropleth charts  use predefined  shapes  for geographical areas, e.g. the countries\nof the world, or the states of the United States. They are useful for\ncomparing aggregated values across defined geographical areas. Scatter charts  use customizable data markers to\nindicate data points on a map. Heatmap charts  use gradations of color\nintensity to compare concentrations of data points on a map.",
            "code": [],
            "preview": "Geospatial data defines specific geographical\nlocations, either in the form of latitude and longitude\ncoordinates or text fields with names of geographical areas,\nsuch as countries or states. Geospatial charts combine\ngeospatial data with other forms of data to create map-based\ncharts. MongoDB collections can store geospatial data as\nGeoJSON objects\nor as legacy coordinate pairs.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "tutorial/movie-details/prereqs-and-import-data",
            "title": "Load the Sample Data",
            "headings": [
                "Prerequisites",
                "Load the Sample Data into Your Atlas Cluster",
                "Log in to Atlas.",
                "Navigate to your Atlas Database Deployments view.",
                "Load the sample dataset.",
                "View your sample data.",
                "Next Steps"
            ],
            "paragraphs": "Estimated Time to Complete: 10 minutes To complete this tutorial you will need a\n MongoDB Atlas  cluster. Refer\nto the  Create a Cluster  documentation\nfor instructions on creating an  Atlas  cluster. Atlas  provides sample data you can load into your  Atlas \ncluster. To load sample data into your cluster: The dataset required for this tutorial is  sample_mflix .\nThe following is a sample document from the dataset: Log in to your  Atlas  account at  https://cloud.mongodb.com . Click  Database  in the sidebar. Atlas  begins loading your sample data. This operation takes\napproximately 5 minutes to complete. Click the  Ellipses (...)  button for your cluster. Click  Load Sample Dataset . To view your sample data, click  Browse Collections . The\nsample data set that now appears in your database deployment includes\nthe follow databases: For details on the collections and documents included in these\ndatasets, see  Available Sample Datasets . sample_airbnb sample_analytics sample_geospatial sample_guides sample_mflix sample_restaurants sample_supplies sample_training sample_weatherdata Now that you have a data source in  Charts , you\ncan  Create a New Dashboard  which will\nhold the visualizations.",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n  \"_id\": {\n    \"$oid\": \"573a1391f29313caabcd9637\"\n  },\n  \"plot\": \"The ancient vampire Count Dracula arrives in\n    England and begins to prey upon the virtuous young Mina.\",\n  \"genres\": [\n    \"Horror\"\n  ],\n  \"runtime\": {\n    \"$numberInt\": \"85\"\n  },\n  \"rated\": \"APPROVED\",\n  \"cast\": [\n    \"Bela Lugosi\",\n    \"Helen Chandler\",\n    \"David Manners\",\n    \"Dwight Frye\"\n  ],\n  \"num_mflix_comments\": {\n   \"$numberInt\": \"1\"\n  },\n  \"poster\": \"https://m.media-amazon.com/images/M/MV5BZDY2ODZhZWQtNDk0ZS00OGE4LWE4NjAtZjE5MTJhMjExMTRjXkEyXkFqcGdeQXVyNjc1NTYyMjg@._V1_SY1000_SX677_AL_.jpg\",\n  \"title\": \"Dracula\",\n  \"fullplot\": \"After a harrowing ride through the Carpathian mountains in eastern Europe,\n    Renfield enters castle Dracula to finalize the transferral of Carfax Abbey in London to\n    Count Dracula, who is in actuality a vampire. Renfield is drugged by the eerily hypnotic\n    count, and turned into one of his thralls, protecting him during his sea voyage to London.\n    After sucking the blood and turning the young Lucy Weston into a vampire, Dracula turns his\n    attention to her friend Mina Seward, daughter of Dr. Seward who then calls in a specialist,\n    Dr. Van Helsing, to diagnose the sudden deterioration of Mina's health. Van Helsing,\n    realizing that Dracula is indeed a vampire, tries to prepare Mina's fiance, John Harker,\n    and Dr. Seward for what is to come and the measures that will have to be taken to prevent\n    Mina from becoming one of the undead.\",\n  \"languages\": [\n   \"English\",\n   \"Hungarian\",\n   \"Latin\"\n  ],\n  \"released\": {\n   \"$date\": {\n     \"$numberLong\": \"-1226966400000\"\n   }\n  },\n  \"directors\": [\n   \"Tod Browning\"\n  ],\n  \"writers\": [\n   \"Bram Stoker (by)\",\n   \"Hamilton Deane (from the play adapted by)\",\n   \"John L. Balderston (from the play adapted by)\",\n   \"Garrett Fort (play)\"\n  ],\n  \"awards\": {\n   \"wins\": {\n     \"$numberInt\": \"2\"\n   },\n   \"nominations\": {\n     \"$numberInt\": \"1\"\n   },\n   \"text\": {\n     \"2 wins & 1 nomination.\"\n   }\n  },\n  \"lastupdated\": \"2015-08-28 00:30:04.660000000\",\n  \"year\": {\n   \"$numberInt\": \"1931\"\n  },\n  \"imdb\": {\n   \"rating\": {\n     \"$numberDouble\": \"7.6\"\n   },\n   \"votes\": {\n     \"$numberInt\": \"30184\"\n   },\n   \"id\": {\n     \"$numberInt\": \"21814\"\n   }\n  },\n  \"countries\": [\n   \"USA\"\n  ],\n  \"type\": \"movie\",\n  \"tomatoes\": {\n   \"viewer\": {\n     \"rating\": {\n       \"$numberDouble\": \"3.7\"\n     },\n     \"numReviews\": {\n       \"$numberInt\": \"44035\"\n     },\n     \"meter\": {\n       \"$numberInt\": \"82\"\n     }\n   },\n   \"dvd\": {\n     \"$date\": {\n       \"$numberLong\": \"998956800000\"\n     }\n   },\n   \"critic\": {\n     \"rating\": {\n       \"$numberDouble\": \"7.9\"\n     },\n     \"numReviews\": {\n       \"$numberInt\": \"45\"\n     },\n     \"meter\": {\n       \"$numberInt\": \"91\"\n     }\n   },\n   \"lastUpdated\": {\n     \"$date\": {\n       \"$numberLong\": \"1442516384000\"\n     }\n   },\n   \"consensus\": \"Bela Lugosi's timeless portrayal of Dracula in this creepy and\n     atmospheric 1931 film has set the standard for major vampiric roles since.\",\n   \"rotten\": {\n     \"$numberInt\": \"4\"\n   },\n   \"production\": \"Universal Pictures\",\n   \"fresh\": {\n     \"$numberInt\": \"41\"\n   }\n  }\n}"
                }
            ],
            "preview": "Estimated Time to Complete: 10 minutes",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/geospatial-heatmap",
            "title": "Geospatial Heatmap",
            "headings": [
                "Geospatial Heatmap Encoding Channels",
                "Coordinates",
                "Intensity",
                "Legend",
                "Customization Options",
                "Automatically Set Viewport",
                "Radius",
                "Opacity",
                "Custom Color Palette",
                "Examples",
                "Tutorials",
                "Prerequisites",
                "Create a Geospatial Heatmap Chart Using GeoJSON Points",
                "Add a geospatial heatmap chart to your dashboard.",
                "Add fields to your chart.",
                "Filter your results.",
                "Save the chart to your dashboard.",
                "Create a Geospatial Heatmap Chart Using Numeric or Numeric Array Fields",
                "Add a geospatial heatmap chart to your dashboard.",
                "Add fields to your chart.",
                "Save the chart to your dashboard.",
                "Limitations"
            ],
            "paragraphs": "You can use geospatial heatmap charts to visualize how\ngeographic areas of a map compare to one another based on a given\ncriterion. A  geopoint  encoding channel which defines the map\narea of the chart. See the  Geopoint  reference\npage for more information about what types of data you can use in this\nchannel. The  radius customization option  dictates the\nsize of the data markers\nin  Geospatial Heatmaps . The color of\neach data marker reflects the aggregated value of all data points\nwithin that marker's radius. An  aggregation  encoding channel that changes the\nshading of the colors in different chart regions to reflect the\naggregated values of this field. More intense colors in the\nvisualization reflect greater aggregated values. If ten data points exist within the specified radius, the color\ndisplayed is based on the aggregated value of those ten data points. Intensity shading is local to the map's current view. The most\nintense color is displayed for the most extreme aggregated values\ncurrently visible on the map, even if there are points outside the\ncurrent view that are more extreme. Unlike other types of charts, the legend and the chart colors on\ngeospatial heatmaps change when the view changes. The color range is\nbased on the data in the current view, and may change when you pan or\nzoom the map. The following customization options are specific to geospatial heatmap\ncharts. For general customization options, see  Customize Charts . By default, geospatial charts show a map which includes all the data\npoint markers in your specified collection. You can pan and zoom to\nchange the map view, but if you close the chart and re-open it the map\nreverts to its default state. This behavior is controlled by the\n Automatically Set Viewport  option. When you toggle the  Automatically Set Viewport  switch to\n Off , the area and zoom level at which the map is saved becomes the\nnew default view. You can pan and zoom the map area in a chart on a dashboard, but\nthese changes do not affect the default map view. You can adjust the radius of your data points. The radius is measured\nin pixels and defaults to  30 . The  Opacity  level of a map modifies the degree to which\nthe chart's map data shows through the data point markers. Geospatial heatmap charts default to  100% . The color palette specifies the range of colors that corresponds to\nrelative aggregated values in your map. Geospatial heatmap charts use a\ngradient color picker. To enable palette customization, toggle the\n Custom Color Palette  switch in the  General \nsection. For more information, see  Color Palette Customization . The following chart is based on AirBnB data for the New York City area.\nIt shows rental rate hot spots in a geospatial heatmap. The  Coordinates  channel uses the  location  database\nfield, which contains arrays of latitude-longitude pairs. The\n Intensity  field uses the  monthly_price  database field,\nwhich contains monthly rental rates for each property in the database. See the following tutorials to build geospatial heatmap charts: Create a Geospatial Heatmap Chart Using GeoJSON Points Create a Geospatial Heatmap Chart Using Numeric or Numeric Array Fields The tutorials on this page use the  sample_airbnb.listingsAndReviews \nand  sample_geospatial.shipwrecks  collections. Before starting,\nyou must load the sample data on your cluster. To learn how to load\nthe sample data provided by  Atlas  into your\ncluster, see  Load Sample Data . This tutorial demonstrates how to create a geospatial heatmap chart\nwith fields that are  GeoJSON Points .\nThe final chart displays a heatmap of average AirBnB prices in New York. Charts  automatically determines if field types in your collection\nare  GeoJSON Points  by displaying\nthe   icon. You can map these fields directly\nto a geopoint channel type in the Chart Builder. For more information,\nsee  Geopoint Channel Type . For more details, see  Create a Chart . From the  Dashboards  page, select the dashboard\nwhere you want to add a new chart. For instructions on setting\nup a dashboard, see  Dashboards . Click  Add Chart . In the  Select Data Source  modal, click the\n Project  tab. In the cluster where you loaded the\nsample data, select the  listingsAndReviews  collection\nin the  sample_airbnb  database. In the  Chart Type  dropdown, click  Geo Heatmap . Select the  Encode  tab. Navigate to the  Fields  pane on the left side of the\nChart Builder. This section lists all available fields in the\n listingsAndReviews  collection. Drag the  location  geopoint field nested in the  address \nfield to the  Coordinates  encoding channel. Drag the  price  field to the  Intensity  encoding\nchannel. Then, in the  Aggregate  dropdown that appears,\nset the aggregation method to  mean . Charts  displays the aggregated mean prices of\nAirBnB listings across the world. The color gradient to the right\nrepresents the range of prices in the heatmap. A more intense\ngradation reflects higher prices in the area. To customize colors, click the  Customize  tab.\nUnder  General , enable the\n Custom Color Palette  and set your preferred\ncolors. For more information, see\n Color Palette Customization . Select the  Filter  tab. Drag the  market  field nested in the  address  field\nto the  Filter  encoding channel. To filter your results to include only AirBnBs in New York,\nclick  Deselect All  and then select  New York . Optionally,  Enter a title \nor  Enter a description  for your chart. Click  Save and Close \nat the upper right of the chart builder view. This tutorial demonstrates how to create a geospatial heatmap chart\nwith numeric or numeric array fields. The final chart displays a\nheatmap of shipwrecks across the world. For more details, see  Create a Chart . From the  Dashboards  page, select the dashboard\nwhere you want to add a new chart. For instructions on setting\nup a dashboard, see  Dashboards . Click  Add Chart . In the  Select Data Source  modal, click the\n Project  tab. In the cluster where you loaded the\nsample data, select the  shipwrecks  collection\nin the  sample_geospatial  database. In the  Chart Type  dropdown, click  Geo Heatmap . Select the  Encode  tab. Navigate to the  Fields  pane on the left side of\nthe Chart Builder. This section lists all available fields in\nthe  shipwrecks  collection. Drag the  coordinates  numeric array field to the\n Coordinates  encoding channel. Alternatively, you can specify the latitude and longitude\ncoordinates separately. First, drag the  latdec  numeric field\nto the  Coordinates  encoding channel. Once the\n Longitude  channel appears, drag the  londec \nnumeric field to the corresponding channel. Drag the  _id  field to the  Intensity  encoding channel.\nThe aggregation method is set to  count  by default. Charts  displays the aggregated count of shipwrecks\nacross the world. The color gradient to the right\nrepresents the range of count values in the heatmap. A more intense\ngradation suggests that more shipwrecks have occured in the area. To customize colors, click the  Customize  tab.\nUnder  General , enable the\n Custom Color Palette  and set your preferred\ncolors. For more information, see\n Color Palette Customization . Optionally,  Enter a title \nor  Enter a description  for your chart. Click  Save and Close \nat the upper right of the chart builder view. The maximum query response size for a geospatial heatmap is 50000 documents.",
            "code": [],
            "preview": "You can use geospatial heatmap charts to visualize how\ngeographic areas of a map compare to one another based on a given\ncriterion.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/choropleth-regions",
            "title": "Choropleth Chart Shape Schemes",
            "headings": [
                "Shape Schemes and Location",
                "Available Shape Schemes"
            ],
            "paragraphs": "Atlas Charts  provides shape schemes to help define regions in your\n Choropleth Charts . Each shape scheme has a\ndistinct set of expected values where each value corresponds to a\nregion. In choropleth charts, you specify regions with the\n Location  channel. The value in the location channel\nmust match a region value for the selected  Shape Scheme \n(case insensitive)- when using the  US States \nscheme, the region of  California  will match both  california \nand  CA  as well as  California . The following table defines the available shape schemes and their\nexpected  Location  values: Shape Scheme Accepted Values Examples Countries and Regions Default shape scheme.  Full country names, two-letter\n ISO-3166-1alpha2 country codes ,\nand some common country name variants. Brazil ,  United States ,  BR ,  USA US States Full names and  two-letter abbreviations (FIPS state codes) \nfor the states in the United States. New York ,  NY Canadian Provinces Full names and  two-letter codes \nfor Canadian provinces, expressed in English or French language. New Brunswick ,  Nouveau-Brunswick UK Countries Countries in the United Kingdom. England Scotland Wales Northern Ireland UK Counties and Districts Local administrative counties, areas, and districts\nacross the United Kingdom. England: administrative counties Scotland: subdivisions Wales: principal areas Northern Ireland: local government districts This shape scheme  doesn't  include ceremonial counties. Norfolk ,  Essex German States Full names and\n two-letter German state codes \nof German states, expressed in German or English language. Saxony ,  Sachsen Australian States Full names and abbreviations \nfor Australian states. Victoria ,  VIC Australian Local Government Areas Australian local government areas. Yarra ,  Waverley Italian Regions Full names and three-letter abbreviations \nfor all Italian regions, expressed in Italian or English\nlanguage. Liguria ,  LIG Dutch Provinces Full names and abbreviations  for Dutch provinces, expressed in Dutch or\nEnglish language. Drenthe ,  DR",
            "code": [],
            "preview": "Atlas Charts provides shape schemes to help define regions in your\nChoropleth Charts. Each shape scheme has a\ndistinct set of expected values where each value corresponds to a\nregion.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/candlestick-chart",
            "title": "Candlestick Charts",
            "headings": [
                "Candlestick Chart Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Customize Candlestick Color",
                "Adjust X-Axis Label Angle",
                "Example"
            ],
            "paragraphs": "You can use candlestick charts to visualize how a numeric data\nsource changes over time. A candlestick chart consists of vertical\ncolumns, or \"candles,\" that represent a range of your data source's\nopening and closing values over a period of time. If the closing value\nis higher or lower than the opening value, the column fills a certain\ncolor to indicate either a positive or negative change. Each column also\nmight extend in either direction to show the highest and lowest values\nduring the time period. By observing the columns in your chart across consecutive periods of time,\nyou can identify patterns in your data and make informed predictions.\nTo learn about when you might use a candlestick chart, see\n Use Cases . To learn about all column chart types,\nsee  Column and Bar Charts . Encoding Channel Description X Axis The  category  encoding channel for your date field. This channel creates a segment for each time period along the X axis\nbased on the grouping that you select. By default,  Atlas Charts  enables\n binning  to group date data into specific\ntime periods. You can choose from the following bins: Year Month Week of Year Date of the Month Day of the Week Hour Minute Second For certain bins, you can enable the  Periodic \nsetting to visualize the aggregated results for the time period\nacross your data. To learn more, see  Bin, Sort, and Limit Your Data . Y Axis The  value  encoding channels for your numeric data.\n Charts  requires the following values: To define these values: High , the highest value during each time period. Open , the value at the start of each time period. Close , the value at the end of each time period. Low , the lowest value during each time period. If you have one field that contains your numeric data, drag the same\nfield onto each of the channels.  Charts  automatically calculates the\nhigh, open, close, and low values to build the chart. If you have separate fields that represent the high, open, close, and low\nvalues for your data, drag each field onto their respective channel\nto build the chart. Candlestick charts are useful for visualizing  time series data  when you want to analyze a numeric\nmeasurement that changes over time. This type of chart is commonly used in\nfinancial analysis to track the price of assets such as stocks,\ncommodities, or currencies. However, you can use candlestick charts for\nvarious types of data to suit your specific needs. Consider the following examples: A trading firm tracks the stock price of a specific company by hour\nto make a trading decision. A weather company tracks rainfall, snowfall, and temperature by day\nto predict next week's forecast. A store owner tracks the cost of a specific item by month to determine\nthe best time to restock inventory. The following customization options are specific to candlestick\ncharts. To see all available customization options, see\n Customize Charts . You can customize the colors that correspond to a positive\nor negative change in your chart: Click the  Customize  tab for your chart. In the  General  section, enable the  Custom Color Palette . In the dropdown next to  Positive  or  Negative ,\nuse the color picker to select your desired color. To learn more, see\n Color Palette Customization . You can adjust the X-axis label angle to one of\nthe following options: To set this option: Option Description Vertical Labels right-aligned at a 270 degree angle. Horizonal Labels center-aligned at a 0 degree angle. Diagonal Labels right-aligned at a 315 degree angle. Click the  Customize  tab for your chart. In the  Axes  section, select a  Label Angle \nfor the  X Axis . The following chart visualizes the price of Bitcoin in US dollars\nas it changes every minute. The chart uses a  time series\ncollection \ncalled  ticker , where each document in the collection\nrepresents a specific financial asset at a point in time. Each\ndocument includes information about the asset's ticker symbol,\nprice, and time. The  X Axis  category channel, represented by the  ticker.time \nfield, bins the numeric data by minute. The  value \nencoding channels, represented by the  ticker.price  field, aggregate\nthe high, open, close, and low prices during each minute to create the\nvertical columns in the chart. The chart also uses  query filters \non the  ticker.symbol  and  ticker.time  fields to include\nonly results with the  BTC-USD  symbol and limit the chart to an\nhour-long subset of the data. When the asset's closing price is higher than its opening price\nduring a given minute, the column fills green to indicate a\npositive change. When its closing price is lower than its opening price,\nthe column fills red to indicate a negative change. Each column also\nmight extend in either direction to show the highest and lowest prices\nduring each minute. Based on your analysis of the chart, you might make\na decision to purchase, hold, or sell the asset. To show the exact data values in a tooltip, hover over the body of\na column in the chart.",
            "code": [],
            "preview": "You can use candlestick charts to visualize how a numeric data\nsource changes over time. A candlestick chart consists of vertical\ncolumns, or \"candles,\" that represent a range of your data source's\nopening and closing values over a period of time. If the closing value\nis higher or lower than the opening value, the column fills a certain\ncolor to indicate either a positive or negative change. Each column also\nmight extend in either direction to show the highest and lowest values\nduring the time period.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/combo-charts",
            "title": "Combo Charts",
            "headings": [
                "Combo Chart Encoding Channels",
                "Combo Chart Types",
                "Use Cases",
                "Customization Options",
                "Adjust X-Axis Label Angle",
                "Set Distinct Dash Style per Series",
                "Smooth Lines",
                "Show or Hide Data Markers",
                "Show or Hide Data Value Labels",
                "Examples",
                "Grouped Combo Chart",
                "Stacked Combo Chart",
                "Limitations"
            ],
            "paragraphs": "Combo charts offer a combined  column  and\n line  view. Combo charts provide the following\n encoding channels : Encoding Channel Description X Axis In the  category  axis encoding channel, a column is\nrendered for each unique value from this field. Columns The fields that you use in this channel build the columns in\nthis chart. The  aggregation  axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. This ultimately dictates the size of each column. You can map multiple fields to this channel to create\na multi-series chart. However, unlike other charts, you can't\ncreate a multi-series chart with the  Series \nchannel on combo charts. To learn more, see\n Multiple Field Mappings . Lines The fields that you use in this channel build one or more\nlines on this chart. The  aggregation  axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. Combo charts provide the following sub-types: Sub-Type Name Description Grouped Atlas Charts  groups data by the category specified in the\n category   encoding channel , and plots a column for each value\nin the  Columns  encoding channel. Stacked Atlas Charts  creates a column for each distinct value in the\n category   encoding channel \nfield, and splits each column into segments based on the\nthe  Columns  encoding channel. Combo charts bring together the useful aspects of both  column  and  line  charts\ninto a single chart. The following customization options are specific to combo\ncharts. To see all available customization options, see\n Customize Charts . If the columns and lines in your combo use different scales,\nconsider a  Secondary Y Axis . This option appears on the\n Customize  pane in the  Fields  section for any\nfields mapped to the  Lines  channel. Fields mapped to the\n Columns  channel appear only on the primary axis. You can adjust the X-axis label angle to one of\nthe following options: To set this option: Option Description Vertical Labels right-aligned at a 270 degree angle. Horizonal Labels center-aligned at a 0 degree angle. Diagonal Labels right-aligned at a 315 degree angle. Click the  Customize  tab for your chart. In the  Axes  section, select a  Label Angle \nfor the  X Axis . On combo charts, you can opt to display each series in the chart with a\ndistinct dash style. This option can help make your chart more\naccessible by distinguishing between series beyond color. To set this option: Open the  Customize  pane for your chart. In the  General  section, set the\n Dash Styles per Series  toggle switch to the desired\nsetting. You can change the way lines are drawn on your chart. To smooth lines: The following line smoothing options are available: Open the  Customize  pane for your chart. In the  General  section, set\n Line Smoothing  to the desired option. Option Description None (Default) Draws straight lines between data points. Smooth Draws curved lines between data points. Step Before Lines extend horizontally to data points. This is useful\nfor visualizing data that only changes in intervals and is\ncollected at the end of a period, such as\ndaily average temperature. Step After Lines extend horizontally from data points. This is useful\nfor visualizing data that only changes in intervals, such as\nstock prices. On combo charts, you can dictate whether  Charts  displays\nvisible data markers that represent individual data points along the\nline. Enabling this option makes it easier to see exactly where your\ndata points lie along a line. Hovering over these markers shows the\nexact data values in a tooltip, making it easier to view precise\nmeasurements. To set this option: To customize the formatting of the number in the data marker tooltip,\nmodify the  Number Formatting \nsettings for the relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Markers  toggle switch to the desired setting. You can dictate whether  Charts  displays text labels for your\ndata  values . Data value labels show the exact values of your data\npoints. To set this option: To customize the formatting of the number in the data label, modify\nthe  Number Formatting  settings for\nthe relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Value Labels  toggle switch to the desired\nsetting. When used with  stacked  column and bar\ncharts, data labels show the sum of all series in each column or bar. The following grouped combo chart shows the number of award\nnominations, wins, and metascores by director. The  X Axis  category of  director  creates a group\nfor each director in the data set, and each group is split by the\n Columns  encoding channel fields of  nominations  and\n wins . The  Lines  encoding channel field of\n metacritic  displays as a line: The following stacked combo chart shows the number of award\nnominations, wins, and metascores by director. The  X Axis  category of  director  creates a column for\neach director in the data set,  limited  to\nonly the top 10 as sorted by the aggregated sum of  awards.wins  from\n Columns . The  Columns  encoding channel fields of\n nominations  and  wins  segment each column. The  Lines \nencoding channel field of  metacritic  displays as a line: The maximum query response size for combo charts is 5000\ndocuments.",
            "code": [],
            "preview": "Combo charts offer a combined column and\nline view.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/choropleth",
            "title": "Choropleth Chart",
            "headings": [
                "Regions",
                "Choropleth Chart Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Automatically Set Viewport",
                "Opacity",
                "Custom Color Palette",
                "Examples",
                "Limitations"
            ],
            "paragraphs": "Choropleth charts are maps that use shading to depict differences\nacross regions. The shading of a region (e.g. states, countries) is\nbased on an aggregated value and is proportional to the corresponding\nvalue of other regions. Unlike other geospatial charts, choropleths do not require coordinate\ndata in your collections. Instead you can have names of regions as\nstrings, so long as the region strings correspond to the names used in\na supported  Shape Scheme . To help define regions,  Atlas Charts  provides\n Shape Schemes . For example, with the\n US States  scheme, you can define regions at a state level,\nand your location field value must be one of the 50 states. Choropleth charts use the following  encoding channels : Encoding Channel Description Defines the  regions  to be shaded\non the map. The value must match (case insensitive) a region value for the\nselected  Shape Scheme . For example, when using the\n US States  scheme, the region of  California \nmatches  california  and  CA  as well as  California . For a complete list of shape schemes and their expected values,\nrefer to the  Shape Schemes \npage. Defines the  Aggregation  that determines the\nshading of the corresponding  Location . You\ncan customize the range of colors that corresponds to\nthe relative aggregated values. Choropleth charts can be used to depict differences in your\nselected aggregated field between geographic subregions, such as\nstates or countries. They are useful when you have a dataset with\nclearly defined subregions compatible with one of the\n Shape Schemes   Atlas Charts  provides. A choropleth chart is a good choice to compare: Population density across US states. Annual rainfall across European countries. Number of cellphone towers across Australian states. If you are looking for a chart to depict exact values rather than\na high-level comparison, consider using a\n Table . The following customization options are specific to choropleth\ncharts. For general customization options, see  Customize Charts . By default, geospatial charts show a map which includes all the data\npoint markers in your specified collection. You can pan and zoom to\nchange the map view, but if you close the chart and re-open it the map\nreverts to its default state. This behavior is controlled by the\n Automatically Set Viewport  option. When you toggle the  Automatically Set Viewport  switch to\n Off , the area and zoom level at which the map is saved becomes the\nnew default view. You can pan and zoom the map area in a chart on a dashboard, but\nthese changes do not affect the default map view. The  Opacity  level of a map modifies the degree to which\nthe chart's map data shows through the data point markers. Choropleth charts default to  100% . The color palette specifies the range of colors that corresponds to\nrelative aggregated values in your map. Choropleth charts use a\ngradient color picker. To enable palette customization, toggle the\n Custom Color Palette  switch in the  General \nsection. For more information, see  Color Palette Customization . The following choropleth chart visualizes the total count of\nmovie releases across various countries. Each document in the\ncollection contains an array of countries where a particular movie was\nreleased. In this chart, we specify a\n Shape Scheme  of\n World Countries  to divide the map into countries. The  countries  array in the  Location  field contains\nan array of elements representing each country where a movie\nwas released. These elements match the values expected by the\n World Countries  shape scheme. We unwind the array so\neach movie contributes to the count for each country where it was\nreleased. The  Color  field of  id  is aggregated by\n Count . As a result, each country is shaded based on its\nnumber of movies released. The custom color palatte for this chart ranges from yellow for\nlower ratings to dark red for higher ratings. Based on the\nvisualization, we see that France, India, and Japan have relatively\nhigh movie release counts compared with other countries. For a complete list of choropleth  Shape Schemes  and\ntheir expected values, refer to the\n Choropleth Regions  page. The maximum query response size for a choropleth chart is 5000\ndocuments.",
            "code": [],
            "preview": "Choropleth charts are maps that use shading to depict differences\nacross regions. The shading of a region (e.g. states, countries) is\nbased on an aggregated value and is proportional to the corresponding\nvalue of other regions.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/grid-charts",
            "title": "Grid Charts",
            "headings": [],
            "paragraphs": "",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/gauge-chart",
            "title": "Gauge Chart",
            "headings": [
                "Gauge Chart Encoding Channels",
                "Target and Maximum Interaction",
                "Use Cases",
                "Cutomization Options",
                "General Customization",
                "Value Axis",
                "Value Field",
                "Target Field",
                "Examples"
            ],
            "paragraphs": "Gauge Charts  display data as a percentage of a\nsemicircle, with customizable minimum and maximum values. Optionally\nyou may also specify a Target value, which renders as a heavy line\nwithin the gauge's range. Gauge charts provide the following  encoding channels : Encoding Channel Description Value The data value for the chart. Each gauge chart can have only one\ndata value.  Required Target A specific value of importance to the chart, such as a sales quota\nor maximum capacity level. If no maximum value for the chart is set,\nthe  Target  value serves as the upper limit for the chart.\nSee  Target and Maximum Interaction  for more\ninformation on how the maximum range of the gauge is determined. If you wish to set a specific value as the chart target, you can\ncreate a  calculated field , assign it\nyour desired value, and encode it in the  Target  channel. The  Target  channel is an aggregation. To set a specific\narbitrary value, set your calculated field to a constant value and\nchoose either  Max  or  Min  from the\n Aggregate  dropdown menu. The value encoded in the  Target  channel and the\n Maximum  customization affect each others' behavior. The\nfollowling table explains the effect on the chart of having one, both,\nor neither of the values set. Target Maximum Behavior None Default No target line. Gauge maximum is the next power of 10 above the value\nof the Value channel. None Custom No target line. Gauge maximum is the specified value. Encoded Default Target line is rendered. Gauge maximum matches the target value. Encoded Custom Target line is rendered. Gauge maximum is the specified value. Gauge charts are useful for displaying a data value represented as a fraction\nof a larger value. Gauge charts are a familiar way to represent a situation in\nwhich a container may be either full or empty or somewhere in between. Consider using gauge charts to represent: Occupancy rates in a hotel Progress towards a fundraising goal The water level in a reservoir To access the customization options, click the  Customize  tab\nabove the encoding channels in the Chart Builder. Option Description Default Custom Color Palette Only the first palette color is used by gauge charts. Off Value Label Controls whether a label is displayed above the\n Value  number. Off Max/Min Values Controls whether the minimum and maximum range\nnumbers are displayed at the left and right edges of the chart. On Target Label & Value Controls whether the  Target \nvalue and its label are displayed at the bottom of the chart. Off Show As Percentage Controls whether the value of your gauge chart is\nshown as a percentage of the  Target  value. If you\nenable this option and do not have a  Target  value,\nthe value is shown is a percentage of the maximum value.\nFor more information, see  Target and Maximum Interaction . Off Option Description Default Maximum Specifies the maximum range\nof the gauge when enabled. See  Target and Maximum\nInteraction  for more information on how the maximum\nrange of the gauge is determined. Off Minimum Specifies the minimum range of the gauge when enabled. Defaults\nto  0 . Off Option Description Default Label Override When enabled, displays a custom label for the  Value \nnumber if the  Value Label  option is also enabled.\nDisplays a custom label for the Value Field tooltips. Off Number Formatting Controls formatting of the large value in the chart, the\ntooltips, and the min/max labels. None Option Description Default Label Override When enabled, displays  custom label for the  Target \nvalue if the  Target Label & Value  option is also\nenabled. Displays a custom label for the Target Field tooltips. Off Number Formatting Controls formatting of the Target value if it is displayed under\nthe chart. None The following chart shows progress towards a goal. A clothing retailer has\na goal of selling 100 green shirts per month. This chart uses a filter to find sales order documents in which the  item \nfield is  shirt  and the  color  field is  green . The  qty  field is\nencoded in the  Value  channel to a get an aggregated total. The 100-shirt goal is a constant value, so the chart uses a  calculated\nfield  named  target  with a value of  100  encoded in the\n Target  channel.",
            "code": [],
            "preview": "Gauge charts provide the following encoding channels:",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/circular-charts",
            "title": "Circular Charts",
            "headings": [],
            "paragraphs": "Donut Charts  display data in a series of\nsegments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the sum of all data values, and each segment\nindicates the proportion of each category in the data to the total. Gauge Charts  display data as a percentage of a\nsemicircle, with customizable minimum and maximum values. Optionally\nyou may also specify a Target value, which renders as a heavy line\nwithin the gauge's range.",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table",
            "title": "Table",
            "headings": [
                "Table Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Wrap Text",
                "Pin Columns",
                "Conditional Formatting",
                "Examples",
                "Basic Table",
                "Table with Dynamic Columns",
                "Limitations"
            ],
            "paragraphs": "Tables represent data in a tabular view, similar to a\n spreadsheet . Tables\nsplit your data into categories, with each categorization field\nrepresented in the table columns. The unique categories are represented\nas the table rows, and  Charts  displays aggregated values in the\ntable body based on the fields selected. Tables use the following  encoding channels : Encoding Channel Description Groups The  category  encoding channels.  Charts \ncreates a row in the table for each unique value in this field.\nWhen multiple  Groups  are added to the chart,\n Charts  creates a row for each unique combination of\ngroup fields. The  Groups  encoding channel supports\n binning  for numeric and date fields. Values The  aggregation  encoding channels.  Charts \ncreates a column for each field mapped into the\n Values  channel.  Charts \naggregates the encoded  Values  fields using the\nselected aggregation methods and populates the grid cells with\nthe aggregated value for the corresponding  Group . Dynamic Columns A second  Category  encoding channel. When you use\n Dynamic Columns ,  Charts  creates table\ncolumns based on the unique values retrieved from the field\nmapped into the  Dynamic Columns  channel.\n Charts  uses the field mapped into the  Values \nchannel to populate the grid cells, aggregated against both the\n Group  and  Dynamic Column  categories. You cannot apply dynamic columns to a table if you have selected\nmultiple  Value  encoding channels. For an example of how to use dynamic columns, see the following\n example . The  Dynamic Columns  encoding channel supports\n binning  for numeric and date fields. Tables have a wide variety of applications, but are most useful\nwhen comparing multiple categories of calculated values. Visual charts\nstruggle to display multiple categories of data without losing their\naudience. Tables present data with multiple categories such that\nyou can see which value applies to which slice of data. Tables are also useful for showing precise data values, rather\nthan comparing approximate values. Comparing approximate values is\nbest done with a visual representation, instead of text. You can use tables to show: The total cost to rent an apartment, including rent, cleaning fees,\nand security deposits organized by location and total area of the\nunit. Time spent working out and total calories burned during various\nexercises categorized by the type of exercise and time of day the\nexercised was performed. The following customization options are specific to table charts.\nTo see all available customization options, see\n Customize Charts . You can wrap text that does fit in a single data cell across multiple\nlines. This setting is off by default. To turn it on: Select the  Customize  tab of the Chart Builder. Expand the  Fields  section. Select your desired field from the dropdown menu. Toggle the  Wrap Text  switch to enable this feature. You can pin  Group  and  Row Total  columns to the\nside of the table. A pinned column remains fixed in place while the\nrest of the table scrolls. To pin a column, hover over the column you want to pin and click the\n  button in the column header. The  \nbutton toggles on and the column pins to the side of the table: To unpin a column, click the   button in the header of\nthe column you want to unpin. The   button toggles off\nand if the column is a  Group  column, it moves to the right\nof any pinned  Group  columns. A  Group  column pins to the left of any unpinned\ncolumns. The  Row Total  column pins to the right of any\nunpinned columns. You can create styling rules for table cell values that match\nconditions you define. Conditional formatting rules affect the look of\nyour chart dynamically: if the value of a table cell changes to match\nor stop matching your conditions, its styling updates to reflect that. To learn how to use conditional formatting rules, see the\n Conditional Formatting \ncustomization option. The following table examples visualize data from a hospitality\nand property service. Each document in the collection\nrepresents a unit available for rent and includes information such as\nthe monthly unit price, neighborhood, and property type. The following table categorizes the rental listings by property\ntype and location, and shows the average review rating and average\nweekly rent for each group: The  Group  encoding channels of  property_type  and\n suburb  create a row in the table for each unique combination\nof those two fields in the data. The  Values  of  review_scores_rating  and\n weekly_price  each add a column to the table. For both values, we\naverage the rating and price for each  property type  and  suburb \nusing  aggregation  and display the results in\nthe table. The results are formatted using the Customization tab to display the\nmean weekly price as currency and round the mean review score to an\nappropriate number of decimal places. We have applied a  filter  to this\nchart to only display listings which have a  weekly_price \nassociated with them. The following table displays nearly the same data as the previous\nbasic table example. In this example, instead of making\n property_type  and  suburb   Groups ,  property_type \nfield is now a  Dynamic Column : Now, rather than having two category columns in the table, the\n property_types  become column titles. We are still aggregating\nthe mean of the  weekly_price  based on each combination of\n property_type  and  suburb . The results are formatted using the Customization tab to display the\nmean weekly price as currency. Blank table cells indicate that there are no documents that match\nthe corresponding intersection of  property_type  and  suburb . The maximum query response size for a table is 50000 documents.",
            "code": [],
            "preview": "Tables represent data in a tabular view, similar to a\nspreadsheet. Tables\nsplit your data into categories, with each categorization field\nrepresented in the table columns. The unique categories are represented\nas the table rows, and Charts displays aggregated values in the\ntable body based on the fields selected.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/column-bar-chart",
            "title": "Column and Bar Charts",
            "headings": [
                "Column and Bar Chart Encoding Channels",
                "Column and Bar Chart Types",
                "Use Cases",
                "Customization Options",
                "Adjust X-Axis Label Angle",
                "Show or Hide Data Value Labels",
                "Examples",
                "Grouped Column Chart",
                "Stacked Column Chart",
                "100% Stacked Bar Chart",
                "Colored Bar Chart",
                "Limitations"
            ],
            "paragraphs": "Column and bar charts plot data in either horizontal or vertical\nsegments where the length of the segment is proportional to the data\nvalue. Column and bar charts provide high-level overviews of data\ntrends by comparing values within a specific category. Column and bar charts, except for\nthe  candlestick chart type ,\nprovide the following  encoding channels : Encoding Channel Description X / Y Axis In the  category  axis encoding channel, a bar or\ncolumn is rendered for each unique value from this field. In a column chart, the  category  is the\n X Axis , which results in vertical segments. In a\nbar chart, the  category  is the\n Y Axis , which results in horizontal segments. The  aggregation  axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. This ultimately dictates the size of each bar or\ncolumn. You can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\n Multiple Field Mappings . Series ( Optional ) A  category  encoding channel that\nsegments the axis category based on the unique values in\nthis field. If omitted,  Atlas Charts  renders a basic bar or column chart with\njust a comparison of the  X Axis  and\n Y Axis  fields. This option is only available for  Grouped  and  Stacked  charts with a  single  field mapped in\nthe  aggregation  channel. Color ( Optional ) An  aggregation  encoding channel for\n Colored  charts that changes the\nbars or columns' colors to reflect the aggregated\nvalue of the field, with darker colors meaning greater values. Column and bar charts provide the following sub-types: Sub-Type Name Description Grouped Atlas Charts  groups data by the category specified in the\n category   encoding channel , and plots a bar or column for each value\nin the  Series  encoding channel. For a more detailed example, refer to the\n grouped column chart example . Stacked Atlas Charts  creates a bar or column for each distinct value in the\n category   encoding channel \nfield, and splits each bar or column into segments based on the\nthe  Series  encoding channel. For a more detailed example, refer to the\n stacked bar chart example . 100% Stacked 100% stacked charts behave similarly to traditional stacked\ncharts, with the difference that in a 100% stacked chart each\nbar or column is normalized to a consistent value of 100%. Just\nas with traditional stacked charts, each bar or column is split\ninto segments based on the  Series \n encoding channel . Each series is\nshown as a percentage of the whole. When using a traditional stacked chart, it can be difficult to\ncompare the proportions of each series to the whole if the\ntotal values of the bars / columns greatly differ. This type of\nchart makes it easier to compare proportions within each bar or\ncolumn by showing relative percentages. You cannot customize the minimum, maximum, or logarithmic\nscale  value axis options  of 100%\nstacked charts. For a more detailed example, refer to the\n 100% stacked bar chart example . Colored Atlas Charts  creates a bar or column for each distinct value in the\n category   encoding channel \nfield, and the  Color  encoding channel changes the\ncolor of each bar / column based on the aggregated value of the\nvalue specified in the encoding channel. For a more detailed example, refer to the\n colored bar chart example . Candlestick Atlas Charts  groups numeric data by the time period specified in the\n category   encoding channel , and plots a vertical column that shows the\nhighest, lowest, opening, and closing values in your data source\nfor each time period. To learn more, see  Candlestick Charts . For a more detailed example, refer to the\n candlestick chart example . Column and bar charts display information in similar manners and, as\nsuch, have similar use cases. There are, however, situations where it\nmay be beneficial to use one over the other: A bar chart may be a better choice than a column chart when the\ncategory labels are long, as it may be difficult to quickly\npinpoint which label applies to which column. A column chart may be a better choice when comparing sequential\nvalues (such as time or geographic data) because the viewer\nwill intuitively read these charts from left to right and attain the\nfull picture of the visualization. Column and bar charts are best suited for data with limited\ncategories. When plotting data with many categories, such as\nyears across a long period of time, consider using a\n Line Chart . You can also limit the number of categories displayed in your\nchart to focus on a subset of your data.  Atlas Charts  provides the\nfollowing methods to reduce the number of bars or columns plotted\nin the visualization: Filter documents Limit Data Bin data The following customization options are specific to column and bar\ncharts. To see all available customization options, see\n Customize Charts . You can adjust the X-axis label angle to one of\nthe following options: To set this option: Option Description Vertical Labels right-aligned at a 270 degree angle. Horizonal Labels center-aligned at a 0 degree angle. Diagonal Labels right-aligned at a 315 degree angle. Click the  Customize  tab for your chart. In the  Axes  section, select a  Label Angle \nfor the  X Axis . You can dictate whether  Charts  displays text labels for your\ndata  values . Data value labels show the exact values of your data\npoints. To set this option: To customize the formatting of the number in the data label, modify\nthe  Number Formatting  settings for\nthe relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Value Labels  toggle switch to the desired\nsetting. When used with  stacked  column and bar\ncharts, data labels show the sum of all series in each column or bar. The following grouped column chart shows the most common items sold\nfrom an office supply store across several store locations. The  X Axis  category of  storeLocation  creates a group\nfor each store location in the data set, and each group is split by the\n series  column of  item.name . This ultimately displays\nthe count of each item's name sold at each store location: The following stacked column chart shows the number of awards won by\nthe top 10 highest award-winning movie directors, with each bar\nsegmented by the genres of films directed by that director. The  X Axis  category of director creates a column for each\ndirector in the data set, which we  limit  to\nonly the top 10 as sorted by the aggregated sum of  awards.wins  from\nthe  Y Axis . The  Series  encoding channel field\nof  genres  segments each column to portray the genres of the films\ndirected by that director: The following 100% stacked bar chart visualizes the monthly cost\nof renting a home in three different suburbs of Austin, Texas, USA.\nUsing a 100% stacked chart allows us to easily visualize\nthe percentage of rental homes in each  monthly_price \n bin  within each neighborhood. This provides a\nclear picture of how these neighborhoods generally compare on rental\nprices. This is the complete  filter  used for\nthis chart: The  Y Axis  category channel creates a bar for each of the\nthree suburbs in the filter. The  X Axis  channel aggregates\nto obtain a count of documents matching each respective suburb. The\n Series  encoding channel of  monthly_price  splits each\nbar into categories colored according to the legend on the right\nside of the chart: The following colored bar chart shows the average  Rotten Tomatoes  rating for countries with the 10\nhighest ratings, and colors each bar to show the average runtime for\nmovies from each country. The  Y Axis  category creates a bar for each country in the\ndata set, which we limit to only the top 10 as sorted by the aggregated\nmean of the  tomato.rating  field from the  X Axis . The\n Color  encoding channel field of  runtime  colors each bar\nto show the average runtime for movies from each country. A darker\nshade of green indicates a longer average runtime: The maximum query response size for column and bar charts is 5000\ndocuments.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{\n  $and: [\n    { monthly_price:\n      { $exists: true, $lte: 2000 }\n    },\n    { 'address.suburb':\n      { $in: [\"Georgian Acres\", \"South Congress\", \"Wooten\"] }\n    }\n  ]\n}"
                }
            ],
            "preview": "Column and bar charts plot data in either horizontal or vertical\nsegments where the length of the segment is proportional to the data\nvalue. Column and bar charts provide high-level overviews of data\ntrends by comparing values within a specific category.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/heatmap",
            "title": "Heatmap",
            "headings": [
                "Heatmap Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Adjust X-Axis Label Angle",
                "Examples",
                "Limitations"
            ],
            "paragraphs": "A heatmap represents data in a tabular format as a range of color. A\ndarker, or more intense, color represents a larger aggregated value\nfor a particular data point. Heatmaps provide the following  encoding channels : Encoding Channel Description X Axis A  category  encoding channel that creates a category\nalong the X axis for each unique value in this field. Y Axis A  category  encoding channel that creates a category\nalong the Y axis for each unique value in this field. Intensity An  aggregation  encoding channel that changes the\nshading of the colors in different chart regions to reflect the\naggregated values of this field. More intense colors in the\nvisualization reflect greater aggregated values. Heatmaps support  sorting  and\n limiting  for the\n X Axis  encoding channel, but not the\n Y Axis  channel. Heatmaps reveal patterns or trends within your data. Use heatmaps\nwhen the exact data values are not as important as depicting\nhigher-level trends and relationships between your data points. They\ncan also highlight any significant outliers, or points which strongly\ngo against the general direction of your data. A heatmap is a good\nchoice to display: A comparison of average room rental prices based on location and\nproperty type. Geographic data, such as election results across different districts\nor population density. The number of customer orders across various store locations by month\nof the year. Heatmaps work especially well with  binned \ndata. With naturally ordered datasets, heatmaps highlight areas of\nconcentration within the data. The following customization options are specific to heatmap\ncharts. To see all available customization options, see\n Customize Charts . You can adjust the X-axis label angle to one of\nthe following options: To set this option: Option Description Vertical Labels right-aligned at a 270 degree angle. Horizonal Labels center-aligned at a 0 degree angle. Diagonal Labels right-aligned at a 315 degree angle. Click the  Customize  tab for your chart. In the  Axes  section, select a  Label Angle \nfor the  X Axis . The following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film as well as ratings from critics. This\nheatmap shows the mean (average)  Metacritic  rating for different movie genres\n(Y Axis) over time (X Axis): We  bin  the years along the X Axis into\ndecades and aggregate to find the  mean   metacritic  score\nof films from each genre released in each decade. The  intensity  field of  metacritic  shades each grid\nelement based on the mean  metacritic  field of all of the\nintersecting documents based on the  X  and\n Y axes  fields. Based on the chart, we see that\nfrom  1930-1940  there are a few genres with very high\naverage Metacritic scores, and over time a more even distribution of\nfilm ratings begins to occur. If the space is white, there are no movies from that decade of that\nparticular genre in the dataset. The maximum query response size for a heatmap is 20000 documents.",
            "code": [],
            "preview": "A heatmap represents data in a tabular format as a range of color. A\ndarker, or more intense, color represents a larger aggregated value\nfor a particular data point.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/geospatial-scatter",
            "title": "Geospatial Scatter Chart",
            "headings": [
                "Geospatial Scatter Chart Encoding Channels",
                "Coordinates",
                "Color",
                "Size",
                "Tooltip Detail",
                "Customization Options",
                "Automatically Set Viewport",
                "Opacity",
                "Stroke Thickness",
                "Custom Color Palette",
                "Tutorials",
                "Prerequisites",
                "Create a Geospatial Scatter Chart Using GeoJSON Points",
                "Add a geospatial scatter chart to your dashboard.",
                "Add fields to your chart.",
                "Filter your results.",
                "Save the chart to your dashboard.",
                "Create a Geospatial Scatter Chart Using Numeric or Numeric Array Fields",
                "Add a geospatial scatter chart to your dashboard.",
                "Add fields to your chart.",
                "Save the chart to your dashboard.",
                "Limitations"
            ],
            "paragraphs": "Geospatial scatter charts distribute data from a data source across\ngeographic locations, and, optionally, color the data points based on\nthe database field of your choice and scale the size of data points.\nThe sample images in the next section demonstrate how to construct a\ngeospatial scatter chart to locate the neighborhoods in NYC with the most\nrooms available at a specified price. Geospatial scatter charts use the  Coordinates ,\n Color  and  Size  encoding channels. The  Coordinates  encoding channel defines the map\narea of geospatial charts. The image below distributes all of the instances\nof the  location  geopoint in the  Sample AirBnB Listings Dataset .\nHowever, all of the circles are green and the same size since we have\nnot yet specified fields for the  Size  and  Color \nencoding channels. See the  Geopoint  reference\npage for more information about what types of data you can use in this\nchannel. Atlas  provides  several sample data sets \nfor download. ( Optional ) The  Color  encoding channel changes the color of\nthe data points to categorize the displayed geopoints by the value of\nthe selected collection field.  Atlas Charts  lists the colors used in a key\nto the right of the chart. In the image below, the  property_type \ndistributes the property types in NYC by color. The key to the right of\nthe chart indicates green for guest suites and dark blue for apartments,\nfor example. However, all of the circles are still the same size since\nwe have not yet specified a field for the  Size  encoding\nchannel. ( Optional ) The  Size  aggregation encoding channel changes\nthe size of the data point markers, with larger sizes indicating larger\naggregated values. The image below uses the mean of the  weekly_price \ncollection field to aggregate all instances of the geopoint that you\nchose for the  Coordinates  encoding channel. The key to right\nof the chart indicates the aggregation value for the different circle\nsizes. If no fields are encoded in the  Size  encoding channel,\n Charts  displays all points with the same size. (Optional)  The  Tooltip Detail  encoding channel adds\nthe value of the selected field to each data point's tooltip. To\nview a data point tooltip, hover over that point in the chart. In addition to the  Tooltip Detail  field, the tooltip also\nshows other fields used to construct the chart. For example, the following chart encodes the  Summary \nfield as a  Tooltip Detail : The following customization options are specific to geospatial scatter\ncharts. For general customization options, see  Customize Charts . By default, geospatial charts show a map which includes all the data\npoint markers in your specified collection. You can pan and zoom to\nchange the map view, but if you close the chart and re-open it the map\nreverts to its default state. This behavior is controlled by the\n Automatically Set Viewport  option. When you toggle the  Automatically Set Viewport  switch to\n Off , the area and zoom level at which the map is saved becomes the\nnew default view. You can pan and zoom the map area in a chart on a dashboard, but\nthese changes do not affect the default map view. The  Opacity  level of a map modifies the degree to which\nthe chart's map data shows through the data point markers. Geospatial scatter charts default to  20% . You can set the  Stroke Thickness , measured in pixels, of\nthe map's data point markers. The default is  2 . The color palette specifies the range of colors that corresponds to\nrelative aggregated values in your map. Geospatial scatter charts use a\ndiscrete color picker. To enable palette customization, toggle the\n Custom Color Palette  switch in the  General \nsection. For more information, see  Color Palette Customization . See the following tutorials to build geospatial scatter charts: Create a Geospatial Scatter Chart Using GeoJSON Points Create a Geospatial Scatter Chart Using Numeric or Numeric Array Fields The tutorials on this page use the  sample_airbnb.listingsAndReviews \nand  sample_geospatial.shipwrecks  collections. Before starting,\nyou must load the sample data on your cluster. To learn how to load\nthe sample data provided by  Atlas  into your\ncluster, see  Load Sample Data . This tutorial demonstrates how to create a geospatial scatter chart\nwith fields that are  GeoJSON Points .\nThe final chart displays a scatter chart of AirBnB listings in New York. Charts  automatically determines if field types in your collection\nare  GeoJSON Points  by displaying\nthe   icon. You can map these fields directly\nto a geopoint channel type in the Chart Builder. For more information,\nsee  Geopoint Channel Type . For more details, see  Create a Chart . From the  Dashboards  page, select the dashboard\nwhere you want to add a new chart. For instructions on setting\nup a dashboard, see  Dashboards . Click  Add Chart . In the  Select Data Source  modal, click the\n Project  tab. In the cluster where you loaded the\nsample data, select the  listingsAndReviews  collection\nin the  sample_airbnb  database. In the  Chart Type  dropdown, click  Geo Scatter . Select the  Encode  tab. Navigate to the  Fields  pane on the left side of\nthe Chart Builder. This section lists all available fields\nin the  listingsAndReviews  collection. Drag the  location  geopoint field nested in the  address \nfield to the  Coordinates  encoding channel. Drag the  property_type  field to the  Color \nencoding channel. Drag the  price  field to the  Size  encoding\nchannel. Then, in the  Aggregate  dropdown that\nappears, set the aggregation method to  mean . Charts  displays a scatter chart of AirBnB\nlistings across the world. The color of each data point\ncorresponds to the property type, and the size of each\npoint corresponds to the mean price. To customize colors, click the  Customize  tab.\nUnder  General , enable the\n Custom Color Palette  and set your preferred\ncolors. For more information, see\n Color Palette Customization . Select the  Filter  tab. Drag the  market  field nested in the  address  field\nto the  Filter  encoding channel. To filter your results to include only AirBnBs in New York,\nclick  Deselect All  and then select  New York . Optionally,  Enter a title \nor  Enter a description  for your chart. Click  Save and Close \nat the upper right of the chart builder view. This tutorial demonstrates how to create a geospatial scatter chart\nwith numeric or numeric array fields. The final chart displays a\nscatter chart of shipwrecks across the world. For more details, see  Create a Chart . From the  Dashboards  page, select the dashboard\nwhere you want to add a new chart. For instructions on setting\nup a dashboard, see  Dashboards . Click  Add Chart . In the  Select Data Source  modal, click the\n Project  tab. In the cluster where you loaded the\nsample data, select the  shipwrecks  collection\nin the  sample_geospatial  database. In the  Chart Type  dropdown, click  Geo Scatter . Select the  Encode  tab. Navigate to the  Fields  pane on the left side of\nthe Chart Builder. This section lists all available fields\nin the  shipwrecks  collection. Drag the  coordinates  numeric array field to the\n Coordinates  encoding channel. Alternatively, you can specify the latitude and longitude\ncoordinates separately. First, drag the  latdec  numeric field\nto the  Coordinates  encoding channel. Once the\n Longitude  channel appears, drag the  londec \nnumeric field to the corresponding channel. Drag the  feature_type  field to the  Color  encoding channel. Drag the  depth  field to the  Size  encoding channel.\nThen, in the  Aggregate  dropdown that appears,\nset the aggregation method to  mean . Charts  displays a scatter chart of shipwrecks\nacross the world. The color of each data point corresponds to\nthe shipwreck type, and the size of each point corresponds\nto the mean shipwreck depth. To customize colors, click the  Customize  tab.\nUnder  General , enable the\n Custom Color Palette  and set your preferred\ncolors. For more information, see\n Color Palette Customization . Optionally,  Enter a title \nor  Enter a description  for your chart. Click  Save and Close \nat the upper right of the chart builder view. The maximum query response size for a geospatial scatter chart is 1000 documents.",
            "code": [],
            "preview": "Geospatial scatter charts distribute data from a data source across\ngeographic locations, and, optionally, color the data points based on\nthe database field of your choice and scale the size of data points.\nThe sample images in the next section demonstrate how to construct a\ngeospatial scatter chart to locate the neighborhoods in NYC with the most\nrooms available at a specified price.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/number-chart",
            "title": "Number Chart",
            "headings": [
                "Number Chart Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Conditional Formatting",
                "Examples",
                "Total Value of Store Sales",
                "Maximum Calories Burned During Workouts",
                "Limitations"
            ],
            "paragraphs": "Number charts display a single aggregated value from a data field. Number charts only require a single encoding channel, called\n Number . This is an  aggregation  encoding channel\nwhich aggregates based on the field and aggregation method chosen, and\ndisplays the result in the chart. Number charts are useful for highlighting grand totals or values which\nrepresent the overall state of your data. For example, a store may use\na number chart to represent the total dollar value of all sales.\nAdditionally, a hotel chain may use a number chart to represent the\naverage number of vacant rooms across all hotels, or apply a\n filter  to see the total number of\nvacant rooms in a select region. You can style the number that your chart displays with conditional\nformatting rules. These rules are applied dynamically: if your\nnumber changes to match or stop matching a condition you define, its\nstyling updates. To learn how to use conditional formatting rules, see the\n Conditional Formatting \ncustomization option. The following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the purchaser. This\nnumber chart shows the total sum of all sales stored in the collection: The  Number  field of  items.price  tells  Atlas Charts  to\naggregate the field based on the selected method of\n $sum . Since\n items  is an array, we have to select an array reduction option\nbefore we can aggregate. In this example, we choose\n Unwind Array , which creates a new document for each\nelement in the  items  array.  Atlas Charts  sums the  price  of each\nnewly created document and displays the value in the visualization. The following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation on the type of activity performed and the amount of\ncalories burned during the workout. This number chart shows the\nmaximum calories burned across all  swimming  and  surfing \nworkouts: The  Number  field of  Calories Burned (kCal)  tells\n Atlas Charts  to aggregate the field based on the selected method of\n $max . We have applied a  filter  to this chart\nto restrict the documents  Atlas Charts  examines to only those with an\n Activity Type  of  Surf ,  Swim , or  Indoor Swim .  Atlas Charts \ndetermines the maximum value of the  Calories Burned (kCal)  field\nacross all documents which match this criteria and displays the value\nin the visualization. The maximum query response size for a number chart is 5000 documents.",
            "code": [],
            "preview": "Number charts display a single aggregated value from a data field.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table/sort-resize-columns",
            "title": "Sort and Resize Table Columns",
            "headings": [
                "Behavior",
                "Procedure",
                "Sort Columns",
                "Resize Columns"
            ],
            "paragraphs": "Users with the viewer and author  roles \non tables can sort and resize table columns. You\ncan sort and resize columns either in the\n dashboard  or the  Chart Builder . When a viewer or author sorts or resizes columns from the\n dashboard  view, the changes do not persist as\npart of the chart definition. In this case, the chart returns to its\noriginal state once the chart or corresponding dashboard is\nrefreshed. To save the changes as part of the chart definition, an author must\nmake the changes in the Chart Builder. All  Charts  users will\nsee the new column sorting and sizing. To sort a table column, click on its header. With each click,  Atlas Charts  cycles between sorting the column in\nascending order, descending order, and the default chart sorting order. To sort by multiple columns, Shift + Click on the additional columns\nby which you wish to sort.  Charts  applies the sort order in\nthe same order you select additional columns.  Charts  displays\nnumbers in the column headers indicating the order in which the\nsorting is applied. To resize a column, click the column divider and drag until the\ncolumn reaches the desired width. To return a column to its default width, double-click on the column\ndivider.",
            "code": [],
            "preview": "Users with the viewer and author roles\non tables can sort and resize table columns. You\ncan sort and resize columns either in the\ndashboard or the Chart Builder.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/scatter-chart",
            "title": "Scatter Chart",
            "headings": [
                "Scatter Chart Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Opacity",
                "Stroke Thickness",
                "Mark Size",
                "Smart Date Labels",
                "Add a Trendline",
                "Examples",
                "AirBnB Rentals",
                "Movies with the Most Award Nominations",
                "Limitations"
            ],
            "paragraphs": "Scatter charts plot data with individual data points placed along the\nX and Y axes. Optionally, the data point representations may use shapes\nand colors to display additional data dimensions. Scatter charts provide the following  encoding channels : Encoding Channel Description X / Y Axis The X and Y axis encoding channels accept numerical and date\nfields and display the range of values from the field along the\ncorresponding axis. Size (Optional)  An  aggregation  encoding channel that\nchanges the size of the data point markers, with larger sizes\nindicating larger aggregated values. Customize Mark Size Color (Optional)  A  category  encoding channel that changes\nthe color of the data point markers based on the value of the\nselected field.  Atlas Charts  lists the colors used in a key to the\nright of the chart. Shape (Optional)  A  category  encoding channel that changes\nthe shape of the data point markers based on the value of the\nselected field.  Atlas Charts  lists the shapes used in a key to the\nright of the chart. Tooltip Detail (Optional)  A  category  encoding channel that adds\nthe value of the selected field to each data point's tooltip. To\nview a data point tooltip, hover over that point in the chart. In addition to the  Tooltip Detail  field, the tooltip\nalso shows other fields used to construct the chart. Scatter charts are useful for representing numerical data and\nshowing clearly how data points cluster together in certain areas.\nThe  Size ,  Color , and  Shape \nencoding channels allow you to reveal\nadditional trends for data dimensions with low cardinality. Scatter charts show an individual marker for each data point, so\nthey work better with smaller result sets. Outliers and extreme data\npoints are easy to identify. Consider using a scatter chart to display: A chart with many different colors or shapes may result in a\ncluttered visualization which is difficult to read. You can limit\nthe number of categories in your chart by  binning  or  limiting  your data. Temperature data for selected cities Volume of sales data for selected retail outlets Population density figures across several countries The following customization options are specific to scatter charts. To\nsee all available customization options, see  Customize Charts . The  Opacity  customization option, measured as a\npercentage, modifies the transparency of the data point fill. This\nsetting defaults to  0% , which renders the data point fill as\ncompletely transparent. The  Stroke Thickness  customization option, measured in\npixels, modifies the thickness of data point outlines. This setting\ndefaults to  2 . Adjust the size of the scatter marks. This option behaves differently\nbased on whether you have a field mapped to the  Size \nencoding channel. If you do not have a field mapped to  Size , the\n Mark Size  setting changes the size of the marks linearly\nbased on the chosen value. If you have a field mapped to  Size , the\n Mark Size  setting changes the size of the largest mark,\nand also controls the difference between the smallest and largest\nmarks. Smart labels for dates are axis markers grouped by units of time to reduce\nrepetition of information. They are generated automatically based on the range of\nthe chart when a  date  type field is encoded on an  X  or  Y  value axis. Smart labels are enabled by default when dates fields are encoded on value\naxes on supported chart types. To toggle smart labels on and off: Click the  Customize  tab above the  encoding channels  in the  Chart Builder . Expand the  Fields  section. Select the desired field from the dropdown menu. If the  Use Smart Labels on Axis  toggle swich is set\nto  Off , toggle it to  On . When smart labels are enabled, date and time formatting options remain\navailable. Any formatting options you apply are visible in the chart's\ntooltips. You can add a trendline to a continuous line/area or scatter chart. To\nenable the trendline feature: Trendlines span the entire length of a chart's X axis, including any\nadditional space added as a result of a  min/max axis customization . The following trendline types are available: The trendline option is not available if: Open the  Customize  pane for your chart. Scroll down to the  Chart Elements  section. Toggle the  Trendline  switch. Select a series from the  Series  dropdown menu. Select a trendline type from the  Type  dropdown menu. Linear (default) Logarithmic Quadratic Cubic Exponential Power A field is mapped to the  series  channel. A  count by value aggregation  is used. The following scatter chart uses a database of information about\nAirBnB rental properties in Sydney, Australia. The X axis shows the\nreview ratings given to individual properties, with the price per\nnight displayed along the Y axis. The  query filter  restricts the result set to properties with\nat least 100 reviews. The chart shows that lower-priced properties have a wider range of\nreview scores, while higher-priced properties have a smaller score\nrange with generally higher scores. The following more complex scatter chart uses a database with movie\ndata compiled from IMDb and Rotten Tomatoes. The chart shows the\nTomatoMeter rating (ranging from 0 to 100) of movies with at least\none award nomination. Each data point marker represents one movie.\nThe X axis shows the movie's TomatoMeter rating and the Y axis shows\nthe number of award nominations the movie received. The  query filter  restricts the result\nset to exclude marginal data points. The chart uses the  Color  and  Shape  encoding\nchannels to shed further light on the types of movies which receive\nthe most award nominations. The color of each data point shows the\nMPAA (Motion Picture Association of America) rating the movie received.\nThe chart uses the Shape encoding channel to indicate the year in\nwhich the movie was released, and  bins  the\ndata to place each movie into a time range, with each bin covering\n25 years. Without the bins, there would be a different shape for every\nyear, which would make the chart too noisy to read. The maximum query response size for a scatter chart is 50000 documents.",
            "code": [],
            "preview": "Scatter charts plot data with individual data points placed along the\nX and Y axes. Optionally, the data point representations may use shapes\nand colors to display additional data dimensions.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/line-area-chart",
            "title": "Line and Area Charts",
            "headings": [
                "Discrete Line and Area Charts",
                "Discrete Chart Encoding Channels",
                "100% Stacked Area Charts",
                "Continuous Line and Area Charts",
                "Continuous Chart Encoding Channels",
                "Smart Date Labels for Continuous Line and Area Charts",
                "Discrete Area Versus Continuous Area Charts Display",
                "Use Cases",
                "Customization Options",
                "Adjust X-Axis Label Angle",
                "Show or Hide Data Markers",
                "Set Distinct Dash Style per Series on Line Charts",
                "Show or Hide Data Value Labels",
                "Add a Trendline",
                "Smooth Lines",
                "Examples",
                "Discrete Area Chart with Multiple Series",
                "100% Stacked Area Chart",
                "Discrete Line Chart with Multiple Aggregated Fields",
                "Continuous Line Chart Using Time Series Data",
                "Limitations"
            ],
            "paragraphs": "Line charts and area charts display information as a series of data\npoints connected by straight line segments. In area charts, the\nspace beneath the line segments is filled in with color, whereas in\nline charts only the line segments are rendered with no additional\ncoloring or shading. These charts facilitate visualizing data over a\nperiod of time (using  time series \ndata) and identifying trends and patterns across the entire data range.\nLine and area charts support visualizing both  discrete \nand  continuous  data. Discrete line and area charts visualize categorical or  binned  data with some form of logical ordering, such as\ntime.  Atlas Charts  always  aggregates \nvalues in discrete charts such that any number of documents can\nsupply values to a given plotted point. A discrete chart would be\nuseful to visualize a store's average annual sales over time. Discrete line and area charts provide the following\n encoding channels : Encoding Channel Description X Axis The  category  encoding channel.  Atlas Charts  renders a\ndata point for each unique value from the field assigned to this\nencoding channel. Y Axis The  aggregation  encoding channel. This channel\ndictates which field to aggregate on and the type of aggregation\nto perform. This ultimately dictates the position of each\ncategory's data point on the chart. Categories are defined by\nthe  X Axis  encoding channel. You can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\n Multiple Field Mappings . Series ( Optional ) Adds an additional  category  encoding\nchannel to the visualization. When utilized,  Atlas Charts  adds\nan additional line to the visualization for each unique\nvalue in this field. Use this field to map additional\ndiscrete categorical fields in your data, rather than multiple\naggregated fields. This option is only available when there is a  single  field\nmapped to the  Y Axis aggregation \n encoding channel . 100% stacked area charts are a subtype of discrete area charts. In 100%\nstacked area charts, the total area shown is normalized to 100% and\nsplit into segments based on the category in the  Series \n encoding channel . Each series is shown as a percentage of the whole. When using a traditional stacked area chart, it can be difficult to\ncompare the proportions of each series to the whole if the total\nvalue of the chart segments greatly differ. 100% stacked charts\nmake it easier to compare proportions of each series to the whole by\nshowing relative percentages. For a detailed example, see the  100% Stacked Area Chart Example . In continuous line and area charts, every data point comes from a\ndistinct document in the  data source .\nContinuous charts do not support aggregation or binning. A continuous\nchart would be useful to visualize stock closing prices over time,\nassuming each closing price comes from a distinct document in the\ndataset. Continuous line and area charts provide the following\n encoding channels : Encoding Channel Description X Axis Atlas Charts  renders a data point for the values in this field\nfrom each document in the collection. Y Axis For each document in the data source,  Atlas Charts  compares the\nvalue of this field against the  X Axis \nfield and plots the resulting value. You can add multiple  value  encoding channels to\nthe chart's  Y Axis  to create multi-series charts.\nFor more information, see  Multiple Field Mappings . Series ( Optional ) Adds an additional  category  encoding\nchannel to the visualization. When utilized, this field adds\nan additional line to the visualization for each unique\nvalue in this field. This option is only available when there is a  single  field\nmapped to the  Y Axis aggregation \n encoding channel . Smart labels for dates are axis markers grouped by units of time to reduce\nrepetition of information. They are generated automatically based on the range of\nthe chart when a  date  type field is encoded on an  X  or  Y  value axis. Smart labels are enabled by default when dates fields are encoded on value\naxes on supported chart types. To toggle smart labels on and off: Click the  Customize  tab above the  encoding channels  in the  Chart Builder . Expand the  Fields  section. Select the desired field from the dropdown menu. If the  Use Smart Labels on Axis  toggle swich is set\nto  Off , toggle it to  On . When smart labels are enabled, date and time formatting options remain\navailable. Any formatting options you apply are visible in the chart's\ntooltips. Discrete area charts are  stacked , meaning  Atlas Charts  plots each\nseries above or below the others in the visualization. The chart shows\nthe total aggregated value of all of the series, so you can easily see\nthe proportion of each series in relation to the total. Continuous area charts are  overlaid , meaning  Atlas Charts  plots each\nseries directly on top of one another in the visualization. Line charts and area charts are closely related and are both useful\nfor depicting time series data and data with logical ordering. However,\nthere are scenarios when it may be beneficial to use one chart type\nover the other. Consider using a line chart when creating  multi-series charts  where each series represents an isolated\nfield.  Atlas Charts  stacks multi-series area charts, as shown in\nthis  example , which results\nin a chart where the stacked totals appear to share a relationship\ncontributing to a larger summed value. This may not be desireable\ndepending on the specific relationships within the data fields. The line chart displays the data from each series in-line with one\nanother without stacking, which may provide a more accurate\nrepresentation of the data as shown in the\n discrete line chart . Area charts are useful for showing an overall trend while also\nhighlighting relative performances of individual components of\nthat sum. Consider using a discrete area chart when illustrating a\npart-to-whole relationship, such as tracking data metrics over\ntime. An example of this might be showing  revenue  compared with\n expenses  over the course of a year. A continuous area chart would work in this scenario if you were\nless concerned with the summation of the two fields and instead\nwanted a more direct comparison of the fields against one another. When your data does not have a logical order, consider instead using\na  bar or column chart  to visualize\nyour data. When the order of the data is not important, a bar or\ncolumn chart can quickly highlight the highest and lowest values in\nthe visualization, which may be more beneficial than suggesting the\nviewer read the chart from left to right as in a line or area chart. The following customization options are specific to line and area\ncharts. To see all available customization options, see\n Customize Charts . You can adjust the X-axis label angles in\n Discrete Area Chart with Multiple Series  and\n Discrete Line Chart with Multiple Aggregated Fields  charts. You can adjust the X-axis label angle to one of\nthe following options: To set this option: Option Description Vertical Labels right-aligned at a 270 degree angle. Horizonal Labels center-aligned at a 0 degree angle. Diagonal Labels right-aligned at a 315 degree angle. Click the  Customize  tab for your chart. In the  Axes  section, select a  Label Angle \nfor the  X Axis . On line and area charts, you can dictate whether  Charts  displays\nvisible data markers that represent individual data points. Enabling\nthis option makes it easier to see exactly where your data points lie\nalong a line. Hovering over these markers shows the exact data values in\na tooltip, making it easier to view precise measurements. To set this option: To customize the formatting of the number in the data marker tooltip,\nmodify the  Number Formatting \nsettings for the relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Markers  toggle switch to the desired setting. On discrete and continuous line charts, you can opt to display each\nseries in the chart with a distinct dash style. This option can help\nmake your chart more accessible by distinguishing between\nseries beyond color. To set this option: Open the  Customize  pane for your chart. In the  General  section, set the\n Dash Styles per Series  toggle switch to the desired\nsetting. You can dictate whether  Charts  displays text labels for your\ndata  values . Data value labels show the exact values of your data\npoints. To set this option: To customize the formatting of the number in the data label, modify\nthe  Number Formatting  settings for\nthe relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Value Labels  toggle switch to the desired\nsetting. When used with  stacked  column and bar\ncharts, data labels show the sum of all series in each column or bar. You can add a trendline to a continuous line/area or scatter chart. To\nenable the trendline feature: Trendlines span the entire length of a chart's X axis, including any\nadditional space added as a result of a  min/max axis customization . The following trendline types are available: The trendline option is not available if: Open the  Customize  pane for your chart. Scroll down to the  Chart Elements  section. Toggle the  Trendline  switch. Select a series from the  Series  dropdown menu. Select a trendline type from the  Type  dropdown menu. Linear (default) Logarithmic Quadratic Cubic Exponential Power A field is mapped to the  series  channel. A  count by value aggregation  is used. You can change the way lines are drawn on your chart. To smooth lines: The following line smoothing options are available: Open the  Customize  pane for your chart. In the  General  section, set\n Line Smoothing  to the desired option. Option Description None (Default) Draws straight lines between data points. Smooth Draws curved lines between data points. Step Before Lines extend horizontally to data points. This is useful\nfor visualizing data that only changes in intervals and is\ncollected at the end of a period, such as\ndaily average temperature. Step After Lines extend horizontally from data points. This is useful\nfor visualizing data that only changes in intervals, such as\nstock prices. The following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This discrete area chart shows the\ndistribution of customer ages throughout sales in the collection: The  X Axis  field of  customer.age  plots the ages of the\ncustomers along the X axis. We direct to  Charts  to  bin  the ages into groups of 5. The  Y Axis  field of  customer.age  and\n aggregate  option of  count  counts the\noccurrences of each age in the corresponding bin. Lastly, we apply the  item.name  field to the\n Series  encoding channel to split the age area into\nsegments displaying the count of each age group purchasing each\nstore item. For more information on multi-series charts, see\n Multi-Series Charts . The following chart visualizes data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This 100% stacked area chart shows the\nrelative percentages of items sold on each date of the month: The  X Axis  field of  saleDate  plots each sale\naccording to its date. The  Binning  and\n Periodic  settings are enabled, so\n Charts  groups the dates into bins based on each date of the\nmonth. The  Y Axis  field of  _id  runs a  count  aggregation to calculate the\ntotal number of sales that happened each day of the month. Since this\nis a 100% stacked chart, these values are all normalized to 100%, and\nare segmented by the  Series   encoding channel . The  Series  field of  item.name  segments the total chart\narea based on the name of the item sold. Since there may\nbe multiple items in a single document, we  Unwind  this\narray to add each item to the visualization. This provides a clear\npicture of the relative percentages of items sold based on the\ndate of the month. For more information on binning dates and the periodic setting,\nrefer to the  Bin Data  page. The following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film and ratings from various rating\naggregators. This discrete line chart compares average\n Rotten Tomatoes \n tomato.meter  ratings and average  Metacritic  ratings of films over time. Both ratings\nare on a scale from  0  -  100 : The  X Axis  field of  year  plots each film according to\nits release year. We direct to  Charts  to  bin  the years into groups of 5. The  Y Axis  fields of  tomato.meter  and  metacritic \nalong with the  aggregate  option of  mean \ncalculate and plot the average ratings of films from each\ngroup of 5 years. For more information on creating charts with multiple aggregated\nfields, see  Multiple Field Mappings . The following chart visualizes data pertaining to the usage of a\nsolar-powered house battery. This continuous line graph shows the\nbattery level over time: The  X Axis  field of  timestamp  plots each timestamp in\nthe data source. The  Y Axis  fields of  energy_left  and\n total_pack_energy  each plot a series in the chart; the amount of\nenergy the battery has left and the total amount of energy the battery\nholds. This comparison shows how close the battery is to a full charge. A continuous chart works better than a discrete chart in this case\nbecause our  X Axis  field,  timestamp  is not a\ndiscrete, categorical variable, and is instead a continuous value\nalong a range.  We want to plot each  timestamp  as an individual\npoint, rather than show an aggregated value from many data values. The maximum document limit for discrete line and area charts is 5000\ndocuments. The maximum document limit for continuous line and area charts is\n50000 documents.",
            "code": [],
            "preview": "Line charts and area charts display information as a series of data\npoints connected by straight line segments. In area charts, the\nspace beneath the line segments is filled in with color, whereas in\nline charts only the line segments are rendered with no additional\ncoloring or shading. These charts facilitate visualizing data over a\nperiod of time (using time series\ndata) and identifying trends and patterns across the entire data range.\nLine and area charts support visualizing both discrete\nand continuous data.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table/reorder-columns",
            "title": "Reorder Table Columns",
            "headings": [
                "Behavior",
                "Pinned Columns",
                "Procedure",
                "Considerations"
            ],
            "paragraphs": "Users with the author and owner  roles \non tables can reorder table columns in the  Chart\nBuilder . When you reorder table columns and save the\nchart,  Atlas Charts  saves the specified order as part of the chart\ndefinition. All  Charts  users will see the new column order. If you reorder a  Group  column in a table that has\n pinned columns , the following behaviors apply: If the column to the right of the destination is pinned,\nthe reordered column is pinned. If the column to the left of the destination is unpinned,\nthe reordered column is unpinned. To reorder table columns, click and drag column headers to the\ndesired order. Table  authors and owners  can also\nreorder columns by modifying the order of the respective column\n encoding channels .  Atlas Charts  renders data\ntable columns in the same order you specify the column encoding\nchannels. To modify the order of the encoding channels, drag and\ndrop one field on top of another to swap their order. You can only reorder columns within their respective table sections,\nbeing  Groups  or  Values . You cannot reorder  Dynamic Columns .",
            "code": [],
            "preview": "Users with the author and owner roles\non tables can reorder table columns in the Chart\nBuilder.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table/resize-table-text",
            "title": "Resize Table Text",
            "headings": [
                "Procedure"
            ],
            "paragraphs": "You can resize  Table  chart text.\nResizing table text changes the pixel size of the following components: Header text, including icons Body text and the vertical height of rows Footer text To resize table text: For a complete list of Chart Customization options, see  Customize\nCharts . Navigate to the  Customize  tab in the\n Chart Builder . Click the  General  drop-down and toggle\n Text size  to    On . Set the  Text Size  to the desired number of pixels.\nYou can adjust text size to be between 8 and 24 pixels.\nThe default is 14 pixels.",
            "code": [],
            "preview": "You can resize Table chart text.\nResizing table text changes the pixel size of the following components:",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table/limit-rows",
            "title": "Limit the Rows a Table Displays",
            "headings": [
                "Behavior",
                "Procedure",
                "Considerations"
            ],
            "paragraphs": "Users with the  Author   dashboard role  can\nlimit the number of rows that a table displays, thereby limiting\nthe data accessible to viewers. Limiting is off by default. When a row limit is applied to a table in the\n Chart Builder , it is applied to the chart\ndefinition. The visible subset of data becomes the entire data set\navailable to viewers. Dashboard viewers can temporarily change the\n sort order , but only the\ndata that initially appears on the chart is re-sorted. A movie data source provides a ranked list of 100 movies. A chart\n Author  chooses to limit the results to 10 and sort in descending\nrank order to show the top 10 movies. A  Viewer  then sorts the chart into ascending order. The same 10\nmovies are displayed in ascending order. The user does not have\naccess to the 90 movies that the chart  Author  excluded. To limit the number of rows that a chart displays: Navigate to the  Encode  tab of the\n Chart Builder  and toggle\n Limit Results  to enable it. Specify the number of rows to show between  1  and  9999 .\nThe default is  10 . The data displayed on a table with a row limit is specific to the\n sort order  you define in the\n Chart Builder . If you change your sorting, you\nchange the data presented in your table.",
            "code": [],
            "preview": "Users with the Author dashboard role can\nlimit the number of rows that a table displays, thereby limiting\nthe data accessible to viewers.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/data-table/toggle-row-column-totals",
            "title": "Toggle Table Row and Column Totals",
            "headings": [
                "Procedure"
            ],
            "paragraphs": "By default, tables include a Column Totals row, which consists of\na row of values with sum totals for each column. Optionally, you can\nenable a Row Totals column, which consists of a column of\nvalues containing sum totals for each row. The following image shows a detail from a table with row and\ncolumn totals enabled and added text indicating which is which: To toggle the totals on and off: For a complete list of Chart Customization options, see  Customize\nCharts . Navigate to the  Customization  tab in the\n Chart Builder . In the  General  section, set the\n Column Totals  and  Row Totals  toggles\nto the desired settings.",
            "code": [],
            "preview": "By default, tables include a Column Totals row, which consists of\na row of values with sum totals for each column. Optionally, you can\nenable a Row Totals column, which consists of a column of\nvalues containing sum totals for each row.",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        },
        {
            "slug": "chart-type-reference/donut-chart",
            "title": "Donut Chart",
            "headings": [
                "Donut Chart Encoding Channels",
                "Use Cases",
                "Customization Options",
                "Show or Hide Category Labels",
                "Show or Hide Data Value Labels",
                "Show Value or Percentage Labels",
                "Examples",
                "Donut Chart Using Count",
                "Donut Chart Using Sum",
                "Donut Chart Using Multiple Arc Fields",
                "Limitations"
            ],
            "paragraphs": "Donut Charts  display data in a series of\nsegments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the sum of all data values, and each segment\nindicates the proportion of each category in the data to the total. Donut charts provide the following  encoding channels : Encoding Channel Description Label The  category  encoding channel.  Atlas Charts  creates a\nsegment in the donut for each unique value from this field. The  Label  encoding channel supports\n binning  for numeric and date fields.\nThe channel supports  sorting  and\n limiting  for string fields. Arc The  aggregation  encoding channel.  Atlas Charts \n aggregates  this field\nbased on the aggregation method selected. This field dictates\nthe size of each circle segment. If you don't add a field to the  Label  channel, you\ncan add multiple fields to the  Arc  channel.  Atlas Charts \ncreates one segment for each encoded field. Donut charts are ideal for giving readers a quick overview of the\nproportional distribution of a dataset. Use donut charts when the\ngeneral trend of data is more important than precise data values.\nDonut charts are especially useful when there is a low number of\ncategories to visualize, because it is easier to compare fewer\nsegments of the circle to see which values make up the greatest\nparts of the whole. Consider using donut charts to display: The proportion of store customers who place orders in-store versus\nonline The proportion of various resources exported by a country The choices thrown during several Rock, Paper, Scissors games Although you can  limit  your data to\nreduce the number of categories in the visualization, this may not\nbe the best choice for donut charts. The purpose of donut charts is\nto show each value as a proportion of a total, so excluding\ncategories may result in a misleading visualization that reflects\ninaccurate proportions. If you do  limit  your data, donut charts\nenable the  Show \"All Others\"  option by default. This\noption creates an \"All others\" category that represents the sum of\nthe omitted values and ensures that chart values are displayed as a\nproportion of the total. When looking to compare individual data values, rather than show\nvalues as a proportion to a whole, consider using a\n column or bar chart . The following customization options are specific to donut\ncharts. To see all available customization options, see\n Customize Charts . You can dictate whether  Charts  displays text labels for\n categories  in your donut charts. To set this option: Open the  Customize  pane for your chart. In the  General  section, set the\n Data Category Labels  toggle switch to the desired\nsetting. When you enable one or both of the\n Data Value Labels  or  Data Category Labels \nsettings on a  Donut Chart  with many\ncategories,  Atlas Charts  only renders labels for the highest value\ncategories. You can dictate whether  Charts  displays text labels for your\ndata  values . Data value labels show the exact values of your data\npoints. To set this option: To customize the formatting of the number in the data label, modify\nthe  Number Formatting  settings for\nthe relevant field. Open the  Customize  pane for your chart. In the  General  section, set the\n Data Value Labels  toggle switch to the desired\nsetting. When used with  stacked  column and bar\ncharts, data labels show the sum of all series in each column or bar. You can dictate whether a  Donut Chart  displays\ndata values as raw values or percentages. By default, data value labels\nshow the raw values of your data points. For percentage values in\n Donut Charts , the whole value is the total\nvalue of the entire chart. Percentage labels are always rounded to one\ndecimal place, and do not adhere to  Number Formatting  settings. To set this option: Open the  Customize  pane for your chart. In the  General  section, set the\n Data Value Labels  toggle switch to on if off. Select  Show Value  or  Show Percentage  from\nthe drop-down. The following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the customer\nconducting the purchase. This donut chart shows the proportional\ncounts of the three different purchase methods the store provides: The  Label  field of  purchaseMethod  tells  Atlas Charts  to\ncreate a circle segment for each unique value in the  purchaseMethod \nfield.  Atlas Charts  proportions each segment according to the aggregated\nvalue signified in the  Arc  encoding channel. In this case,\nwe aggregate to find the total  count  of documents with the\nsame  purchaseMethod  value. We see based on the visualization that the most common purchase method\nis  In store , followed by  Online . In this example we are counting entire documents, so it does not\nmatter what field we select for the  Arc  field. No\nmatter what field we apply, the visualization will still be\nthe same. The following chart visualizes personal workout data. Each document in\nthe collection represents a single workout activity, which includes\ninformation on the type of activity performed and the amount of time\nspent exercising. This donut chart shows the proportional time spent\nperforming each exercise activity: The  Label  field of  Activity Type  tells  Atlas Charts  to\ncreate a circle segment for each unique value in the  Activity Type \nfield.  Atlas Charts  proportions each segment according to the aggregated\nvalue signified in the  Arc  encoding channel. In this case,\nwe aggregate to find the total  sum  of workout times for\ndocuments with the same  Activity Type  value. We see based on the visualization that the activity with the greatest\ntotal workout time is  Surf , followed by  Bike Ride . The following chart visualizes rental property data. Each\ndocument in the collection represents a single rental property, which\nincludes information on prices. This donut chart shows the average price\nof all properties in the collection for a daily, weekly, and monthly\nrental: Because there is no  Label  field,  Atlas Charts  creates a circle\nsegment for each  Arc  field.  Atlas Charts  proportions each\nsegment according to the aggregated value signified in the\n Arc  encoding channel. In this case, we aggregate the\n mean  price for all properties rented by the day, week, and\nmonth. The maximum query response size for a donut chart is 5000 documents.",
            "code": [],
            "preview": "Donut charts provide the following encoding channels:",
            "tags": null,
            "facets": {
                "genre": [
                    "tutorial"
                ],
                "target_product": [
                    "atlas"
                ],
                "target_product>atlas>sub_product": [
                    "charts"
                ]
            }
        }
    ]
}